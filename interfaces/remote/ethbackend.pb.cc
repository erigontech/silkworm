// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/ethbackend.proto

#include "remote/ethbackend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H160_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeInfoReply_types_2ftypes_2eproto;
namespace remote {
class EtherbaseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EtherbaseRequest> _instance;
} _EtherbaseRequest_default_instance_;
class EtherbaseReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EtherbaseReply> _instance;
} _EtherbaseReply_default_instance_;
class NetVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetVersionRequest> _instance;
} _NetVersionRequest_default_instance_;
class NetVersionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetVersionReply> _instance;
} _NetVersionReply_default_instance_;
class NetPeerCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetPeerCountRequest> _instance;
} _NetPeerCountRequest_default_instance_;
class NetPeerCountReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetPeerCountReply> _instance;
} _NetPeerCountReply_default_instance_;
class ProtocolVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolVersionRequest> _instance;
} _ProtocolVersionRequest_default_instance_;
class ProtocolVersionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolVersionReply> _instance;
} _ProtocolVersionReply_default_instance_;
class ClientVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientVersionRequest> _instance;
} _ClientVersionRequest_default_instance_;
class ClientVersionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientVersionReply> _instance;
} _ClientVersionReply_default_instance_;
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
class SubscribeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeReply> _instance;
} _SubscribeReply_default_instance_;
class NodesInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodesInfoRequest> _instance;
} _NodesInfoRequest_default_instance_;
class NodesInfoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodesInfoReply> _instance;
} _NodesInfoReply_default_instance_;
}  // namespace remote
static void InitDefaultsscc_info_ClientVersionReply_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_ClientVersionReply_default_instance_;
    new (ptr) ::remote::ClientVersionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientVersionReply_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientVersionReply_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_ClientVersionRequest_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_ClientVersionRequest_default_instance_;
    new (ptr) ::remote::ClientVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientVersionRequest_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientVersionRequest_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_EtherbaseReply_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_EtherbaseReply_default_instance_;
    new (ptr) ::remote::EtherbaseReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EtherbaseReply_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EtherbaseReply_remote_2fethbackend_2eproto}, {
      &scc_info_H160_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_EtherbaseRequest_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_EtherbaseRequest_default_instance_;
    new (ptr) ::remote::EtherbaseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EtherbaseRequest_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EtherbaseRequest_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_NetPeerCountReply_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_NetPeerCountReply_default_instance_;
    new (ptr) ::remote::NetPeerCountReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetPeerCountReply_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetPeerCountReply_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_NetPeerCountRequest_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_NetPeerCountRequest_default_instance_;
    new (ptr) ::remote::NetPeerCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetPeerCountRequest_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetPeerCountRequest_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_NetVersionReply_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_NetVersionReply_default_instance_;
    new (ptr) ::remote::NetVersionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetVersionReply_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetVersionReply_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_NetVersionRequest_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_NetVersionRequest_default_instance_;
    new (ptr) ::remote::NetVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetVersionRequest_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetVersionRequest_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_NodesInfoReply_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_NodesInfoReply_default_instance_;
    new (ptr) ::remote::NodesInfoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodesInfoReply_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodesInfoReply_remote_2fethbackend_2eproto}, {
      &scc_info_NodeInfoReply_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_NodesInfoRequest_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_NodesInfoRequest_default_instance_;
    new (ptr) ::remote::NodesInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodesInfoRequest_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodesInfoRequest_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_ProtocolVersionReply_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_ProtocolVersionReply_default_instance_;
    new (ptr) ::remote::ProtocolVersionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolVersionReply_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtocolVersionReply_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_ProtocolVersionRequest_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_ProtocolVersionRequest_default_instance_;
    new (ptr) ::remote::ProtocolVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolVersionRequest_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtocolVersionRequest_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeReply_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_SubscribeReply_default_instance_;
    new (ptr) ::remote::SubscribeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeReply_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeReply_remote_2fethbackend_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeRequest_remote_2fethbackend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_SubscribeRequest_default_instance_;
    new (ptr) ::remote::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeRequest_remote_2fethbackend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeRequest_remote_2fethbackend_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_remote_2fethbackend_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_remote_2fethbackend_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_remote_2fethbackend_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_remote_2fethbackend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseReply, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionReply, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountReply, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionReply, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionReply, nodename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, type_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoReply, nodesinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::remote::EtherbaseRequest)},
  { 5, -1, sizeof(::remote::EtherbaseReply)},
  { 11, -1, sizeof(::remote::NetVersionRequest)},
  { 16, -1, sizeof(::remote::NetVersionReply)},
  { 22, -1, sizeof(::remote::NetPeerCountRequest)},
  { 27, -1, sizeof(::remote::NetPeerCountReply)},
  { 33, -1, sizeof(::remote::ProtocolVersionRequest)},
  { 38, -1, sizeof(::remote::ProtocolVersionReply)},
  { 44, -1, sizeof(::remote::ClientVersionRequest)},
  { 49, -1, sizeof(::remote::ClientVersionReply)},
  { 55, -1, sizeof(::remote::SubscribeRequest)},
  { 61, -1, sizeof(::remote::SubscribeReply)},
  { 68, -1, sizeof(::remote::NodesInfoRequest)},
  { 74, -1, sizeof(::remote::NodesInfoReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_EtherbaseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_EtherbaseReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_NetVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_NetVersionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_NetPeerCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_NetPeerCountReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_ProtocolVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_ProtocolVersionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_ClientVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_ClientVersionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_SubscribeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_NodesInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_NodesInfoReply_default_instance_),
};

const char descriptor_table_protodef_remote_2fethbackend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027remote/ethbackend.proto\022\006remote\032\033googl"
  "e/protobuf/empty.proto\032\021types/types.prot"
  "o\"\022\n\020EtherbaseRequest\".\n\016EtherbaseReply\022"
  "\034\n\007address\030\001 \001(\0132\013.types.H160\"\023\n\021NetVers"
  "ionRequest\"\035\n\017NetVersionReply\022\n\n\002id\030\001 \001("
  "\004\"\025\n\023NetPeerCountRequest\"\"\n\021NetPeerCount"
  "Reply\022\r\n\005count\030\001 \001(\004\"\030\n\026ProtocolVersionR"
  "equest\"\"\n\024ProtocolVersionReply\022\n\n\002id\030\001 \001"
  "(\004\"\026\n\024ClientVersionRequest\"&\n\022ClientVers"
  "ionReply\022\020\n\010nodeName\030\001 \001(\t\"/\n\020SubscribeR"
  "equest\022\033\n\004type\030\001 \001(\0162\r.remote.Event\";\n\016S"
  "ubscribeReply\022\033\n\004type\030\001 \001(\0162\r.remote.Eve"
  "nt\022\014\n\004data\030\002 \001(\014\"!\n\020NodesInfoRequest\022\r\n\005"
  "limit\030\001 \001(\r\"9\n\016NodesInfoReply\022\'\n\tnodesIn"
  "fo\030\001 \003(\0132\024.types.NodeInfoReply*8\n\005Event\022"
  "\n\n\006HEADER\020\000\022\020\n\014PENDING_LOGS\020\001\022\021\n\rPENDING"
  "_BLOCK\020\0022\250\004\n\nETHBACKEND\022=\n\tEtherbase\022\030.r"
  "emote.EtherbaseRequest\032\026.remote.Etherbas"
  "eReply\022@\n\nNetVersion\022\031.remote.NetVersion"
  "Request\032\027.remote.NetVersionReply\022F\n\014NetP"
  "eerCount\022\033.remote.NetPeerCountRequest\032\031."
  "remote.NetPeerCountReply\0226\n\007Version\022\026.go"
  "ogle.protobuf.Empty\032\023.types.VersionReply"
  "\022O\n\017ProtocolVersion\022\036.remote.ProtocolVer"
  "sionRequest\032\034.remote.ProtocolVersionRepl"
  "y\022I\n\rClientVersion\022\034.remote.ClientVersio"
  "nRequest\032\032.remote.ClientVersionReply\022\?\n\t"
  "Subscribe\022\030.remote.SubscribeRequest\032\026.re"
  "mote.SubscribeReply0\001\022<\n\010NodeInfo\022\030.remo"
  "te.NodesInfoRequest\032\026.remote.NodesInfoRe"
  "plyB\021Z\017./remote;remoteb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_remote_2fethbackend_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_remote_2fethbackend_2eproto_sccs[14] = {
  &scc_info_ClientVersionReply_remote_2fethbackend_2eproto.base,
  &scc_info_ClientVersionRequest_remote_2fethbackend_2eproto.base,
  &scc_info_EtherbaseReply_remote_2fethbackend_2eproto.base,
  &scc_info_EtherbaseRequest_remote_2fethbackend_2eproto.base,
  &scc_info_NetPeerCountReply_remote_2fethbackend_2eproto.base,
  &scc_info_NetPeerCountRequest_remote_2fethbackend_2eproto.base,
  &scc_info_NetVersionReply_remote_2fethbackend_2eproto.base,
  &scc_info_NetVersionRequest_remote_2fethbackend_2eproto.base,
  &scc_info_NodesInfoReply_remote_2fethbackend_2eproto.base,
  &scc_info_NodesInfoRequest_remote_2fethbackend_2eproto.base,
  &scc_info_ProtocolVersionReply_remote_2fethbackend_2eproto.base,
  &scc_info_ProtocolVersionRequest_remote_2fethbackend_2eproto.base,
  &scc_info_SubscribeReply_remote_2fethbackend_2eproto.base,
  &scc_info_SubscribeRequest_remote_2fethbackend_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_remote_2fethbackend_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_2fethbackend_2eproto = {
  false, false, descriptor_table_protodef_remote_2fethbackend_2eproto, "remote/ethbackend.proto", 1230,
  &descriptor_table_remote_2fethbackend_2eproto_once, descriptor_table_remote_2fethbackend_2eproto_sccs, descriptor_table_remote_2fethbackend_2eproto_deps, 14, 2,
  schemas, file_default_instances, TableStruct_remote_2fethbackend_2eproto::offsets,
  file_level_metadata_remote_2fethbackend_2eproto, 14, file_level_enum_descriptors_remote_2fethbackend_2eproto, file_level_service_descriptors_remote_2fethbackend_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remote_2fethbackend_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_remote_2fethbackend_2eproto)), true);
namespace remote {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fethbackend_2eproto);
  return file_level_enum_descriptors_remote_2fethbackend_2eproto[0];
}
bool Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EtherbaseRequest::_Internal {
 public:
};

EtherbaseRequest::EtherbaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.EtherbaseRequest)
}
EtherbaseRequest::EtherbaseRequest(const EtherbaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.EtherbaseRequest)
}

void EtherbaseRequest::SharedCtor() {
}

EtherbaseRequest::~EtherbaseRequest() {
  // @@protoc_insertion_point(destructor:remote.EtherbaseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EtherbaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EtherbaseRequest::ArenaDtor(void* object) {
  EtherbaseRequest* _this = reinterpret_cast< EtherbaseRequest* >(object);
  (void)_this;
}
void EtherbaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EtherbaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EtherbaseRequest& EtherbaseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EtherbaseRequest_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void EtherbaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EtherbaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EtherbaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EtherbaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EtherbaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EtherbaseRequest)
  return target;
}

size_t EtherbaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EtherbaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EtherbaseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.EtherbaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EtherbaseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EtherbaseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.EtherbaseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.EtherbaseRequest)
    MergeFrom(*source);
  }
}

void EtherbaseRequest::MergeFrom(const EtherbaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.EtherbaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EtherbaseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.EtherbaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtherbaseRequest::CopyFrom(const EtherbaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EtherbaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtherbaseRequest::IsInitialized() const {
  return true;
}

void EtherbaseRequest::InternalSwap(EtherbaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EtherbaseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EtherbaseReply::_Internal {
 public:
  static const ::types::H160& address(const EtherbaseReply* msg);
};

const ::types::H160&
EtherbaseReply::_Internal::address(const EtherbaseReply* msg) {
  return *msg->address_;
}
void EtherbaseReply::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
EtherbaseReply::EtherbaseReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.EtherbaseReply)
}
EtherbaseReply::EtherbaseReply(const EtherbaseReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::types::H160(*from.address_);
  } else {
    address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:remote.EtherbaseReply)
}

void EtherbaseReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EtherbaseReply_remote_2fethbackend_2eproto.base);
  address_ = nullptr;
}

EtherbaseReply::~EtherbaseReply() {
  // @@protoc_insertion_point(destructor:remote.EtherbaseReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EtherbaseReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
}

void EtherbaseReply::ArenaDtor(void* object) {
  EtherbaseReply* _this = reinterpret_cast< EtherbaseReply* >(object);
  (void)_this;
}
void EtherbaseReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EtherbaseReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EtherbaseReply& EtherbaseReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EtherbaseReply_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void EtherbaseReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EtherbaseReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EtherbaseReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EtherbaseReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EtherbaseReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EtherbaseReply)
  return target;
}

size_t EtherbaseReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EtherbaseReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EtherbaseReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.EtherbaseReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EtherbaseReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EtherbaseReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.EtherbaseReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.EtherbaseReply)
    MergeFrom(*source);
  }
}

void EtherbaseReply::MergeFrom(const EtherbaseReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.EtherbaseReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->::types::H160::MergeFrom(from._internal_address());
  }
}

void EtherbaseReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.EtherbaseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtherbaseReply::CopyFrom(const EtherbaseReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EtherbaseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtherbaseReply::IsInitialized() const {
  return true;
}

void EtherbaseReply::InternalSwap(EtherbaseReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EtherbaseReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetVersionRequest::_Internal {
 public:
};

NetVersionRequest::NetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.NetVersionRequest)
}
NetVersionRequest::NetVersionRequest(const NetVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NetVersionRequest)
}

void NetVersionRequest::SharedCtor() {
}

NetVersionRequest::~NetVersionRequest() {
  // @@protoc_insertion_point(destructor:remote.NetVersionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetVersionRequest::ArenaDtor(void* object) {
  NetVersionRequest* _this = reinterpret_cast< NetVersionRequest* >(object);
  (void)_this;
}
void NetVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetVersionRequest& NetVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetVersionRequest_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void NetVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetVersionRequest)
  return target;
}

size_t NetVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.NetVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.NetVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.NetVersionRequest)
    MergeFrom(*source);
  }
}

void NetVersionRequest::MergeFrom(const NetVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.NetVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.NetVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetVersionRequest::CopyFrom(const NetVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetVersionRequest::IsInitialized() const {
  return true;
}

void NetVersionRequest::InternalSwap(NetVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetVersionReply::_Internal {
 public:
};

NetVersionReply::NetVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.NetVersionReply)
}
NetVersionReply::NetVersionReply(const NetVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:remote.NetVersionReply)
}

void NetVersionReply::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

NetVersionReply::~NetVersionReply() {
  // @@protoc_insertion_point(destructor:remote.NetVersionReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetVersionReply::ArenaDtor(void* object) {
  NetVersionReply* _this = reinterpret_cast< NetVersionReply* >(object);
  (void)_this;
}
void NetVersionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetVersionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetVersionReply& NetVersionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetVersionReply_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void NetVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetVersionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetVersionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetVersionReply)
  return target;
}

size_t NetVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetVersionReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetVersionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.NetVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NetVersionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetVersionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.NetVersionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.NetVersionReply)
    MergeFrom(*source);
  }
}

void NetVersionReply::MergeFrom(const NetVersionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.NetVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void NetVersionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.NetVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetVersionReply::CopyFrom(const NetVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetVersionReply::IsInitialized() const {
  return true;
}

void NetVersionReply::InternalSwap(NetVersionReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetVersionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetPeerCountRequest::_Internal {
 public:
};

NetPeerCountRequest::NetPeerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.NetPeerCountRequest)
}
NetPeerCountRequest::NetPeerCountRequest(const NetPeerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NetPeerCountRequest)
}

void NetPeerCountRequest::SharedCtor() {
}

NetPeerCountRequest::~NetPeerCountRequest() {
  // @@protoc_insertion_point(destructor:remote.NetPeerCountRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetPeerCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetPeerCountRequest::ArenaDtor(void* object) {
  NetPeerCountRequest* _this = reinterpret_cast< NetPeerCountRequest* >(object);
  (void)_this;
}
void NetPeerCountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetPeerCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetPeerCountRequest& NetPeerCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetPeerCountRequest_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void NetPeerCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetPeerCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetPeerCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetPeerCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetPeerCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetPeerCountRequest)
  return target;
}

size_t NetPeerCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetPeerCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetPeerCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.NetPeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetPeerCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetPeerCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.NetPeerCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.NetPeerCountRequest)
    MergeFrom(*source);
  }
}

void NetPeerCountRequest::MergeFrom(const NetPeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.NetPeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetPeerCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.NetPeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetPeerCountRequest::CopyFrom(const NetPeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetPeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetPeerCountRequest::IsInitialized() const {
  return true;
}

void NetPeerCountRequest::InternalSwap(NetPeerCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetPeerCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetPeerCountReply::_Internal {
 public:
};

NetPeerCountReply::NetPeerCountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.NetPeerCountReply)
}
NetPeerCountReply::NetPeerCountReply(const NetPeerCountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:remote.NetPeerCountReply)
}

void NetPeerCountReply::SharedCtor() {
  count_ = PROTOBUF_ULONGLONG(0);
}

NetPeerCountReply::~NetPeerCountReply() {
  // @@protoc_insertion_point(destructor:remote.NetPeerCountReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetPeerCountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetPeerCountReply::ArenaDtor(void* object) {
  NetPeerCountReply* _this = reinterpret_cast< NetPeerCountReply* >(object);
  (void)_this;
}
void NetPeerCountReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetPeerCountReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetPeerCountReply& NetPeerCountReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetPeerCountReply_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void NetPeerCountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetPeerCountReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetPeerCountReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetPeerCountReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetPeerCountReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetPeerCountReply)
  return target;
}

size_t NetPeerCountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetPeerCountReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetPeerCountReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.NetPeerCountReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NetPeerCountReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetPeerCountReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.NetPeerCountReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.NetPeerCountReply)
    MergeFrom(*source);
  }
}

void NetPeerCountReply::MergeFrom(const NetPeerCountReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.NetPeerCountReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void NetPeerCountReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.NetPeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetPeerCountReply::CopyFrom(const NetPeerCountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetPeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetPeerCountReply::IsInitialized() const {
  return true;
}

void NetPeerCountReply::InternalSwap(NetPeerCountReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetPeerCountReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolVersionRequest::_Internal {
 public:
};

ProtocolVersionRequest::ProtocolVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.ProtocolVersionRequest)
}
ProtocolVersionRequest::ProtocolVersionRequest(const ProtocolVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.ProtocolVersionRequest)
}

void ProtocolVersionRequest::SharedCtor() {
}

ProtocolVersionRequest::~ProtocolVersionRequest() {
  // @@protoc_insertion_point(destructor:remote.ProtocolVersionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtocolVersionRequest::ArenaDtor(void* object) {
  ProtocolVersionRequest* _this = reinterpret_cast< ProtocolVersionRequest* >(object);
  (void)_this;
}
void ProtocolVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolVersionRequest& ProtocolVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolVersionRequest_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void ProtocolVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ProtocolVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ProtocolVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ProtocolVersionRequest)
  return target;
}

size_t ProtocolVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ProtocolVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.ProtocolVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.ProtocolVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.ProtocolVersionRequest)
    MergeFrom(*source);
  }
}

void ProtocolVersionRequest::MergeFrom(const ProtocolVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.ProtocolVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProtocolVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.ProtocolVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolVersionRequest::CopyFrom(const ProtocolVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ProtocolVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolVersionRequest::IsInitialized() const {
  return true;
}

void ProtocolVersionRequest::InternalSwap(ProtocolVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolVersionReply::_Internal {
 public:
};

ProtocolVersionReply::ProtocolVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.ProtocolVersionReply)
}
ProtocolVersionReply::ProtocolVersionReply(const ProtocolVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:remote.ProtocolVersionReply)
}

void ProtocolVersionReply::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

ProtocolVersionReply::~ProtocolVersionReply() {
  // @@protoc_insertion_point(destructor:remote.ProtocolVersionReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtocolVersionReply::ArenaDtor(void* object) {
  ProtocolVersionReply* _this = reinterpret_cast< ProtocolVersionReply* >(object);
  (void)_this;
}
void ProtocolVersionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolVersionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolVersionReply& ProtocolVersionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolVersionReply_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void ProtocolVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ProtocolVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolVersionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolVersionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ProtocolVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ProtocolVersionReply)
  return target;
}

size_t ProtocolVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ProtocolVersionReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolVersionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.ProtocolVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolVersionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolVersionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.ProtocolVersionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.ProtocolVersionReply)
    MergeFrom(*source);
  }
}

void ProtocolVersionReply::MergeFrom(const ProtocolVersionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.ProtocolVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ProtocolVersionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.ProtocolVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolVersionReply::CopyFrom(const ProtocolVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ProtocolVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolVersionReply::IsInitialized() const {
  return true;
}

void ProtocolVersionReply::InternalSwap(ProtocolVersionReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolVersionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientVersionRequest::_Internal {
 public:
};

ClientVersionRequest::ClientVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.ClientVersionRequest)
}
ClientVersionRequest::ClientVersionRequest(const ClientVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.ClientVersionRequest)
}

void ClientVersionRequest::SharedCtor() {
}

ClientVersionRequest::~ClientVersionRequest() {
  // @@protoc_insertion_point(destructor:remote.ClientVersionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientVersionRequest::ArenaDtor(void* object) {
  ClientVersionRequest* _this = reinterpret_cast< ClientVersionRequest* >(object);
  (void)_this;
}
void ClientVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientVersionRequest& ClientVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientVersionRequest_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void ClientVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ClientVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ClientVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ClientVersionRequest)
  return target;
}

size_t ClientVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ClientVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.ClientVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.ClientVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.ClientVersionRequest)
    MergeFrom(*source);
  }
}

void ClientVersionRequest::MergeFrom(const ClientVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.ClientVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClientVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.ClientVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientVersionRequest::CopyFrom(const ClientVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ClientVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientVersionRequest::IsInitialized() const {
  return true;
}

void ClientVersionRequest::InternalSwap(ClientVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientVersionReply::_Internal {
 public:
};

ClientVersionReply::ClientVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.ClientVersionReply)
}
ClientVersionReply::ClientVersionReply(const ClientVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodename().empty()) {
    nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:remote.ClientVersionReply)
}

void ClientVersionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientVersionReply_remote_2fethbackend_2eproto.base);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientVersionReply::~ClientVersionReply() {
  // @@protoc_insertion_point(destructor:remote.ClientVersionReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientVersionReply::ArenaDtor(void* object) {
  ClientVersionReply* _this = reinterpret_cast< ClientVersionReply* >(object);
  (void)_this;
}
void ClientVersionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientVersionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientVersionReply& ClientVersionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientVersionReply_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void ClientVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ClientVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientVersionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.ClientVersionReply.nodeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientVersionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ClientVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeName = 1;
  if (this->nodename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.ClientVersionReply.nodeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ClientVersionReply)
  return target;
}

size_t ClientVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ClientVersionReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientVersionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.ClientVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientVersionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientVersionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.ClientVersionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.ClientVersionReply)
    MergeFrom(*source);
  }
}

void ClientVersionReply::MergeFrom(const ClientVersionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.ClientVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodename().size() > 0) {
    _internal_set_nodename(from._internal_nodename());
  }
}

void ClientVersionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.ClientVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientVersionReply::CopyFrom(const ClientVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ClientVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientVersionReply::IsInitialized() const {
  return true;
}

void ClientVersionReply::InternalSwap(ClientVersionReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodename_.Swap(&other->nodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientVersionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeRequest::_Internal {
 public:
};

SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  type_ = 0;
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:remote.SubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeRequest::ArenaDtor(void* object) {
  SubscribeRequest* _this = reinterpret_cast< SubscribeRequest* >(object);
  (void)_this;
}
void SubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .remote.Event type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remote::Event>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeReply::_Internal {
 public:
};

SubscribeReply::SubscribeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeReply)
}
SubscribeReply::SubscribeReply(const SubscribeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeReply)
}

void SubscribeReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeReply_remote_2fethbackend_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SubscribeReply::~SubscribeReply() {
  // @@protoc_insertion_point(destructor:remote.SubscribeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeReply::ArenaDtor(void* object) {
  SubscribeReply* _this = reinterpret_cast< SubscribeReply* >(object);
  (void)_this;
}
void SubscribeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeReply& SubscribeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeReply_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void SubscribeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .remote.Event type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remote::Event>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeReply)
  return target;
}

size_t SubscribeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .remote.Event type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.SubscribeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.SubscribeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.SubscribeReply)
    MergeFrom(*source);
  }
}

void SubscribeReply::MergeFrom(const SubscribeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SubscribeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.SubscribeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeReply::CopyFrom(const SubscribeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReply::IsInitialized() const {
  return true;
}

void SubscribeReply::InternalSwap(SubscribeReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodesInfoRequest::_Internal {
 public:
};

NodesInfoRequest::NodesInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.NodesInfoRequest)
}
NodesInfoRequest::NodesInfoRequest(const NodesInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:remote.NodesInfoRequest)
}

void NodesInfoRequest::SharedCtor() {
  limit_ = 0u;
}

NodesInfoRequest::~NodesInfoRequest() {
  // @@protoc_insertion_point(destructor:remote.NodesInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodesInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodesInfoRequest::ArenaDtor(void* object) {
  NodesInfoRequest* _this = reinterpret_cast< NodesInfoRequest* >(object);
  (void)_this;
}
void NodesInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodesInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodesInfoRequest& NodesInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodesInfoRequest_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void NodesInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NodesInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodesInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodesInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NodesInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NodesInfoRequest)
  return target;
}

size_t NodesInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NodesInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodesInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.NodesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodesInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodesInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.NodesInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.NodesInfoRequest)
    MergeFrom(*source);
  }
}

void NodesInfoRequest::MergeFrom(const NodesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.NodesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void NodesInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.NodesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesInfoRequest::CopyFrom(const NodesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NodesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesInfoRequest::IsInitialized() const {
  return true;
}

void NodesInfoRequest::InternalSwap(NodesInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodesInfoReply::_Internal {
 public:
};

void NodesInfoReply::clear_nodesinfo() {
  nodesinfo_.Clear();
}
NodesInfoReply::NodesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodesinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.NodesInfoReply)
}
NodesInfoReply::NodesInfoReply(const NodesInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodesinfo_(from.nodesinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NodesInfoReply)
}

void NodesInfoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodesInfoReply_remote_2fethbackend_2eproto.base);
}

NodesInfoReply::~NodesInfoReply() {
  // @@protoc_insertion_point(destructor:remote.NodesInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodesInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodesInfoReply::ArenaDtor(void* object) {
  NodesInfoReply* _this = reinterpret_cast< NodesInfoReply* >(object);
  (void)_this;
}
void NodesInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodesInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodesInfoReply& NodesInfoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodesInfoReply_remote_2fethbackend_2eproto.base);
  return *internal_default_instance();
}


void NodesInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NodesInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodesinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodesInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .types.NodeInfoReply nodesInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodesinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodesInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NodesInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.NodeInfoReply nodesInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodesinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodesinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NodesInfoReply)
  return target;
}

size_t NodesInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NodesInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.NodeInfoReply nodesInfo = 1;
  total_size += 1UL * this->_internal_nodesinfo_size();
  for (const auto& msg : this->nodesinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodesInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.NodesInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NodesInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodesInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.NodesInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.NodesInfoReply)
    MergeFrom(*source);
  }
}

void NodesInfoReply::MergeFrom(const NodesInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.NodesInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodesinfo_.MergeFrom(from.nodesinfo_);
}

void NodesInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.NodesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesInfoReply::CopyFrom(const NodesInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NodesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesInfoReply::IsInitialized() const {
  return true;
}

void NodesInfoReply::InternalSwap(NodesInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodesinfo_.InternalSwap(&other->nodesinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::remote::EtherbaseRequest* Arena::CreateMaybeMessage< ::remote::EtherbaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EtherbaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EtherbaseReply* Arena::CreateMaybeMessage< ::remote::EtherbaseReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EtherbaseReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetVersionRequest* Arena::CreateMaybeMessage< ::remote::NetVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetVersionReply* Arena::CreateMaybeMessage< ::remote::NetVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetPeerCountRequest* Arena::CreateMaybeMessage< ::remote::NetPeerCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetPeerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetPeerCountReply* Arena::CreateMaybeMessage< ::remote::NetPeerCountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetPeerCountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ProtocolVersionRequest* Arena::CreateMaybeMessage< ::remote::ProtocolVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ProtocolVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ProtocolVersionReply* Arena::CreateMaybeMessage< ::remote::ProtocolVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ProtocolVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ClientVersionRequest* Arena::CreateMaybeMessage< ::remote::ClientVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ClientVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ClientVersionReply* Arena::CreateMaybeMessage< ::remote::ClientVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ClientVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeRequest* Arena::CreateMaybeMessage< ::remote::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeReply* Arena::CreateMaybeMessage< ::remote::SubscribeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NodesInfoRequest* Arena::CreateMaybeMessage< ::remote::NodesInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NodesInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NodesInfoReply* Arena::CreateMaybeMessage< ::remote::NodesInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NodesInfoReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
