// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: txpool/mining.proto

#include "txpool/mining.pb.h"
#include "txpool/mining.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace txpool {

class MockMiningStub : public Mining::StubInterface {
 public:
  MOCK_METHOD3(Version, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::VersionReply* response));
  MOCK_METHOD3(AsyncVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(OnPendingBlockRaw, ::grpc::ClientReaderInterface< ::txpool::OnPendingBlockReply>*(::grpc::ClientContext* context, const ::txpool::OnPendingBlockRequest& request));
  MOCK_METHOD4(AsyncOnPendingBlockRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnPendingBlockReply>*(::grpc::ClientContext* context, const ::txpool::OnPendingBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncOnPendingBlockRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnPendingBlockReply>*(::grpc::ClientContext* context, const ::txpool::OnPendingBlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(OnMinedBlockRaw, ::grpc::ClientReaderInterface< ::txpool::OnMinedBlockReply>*(::grpc::ClientContext* context, const ::txpool::OnMinedBlockRequest& request));
  MOCK_METHOD4(AsyncOnMinedBlockRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnMinedBlockReply>*(::grpc::ClientContext* context, const ::txpool::OnMinedBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncOnMinedBlockRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnMinedBlockReply>*(::grpc::ClientContext* context, const ::txpool::OnMinedBlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(OnPendingLogsRaw, ::grpc::ClientReaderInterface< ::txpool::OnPendingLogsReply>*(::grpc::ClientContext* context, const ::txpool::OnPendingLogsRequest& request));
  MOCK_METHOD4(AsyncOnPendingLogsRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnPendingLogsReply>*(::grpc::ClientContext* context, const ::txpool::OnPendingLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncOnPendingLogsRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnPendingLogsReply>*(::grpc::ClientContext* context, const ::txpool::OnPendingLogsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetWork, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::GetWorkRequest& request, ::txpool::GetWorkReply* response));
  MOCK_METHOD3(AsyncGetWorkRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::GetWorkReply>*(::grpc::ClientContext* context, const ::txpool::GetWorkRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetWorkRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::GetWorkReply>*(::grpc::ClientContext* context, const ::txpool::GetWorkRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SubmitWork, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest& request, ::txpool::SubmitWorkReply* response));
  MOCK_METHOD3(AsyncSubmitWorkRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::SubmitWorkReply>*(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSubmitWorkRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::SubmitWorkReply>*(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SubmitHashRate, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest& request, ::txpool::SubmitHashRateReply* response));
  MOCK_METHOD3(AsyncSubmitHashRateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::SubmitHashRateReply>*(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSubmitHashRateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::SubmitHashRateReply>*(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(HashRate, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::HashRateRequest& request, ::txpool::HashRateReply* response));
  MOCK_METHOD3(AsyncHashRateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::HashRateReply>*(::grpc::ClientContext* context, const ::txpool::HashRateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHashRateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::HashRateReply>*(::grpc::ClientContext* context, const ::txpool::HashRateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Mining, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::MiningRequest& request, ::txpool::MiningReply* response));
  MOCK_METHOD3(AsyncMiningRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::MiningReply>*(::grpc::ClientContext* context, const ::txpool::MiningRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMiningRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::MiningReply>*(::grpc::ClientContext* context, const ::txpool::MiningRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace txpool

