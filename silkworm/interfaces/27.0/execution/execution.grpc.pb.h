// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: execution/execution.proto
#ifndef GRPC_execution_2fexecution_2eproto__INCLUDED
#define GRPC_execution_2fexecution_2eproto__INCLUDED

#include "execution/execution.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace execution {

class Execution final {
 public:
  static constexpr char const* service_full_name() {
    return "execution.Execution";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Chain Putters.
    virtual ::grpc::Status InsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::execution::InsertionResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::InsertionResult>> AsyncInsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::InsertionResult>>(AsyncInsertBlocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::InsertionResult>> PrepareAsyncInsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::InsertionResult>>(PrepareAsyncInsertBlocksRaw(context, request, cq));
    }
    // Chain Validation and ForkChoice.
    virtual ::grpc::Status ValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::execution::ValidationReceipt* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>> AsyncValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>>(AsyncValidateChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>> PrepareAsyncValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>>(PrepareAsyncValidateChainRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::execution::ForkChoiceReceipt* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>> AsyncUpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>>(AsyncUpdateForkChoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>> PrepareAsyncUpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>>(PrepareAsyncUpdateForkChoiceRaw(context, request, cq));
    }
    // Block Assembly
    // EAGAIN design here, AssembleBlock initiates the asynchronous request, and GetAssembleBlock just return it if ready.
    virtual ::grpc::Status AssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::execution::AssembleBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::AssembleBlockResponse>> AsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::AssembleBlockResponse>>(AsyncAssembleBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::AssembleBlockResponse>> PrepareAsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::AssembleBlockResponse>>(PrepareAsyncAssembleBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::execution::GetAssembledBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetAssembledBlockResponse>> AsyncGetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetAssembledBlockResponse>>(AsyncGetAssembledBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetAssembledBlockResponse>> PrepareAsyncGetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetAssembledBlockResponse>>(PrepareAsyncGetAssembledBlockRaw(context, request, cq));
    }
    // Chain Getters.
    virtual ::grpc::Status CurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::GetHeaderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>> AsyncCurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>>(AsyncCurrentHeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>> PrepareAsyncCurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>>(PrepareAsyncCurrentHeaderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetTDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetTDResponse>> AsyncGetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetTDResponse>>(AsyncGetTDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetTDResponse>> PrepareAsyncGetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetTDResponse>>(PrepareAsyncGetTDRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetHeaderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>> AsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>>(AsyncGetHeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>> PrepareAsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>>(PrepareAsyncGetHeaderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetBodyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>> AsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>>(AsyncGetBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>> PrepareAsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>>(PrepareAsyncGetBodyRaw(context, request, cq));
    }
    virtual ::grpc::Status HasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::HasBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::HasBlockResponse>> AsyncHasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::HasBlockResponse>>(AsyncHasBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::HasBlockResponse>> PrepareAsyncHasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::HasBlockResponse>>(PrepareAsyncHasBlockRaw(context, request, cq));
    }
    // Ranges
    virtual ::grpc::Status GetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::execution::GetBodiesBatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>> AsyncGetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>>(AsyncGetBodiesByRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>> PrepareAsyncGetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>>(PrepareAsyncGetBodiesByRangeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::execution::GetBodiesBatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>> AsyncGetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>>(AsyncGetBodiesByHashesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>> PrepareAsyncGetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>>(PrepareAsyncGetBodiesByHashesRaw(context, request, cq));
    }
    // Chain checkers
    virtual ::grpc::Status IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::execution::IsCanonicalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>> AsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>>(AsyncIsCanonicalHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>> PrepareAsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>>(PrepareAsyncIsCanonicalHashRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::execution::GetHeaderHashNumberResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>> AsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>>(AsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>> PrepareAsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>>(PrepareAsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    virtual ::grpc::Status GetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::ForkChoice* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoice>> AsyncGetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoice>>(AsyncGetForkChoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoice>> PrepareAsyncGetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoice>>(PrepareAsyncGetForkChoiceRaw(context, request, cq));
    }
    // Misc
    // We want to figure out whether we processed snapshots and cleanup sync cycles.
    virtual ::grpc::Status Ready(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::ReadyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ReadyResponse>> AsyncReady(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ReadyResponse>>(AsyncReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ReadyResponse>> PrepareAsyncReady(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ReadyResponse>>(PrepareAsyncReadyRaw(context, request, cq));
    }
    // Frozen blocks are how many blocks are in snapshots .seg files.
    virtual ::grpc::Status FrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::FrozenBlocksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::FrozenBlocksResponse>> AsyncFrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::FrozenBlocksResponse>>(AsyncFrozenBlocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::FrozenBlocksResponse>> PrepareAsyncFrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::FrozenBlocksResponse>>(PrepareAsyncFrozenBlocksRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Chain Putters.
      virtual void InsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest* request, ::execution::InsertionResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest* request, ::execution::InsertionResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Chain Validation and ForkChoice.
      virtual void ValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest* request, ::execution::ValidationReceipt* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest* request, ::execution::ValidationReceipt* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice* request, ::execution::ForkChoiceReceipt* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice* request, ::execution::ForkChoiceReceipt* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Block Assembly
      // EAGAIN design here, AssembleBlock initiates the asynchronous request, and GetAssembleBlock just return it if ready.
      virtual void AssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest* request, ::execution::AssembleBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest* request, ::execution::AssembleBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest* request, ::execution::GetAssembledBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest* request, ::execution::GetAssembledBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Chain Getters.
      virtual void CurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::GetHeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::GetHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetTDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetTDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::HasBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::HasBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Ranges
      virtual void GetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest* request, ::execution::GetBodiesBatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest* request, ::execution::GetBodiesBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest* request, ::execution::GetBodiesBatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest* request, ::execution::GetBodiesBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Chain checkers
      virtual void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ForkChoice* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ForkChoice* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Misc
      // We want to figure out whether we processed snapshots and cleanup sync cycles.
      virtual void Ready(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ReadyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ready(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Frozen blocks are how many blocks are in snapshots .seg files.
      virtual void FrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::FrozenBlocksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::FrozenBlocksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::InsertionResult>* AsyncInsertBlocksRaw(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::InsertionResult>* PrepareAsyncInsertBlocksRaw(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>* AsyncValidateChainRaw(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>* PrepareAsyncValidateChainRaw(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>* AsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>* PrepareAsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::AssembleBlockResponse>* AsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::AssembleBlockResponse>* PrepareAsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetAssembledBlockResponse>* AsyncGetAssembledBlockRaw(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetAssembledBlockResponse>* PrepareAsyncGetAssembledBlockRaw(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>* AsyncCurrentHeaderRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>* PrepareAsyncCurrentHeaderRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetTDResponse>* AsyncGetTDRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetTDResponse>* PrepareAsyncGetTDRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>* AsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>* PrepareAsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>* AsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>* PrepareAsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::HasBlockResponse>* AsyncHasBlockRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::HasBlockResponse>* PrepareAsyncHasBlockRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>* AsyncGetBodiesByRangeRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>* PrepareAsyncGetBodiesByRangeRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>* AsyncGetBodiesByHashesRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodiesBatchResponse>* PrepareAsyncGetBodiesByHashesRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>* AsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>* PrepareAsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>* AsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>* PrepareAsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoice>* AsyncGetForkChoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoice>* PrepareAsyncGetForkChoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ReadyResponse>* AsyncReadyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ReadyResponse>* PrepareAsyncReadyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::FrozenBlocksResponse>* AsyncFrozenBlocksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::FrozenBlocksResponse>* PrepareAsyncFrozenBlocksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::execution::InsertionResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::InsertionResult>> AsyncInsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::InsertionResult>>(AsyncInsertBlocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::InsertionResult>> PrepareAsyncInsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::InsertionResult>>(PrepareAsyncInsertBlocksRaw(context, request, cq));
    }
    ::grpc::Status ValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::execution::ValidationReceipt* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>> AsyncValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>>(AsyncValidateChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>> PrepareAsyncValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>>(PrepareAsyncValidateChainRaw(context, request, cq));
    }
    ::grpc::Status UpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::execution::ForkChoiceReceipt* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>> AsyncUpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>>(AsyncUpdateForkChoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>> PrepareAsyncUpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>>(PrepareAsyncUpdateForkChoiceRaw(context, request, cq));
    }
    ::grpc::Status AssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::execution::AssembleBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::AssembleBlockResponse>> AsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::AssembleBlockResponse>>(AsyncAssembleBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::AssembleBlockResponse>> PrepareAsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::AssembleBlockResponse>>(PrepareAsyncAssembleBlockRaw(context, request, cq));
    }
    ::grpc::Status GetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::execution::GetAssembledBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetAssembledBlockResponse>> AsyncGetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetAssembledBlockResponse>>(AsyncGetAssembledBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetAssembledBlockResponse>> PrepareAsyncGetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetAssembledBlockResponse>>(PrepareAsyncGetAssembledBlockRaw(context, request, cq));
    }
    ::grpc::Status CurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::GetHeaderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>> AsyncCurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>>(AsyncCurrentHeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>> PrepareAsyncCurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>>(PrepareAsyncCurrentHeaderRaw(context, request, cq));
    }
    ::grpc::Status GetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetTDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetTDResponse>> AsyncGetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetTDResponse>>(AsyncGetTDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetTDResponse>> PrepareAsyncGetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetTDResponse>>(PrepareAsyncGetTDRaw(context, request, cq));
    }
    ::grpc::Status GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetHeaderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>> AsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>>(AsyncGetHeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>> PrepareAsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>>(PrepareAsyncGetHeaderRaw(context, request, cq));
    }
    ::grpc::Status GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetBodyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>> AsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>>(AsyncGetBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>> PrepareAsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>>(PrepareAsyncGetBodyRaw(context, request, cq));
    }
    ::grpc::Status HasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::HasBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::HasBlockResponse>> AsyncHasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::HasBlockResponse>>(AsyncHasBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::HasBlockResponse>> PrepareAsyncHasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::HasBlockResponse>>(PrepareAsyncHasBlockRaw(context, request, cq));
    }
    ::grpc::Status GetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::execution::GetBodiesBatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>> AsyncGetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>>(AsyncGetBodiesByRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>> PrepareAsyncGetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>>(PrepareAsyncGetBodiesByRangeRaw(context, request, cq));
    }
    ::grpc::Status GetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::execution::GetBodiesBatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>> AsyncGetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>>(AsyncGetBodiesByHashesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>> PrepareAsyncGetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>>(PrepareAsyncGetBodiesByHashesRaw(context, request, cq));
    }
    ::grpc::Status IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::execution::IsCanonicalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>> AsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>>(AsyncIsCanonicalHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>> PrepareAsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>>(PrepareAsyncIsCanonicalHashRaw(context, request, cq));
    }
    ::grpc::Status GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::execution::GetHeaderHashNumberResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>> AsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>>(AsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>> PrepareAsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>>(PrepareAsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    ::grpc::Status GetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::ForkChoice* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoice>> AsyncGetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoice>>(AsyncGetForkChoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoice>> PrepareAsyncGetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoice>>(PrepareAsyncGetForkChoiceRaw(context, request, cq));
    }
    ::grpc::Status Ready(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::ReadyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ReadyResponse>> AsyncReady(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ReadyResponse>>(AsyncReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ReadyResponse>> PrepareAsyncReady(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ReadyResponse>>(PrepareAsyncReadyRaw(context, request, cq));
    }
    ::grpc::Status FrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::execution::FrozenBlocksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::FrozenBlocksResponse>> AsyncFrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::FrozenBlocksResponse>>(AsyncFrozenBlocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::FrozenBlocksResponse>> PrepareAsyncFrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::FrozenBlocksResponse>>(PrepareAsyncFrozenBlocksRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest* request, ::execution::InsertionResult* response, std::function<void(::grpc::Status)>) override;
      void InsertBlocks(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest* request, ::execution::InsertionResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest* request, ::execution::ValidationReceipt* response, std::function<void(::grpc::Status)>) override;
      void ValidateChain(::grpc::ClientContext* context, const ::execution::ValidationRequest* request, ::execution::ValidationReceipt* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice* request, ::execution::ForkChoiceReceipt* response, std::function<void(::grpc::Status)>) override;
      void UpdateForkChoice(::grpc::ClientContext* context, const ::execution::ForkChoice* request, ::execution::ForkChoiceReceipt* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest* request, ::execution::AssembleBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void AssembleBlock(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest* request, ::execution::AssembleBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest* request, ::execution::GetAssembledBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAssembledBlock(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest* request, ::execution::GetAssembledBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::GetHeaderResponse* response, std::function<void(::grpc::Status)>) override;
      void CurrentHeader(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::GetHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetTDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTD(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetTDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::HasBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void HasBlock(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::HasBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest* request, ::execution::GetBodiesBatchResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBodiesByRange(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest* request, ::execution::GetBodiesBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest* request, ::execution::GetBodiesBatchResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBodiesByHashes(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest* request, ::execution::GetBodiesBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, std::function<void(::grpc::Status)>) override;
      void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ForkChoice* response, std::function<void(::grpc::Status)>) override;
      void GetForkChoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ForkChoice* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Ready(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ReadyResponse* response, std::function<void(::grpc::Status)>) override;
      void Ready(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::ReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::FrozenBlocksResponse* response, std::function<void(::grpc::Status)>) override;
      void FrozenBlocks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::execution::FrozenBlocksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::execution::InsertionResult>* AsyncInsertBlocksRaw(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::InsertionResult>* PrepareAsyncInsertBlocksRaw(::grpc::ClientContext* context, const ::execution::InsertBlocksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>* AsyncValidateChainRaw(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>* PrepareAsyncValidateChainRaw(::grpc::ClientContext* context, const ::execution::ValidationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>* AsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>* PrepareAsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::execution::ForkChoice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::AssembleBlockResponse>* AsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::AssembleBlockResponse>* PrepareAsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::AssembleBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetAssembledBlockResponse>* AsyncGetAssembledBlockRaw(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetAssembledBlockResponse>* PrepareAsyncGetAssembledBlockRaw(::grpc::ClientContext* context, const ::execution::GetAssembledBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* AsyncCurrentHeaderRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* PrepareAsyncCurrentHeaderRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetTDResponse>* AsyncGetTDRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetTDResponse>* PrepareAsyncGetTDRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* AsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* PrepareAsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>* AsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>* PrepareAsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::HasBlockResponse>* AsyncHasBlockRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::HasBlockResponse>* PrepareAsyncHasBlockRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>* AsyncGetBodiesByRangeRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>* PrepareAsyncGetBodiesByRangeRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>* AsyncGetBodiesByHashesRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodiesBatchResponse>* PrepareAsyncGetBodiesByHashesRaw(::grpc::ClientContext* context, const ::execution::GetBodiesByHashesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>* AsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>* PrepareAsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>* AsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>* PrepareAsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ForkChoice>* AsyncGetForkChoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ForkChoice>* PrepareAsyncGetForkChoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ReadyResponse>* AsyncReadyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ReadyResponse>* PrepareAsyncReadyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::FrozenBlocksResponse>* AsyncFrozenBlocksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::FrozenBlocksResponse>* PrepareAsyncFrozenBlocksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InsertBlocks_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateChain_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateForkChoice_;
    const ::grpc::internal::RpcMethod rpcmethod_AssembleBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAssembledBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_CurrentHeader_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTD_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHeader_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBody_;
    const ::grpc::internal::RpcMethod rpcmethod_HasBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBodiesByRange_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBodiesByHashes_;
    const ::grpc::internal::RpcMethod rpcmethod_IsCanonicalHash_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHeaderHashNumber_;
    const ::grpc::internal::RpcMethod rpcmethod_GetForkChoice_;
    const ::grpc::internal::RpcMethod rpcmethod_Ready_;
    const ::grpc::internal::RpcMethod rpcmethod_FrozenBlocks_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Chain Putters.
    virtual ::grpc::Status InsertBlocks(::grpc::ServerContext* context, const ::execution::InsertBlocksRequest* request, ::execution::InsertionResult* response);
    // Chain Validation and ForkChoice.
    virtual ::grpc::Status ValidateChain(::grpc::ServerContext* context, const ::execution::ValidationRequest* request, ::execution::ValidationReceipt* response);
    virtual ::grpc::Status UpdateForkChoice(::grpc::ServerContext* context, const ::execution::ForkChoice* request, ::execution::ForkChoiceReceipt* response);
    // Block Assembly
    // EAGAIN design here, AssembleBlock initiates the asynchronous request, and GetAssembleBlock just return it if ready.
    virtual ::grpc::Status AssembleBlock(::grpc::ServerContext* context, const ::execution::AssembleBlockRequest* request, ::execution::AssembleBlockResponse* response);
    virtual ::grpc::Status GetAssembledBlock(::grpc::ServerContext* context, const ::execution::GetAssembledBlockRequest* request, ::execution::GetAssembledBlockResponse* response);
    // Chain Getters.
    virtual ::grpc::Status CurrentHeader(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::execution::GetHeaderResponse* response);
    virtual ::grpc::Status GetTD(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetTDResponse* response);
    virtual ::grpc::Status GetHeader(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response);
    virtual ::grpc::Status GetBody(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response);
    virtual ::grpc::Status HasBlock(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::HasBlockResponse* response);
    // Ranges
    virtual ::grpc::Status GetBodiesByRange(::grpc::ServerContext* context, const ::execution::GetBodiesByRangeRequest* request, ::execution::GetBodiesBatchResponse* response);
    virtual ::grpc::Status GetBodiesByHashes(::grpc::ServerContext* context, const ::execution::GetBodiesByHashesRequest* request, ::execution::GetBodiesBatchResponse* response);
    // Chain checkers
    virtual ::grpc::Status IsCanonicalHash(::grpc::ServerContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response);
    virtual ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response);
    virtual ::grpc::Status GetForkChoice(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::execution::ForkChoice* response);
    // Misc
    // We want to figure out whether we processed snapshots and cleanup sync cycles.
    virtual ::grpc::Status Ready(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::execution::ReadyResponse* response);
    // Frozen blocks are how many blocks are in snapshots .seg files.
    virtual ::grpc::Status FrozenBlocks(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::execution::FrozenBlocksResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertBlocks() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InsertBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBlocks(::grpc::ServerContext* /*context*/, const ::execution::InsertBlocksRequest* /*request*/, ::execution::InsertionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertBlocks(::grpc::ServerContext* context, ::execution::InsertBlocksRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::InsertionResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateChain() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::execution::ValidationRequest* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateChain(::grpc::ServerContext* context, ::execution::ValidationRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::ValidationReceipt>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::execution::ForkChoice* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateForkChoice(::grpc::ServerContext* context, ::execution::ForkChoice* request, ::grpc::ServerAsyncResponseWriter< ::execution::ForkChoiceReceipt>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::AssembleBlockRequest* /*request*/, ::execution::AssembleBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssembleBlock(::grpc::ServerContext* context, ::execution::AssembleBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::AssembleBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAssembledBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAssembledBlock() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAssembledBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssembledBlock(::grpc::ServerContext* /*context*/, const ::execution::GetAssembledBlockRequest* /*request*/, ::execution::GetAssembledBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssembledBlock(::grpc::ServerContext* context, ::execution::GetAssembledBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetAssembledBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurrentHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurrentHeader() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CurrentHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentHeader(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentHeader(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetHeaderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTD() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetTD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTD(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetTDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTD(::grpc::ServerContext* context, ::execution::GetSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetTDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHeader() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeader(::grpc::ServerContext* context, ::execution::GetSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetHeaderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBody() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBody(::grpc::ServerContext* context, ::execution::GetSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetBodyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasBlock() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasBlock(::grpc::ServerContext* context, ::execution::GetSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::HasBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBodiesByRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBodiesByRange() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetBodiesByRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByRange(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByRangeRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBodiesByRange(::grpc::ServerContext* context, ::execution::GetBodiesByRangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetBodiesBatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBodiesByHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBodiesByHashes() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetBodiesByHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByHashes(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByHashesRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBodiesByHashes(::grpc::ServerContext* context, ::execution::GetBodiesByHashesRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetBodiesBatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCanonicalHash(::grpc::ServerContext* context, ::types::H256* request, ::grpc::ServerAsyncResponseWriter< ::execution::IsCanonicalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeaderHashNumber(::grpc::ServerContext* context, ::types::H256* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetHeaderHashNumberResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetForkChoice() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetForkChoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ForkChoice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetForkChoice(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::execution::ForkChoice>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ready() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReady(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::execution::ReadyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FrozenBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FrozenBlocks() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_FrozenBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FrozenBlocks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::FrozenBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFrozenBlocks(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::execution::FrozenBlocksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InsertBlocks<WithAsyncMethod_ValidateChain<WithAsyncMethod_UpdateForkChoice<WithAsyncMethod_AssembleBlock<WithAsyncMethod_GetAssembledBlock<WithAsyncMethod_CurrentHeader<WithAsyncMethod_GetTD<WithAsyncMethod_GetHeader<WithAsyncMethod_GetBody<WithAsyncMethod_HasBlock<WithAsyncMethod_GetBodiesByRange<WithAsyncMethod_GetBodiesByHashes<WithAsyncMethod_IsCanonicalHash<WithAsyncMethod_GetHeaderHashNumber<WithAsyncMethod_GetForkChoice<WithAsyncMethod_Ready<WithAsyncMethod_FrozenBlocks<Service > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InsertBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertBlocks() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::InsertBlocksRequest, ::execution::InsertionResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::InsertBlocksRequest* request, ::execution::InsertionResult* response) { return this->InsertBlocks(context, request, response); }));}
    void SetMessageAllocatorFor_InsertBlocks(
        ::grpc::MessageAllocator< ::execution::InsertBlocksRequest, ::execution::InsertionResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::InsertBlocksRequest, ::execution::InsertionResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBlocks(::grpc::ServerContext* /*context*/, const ::execution::InsertBlocksRequest* /*request*/, ::execution::InsertionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::InsertBlocksRequest* /*request*/, ::execution::InsertionResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidateChain() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::ValidationRequest, ::execution::ValidationReceipt>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::ValidationRequest* request, ::execution::ValidationReceipt* response) { return this->ValidateChain(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateChain(
        ::grpc::MessageAllocator< ::execution::ValidationRequest, ::execution::ValidationReceipt>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::ValidationRequest, ::execution::ValidationReceipt>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::execution::ValidationRequest* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateChain(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::ValidationRequest* /*request*/, ::execution::ValidationReceipt* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::ForkChoice, ::execution::ForkChoiceReceipt>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::ForkChoice* request, ::execution::ForkChoiceReceipt* response) { return this->UpdateForkChoice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateForkChoice(
        ::grpc::MessageAllocator< ::execution::ForkChoice, ::execution::ForkChoiceReceipt>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::ForkChoice, ::execution::ForkChoiceReceipt>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::execution::ForkChoice* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateForkChoice(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::ForkChoice* /*request*/, ::execution::ForkChoiceReceipt* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::AssembleBlockRequest, ::execution::AssembleBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::AssembleBlockRequest* request, ::execution::AssembleBlockResponse* response) { return this->AssembleBlock(context, request, response); }));}
    void SetMessageAllocatorFor_AssembleBlock(
        ::grpc::MessageAllocator< ::execution::AssembleBlockRequest, ::execution::AssembleBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::AssembleBlockRequest, ::execution::AssembleBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::AssembleBlockRequest* /*request*/, ::execution::AssembleBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssembleBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::AssembleBlockRequest* /*request*/, ::execution::AssembleBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAssembledBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAssembledBlock() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetAssembledBlockRequest, ::execution::GetAssembledBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetAssembledBlockRequest* request, ::execution::GetAssembledBlockResponse* response) { return this->GetAssembledBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetAssembledBlock(
        ::grpc::MessageAllocator< ::execution::GetAssembledBlockRequest, ::execution::GetAssembledBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetAssembledBlockRequest, ::execution::GetAssembledBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAssembledBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssembledBlock(::grpc::ServerContext* /*context*/, const ::execution::GetAssembledBlockRequest* /*request*/, ::execution::GetAssembledBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssembledBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetAssembledBlockRequest* /*request*/, ::execution::GetAssembledBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurrentHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurrentHeader() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::GetHeaderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::execution::GetHeaderResponse* response) { return this->CurrentHeader(context, request, response); }));}
    void SetMessageAllocatorFor_CurrentHeader(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::execution::GetHeaderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::GetHeaderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurrentHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentHeader(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentHeader(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::GetHeaderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTD() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetTDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetTDResponse* response) { return this->GetTD(context, request, response); }));}
    void SetMessageAllocatorFor_GetTD(
        ::grpc::MessageAllocator< ::execution::GetSegmentRequest, ::execution::GetTDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetTDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTD(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetTDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTD(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetTDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHeader() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response) { return this->GetHeader(context, request, response); }));}
    void SetMessageAllocatorFor_GetHeader(
        ::grpc::MessageAllocator< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeader(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBody() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetBodyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response) { return this->GetBody(context, request, response); }));}
    void SetMessageAllocatorFor_GetBody(
        ::grpc::MessageAllocator< ::execution::GetSegmentRequest, ::execution::GetBodyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetBodyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBody(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HasBlock() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::HasBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::HasBlockResponse* response) { return this->HasBlock(context, request, response); }));}
    void SetMessageAllocatorFor_HasBlock(
        ::grpc::MessageAllocator< ::execution::GetSegmentRequest, ::execution::HasBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::HasBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::HasBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBodiesByRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBodiesByRange() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetBodiesByRangeRequest, ::execution::GetBodiesBatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetBodiesByRangeRequest* request, ::execution::GetBodiesBatchResponse* response) { return this->GetBodiesByRange(context, request, response); }));}
    void SetMessageAllocatorFor_GetBodiesByRange(
        ::grpc::MessageAllocator< ::execution::GetBodiesByRangeRequest, ::execution::GetBodiesBatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetBodiesByRangeRequest, ::execution::GetBodiesBatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBodiesByRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByRange(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByRangeRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBodiesByRange(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetBodiesByRangeRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBodiesByHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBodiesByHashes() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetBodiesByHashesRequest, ::execution::GetBodiesBatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetBodiesByHashesRequest* request, ::execution::GetBodiesBatchResponse* response) { return this->GetBodiesByHashes(context, request, response); }));}
    void SetMessageAllocatorFor_GetBodiesByHashes(
        ::grpc::MessageAllocator< ::execution::GetBodiesByHashesRequest, ::execution::GetBodiesBatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetBodiesByHashesRequest, ::execution::GetBodiesBatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBodiesByHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByHashes(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByHashesRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBodiesByHashes(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetBodiesByHashesRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::IsCanonicalResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response) { return this->IsCanonicalHash(context, request, response); }));}
    void SetMessageAllocatorFor_IsCanonicalHash(
        ::grpc::MessageAllocator< ::types::H256, ::execution::IsCanonicalResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::IsCanonicalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCanonicalHash(
      ::grpc::CallbackServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::GetHeaderHashNumberResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response) { return this->GetHeaderHashNumber(context, request, response); }));}
    void SetMessageAllocatorFor_GetHeaderHashNumber(
        ::grpc::MessageAllocator< ::types::H256, ::execution::GetHeaderHashNumberResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::GetHeaderHashNumberResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeaderHashNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetForkChoice() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::ForkChoice>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::execution::ForkChoice* response) { return this->GetForkChoice(context, request, response); }));}
    void SetMessageAllocatorFor_GetForkChoice(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::execution::ForkChoice>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::ForkChoice>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetForkChoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ForkChoice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetForkChoice(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ForkChoice* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ready() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::ReadyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::execution::ReadyResponse* response) { return this->Ready(context, request, response); }));}
    void SetMessageAllocatorFor_Ready(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::execution::ReadyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::ReadyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ready(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ReadyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FrozenBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FrozenBlocks() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::FrozenBlocksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::execution::FrozenBlocksResponse* response) { return this->FrozenBlocks(context, request, response); }));}
    void SetMessageAllocatorFor_FrozenBlocks(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::execution::FrozenBlocksResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::execution::FrozenBlocksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FrozenBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FrozenBlocks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::FrozenBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FrozenBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::FrozenBlocksResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InsertBlocks<WithCallbackMethod_ValidateChain<WithCallbackMethod_UpdateForkChoice<WithCallbackMethod_AssembleBlock<WithCallbackMethod_GetAssembledBlock<WithCallbackMethod_CurrentHeader<WithCallbackMethod_GetTD<WithCallbackMethod_GetHeader<WithCallbackMethod_GetBody<WithCallbackMethod_HasBlock<WithCallbackMethod_GetBodiesByRange<WithCallbackMethod_GetBodiesByHashes<WithCallbackMethod_IsCanonicalHash<WithCallbackMethod_GetHeaderHashNumber<WithCallbackMethod_GetForkChoice<WithCallbackMethod_Ready<WithCallbackMethod_FrozenBlocks<Service > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InsertBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertBlocks() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InsertBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBlocks(::grpc::ServerContext* /*context*/, const ::execution::InsertBlocksRequest* /*request*/, ::execution::InsertionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateChain() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::execution::ValidationRequest* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::execution::ForkChoice* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::AssembleBlockRequest* /*request*/, ::execution::AssembleBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAssembledBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAssembledBlock() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAssembledBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssembledBlock(::grpc::ServerContext* /*context*/, const ::execution::GetAssembledBlockRequest* /*request*/, ::execution::GetAssembledBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurrentHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurrentHeader() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CurrentHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentHeader(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTD() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetTD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTD(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetTDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHeader() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBody() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasBlock() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBodiesByRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBodiesByRange() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetBodiesByRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByRange(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByRangeRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBodiesByHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBodiesByHashes() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetBodiesByHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByHashes(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByHashesRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetForkChoice() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetForkChoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ForkChoice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ready() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FrozenBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FrozenBlocks() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_FrozenBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FrozenBlocks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::FrozenBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertBlocks() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InsertBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBlocks(::grpc::ServerContext* /*context*/, const ::execution::InsertBlocksRequest* /*request*/, ::execution::InsertionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertBlocks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateChain() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::execution::ValidationRequest* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateChain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::execution::ForkChoice* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateForkChoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::AssembleBlockRequest* /*request*/, ::execution::AssembleBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssembleBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAssembledBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAssembledBlock() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAssembledBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssembledBlock(::grpc::ServerContext* /*context*/, const ::execution::GetAssembledBlockRequest* /*request*/, ::execution::GetAssembledBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAssembledBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurrentHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurrentHeader() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CurrentHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentHeader(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentHeader(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTD() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetTD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTD(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetTDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTD(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHeader() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeader(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBody() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBody(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasBlock() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBodiesByRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBodiesByRange() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetBodiesByRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByRange(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByRangeRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBodiesByRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBodiesByHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBodiesByHashes() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetBodiesByHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByHashes(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByHashesRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBodiesByHashes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCanonicalHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeaderHashNumber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetForkChoice() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetForkChoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ForkChoice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetForkChoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ready() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FrozenBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FrozenBlocks() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_FrozenBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FrozenBlocks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::FrozenBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFrozenBlocks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertBlocks() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertBlocks(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBlocks(::grpc::ServerContext* /*context*/, const ::execution::InsertBlocksRequest* /*request*/, ::execution::InsertionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidateChain() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateChain(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::execution::ValidationRequest* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateChain(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateForkChoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::execution::ForkChoice* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateForkChoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AssembleBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::AssembleBlockRequest* /*request*/, ::execution::AssembleBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssembleBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAssembledBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAssembledBlock() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAssembledBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAssembledBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAssembledBlock(::grpc::ServerContext* /*context*/, const ::execution::GetAssembledBlockRequest* /*request*/, ::execution::GetAssembledBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAssembledBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurrentHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurrentHeader() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurrentHeader(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurrentHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentHeader(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentHeader(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTD() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTD(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTD(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetTDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTD(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHeader() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHeader(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeader(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBody() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBody(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBody(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HasBlock() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBodiesByRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBodiesByRange() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBodiesByRange(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBodiesByRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByRange(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByRangeRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBodiesByRange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBodiesByHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBodiesByHashes() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBodiesByHashes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBodiesByHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBodiesByHashes(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByHashesRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBodiesByHashes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsCanonicalHash(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCanonicalHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHeaderHashNumber(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeaderHashNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetForkChoice() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetForkChoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetForkChoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ForkChoice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetForkChoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ready() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ready(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ready(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FrozenBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FrozenBlocks() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FrozenBlocks(context, request, response); }));
    }
    ~WithRawCallbackMethod_FrozenBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FrozenBlocks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::FrozenBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FrozenBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertBlocks() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::InsertBlocksRequest, ::execution::InsertionResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::InsertBlocksRequest, ::execution::InsertionResult>* streamer) {
                       return this->StreamedInsertBlocks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertBlocks(::grpc::ServerContext* /*context*/, const ::execution::InsertBlocksRequest* /*request*/, ::execution::InsertionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertBlocks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::InsertBlocksRequest,::execution::InsertionResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateChain() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::ValidationRequest, ::execution::ValidationReceipt>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::ValidationRequest, ::execution::ValidationReceipt>* streamer) {
                       return this->StreamedValidateChain(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::execution::ValidationRequest* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateChain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::ValidationRequest,::execution::ValidationReceipt>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::ForkChoice, ::execution::ForkChoiceReceipt>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::ForkChoice, ::execution::ForkChoiceReceipt>* streamer) {
                       return this->StreamedUpdateForkChoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::execution::ForkChoice* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateForkChoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::ForkChoice,::execution::ForkChoiceReceipt>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::AssembleBlockRequest, ::execution::AssembleBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::AssembleBlockRequest, ::execution::AssembleBlockResponse>* streamer) {
                       return this->StreamedAssembleBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::AssembleBlockRequest* /*request*/, ::execution::AssembleBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAssembleBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::AssembleBlockRequest,::execution::AssembleBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAssembledBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAssembledBlock() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetAssembledBlockRequest, ::execution::GetAssembledBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetAssembledBlockRequest, ::execution::GetAssembledBlockResponse>* streamer) {
                       return this->StreamedGetAssembledBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAssembledBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAssembledBlock(::grpc::ServerContext* /*context*/, const ::execution::GetAssembledBlockRequest* /*request*/, ::execution::GetAssembledBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAssembledBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetAssembledBlockRequest,::execution::GetAssembledBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurrentHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurrentHeader() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::execution::GetHeaderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::execution::GetHeaderResponse>* streamer) {
                       return this->StreamedCurrentHeader(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurrentHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurrentHeader(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurrentHeader(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::execution::GetHeaderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTD : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTD() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetSegmentRequest, ::execution::GetTDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetSegmentRequest, ::execution::GetTDResponse>* streamer) {
                       return this->StreamedGetTD(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTD() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTD(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetTDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTD(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetSegmentRequest,::execution::GetTDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHeader() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>* streamer) {
                       return this->StreamedGetHeader(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHeader(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetSegmentRequest,::execution::GetHeaderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBody() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetSegmentRequest, ::execution::GetBodyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetSegmentRequest, ::execution::GetBodyResponse>* streamer) {
                       return this->StreamedGetBody(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBody(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetSegmentRequest,::execution::GetBodyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasBlock() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetSegmentRequest, ::execution::HasBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetSegmentRequest, ::execution::HasBlockResponse>* streamer) {
                       return this->StreamedHasBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasBlock(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::HasBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetSegmentRequest,::execution::HasBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBodiesByRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBodiesByRange() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetBodiesByRangeRequest, ::execution::GetBodiesBatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetBodiesByRangeRequest, ::execution::GetBodiesBatchResponse>* streamer) {
                       return this->StreamedGetBodiesByRange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBodiesByRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBodiesByRange(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByRangeRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBodiesByRange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetBodiesByRangeRequest,::execution::GetBodiesBatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBodiesByHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBodiesByHashes() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetBodiesByHashesRequest, ::execution::GetBodiesBatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetBodiesByHashesRequest, ::execution::GetBodiesBatchResponse>* streamer) {
                       return this->StreamedGetBodiesByHashes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBodiesByHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBodiesByHashes(::grpc::ServerContext* /*context*/, const ::execution::GetBodiesByHashesRequest* /*request*/, ::execution::GetBodiesBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBodiesByHashes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetBodiesByHashesRequest,::execution::GetBodiesBatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::types::H256, ::execution::IsCanonicalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::types::H256, ::execution::IsCanonicalResponse>* streamer) {
                       return this->StreamedIsCanonicalHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsCanonicalHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::H256,::execution::IsCanonicalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::types::H256, ::execution::GetHeaderHashNumberResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::types::H256, ::execution::GetHeaderHashNumberResponse>* streamer) {
                       return this->StreamedGetHeaderHashNumber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHeaderHashNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::H256,::execution::GetHeaderHashNumberResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetForkChoice() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::execution::ForkChoice>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::execution::ForkChoice>* streamer) {
                       return this->StreamedGetForkChoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetForkChoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ForkChoice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetForkChoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::execution::ForkChoice>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ready() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::execution::ReadyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::execution::ReadyResponse>* streamer) {
                       return this->StreamedReady(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::execution::ReadyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FrozenBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FrozenBlocks() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::execution::FrozenBlocksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::execution::FrozenBlocksResponse>* streamer) {
                       return this->StreamedFrozenBlocks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FrozenBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FrozenBlocks(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::execution::FrozenBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFrozenBlocks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::execution::FrozenBlocksResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InsertBlocks<WithStreamedUnaryMethod_ValidateChain<WithStreamedUnaryMethod_UpdateForkChoice<WithStreamedUnaryMethod_AssembleBlock<WithStreamedUnaryMethod_GetAssembledBlock<WithStreamedUnaryMethod_CurrentHeader<WithStreamedUnaryMethod_GetTD<WithStreamedUnaryMethod_GetHeader<WithStreamedUnaryMethod_GetBody<WithStreamedUnaryMethod_HasBlock<WithStreamedUnaryMethod_GetBodiesByRange<WithStreamedUnaryMethod_GetBodiesByHashes<WithStreamedUnaryMethod_IsCanonicalHash<WithStreamedUnaryMethod_GetHeaderHashNumber<WithStreamedUnaryMethod_GetForkChoice<WithStreamedUnaryMethod_Ready<WithStreamedUnaryMethod_FrozenBlocks<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InsertBlocks<WithStreamedUnaryMethod_ValidateChain<WithStreamedUnaryMethod_UpdateForkChoice<WithStreamedUnaryMethod_AssembleBlock<WithStreamedUnaryMethod_GetAssembledBlock<WithStreamedUnaryMethod_CurrentHeader<WithStreamedUnaryMethod_GetTD<WithStreamedUnaryMethod_GetHeader<WithStreamedUnaryMethod_GetBody<WithStreamedUnaryMethod_HasBlock<WithStreamedUnaryMethod_GetBodiesByRange<WithStreamedUnaryMethod_GetBodiesByHashes<WithStreamedUnaryMethod_IsCanonicalHash<WithStreamedUnaryMethod_GetHeaderHashNumber<WithStreamedUnaryMethod_GetForkChoice<WithStreamedUnaryMethod_Ready<WithStreamedUnaryMethod_FrozenBlocks<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace execution


#endif  // GRPC_execution_2fexecution_2eproto__INCLUDED
