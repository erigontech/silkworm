// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: txpool/mining.proto

#include "txpool/mining.pb.h"
#include "txpool/mining.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace txpool {

static const char* Mining_method_names[] = {
  "/txpool.Mining/Version",
  "/txpool.Mining/OnPendingBlock",
  "/txpool.Mining/OnMinedBlock",
  "/txpool.Mining/OnPendingLogs",
  "/txpool.Mining/GetWork",
  "/txpool.Mining/SubmitWork",
  "/txpool.Mining/SubmitHashRate",
  "/txpool.Mining/HashRate",
  "/txpool.Mining/Mining",
};

std::unique_ptr< Mining::Stub> Mining::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Mining::Stub> stub(new Mining::Stub(channel, options));
  return stub;
}

Mining::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Version_(Mining_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnPendingBlock_(Mining_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OnMinedBlock_(Mining_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OnPendingLogs_(Mining_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetWork_(Mining_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitWork_(Mining_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitHashRate_(Mining_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HashRate_(Mining_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mining_(Mining_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Mining::Stub::Version(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::VersionReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::types::VersionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Version_, context, request, response);
}

void Mining::Stub::async::Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::types::VersionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, std::move(f));
}

void Mining::Stub::async::Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::types::VersionReply>* Mining::Stub::PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::types::VersionReply, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Version_, context, request);
}

::grpc::ClientAsyncResponseReader< ::types::VersionReply>* Mining::Stub::AsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::txpool::OnPendingBlockReply>* Mining::Stub::OnPendingBlockRaw(::grpc::ClientContext* context, const ::txpool::OnPendingBlockRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::txpool::OnPendingBlockReply>::Create(channel_.get(), rpcmethod_OnPendingBlock_, context, request);
}

void Mining::Stub::async::OnPendingBlock(::grpc::ClientContext* context, const ::txpool::OnPendingBlockRequest* request, ::grpc::ClientReadReactor< ::txpool::OnPendingBlockReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::txpool::OnPendingBlockReply>::Create(stub_->channel_.get(), stub_->rpcmethod_OnPendingBlock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::txpool::OnPendingBlockReply>* Mining::Stub::AsyncOnPendingBlockRaw(::grpc::ClientContext* context, const ::txpool::OnPendingBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::txpool::OnPendingBlockReply>::Create(channel_.get(), cq, rpcmethod_OnPendingBlock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::txpool::OnPendingBlockReply>* Mining::Stub::PrepareAsyncOnPendingBlockRaw(::grpc::ClientContext* context, const ::txpool::OnPendingBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::txpool::OnPendingBlockReply>::Create(channel_.get(), cq, rpcmethod_OnPendingBlock_, context, request, false, nullptr);
}

::grpc::ClientReader< ::txpool::OnMinedBlockReply>* Mining::Stub::OnMinedBlockRaw(::grpc::ClientContext* context, const ::txpool::OnMinedBlockRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::txpool::OnMinedBlockReply>::Create(channel_.get(), rpcmethod_OnMinedBlock_, context, request);
}

void Mining::Stub::async::OnMinedBlock(::grpc::ClientContext* context, const ::txpool::OnMinedBlockRequest* request, ::grpc::ClientReadReactor< ::txpool::OnMinedBlockReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::txpool::OnMinedBlockReply>::Create(stub_->channel_.get(), stub_->rpcmethod_OnMinedBlock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::txpool::OnMinedBlockReply>* Mining::Stub::AsyncOnMinedBlockRaw(::grpc::ClientContext* context, const ::txpool::OnMinedBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::txpool::OnMinedBlockReply>::Create(channel_.get(), cq, rpcmethod_OnMinedBlock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::txpool::OnMinedBlockReply>* Mining::Stub::PrepareAsyncOnMinedBlockRaw(::grpc::ClientContext* context, const ::txpool::OnMinedBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::txpool::OnMinedBlockReply>::Create(channel_.get(), cq, rpcmethod_OnMinedBlock_, context, request, false, nullptr);
}

::grpc::ClientReader< ::txpool::OnPendingLogsReply>* Mining::Stub::OnPendingLogsRaw(::grpc::ClientContext* context, const ::txpool::OnPendingLogsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::txpool::OnPendingLogsReply>::Create(channel_.get(), rpcmethod_OnPendingLogs_, context, request);
}

void Mining::Stub::async::OnPendingLogs(::grpc::ClientContext* context, const ::txpool::OnPendingLogsRequest* request, ::grpc::ClientReadReactor< ::txpool::OnPendingLogsReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::txpool::OnPendingLogsReply>::Create(stub_->channel_.get(), stub_->rpcmethod_OnPendingLogs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::txpool::OnPendingLogsReply>* Mining::Stub::AsyncOnPendingLogsRaw(::grpc::ClientContext* context, const ::txpool::OnPendingLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::txpool::OnPendingLogsReply>::Create(channel_.get(), cq, rpcmethod_OnPendingLogs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::txpool::OnPendingLogsReply>* Mining::Stub::PrepareAsyncOnPendingLogsRaw(::grpc::ClientContext* context, const ::txpool::OnPendingLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::txpool::OnPendingLogsReply>::Create(channel_.get(), cq, rpcmethod_OnPendingLogs_, context, request, false, nullptr);
}

::grpc::Status Mining::Stub::GetWork(::grpc::ClientContext* context, const ::txpool::GetWorkRequest& request, ::txpool::GetWorkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::txpool::GetWorkRequest, ::txpool::GetWorkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWork_, context, request, response);
}

void Mining::Stub::async::GetWork(::grpc::ClientContext* context, const ::txpool::GetWorkRequest* request, ::txpool::GetWorkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::txpool::GetWorkRequest, ::txpool::GetWorkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWork_, context, request, response, std::move(f));
}

void Mining::Stub::async::GetWork(::grpc::ClientContext* context, const ::txpool::GetWorkRequest* request, ::txpool::GetWorkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::txpool::GetWorkReply>* Mining::Stub::PrepareAsyncGetWorkRaw(::grpc::ClientContext* context, const ::txpool::GetWorkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::txpool::GetWorkReply, ::txpool::GetWorkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWork_, context, request);
}

::grpc::ClientAsyncResponseReader< ::txpool::GetWorkReply>* Mining::Stub::AsyncGetWorkRaw(::grpc::ClientContext* context, const ::txpool::GetWorkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Mining::Stub::SubmitWork(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest& request, ::txpool::SubmitWorkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::txpool::SubmitWorkRequest, ::txpool::SubmitWorkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitWork_, context, request, response);
}

void Mining::Stub::async::SubmitWork(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest* request, ::txpool::SubmitWorkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::txpool::SubmitWorkRequest, ::txpool::SubmitWorkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitWork_, context, request, response, std::move(f));
}

void Mining::Stub::async::SubmitWork(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest* request, ::txpool::SubmitWorkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitWork_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::txpool::SubmitWorkReply>* Mining::Stub::PrepareAsyncSubmitWorkRaw(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::txpool::SubmitWorkReply, ::txpool::SubmitWorkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitWork_, context, request);
}

::grpc::ClientAsyncResponseReader< ::txpool::SubmitWorkReply>* Mining::Stub::AsyncSubmitWorkRaw(::grpc::ClientContext* context, const ::txpool::SubmitWorkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitWorkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Mining::Stub::SubmitHashRate(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest& request, ::txpool::SubmitHashRateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::txpool::SubmitHashRateRequest, ::txpool::SubmitHashRateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitHashRate_, context, request, response);
}

void Mining::Stub::async::SubmitHashRate(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest* request, ::txpool::SubmitHashRateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::txpool::SubmitHashRateRequest, ::txpool::SubmitHashRateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitHashRate_, context, request, response, std::move(f));
}

void Mining::Stub::async::SubmitHashRate(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest* request, ::txpool::SubmitHashRateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitHashRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::txpool::SubmitHashRateReply>* Mining::Stub::PrepareAsyncSubmitHashRateRaw(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::txpool::SubmitHashRateReply, ::txpool::SubmitHashRateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitHashRate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::txpool::SubmitHashRateReply>* Mining::Stub::AsyncSubmitHashRateRaw(::grpc::ClientContext* context, const ::txpool::SubmitHashRateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitHashRateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Mining::Stub::HashRate(::grpc::ClientContext* context, const ::txpool::HashRateRequest& request, ::txpool::HashRateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::txpool::HashRateRequest, ::txpool::HashRateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HashRate_, context, request, response);
}

void Mining::Stub::async::HashRate(::grpc::ClientContext* context, const ::txpool::HashRateRequest* request, ::txpool::HashRateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::txpool::HashRateRequest, ::txpool::HashRateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HashRate_, context, request, response, std::move(f));
}

void Mining::Stub::async::HashRate(::grpc::ClientContext* context, const ::txpool::HashRateRequest* request, ::txpool::HashRateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HashRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::txpool::HashRateReply>* Mining::Stub::PrepareAsyncHashRateRaw(::grpc::ClientContext* context, const ::txpool::HashRateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::txpool::HashRateReply, ::txpool::HashRateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HashRate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::txpool::HashRateReply>* Mining::Stub::AsyncHashRateRaw(::grpc::ClientContext* context, const ::txpool::HashRateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHashRateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Mining::Stub::Mining(::grpc::ClientContext* context, const ::txpool::MiningRequest& request, ::txpool::MiningReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::txpool::MiningRequest, ::txpool::MiningReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mining_, context, request, response);
}

void Mining::Stub::async::Mining(::grpc::ClientContext* context, const ::txpool::MiningRequest* request, ::txpool::MiningReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::txpool::MiningRequest, ::txpool::MiningReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mining_, context, request, response, std::move(f));
}

void Mining::Stub::async::Mining(::grpc::ClientContext* context, const ::txpool::MiningRequest* request, ::txpool::MiningReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mining_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::txpool::MiningReply>* Mining::Stub::PrepareAsyncMiningRaw(::grpc::ClientContext* context, const ::txpool::MiningRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::txpool::MiningReply, ::txpool::MiningRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mining_, context, request);
}

::grpc::ClientAsyncResponseReader< ::txpool::MiningReply>* Mining::Stub::AsyncMiningRaw(::grpc::ClientContext* context, const ::txpool::MiningRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMiningRaw(context, request, cq);
  result->StartCall();
  return result;
}

Mining::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mining::Service, ::google::protobuf::Empty, ::types::VersionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::types::VersionReply* resp) {
               return service->Version(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Mining::Service, ::txpool::OnPendingBlockRequest, ::txpool::OnPendingBlockReply>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::OnPendingBlockRequest* req,
             ::grpc::ServerWriter<::txpool::OnPendingBlockReply>* writer) {
               return service->OnPendingBlock(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Mining::Service, ::txpool::OnMinedBlockRequest, ::txpool::OnMinedBlockReply>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::OnMinedBlockRequest* req,
             ::grpc::ServerWriter<::txpool::OnMinedBlockReply>* writer) {
               return service->OnMinedBlock(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Mining::Service, ::txpool::OnPendingLogsRequest, ::txpool::OnPendingLogsReply>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::OnPendingLogsRequest* req,
             ::grpc::ServerWriter<::txpool::OnPendingLogsReply>* writer) {
               return service->OnPendingLogs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mining::Service, ::txpool::GetWorkRequest, ::txpool::GetWorkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::GetWorkRequest* req,
             ::txpool::GetWorkReply* resp) {
               return service->GetWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mining::Service, ::txpool::SubmitWorkRequest, ::txpool::SubmitWorkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::SubmitWorkRequest* req,
             ::txpool::SubmitWorkReply* resp) {
               return service->SubmitWork(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mining::Service, ::txpool::SubmitHashRateRequest, ::txpool::SubmitHashRateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::SubmitHashRateRequest* req,
             ::txpool::SubmitHashRateReply* resp) {
               return service->SubmitHashRate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mining::Service, ::txpool::HashRateRequest, ::txpool::HashRateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::HashRateRequest* req,
             ::txpool::HashRateReply* resp) {
               return service->HashRate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mining_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mining::Service, ::txpool::MiningRequest, ::txpool::MiningReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mining::Service* service,
             ::grpc::ServerContext* ctx,
             const ::txpool::MiningRequest* req,
             ::txpool::MiningReply* resp) {
               return service->Mining(ctx, req, resp);
             }, this)));
}

Mining::Service::~Service() {
}

::grpc::Status Mining::Service::Version(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::OnPendingBlock(::grpc::ServerContext* context, const ::txpool::OnPendingBlockRequest* request, ::grpc::ServerWriter< ::txpool::OnPendingBlockReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::OnMinedBlock(::grpc::ServerContext* context, const ::txpool::OnMinedBlockRequest* request, ::grpc::ServerWriter< ::txpool::OnMinedBlockReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::OnPendingLogs(::grpc::ServerContext* context, const ::txpool::OnPendingLogsRequest* request, ::grpc::ServerWriter< ::txpool::OnPendingLogsReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::GetWork(::grpc::ServerContext* context, const ::txpool::GetWorkRequest* request, ::txpool::GetWorkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::SubmitWork(::grpc::ServerContext* context, const ::txpool::SubmitWorkRequest* request, ::txpool::SubmitWorkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::SubmitHashRate(::grpc::ServerContext* context, const ::txpool::SubmitHashRateRequest* request, ::txpool::SubmitHashRateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::HashRate(::grpc::ServerContext* context, const ::txpool::HashRateRequest* request, ::txpool::HashRateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mining::Service::Mining(::grpc::ServerContext* context, const ::txpool::MiningRequest* request, ::txpool::MiningReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace txpool

