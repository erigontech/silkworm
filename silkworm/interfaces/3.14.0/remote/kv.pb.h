// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/kv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remote_2fkv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remote_2fkv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remote_2fkv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remote_2fkv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_2fkv_2eproto;
namespace remote {
class AccountChange;
class AccountChangeDefaultTypeInternal;
extern AccountChangeDefaultTypeInternal _AccountChange_default_instance_;
class Cursor;
class CursorDefaultTypeInternal;
extern CursorDefaultTypeInternal _Cursor_default_instance_;
class DomainGetReply;
class DomainGetReplyDefaultTypeInternal;
extern DomainGetReplyDefaultTypeInternal _DomainGetReply_default_instance_;
class DomainGetReq;
class DomainGetReqDefaultTypeInternal;
extern DomainGetReqDefaultTypeInternal _DomainGetReq_default_instance_;
class DomainRangeReq;
class DomainRangeReqDefaultTypeInternal;
extern DomainRangeReqDefaultTypeInternal _DomainRangeReq_default_instance_;
class HistoryGetReply;
class HistoryGetReplyDefaultTypeInternal;
extern HistoryGetReplyDefaultTypeInternal _HistoryGetReply_default_instance_;
class HistoryGetReq;
class HistoryGetReqDefaultTypeInternal;
extern HistoryGetReqDefaultTypeInternal _HistoryGetReq_default_instance_;
class HistoryRangeReq;
class HistoryRangeReqDefaultTypeInternal;
extern HistoryRangeReqDefaultTypeInternal _HistoryRangeReq_default_instance_;
class IndexPagination;
class IndexPaginationDefaultTypeInternal;
extern IndexPaginationDefaultTypeInternal _IndexPagination_default_instance_;
class IndexRangeReply;
class IndexRangeReplyDefaultTypeInternal;
extern IndexRangeReplyDefaultTypeInternal _IndexRangeReply_default_instance_;
class IndexRangeReq;
class IndexRangeReqDefaultTypeInternal;
extern IndexRangeReqDefaultTypeInternal _IndexRangeReq_default_instance_;
class Pair;
class PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
class Pairs;
class PairsDefaultTypeInternal;
extern PairsDefaultTypeInternal _Pairs_default_instance_;
class ParisPagination;
class ParisPaginationDefaultTypeInternal;
extern ParisPaginationDefaultTypeInternal _ParisPagination_default_instance_;
class RangeReq;
class RangeReqDefaultTypeInternal;
extern RangeReqDefaultTypeInternal _RangeReq_default_instance_;
class SnapshotsReply;
class SnapshotsReplyDefaultTypeInternal;
extern SnapshotsReplyDefaultTypeInternal _SnapshotsReply_default_instance_;
class SnapshotsRequest;
class SnapshotsRequestDefaultTypeInternal;
extern SnapshotsRequestDefaultTypeInternal _SnapshotsRequest_default_instance_;
class StateChange;
class StateChangeDefaultTypeInternal;
extern StateChangeDefaultTypeInternal _StateChange_default_instance_;
class StateChangeBatch;
class StateChangeBatchDefaultTypeInternal;
extern StateChangeBatchDefaultTypeInternal _StateChangeBatch_default_instance_;
class StateChangeRequest;
class StateChangeRequestDefaultTypeInternal;
extern StateChangeRequestDefaultTypeInternal _StateChangeRequest_default_instance_;
class StorageChange;
class StorageChangeDefaultTypeInternal;
extern StorageChangeDefaultTypeInternal _StorageChange_default_instance_;
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> ::remote::AccountChange* Arena::CreateMaybeMessage<::remote::AccountChange>(Arena*);
template<> ::remote::Cursor* Arena::CreateMaybeMessage<::remote::Cursor>(Arena*);
template<> ::remote::DomainGetReply* Arena::CreateMaybeMessage<::remote::DomainGetReply>(Arena*);
template<> ::remote::DomainGetReq* Arena::CreateMaybeMessage<::remote::DomainGetReq>(Arena*);
template<> ::remote::DomainRangeReq* Arena::CreateMaybeMessage<::remote::DomainRangeReq>(Arena*);
template<> ::remote::HistoryGetReply* Arena::CreateMaybeMessage<::remote::HistoryGetReply>(Arena*);
template<> ::remote::HistoryGetReq* Arena::CreateMaybeMessage<::remote::HistoryGetReq>(Arena*);
template<> ::remote::HistoryRangeReq* Arena::CreateMaybeMessage<::remote::HistoryRangeReq>(Arena*);
template<> ::remote::IndexPagination* Arena::CreateMaybeMessage<::remote::IndexPagination>(Arena*);
template<> ::remote::IndexRangeReply* Arena::CreateMaybeMessage<::remote::IndexRangeReply>(Arena*);
template<> ::remote::IndexRangeReq* Arena::CreateMaybeMessage<::remote::IndexRangeReq>(Arena*);
template<> ::remote::Pair* Arena::CreateMaybeMessage<::remote::Pair>(Arena*);
template<> ::remote::Pairs* Arena::CreateMaybeMessage<::remote::Pairs>(Arena*);
template<> ::remote::ParisPagination* Arena::CreateMaybeMessage<::remote::ParisPagination>(Arena*);
template<> ::remote::RangeReq* Arena::CreateMaybeMessage<::remote::RangeReq>(Arena*);
template<> ::remote::SnapshotsReply* Arena::CreateMaybeMessage<::remote::SnapshotsReply>(Arena*);
template<> ::remote::SnapshotsRequest* Arena::CreateMaybeMessage<::remote::SnapshotsRequest>(Arena*);
template<> ::remote::StateChange* Arena::CreateMaybeMessage<::remote::StateChange>(Arena*);
template<> ::remote::StateChangeBatch* Arena::CreateMaybeMessage<::remote::StateChangeBatch>(Arena*);
template<> ::remote::StateChangeRequest* Arena::CreateMaybeMessage<::remote::StateChangeRequest>(Arena*);
template<> ::remote::StorageChange* Arena::CreateMaybeMessage<::remote::StorageChange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace remote {

enum Op : int {
  FIRST = 0,
  FIRST_DUP = 1,
  SEEK = 2,
  SEEK_BOTH = 3,
  CURRENT = 4,
  LAST = 6,
  LAST_DUP = 7,
  NEXT = 8,
  NEXT_DUP = 9,
  NEXT_NO_DUP = 11,
  PREV = 12,
  PREV_DUP = 13,
  PREV_NO_DUP = 14,
  SEEK_EXACT = 15,
  SEEK_BOTH_EXACT = 16,
  OPEN = 30,
  CLOSE = 31,
  OPEN_DUP_SORT = 32,
  COUNT = 33,
  Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Op_IsValid(int value);
constexpr Op Op_MIN = FIRST;
constexpr Op Op_MAX = COUNT;
constexpr int Op_ARRAYSIZE = Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor();
template<typename T>
inline const std::string& Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Op_descriptor(), enum_t_value);
}
inline bool Op_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Op>(
    Op_descriptor(), name, value);
}
enum Action : int {
  STORAGE = 0,
  UPSERT = 1,
  CODE = 2,
  UPSERT_CODE = 3,
  REMOVE = 4,
  Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Action_IsValid(int value);
constexpr Action Action_MIN = STORAGE;
constexpr Action Action_MAX = REMOVE;
constexpr int Action_ARRAYSIZE = Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor();
template<typename T>
inline const std::string& Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_descriptor(), enum_t_value);
}
inline bool Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
enum Direction : int {
  FORWARD = 0,
  UNWIND = 1,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = FORWARD;
constexpr Direction Direction_MAX = UNWIND;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
// ===================================================================

class Cursor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.Cursor) */ {
 public:
  inline Cursor() : Cursor(nullptr) {}
  virtual ~Cursor();

  Cursor(const Cursor& from);
  Cursor(Cursor&& from) noexcept
    : Cursor() {
    *this = ::std::move(from);
  }

  inline Cursor& operator=(const Cursor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cursor& operator=(Cursor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cursor& default_instance();

  static inline const Cursor* internal_default_instance() {
    return reinterpret_cast<const Cursor*>(
               &_Cursor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cursor& a, Cursor& b) {
    a.Swap(&b);
  }
  inline void Swap(Cursor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cursor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cursor* New() const final {
    return CreateMaybeMessage<Cursor>(nullptr);
  }

  Cursor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cursor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cursor& from);
  void MergeFrom(const Cursor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cursor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.Cursor";
  }
  protected:
  explicit Cursor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketNameFieldNumber = 2,
    kKFieldNumber = 4,
    kVFieldNumber = 5,
    kOpFieldNumber = 1,
    kCursorFieldNumber = 3,
  };
  // string bucket_name = 2;
  void clear_bucket_name();
  const std::string& bucket_name() const;
  void set_bucket_name(const std::string& value);
  void set_bucket_name(std::string&& value);
  void set_bucket_name(const char* value);
  void set_bucket_name(const char* value, size_t size);
  std::string* mutable_bucket_name();
  std::string* release_bucket_name();
  void set_allocated_bucket_name(std::string* bucket_name);
  private:
  const std::string& _internal_bucket_name() const;
  void _internal_set_bucket_name(const std::string& value);
  std::string* _internal_mutable_bucket_name();
  public:

  // bytes k = 4;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // bytes v = 5;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const void* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // .remote.Op op = 1;
  void clear_op();
  ::remote::Op op() const;
  void set_op(::remote::Op value);
  private:
  ::remote::Op _internal_op() const;
  void _internal_set_op(::remote::Op value);
  public:

  // uint32 cursor = 3;
  void clear_cursor();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor() const;
  void set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursor() const;
  void _internal_set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.Cursor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  int op_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class Pair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.Pair) */ {
 public:
  inline Pair() : Pair(nullptr) {}
  virtual ~Pair();

  Pair(const Pair& from);
  Pair(Pair&& from) noexcept
    : Pair() {
    *this = ::std::move(from);
  }

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pair& operator=(Pair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pair& default_instance();

  static inline const Pair* internal_default_instance() {
    return reinterpret_cast<const Pair*>(
               &_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pair& a, Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Pair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pair* New() const final {
    return CreateMaybeMessage<Pair>(nullptr);
  }

  Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.Pair";
  }
  protected:
  explicit Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
    kVFieldNumber = 2,
    kViewIdFieldNumber = 4,
    kTxIdFieldNumber = 5,
    kCursorIdFieldNumber = 3,
  };
  // bytes k = 1;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // bytes v = 2;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const void* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // uint64 view_id = 4;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_view_id() const;
  void _internal_set_view_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tx_id = 5;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 cursor_id = 3;
  void clear_cursor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id() const;
  void set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursor_id() const;
  void _internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  ::PROTOBUF_NAMESPACE_ID::uint64 view_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class StorageChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.StorageChange) */ {
 public:
  inline StorageChange() : StorageChange(nullptr) {}
  virtual ~StorageChange();

  StorageChange(const StorageChange& from);
  StorageChange(StorageChange&& from) noexcept
    : StorageChange() {
    *this = ::std::move(from);
  }

  inline StorageChange& operator=(const StorageChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageChange& operator=(StorageChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorageChange& default_instance();

  static inline const StorageChange* internal_default_instance() {
    return reinterpret_cast<const StorageChange*>(
               &_StorageChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StorageChange& a, StorageChange& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorageChange* New() const final {
    return CreateMaybeMessage<StorageChange>(nullptr);
  }

  StorageChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorageChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorageChange& from);
  void MergeFrom(const StorageChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.StorageChange";
  }
  protected:
  explicit StorageChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .types.H256 location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::types::H256& location() const;
  ::types::H256* release_location();
  ::types::H256* mutable_location();
  void set_allocated_location(::types::H256* location);
  private:
  const ::types::H256& _internal_location() const;
  ::types::H256* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::types::H256* location);
  ::types::H256* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:remote.StorageChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::types::H256* location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class AccountChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.AccountChange) */ {
 public:
  inline AccountChange() : AccountChange(nullptr) {}
  virtual ~AccountChange();

  AccountChange(const AccountChange& from);
  AccountChange(AccountChange&& from) noexcept
    : AccountChange() {
    *this = ::std::move(from);
  }

  inline AccountChange& operator=(const AccountChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountChange& operator=(AccountChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountChange& default_instance();

  static inline const AccountChange* internal_default_instance() {
    return reinterpret_cast<const AccountChange*>(
               &_AccountChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountChange& a, AccountChange& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountChange* New() const final {
    return CreateMaybeMessage<AccountChange>(nullptr);
  }

  AccountChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountChange& from);
  void MergeFrom(const AccountChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.AccountChange";
  }
  protected:
  explicit AccountChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageChangesFieldNumber = 6,
    kDataFieldNumber = 4,
    kCodeFieldNumber = 5,
    kAddressFieldNumber = 1,
    kIncarnationFieldNumber = 2,
    kActionFieldNumber = 3,
  };
  // repeated .remote.StorageChange storage_changes = 6;
  int storage_changes_size() const;
  private:
  int _internal_storage_changes_size() const;
  public:
  void clear_storage_changes();
  ::remote::StorageChange* mutable_storage_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StorageChange >*
      mutable_storage_changes();
  private:
  const ::remote::StorageChange& _internal_storage_changes(int index) const;
  ::remote::StorageChange* _internal_add_storage_changes();
  public:
  const ::remote::StorageChange& storage_changes(int index) const;
  ::remote::StorageChange* add_storage_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StorageChange >&
      storage_changes() const;

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes code = 5;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .types.H160 address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::types::H160& address() const;
  ::types::H160* release_address();
  ::types::H160* mutable_address();
  void set_allocated_address(::types::H160* address);
  private:
  const ::types::H160& _internal_address() const;
  ::types::H160* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::types::H160* address);
  ::types::H160* unsafe_arena_release_address();

  // uint64 incarnation = 2;
  void clear_incarnation();
  ::PROTOBUF_NAMESPACE_ID::uint64 incarnation() const;
  void set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_incarnation() const;
  void _internal_set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .remote.Action action = 3;
  void clear_action();
  ::remote::Action action() const;
  void set_action(::remote::Action value);
  private:
  ::remote::Action _internal_action() const;
  void _internal_set_action(::remote::Action value);
  public:

  // @@protoc_insertion_point(class_scope:remote.AccountChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StorageChange > storage_changes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::types::H160* address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 incarnation_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class StateChangeBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.StateChangeBatch) */ {
 public:
  inline StateChangeBatch() : StateChangeBatch(nullptr) {}
  virtual ~StateChangeBatch();

  StateChangeBatch(const StateChangeBatch& from);
  StateChangeBatch(StateChangeBatch&& from) noexcept
    : StateChangeBatch() {
    *this = ::std::move(from);
  }

  inline StateChangeBatch& operator=(const StateChangeBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateChangeBatch& operator=(StateChangeBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateChangeBatch& default_instance();

  static inline const StateChangeBatch* internal_default_instance() {
    return reinterpret_cast<const StateChangeBatch*>(
               &_StateChangeBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StateChangeBatch& a, StateChangeBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(StateChangeBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateChangeBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateChangeBatch* New() const final {
    return CreateMaybeMessage<StateChangeBatch>(nullptr);
  }

  StateChangeBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateChangeBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateChangeBatch& from);
  void MergeFrom(const StateChangeBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChangeBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.StateChangeBatch";
  }
  protected:
  explicit StateChangeBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeBatchFieldNumber = 2,
    kStateVersionIdFieldNumber = 1,
    kPendingBlockBaseFeeFieldNumber = 3,
    kBlockGasLimitFieldNumber = 4,
  };
  // repeated .remote.StateChange change_batch = 2;
  int change_batch_size() const;
  private:
  int _internal_change_batch_size() const;
  public:
  void clear_change_batch();
  ::remote::StateChange* mutable_change_batch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StateChange >*
      mutable_change_batch();
  private:
  const ::remote::StateChange& _internal_change_batch(int index) const;
  ::remote::StateChange* _internal_add_change_batch();
  public:
  const ::remote::StateChange& change_batch(int index) const;
  ::remote::StateChange* add_change_batch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StateChange >&
      change_batch() const;

  // uint64 state_version_id = 1;
  void clear_state_version_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 state_version_id() const;
  void set_state_version_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_state_version_id() const;
  void _internal_set_state_version_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pending_block_base_fee = 3;
  void clear_pending_block_base_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 pending_block_base_fee() const;
  void set_pending_block_base_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pending_block_base_fee() const;
  void _internal_set_pending_block_base_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_gas_limit = 4;
  void clear_block_gas_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_gas_limit() const;
  void set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_gas_limit() const;
  void _internal_set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.StateChangeBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StateChange > change_batch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 state_version_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pending_block_base_fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_gas_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class StateChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.StateChange) */ {
 public:
  inline StateChange() : StateChange(nullptr) {}
  virtual ~StateChange();

  StateChange(const StateChange& from);
  StateChange(StateChange&& from) noexcept
    : StateChange() {
    *this = ::std::move(from);
  }

  inline StateChange& operator=(const StateChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateChange& operator=(StateChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateChange& default_instance();

  static inline const StateChange* internal_default_instance() {
    return reinterpret_cast<const StateChange*>(
               &_StateChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StateChange& a, StateChange& b) {
    a.Swap(&b);
  }
  inline void Swap(StateChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateChange* New() const final {
    return CreateMaybeMessage<StateChange>(nullptr);
  }

  StateChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateChange& from);
  void MergeFrom(const StateChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.StateChange";
  }
  protected:
  explicit StateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 4,
    kTxsFieldNumber = 5,
    kBlockHashFieldNumber = 3,
    kBlockHeightFieldNumber = 2,
    kDirectionFieldNumber = 1,
  };
  // repeated .remote.AccountChange changes = 4;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::remote::AccountChange* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::AccountChange >*
      mutable_changes();
  private:
  const ::remote::AccountChange& _internal_changes(int index) const;
  ::remote::AccountChange* _internal_add_changes();
  public:
  const ::remote::AccountChange& changes(int index) const;
  ::remote::AccountChange* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::AccountChange >&
      changes() const;

  // repeated bytes txs = 5;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  void set_txs(int index, const std::string& value);
  void set_txs(int index, std::string&& value);
  void set_txs(int index, const char* value);
  void set_txs(int index, const void* value, size_t size);
  std::string* add_txs();
  void add_txs(const std::string& value);
  void add_txs(std::string&& value);
  void add_txs(const char* value);
  void add_txs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txs();
  private:
  const std::string& _internal_txs(int index) const;
  std::string* _internal_add_txs();
  public:

  // .types.H256 block_hash = 3;
  bool has_block_hash() const;
  private:
  bool _internal_has_block_hash() const;
  public:
  void clear_block_hash();
  const ::types::H256& block_hash() const;
  ::types::H256* release_block_hash();
  ::types::H256* mutable_block_hash();
  void set_allocated_block_hash(::types::H256* block_hash);
  private:
  const ::types::H256& _internal_block_hash() const;
  ::types::H256* _internal_mutable_block_hash();
  public:
  void unsafe_arena_set_allocated_block_hash(
      ::types::H256* block_hash);
  ::types::H256* unsafe_arena_release_block_hash();

  // uint64 block_height = 2;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .remote.Direction direction = 1;
  void clear_direction();
  ::remote::Direction direction() const;
  void set_direction(::remote::Direction value);
  private:
  ::remote::Direction _internal_direction() const;
  void _internal_set_direction(::remote::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:remote.StateChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::AccountChange > changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txs_;
  ::types::H256* block_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class StateChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.StateChangeRequest) */ {
 public:
  inline StateChangeRequest() : StateChangeRequest(nullptr) {}
  virtual ~StateChangeRequest();

  StateChangeRequest(const StateChangeRequest& from);
  StateChangeRequest(StateChangeRequest&& from) noexcept
    : StateChangeRequest() {
    *this = ::std::move(from);
  }

  inline StateChangeRequest& operator=(const StateChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateChangeRequest& operator=(StateChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateChangeRequest& default_instance();

  static inline const StateChangeRequest* internal_default_instance() {
    return reinterpret_cast<const StateChangeRequest*>(
               &_StateChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StateChangeRequest& a, StateChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StateChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateChangeRequest* New() const final {
    return CreateMaybeMessage<StateChangeRequest>(nullptr);
  }

  StateChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateChangeRequest& from);
  void MergeFrom(const StateChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.StateChangeRequest";
  }
  protected:
  explicit StateChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithStorageFieldNumber = 1,
    kWithTransactionsFieldNumber = 2,
  };
  // bool with_storage = 1;
  void clear_with_storage();
  bool with_storage() const;
  void set_with_storage(bool value);
  private:
  bool _internal_with_storage() const;
  void _internal_set_with_storage(bool value);
  public:

  // bool with_transactions = 2;
  void clear_with_transactions();
  bool with_transactions() const;
  void set_with_transactions(bool value);
  private:
  bool _internal_with_transactions() const;
  void _internal_set_with_transactions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:remote.StateChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool with_storage_;
  bool with_transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class SnapshotsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.SnapshotsRequest) */ {
 public:
  inline SnapshotsRequest() : SnapshotsRequest(nullptr) {}
  virtual ~SnapshotsRequest();

  SnapshotsRequest(const SnapshotsRequest& from);
  SnapshotsRequest(SnapshotsRequest&& from) noexcept
    : SnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline SnapshotsRequest& operator=(const SnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotsRequest& operator=(SnapshotsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotsRequest& default_instance();

  static inline const SnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const SnapshotsRequest*>(
               &_SnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SnapshotsRequest& a, SnapshotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotsRequest* New() const final {
    return CreateMaybeMessage<SnapshotsRequest>(nullptr);
  }

  SnapshotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotsRequest& from);
  void MergeFrom(const SnapshotsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.SnapshotsRequest";
  }
  protected:
  explicit SnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:remote.SnapshotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class SnapshotsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.SnapshotsReply) */ {
 public:
  inline SnapshotsReply() : SnapshotsReply(nullptr) {}
  virtual ~SnapshotsReply();

  SnapshotsReply(const SnapshotsReply& from);
  SnapshotsReply(SnapshotsReply&& from) noexcept
    : SnapshotsReply() {
    *this = ::std::move(from);
  }

  inline SnapshotsReply& operator=(const SnapshotsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotsReply& operator=(SnapshotsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotsReply& default_instance();

  static inline const SnapshotsReply* internal_default_instance() {
    return reinterpret_cast<const SnapshotsReply*>(
               &_SnapshotsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SnapshotsReply& a, SnapshotsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotsReply* New() const final {
    return CreateMaybeMessage<SnapshotsReply>(nullptr);
  }

  SnapshotsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotsReply& from);
  void MergeFrom(const SnapshotsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.SnapshotsReply";
  }
  protected:
  explicit SnapshotsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFilesFieldNumber = 1,
    kHistoryFilesFieldNumber = 2,
  };
  // repeated string blocks_files = 1;
  int blocks_files_size() const;
  private:
  int _internal_blocks_files_size() const;
  public:
  void clear_blocks_files();
  const std::string& blocks_files(int index) const;
  std::string* mutable_blocks_files(int index);
  void set_blocks_files(int index, const std::string& value);
  void set_blocks_files(int index, std::string&& value);
  void set_blocks_files(int index, const char* value);
  void set_blocks_files(int index, const char* value, size_t size);
  std::string* add_blocks_files();
  void add_blocks_files(const std::string& value);
  void add_blocks_files(std::string&& value);
  void add_blocks_files(const char* value);
  void add_blocks_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocks_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocks_files();
  private:
  const std::string& _internal_blocks_files(int index) const;
  std::string* _internal_add_blocks_files();
  public:

  // repeated string history_files = 2;
  int history_files_size() const;
  private:
  int _internal_history_files_size() const;
  public:
  void clear_history_files();
  const std::string& history_files(int index) const;
  std::string* mutable_history_files(int index);
  void set_history_files(int index, const std::string& value);
  void set_history_files(int index, std::string&& value);
  void set_history_files(int index, const char* value);
  void set_history_files(int index, const char* value, size_t size);
  std::string* add_history_files();
  void add_history_files(const std::string& value);
  void add_history_files(std::string&& value);
  void add_history_files(const char* value);
  void add_history_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& history_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_history_files();
  private:
  const std::string& _internal_history_files(int index) const;
  std::string* _internal_add_history_files();
  public:

  // @@protoc_insertion_point(class_scope:remote.SnapshotsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocks_files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> history_files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class RangeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.RangeReq) */ {
 public:
  inline RangeReq() : RangeReq(nullptr) {}
  virtual ~RangeReq();

  RangeReq(const RangeReq& from);
  RangeReq(RangeReq&& from) noexcept
    : RangeReq() {
    *this = ::std::move(from);
  }

  inline RangeReq& operator=(const RangeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeReq& operator=(RangeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeReq& default_instance();

  static inline const RangeReq* internal_default_instance() {
    return reinterpret_cast<const RangeReq*>(
               &_RangeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RangeReq& a, RangeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeReq* New() const final {
    return CreateMaybeMessage<RangeReq>(nullptr);
  }

  RangeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeReq& from);
  void MergeFrom(const RangeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.RangeReq";
  }
  protected:
  explicit RangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 2,
    kFromPrefixFieldNumber = 3,
    kToPrefixFieldNumber = 4,
    kPageTokenFieldNumber = 8,
    kTxIdFieldNumber = 1,
    kLimitFieldNumber = 6,
    kOrderAscendFieldNumber = 5,
    kPageSizeFieldNumber = 7,
  };
  // string table = 2;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // bytes from_prefix = 3;
  void clear_from_prefix();
  const std::string& from_prefix() const;
  void set_from_prefix(const std::string& value);
  void set_from_prefix(std::string&& value);
  void set_from_prefix(const char* value);
  void set_from_prefix(const void* value, size_t size);
  std::string* mutable_from_prefix();
  std::string* release_from_prefix();
  void set_allocated_from_prefix(std::string* from_prefix);
  private:
  const std::string& _internal_from_prefix() const;
  void _internal_set_from_prefix(const std::string& value);
  std::string* _internal_mutable_from_prefix();
  public:

  // bytes to_prefix = 4;
  void clear_to_prefix();
  const std::string& to_prefix() const;
  void set_to_prefix(const std::string& value);
  void set_to_prefix(std::string&& value);
  void set_to_prefix(const char* value);
  void set_to_prefix(const void* value, size_t size);
  std::string* mutable_to_prefix();
  std::string* release_to_prefix();
  void set_allocated_to_prefix(std::string* to_prefix);
  private:
  const std::string& _internal_to_prefix() const;
  void _internal_set_to_prefix(const std::string& value);
  std::string* _internal_mutable_to_prefix();
  public:

  // string page_token = 8;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint64 limit = 6;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool order_ascend = 5;
  void clear_order_ascend();
  bool order_ascend() const;
  void set_order_ascend(bool value);
  private:
  bool _internal_order_ascend() const;
  void _internal_set_order_ascend(bool value);
  public:

  // int32 page_size = 7;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.RangeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  bool order_ascend_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class DomainGetReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.DomainGetReq) */ {
 public:
  inline DomainGetReq() : DomainGetReq(nullptr) {}
  virtual ~DomainGetReq();

  DomainGetReq(const DomainGetReq& from);
  DomainGetReq(DomainGetReq&& from) noexcept
    : DomainGetReq() {
    *this = ::std::move(from);
  }

  inline DomainGetReq& operator=(const DomainGetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomainGetReq& operator=(DomainGetReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DomainGetReq& default_instance();

  static inline const DomainGetReq* internal_default_instance() {
    return reinterpret_cast<const DomainGetReq*>(
               &_DomainGetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DomainGetReq& a, DomainGetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DomainGetReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomainGetReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DomainGetReq* New() const final {
    return CreateMaybeMessage<DomainGetReq>(nullptr);
  }

  DomainGetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DomainGetReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DomainGetReq& from);
  void MergeFrom(const DomainGetReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DomainGetReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.DomainGetReq";
  }
  protected:
  explicit DomainGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 2,
    kKFieldNumber = 3,
    kK2FieldNumber = 5,
    kTxIdFieldNumber = 1,
    kTsFieldNumber = 4,
    kLatestFieldNumber = 6,
  };
  // string table = 2;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // bytes k = 3;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // bytes k2 = 5;
  void clear_k2();
  const std::string& k2() const;
  void set_k2(const std::string& value);
  void set_k2(std::string&& value);
  void set_k2(const char* value);
  void set_k2(const void* value, size_t size);
  std::string* mutable_k2();
  std::string* release_k2();
  void set_allocated_k2(std::string* k2);
  private:
  const std::string& _internal_k2() const;
  void _internal_set_k2(const std::string& value);
  std::string* _internal_mutable_k2();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ts = 4;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool latest = 6;
  void clear_latest();
  bool latest() const;
  void set_latest(bool value);
  private:
  bool _internal_latest() const;
  void _internal_set_latest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:remote.DomainGetReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ts_;
  bool latest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class DomainGetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.DomainGetReply) */ {
 public:
  inline DomainGetReply() : DomainGetReply(nullptr) {}
  virtual ~DomainGetReply();

  DomainGetReply(const DomainGetReply& from);
  DomainGetReply(DomainGetReply&& from) noexcept
    : DomainGetReply() {
    *this = ::std::move(from);
  }

  inline DomainGetReply& operator=(const DomainGetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomainGetReply& operator=(DomainGetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DomainGetReply& default_instance();

  static inline const DomainGetReply* internal_default_instance() {
    return reinterpret_cast<const DomainGetReply*>(
               &_DomainGetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DomainGetReply& a, DomainGetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DomainGetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomainGetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DomainGetReply* New() const final {
    return CreateMaybeMessage<DomainGetReply>(nullptr);
  }

  DomainGetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DomainGetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DomainGetReply& from);
  void MergeFrom(const DomainGetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DomainGetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.DomainGetReply";
  }
  protected:
  explicit DomainGetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVFieldNumber = 1,
    kOkFieldNumber = 2,
  };
  // bytes v = 1;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const void* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // bool ok = 2;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:remote.DomainGetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class HistoryGetReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.HistoryGetReq) */ {
 public:
  inline HistoryGetReq() : HistoryGetReq(nullptr) {}
  virtual ~HistoryGetReq();

  HistoryGetReq(const HistoryGetReq& from);
  HistoryGetReq(HistoryGetReq&& from) noexcept
    : HistoryGetReq() {
    *this = ::std::move(from);
  }

  inline HistoryGetReq& operator=(const HistoryGetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryGetReq& operator=(HistoryGetReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryGetReq& default_instance();

  static inline const HistoryGetReq* internal_default_instance() {
    return reinterpret_cast<const HistoryGetReq*>(
               &_HistoryGetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HistoryGetReq& a, HistoryGetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryGetReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryGetReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryGetReq* New() const final {
    return CreateMaybeMessage<HistoryGetReq>(nullptr);
  }

  HistoryGetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryGetReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryGetReq& from);
  void MergeFrom(const HistoryGetReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryGetReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.HistoryGetReq";
  }
  protected:
  explicit HistoryGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 2,
    kKFieldNumber = 3,
    kTxIdFieldNumber = 1,
    kTsFieldNumber = 4,
  };
  // string table = 2;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // bytes k = 3;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ts = 4;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.HistoryGetReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class HistoryGetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.HistoryGetReply) */ {
 public:
  inline HistoryGetReply() : HistoryGetReply(nullptr) {}
  virtual ~HistoryGetReply();

  HistoryGetReply(const HistoryGetReply& from);
  HistoryGetReply(HistoryGetReply&& from) noexcept
    : HistoryGetReply() {
    *this = ::std::move(from);
  }

  inline HistoryGetReply& operator=(const HistoryGetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryGetReply& operator=(HistoryGetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryGetReply& default_instance();

  static inline const HistoryGetReply* internal_default_instance() {
    return reinterpret_cast<const HistoryGetReply*>(
               &_HistoryGetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HistoryGetReply& a, HistoryGetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryGetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryGetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryGetReply* New() const final {
    return CreateMaybeMessage<HistoryGetReply>(nullptr);
  }

  HistoryGetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryGetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryGetReply& from);
  void MergeFrom(const HistoryGetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryGetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.HistoryGetReply";
  }
  protected:
  explicit HistoryGetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVFieldNumber = 1,
    kOkFieldNumber = 2,
  };
  // bytes v = 1;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const void* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // bool ok = 2;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:remote.HistoryGetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class IndexRangeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.IndexRangeReq) */ {
 public:
  inline IndexRangeReq() : IndexRangeReq(nullptr) {}
  virtual ~IndexRangeReq();

  IndexRangeReq(const IndexRangeReq& from);
  IndexRangeReq(IndexRangeReq&& from) noexcept
    : IndexRangeReq() {
    *this = ::std::move(from);
  }

  inline IndexRangeReq& operator=(const IndexRangeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexRangeReq& operator=(IndexRangeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexRangeReq& default_instance();

  static inline const IndexRangeReq* internal_default_instance() {
    return reinterpret_cast<const IndexRangeReq*>(
               &_IndexRangeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(IndexRangeReq& a, IndexRangeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexRangeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexRangeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexRangeReq* New() const final {
    return CreateMaybeMessage<IndexRangeReq>(nullptr);
  }

  IndexRangeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexRangeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexRangeReq& from);
  void MergeFrom(const IndexRangeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRangeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.IndexRangeReq";
  }
  protected:
  explicit IndexRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 2,
    kKFieldNumber = 3,
    kPageTokenFieldNumber = 9,
    kTxIdFieldNumber = 1,
    kFromTsFieldNumber = 4,
    kToTsFieldNumber = 5,
    kLimitFieldNumber = 7,
    kOrderAscendFieldNumber = 6,
    kPageSizeFieldNumber = 8,
  };
  // string table = 2;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // bytes k = 3;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // string page_token = 9;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint64 from_ts = 4;
  void clear_from_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 from_ts() const;
  void set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_ts() const;
  void _internal_set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 to_ts = 5;
  void clear_to_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 to_ts() const;
  void set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_ts() const;
  void _internal_set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 limit = 7;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool order_ascend = 6;
  void clear_order_ascend();
  bool order_ascend() const;
  void set_order_ascend(bool value);
  private:
  bool _internal_order_ascend() const;
  void _internal_set_order_ascend(bool value);
  public:

  // int32 page_size = 8;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.IndexRangeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  bool order_ascend_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class IndexRangeReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.IndexRangeReply) */ {
 public:
  inline IndexRangeReply() : IndexRangeReply(nullptr) {}
  virtual ~IndexRangeReply();

  IndexRangeReply(const IndexRangeReply& from);
  IndexRangeReply(IndexRangeReply&& from) noexcept
    : IndexRangeReply() {
    *this = ::std::move(from);
  }

  inline IndexRangeReply& operator=(const IndexRangeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexRangeReply& operator=(IndexRangeReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexRangeReply& default_instance();

  static inline const IndexRangeReply* internal_default_instance() {
    return reinterpret_cast<const IndexRangeReply*>(
               &_IndexRangeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(IndexRangeReply& a, IndexRangeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexRangeReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexRangeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexRangeReply* New() const final {
    return CreateMaybeMessage<IndexRangeReply>(nullptr);
  }

  IndexRangeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexRangeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexRangeReply& from);
  void MergeFrom(const IndexRangeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRangeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.IndexRangeReply";
  }
  protected:
  explicit IndexRangeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated uint64 timestamps = 1;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;
  public:
  void clear_timestamps();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_timestamps() const;
  void _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_timestamps();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamps(int index) const;
  void set_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_timestamps();

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:remote.IndexRangeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > timestamps_;
  mutable std::atomic<int> _timestamps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class HistoryRangeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.HistoryRangeReq) */ {
 public:
  inline HistoryRangeReq() : HistoryRangeReq(nullptr) {}
  virtual ~HistoryRangeReq();

  HistoryRangeReq(const HistoryRangeReq& from);
  HistoryRangeReq(HistoryRangeReq&& from) noexcept
    : HistoryRangeReq() {
    *this = ::std::move(from);
  }

  inline HistoryRangeReq& operator=(const HistoryRangeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryRangeReq& operator=(HistoryRangeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryRangeReq& default_instance();

  static inline const HistoryRangeReq* internal_default_instance() {
    return reinterpret_cast<const HistoryRangeReq*>(
               &_HistoryRangeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(HistoryRangeReq& a, HistoryRangeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryRangeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryRangeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryRangeReq* New() const final {
    return CreateMaybeMessage<HistoryRangeReq>(nullptr);
  }

  HistoryRangeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryRangeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryRangeReq& from);
  void MergeFrom(const HistoryRangeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryRangeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.HistoryRangeReq";
  }
  protected:
  explicit HistoryRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 2,
    kPageTokenFieldNumber = 9,
    kTxIdFieldNumber = 1,
    kFromTsFieldNumber = 4,
    kToTsFieldNumber = 5,
    kLimitFieldNumber = 7,
    kOrderAscendFieldNumber = 6,
    kPageSizeFieldNumber = 8,
  };
  // string table = 2;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // string page_token = 9;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint64 from_ts = 4;
  void clear_from_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 from_ts() const;
  void set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_ts() const;
  void _internal_set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 to_ts = 5;
  void clear_to_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 to_ts() const;
  void set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_ts() const;
  void _internal_set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 limit = 7;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool order_ascend = 6;
  void clear_order_ascend();
  bool order_ascend() const;
  void set_order_ascend(bool value);
  private:
  bool _internal_order_ascend() const;
  void _internal_set_order_ascend(bool value);
  public:

  // int32 page_size = 8;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.HistoryRangeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  bool order_ascend_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class DomainRangeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.DomainRangeReq) */ {
 public:
  inline DomainRangeReq() : DomainRangeReq(nullptr) {}
  virtual ~DomainRangeReq();

  DomainRangeReq(const DomainRangeReq& from);
  DomainRangeReq(DomainRangeReq&& from) noexcept
    : DomainRangeReq() {
    *this = ::std::move(from);
  }

  inline DomainRangeReq& operator=(const DomainRangeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomainRangeReq& operator=(DomainRangeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DomainRangeReq& default_instance();

  static inline const DomainRangeReq* internal_default_instance() {
    return reinterpret_cast<const DomainRangeReq*>(
               &_DomainRangeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DomainRangeReq& a, DomainRangeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DomainRangeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomainRangeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DomainRangeReq* New() const final {
    return CreateMaybeMessage<DomainRangeReq>(nullptr);
  }

  DomainRangeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DomainRangeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DomainRangeReq& from);
  void MergeFrom(const DomainRangeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DomainRangeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.DomainRangeReq";
  }
  protected:
  explicit DomainRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 2,
    kFromKeyFieldNumber = 3,
    kToKeyFieldNumber = 4,
    kPageTokenFieldNumber = 10,
    kTxIdFieldNumber = 1,
    kTsFieldNumber = 5,
    kLatestFieldNumber = 6,
    kOrderAscendFieldNumber = 7,
    kPageSizeFieldNumber = 9,
    kLimitFieldNumber = 8,
  };
  // string table = 2;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // bytes from_key = 3;
  void clear_from_key();
  const std::string& from_key() const;
  void set_from_key(const std::string& value);
  void set_from_key(std::string&& value);
  void set_from_key(const char* value);
  void set_from_key(const void* value, size_t size);
  std::string* mutable_from_key();
  std::string* release_from_key();
  void set_allocated_from_key(std::string* from_key);
  private:
  const std::string& _internal_from_key() const;
  void _internal_set_from_key(const std::string& value);
  std::string* _internal_mutable_from_key();
  public:

  // bytes to_key = 4;
  void clear_to_key();
  const std::string& to_key() const;
  void set_to_key(const std::string& value);
  void set_to_key(std::string&& value);
  void set_to_key(const char* value);
  void set_to_key(const void* value, size_t size);
  std::string* mutable_to_key();
  std::string* release_to_key();
  void set_allocated_to_key(std::string* to_key);
  private:
  const std::string& _internal_to_key() const;
  void _internal_set_to_key(const std::string& value);
  std::string* _internal_mutable_to_key();
  public:

  // string page_token = 10;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ts = 5;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool latest = 6;
  void clear_latest();
  bool latest() const;
  void set_latest(bool value);
  private:
  bool _internal_latest() const;
  void _internal_set_latest(bool value);
  public:

  // bool order_ascend = 7;
  void clear_order_ascend();
  bool order_ascend() const;
  void set_order_ascend(bool value);
  private:
  bool _internal_order_ascend() const;
  void _internal_set_order_ascend(bool value);
  public:

  // int32 page_size = 9;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 limit = 8;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.DomainRangeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ts_;
  bool latest_;
  bool order_ascend_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class Pairs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.Pairs) */ {
 public:
  inline Pairs() : Pairs(nullptr) {}
  virtual ~Pairs();

  Pairs(const Pairs& from);
  Pairs(Pairs&& from) noexcept
    : Pairs() {
    *this = ::std::move(from);
  }

  inline Pairs& operator=(const Pairs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pairs& operator=(Pairs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pairs& default_instance();

  static inline const Pairs* internal_default_instance() {
    return reinterpret_cast<const Pairs*>(
               &_Pairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Pairs& a, Pairs& b) {
    a.Swap(&b);
  }
  inline void Swap(Pairs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pairs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pairs* New() const final {
    return CreateMaybeMessage<Pairs>(nullptr);
  }

  Pairs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pairs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pairs& from);
  void MergeFrom(const Pairs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pairs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.Pairs";
  }
  protected:
  explicit Pairs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kValuesFieldNumber = 2,
    kNextPageTokenFieldNumber = 3,
  };
  // repeated bytes keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // repeated bytes values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // string next_page_token = 3;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:remote.Pairs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class ParisPagination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.ParisPagination) */ {
 public:
  inline ParisPagination() : ParisPagination(nullptr) {}
  virtual ~ParisPagination();

  ParisPagination(const ParisPagination& from);
  ParisPagination(ParisPagination&& from) noexcept
    : ParisPagination() {
    *this = ::std::move(from);
  }

  inline ParisPagination& operator=(const ParisPagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParisPagination& operator=(ParisPagination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParisPagination& default_instance();

  static inline const ParisPagination* internal_default_instance() {
    return reinterpret_cast<const ParisPagination*>(
               &_ParisPagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ParisPagination& a, ParisPagination& b) {
    a.Swap(&b);
  }
  inline void Swap(ParisPagination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParisPagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParisPagination* New() const final {
    return CreateMaybeMessage<ParisPagination>(nullptr);
  }

  ParisPagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParisPagination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParisPagination& from);
  void MergeFrom(const ParisPagination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParisPagination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.ParisPagination";
  }
  protected:
  explicit ParisPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextKeyFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // bytes next_key = 1;
  void clear_next_key();
  const std::string& next_key() const;
  void set_next_key(const std::string& value);
  void set_next_key(std::string&& value);
  void set_next_key(const char* value);
  void set_next_key(const void* value, size_t size);
  std::string* mutable_next_key();
  std::string* release_next_key();
  void set_allocated_next_key(std::string* next_key);
  private:
  const std::string& _internal_next_key() const;
  void _internal_set_next_key(const std::string& value);
  std::string* _internal_mutable_next_key();
  public:

  // sint64 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.ParisPagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_key_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// -------------------------------------------------------------------

class IndexPagination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.IndexPagination) */ {
 public:
  inline IndexPagination() : IndexPagination(nullptr) {}
  virtual ~IndexPagination();

  IndexPagination(const IndexPagination& from);
  IndexPagination(IndexPagination&& from) noexcept
    : IndexPagination() {
    *this = ::std::move(from);
  }

  inline IndexPagination& operator=(const IndexPagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexPagination& operator=(IndexPagination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexPagination& default_instance();

  static inline const IndexPagination* internal_default_instance() {
    return reinterpret_cast<const IndexPagination*>(
               &_IndexPagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(IndexPagination& a, IndexPagination& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexPagination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexPagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexPagination* New() const final {
    return CreateMaybeMessage<IndexPagination>(nullptr);
  }

  IndexPagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexPagination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexPagination& from);
  void MergeFrom(const IndexPagination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexPagination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.IndexPagination";
  }
  protected:
  explicit IndexPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fkv_2eproto);
    return ::descriptor_table_remote_2fkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextTimeStampFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // sint64 next_time_stamp = 1;
  void clear_next_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 next_time_stamp() const;
  void set_next_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_next_time_stamp() const;
  void _internal_set_next_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.IndexPagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fkv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cursor

// .remote.Op op = 1;
inline void Cursor::clear_op() {
  op_ = 0;
}
inline ::remote::Op Cursor::_internal_op() const {
  return static_cast< ::remote::Op >(op_);
}
inline ::remote::Op Cursor::op() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.op)
  return _internal_op();
}
inline void Cursor::_internal_set_op(::remote::Op value) {
  
  op_ = value;
}
inline void Cursor::set_op(::remote::Op value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.op)
}

// string bucket_name = 2;
inline void Cursor::clear_bucket_name() {
  bucket_name_.ClearToEmpty();
}
inline const std::string& Cursor::bucket_name() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.bucket_name)
  return _internal_bucket_name();
}
inline void Cursor::set_bucket_name(const std::string& value) {
  _internal_set_bucket_name(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.bucket_name)
}
inline std::string* Cursor::mutable_bucket_name() {
  // @@protoc_insertion_point(field_mutable:remote.Cursor.bucket_name)
  return _internal_mutable_bucket_name();
}
inline const std::string& Cursor::_internal_bucket_name() const {
  return bucket_name_.Get();
}
inline void Cursor::_internal_set_bucket_name(const std::string& value) {
  
  bucket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cursor::set_bucket_name(std::string&& value) {
  
  bucket_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Cursor.bucket_name)
}
inline void Cursor::set_bucket_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Cursor.bucket_name)
}
inline void Cursor::set_bucket_name(const char* value,
    size_t size) {
  
  bucket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Cursor.bucket_name)
}
inline std::string* Cursor::_internal_mutable_bucket_name() {
  
  return bucket_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cursor::release_bucket_name() {
  // @@protoc_insertion_point(field_release:remote.Cursor.bucket_name)
  return bucket_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cursor::set_allocated_bucket_name(std::string* bucket_name) {
  if (bucket_name != nullptr) {
    
  } else {
    
  }
  bucket_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Cursor.bucket_name)
}

// uint32 cursor = 3;
inline void Cursor::clear_cursor() {
  cursor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cursor::_internal_cursor() const {
  return cursor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cursor::cursor() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.cursor)
  return _internal_cursor();
}
inline void Cursor::_internal_set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cursor_ = value;
}
inline void Cursor::set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.cursor)
}

// bytes k = 4;
inline void Cursor::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& Cursor::k() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.k)
  return _internal_k();
}
inline void Cursor::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.k)
}
inline std::string* Cursor::mutable_k() {
  // @@protoc_insertion_point(field_mutable:remote.Cursor.k)
  return _internal_mutable_k();
}
inline const std::string& Cursor::_internal_k() const {
  return k_.Get();
}
inline void Cursor::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cursor::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Cursor.k)
}
inline void Cursor::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Cursor.k)
}
inline void Cursor::set_k(const void* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Cursor.k)
}
inline std::string* Cursor::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cursor::release_k() {
  // @@protoc_insertion_point(field_release:remote.Cursor.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cursor::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Cursor.k)
}

// bytes v = 5;
inline void Cursor::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& Cursor::v() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.v)
  return _internal_v();
}
inline void Cursor::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.v)
}
inline std::string* Cursor::mutable_v() {
  // @@protoc_insertion_point(field_mutable:remote.Cursor.v)
  return _internal_mutable_v();
}
inline const std::string& Cursor::_internal_v() const {
  return v_.Get();
}
inline void Cursor::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cursor::set_v(std::string&& value) {
  
  v_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Cursor.v)
}
inline void Cursor::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Cursor.v)
}
inline void Cursor::set_v(const void* value,
    size_t size) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Cursor.v)
}
inline std::string* Cursor::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cursor::release_v() {
  // @@protoc_insertion_point(field_release:remote.Cursor.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cursor::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Cursor.v)
}

// -------------------------------------------------------------------

// Pair

// bytes k = 1;
inline void Pair::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& Pair::k() const {
  // @@protoc_insertion_point(field_get:remote.Pair.k)
  return _internal_k();
}
inline void Pair::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:remote.Pair.k)
}
inline std::string* Pair::mutable_k() {
  // @@protoc_insertion_point(field_mutable:remote.Pair.k)
  return _internal_mutable_k();
}
inline const std::string& Pair::_internal_k() const {
  return k_.Get();
}
inline void Pair::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Pair::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Pair.k)
}
inline void Pair::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Pair.k)
}
inline void Pair::set_k(const void* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Pair.k)
}
inline std::string* Pair::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Pair::release_k() {
  // @@protoc_insertion_point(field_release:remote.Pair.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pair::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Pair.k)
}

// bytes v = 2;
inline void Pair::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& Pair::v() const {
  // @@protoc_insertion_point(field_get:remote.Pair.v)
  return _internal_v();
}
inline void Pair::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:remote.Pair.v)
}
inline std::string* Pair::mutable_v() {
  // @@protoc_insertion_point(field_mutable:remote.Pair.v)
  return _internal_mutable_v();
}
inline const std::string& Pair::_internal_v() const {
  return v_.Get();
}
inline void Pair::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Pair::set_v(std::string&& value) {
  
  v_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Pair.v)
}
inline void Pair::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Pair.v)
}
inline void Pair::set_v(const void* value,
    size_t size) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Pair.v)
}
inline std::string* Pair::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Pair::release_v() {
  // @@protoc_insertion_point(field_release:remote.Pair.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pair::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Pair.v)
}

// uint32 cursor_id = 3;
inline void Pair::clear_cursor_id() {
  cursor_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pair::_internal_cursor_id() const {
  return cursor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pair::cursor_id() const {
  // @@protoc_insertion_point(field_get:remote.Pair.cursor_id)
  return _internal_cursor_id();
}
inline void Pair::_internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cursor_id_ = value;
}
inline void Pair::set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursor_id(value);
  // @@protoc_insertion_point(field_set:remote.Pair.cursor_id)
}

// uint64 view_id = 4;
inline void Pair::clear_view_id() {
  view_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pair::_internal_view_id() const {
  return view_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pair::view_id() const {
  // @@protoc_insertion_point(field_get:remote.Pair.view_id)
  return _internal_view_id();
}
inline void Pair::_internal_set_view_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  view_id_ = value;
}
inline void Pair::set_view_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:remote.Pair.view_id)
}

// uint64 tx_id = 5;
inline void Pair::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pair::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pair::tx_id() const {
  // @@protoc_insertion_point(field_get:remote.Pair.tx_id)
  return _internal_tx_id();
}
inline void Pair::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void Pair::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:remote.Pair.tx_id)
}

// -------------------------------------------------------------------

// StorageChange

// .types.H256 location = 1;
inline bool StorageChange::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool StorageChange::has_location() const {
  return _internal_has_location();
}
inline const ::types::H256& StorageChange::_internal_location() const {
  const ::types::H256* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& StorageChange::location() const {
  // @@protoc_insertion_point(field_get:remote.StorageChange.location)
  return _internal_location();
}
inline void StorageChange::unsafe_arena_set_allocated_location(
    ::types::H256* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.StorageChange.location)
}
inline ::types::H256* StorageChange::release_location() {
  
  ::types::H256* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* StorageChange::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:remote.StorageChange.location)
  
  ::types::H256* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::types::H256* StorageChange::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::types::H256* StorageChange::mutable_location() {
  // @@protoc_insertion_point(field_mutable:remote.StorageChange.location)
  return _internal_mutable_location();
}
inline void StorageChange::set_allocated_location(::types::H256* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location)->GetArena();
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:remote.StorageChange.location)
}

// bytes data = 2;
inline void StorageChange::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& StorageChange::data() const {
  // @@protoc_insertion_point(field_get:remote.StorageChange.data)
  return _internal_data();
}
inline void StorageChange::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:remote.StorageChange.data)
}
inline std::string* StorageChange::mutable_data() {
  // @@protoc_insertion_point(field_mutable:remote.StorageChange.data)
  return _internal_mutable_data();
}
inline const std::string& StorageChange::_internal_data() const {
  return data_.Get();
}
inline void StorageChange::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StorageChange::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.StorageChange.data)
}
inline void StorageChange::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.StorageChange.data)
}
inline void StorageChange::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.StorageChange.data)
}
inline std::string* StorageChange::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StorageChange::release_data() {
  // @@protoc_insertion_point(field_release:remote.StorageChange.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorageChange::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.StorageChange.data)
}

// -------------------------------------------------------------------

// AccountChange

// .types.H160 address = 1;
inline bool AccountChange::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool AccountChange::has_address() const {
  return _internal_has_address();
}
inline const ::types::H160& AccountChange::_internal_address() const {
  const ::types::H160* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& AccountChange::address() const {
  // @@protoc_insertion_point(field_get:remote.AccountChange.address)
  return _internal_address();
}
inline void AccountChange::unsafe_arena_set_allocated_address(
    ::types::H160* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.AccountChange.address)
}
inline ::types::H160* AccountChange::release_address() {
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H160* AccountChange::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:remote.AccountChange.address)
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::types::H160* AccountChange::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::types::H160* AccountChange::mutable_address() {
  // @@protoc_insertion_point(field_mutable:remote.AccountChange.address)
  return _internal_mutable_address();
}
inline void AccountChange::set_allocated_address(::types::H160* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:remote.AccountChange.address)
}

// uint64 incarnation = 2;
inline void AccountChange::clear_incarnation() {
  incarnation_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountChange::_internal_incarnation() const {
  return incarnation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccountChange::incarnation() const {
  // @@protoc_insertion_point(field_get:remote.AccountChange.incarnation)
  return _internal_incarnation();
}
inline void AccountChange::_internal_set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  incarnation_ = value;
}
inline void AccountChange::set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_incarnation(value);
  // @@protoc_insertion_point(field_set:remote.AccountChange.incarnation)
}

// .remote.Action action = 3;
inline void AccountChange::clear_action() {
  action_ = 0;
}
inline ::remote::Action AccountChange::_internal_action() const {
  return static_cast< ::remote::Action >(action_);
}
inline ::remote::Action AccountChange::action() const {
  // @@protoc_insertion_point(field_get:remote.AccountChange.action)
  return _internal_action();
}
inline void AccountChange::_internal_set_action(::remote::Action value) {
  
  action_ = value;
}
inline void AccountChange::set_action(::remote::Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:remote.AccountChange.action)
}

// bytes data = 4;
inline void AccountChange::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& AccountChange::data() const {
  // @@protoc_insertion_point(field_get:remote.AccountChange.data)
  return _internal_data();
}
inline void AccountChange::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:remote.AccountChange.data)
}
inline std::string* AccountChange::mutable_data() {
  // @@protoc_insertion_point(field_mutable:remote.AccountChange.data)
  return _internal_mutable_data();
}
inline const std::string& AccountChange::_internal_data() const {
  return data_.Get();
}
inline void AccountChange::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountChange::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.AccountChange.data)
}
inline void AccountChange::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.AccountChange.data)
}
inline void AccountChange::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.AccountChange.data)
}
inline std::string* AccountChange::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountChange::release_data() {
  // @@protoc_insertion_point(field_release:remote.AccountChange.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountChange::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.AccountChange.data)
}

// bytes code = 5;
inline void AccountChange::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& AccountChange::code() const {
  // @@protoc_insertion_point(field_get:remote.AccountChange.code)
  return _internal_code();
}
inline void AccountChange::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:remote.AccountChange.code)
}
inline std::string* AccountChange::mutable_code() {
  // @@protoc_insertion_point(field_mutable:remote.AccountChange.code)
  return _internal_mutable_code();
}
inline const std::string& AccountChange::_internal_code() const {
  return code_.Get();
}
inline void AccountChange::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountChange::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.AccountChange.code)
}
inline void AccountChange::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.AccountChange.code)
}
inline void AccountChange::set_code(const void* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.AccountChange.code)
}
inline std::string* AccountChange::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountChange::release_code() {
  // @@protoc_insertion_point(field_release:remote.AccountChange.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountChange::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.AccountChange.code)
}

// repeated .remote.StorageChange storage_changes = 6;
inline int AccountChange::_internal_storage_changes_size() const {
  return storage_changes_.size();
}
inline int AccountChange::storage_changes_size() const {
  return _internal_storage_changes_size();
}
inline void AccountChange::clear_storage_changes() {
  storage_changes_.Clear();
}
inline ::remote::StorageChange* AccountChange::mutable_storage_changes(int index) {
  // @@protoc_insertion_point(field_mutable:remote.AccountChange.storage_changes)
  return storage_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StorageChange >*
AccountChange::mutable_storage_changes() {
  // @@protoc_insertion_point(field_mutable_list:remote.AccountChange.storage_changes)
  return &storage_changes_;
}
inline const ::remote::StorageChange& AccountChange::_internal_storage_changes(int index) const {
  return storage_changes_.Get(index);
}
inline const ::remote::StorageChange& AccountChange::storage_changes(int index) const {
  // @@protoc_insertion_point(field_get:remote.AccountChange.storage_changes)
  return _internal_storage_changes(index);
}
inline ::remote::StorageChange* AccountChange::_internal_add_storage_changes() {
  return storage_changes_.Add();
}
inline ::remote::StorageChange* AccountChange::add_storage_changes() {
  // @@protoc_insertion_point(field_add:remote.AccountChange.storage_changes)
  return _internal_add_storage_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StorageChange >&
AccountChange::storage_changes() const {
  // @@protoc_insertion_point(field_list:remote.AccountChange.storage_changes)
  return storage_changes_;
}

// -------------------------------------------------------------------

// StateChangeBatch

// uint64 state_version_id = 1;
inline void StateChangeBatch::clear_state_version_id() {
  state_version_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangeBatch::_internal_state_version_id() const {
  return state_version_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangeBatch::state_version_id() const {
  // @@protoc_insertion_point(field_get:remote.StateChangeBatch.state_version_id)
  return _internal_state_version_id();
}
inline void StateChangeBatch::_internal_set_state_version_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  state_version_id_ = value;
}
inline void StateChangeBatch::set_state_version_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_state_version_id(value);
  // @@protoc_insertion_point(field_set:remote.StateChangeBatch.state_version_id)
}

// repeated .remote.StateChange change_batch = 2;
inline int StateChangeBatch::_internal_change_batch_size() const {
  return change_batch_.size();
}
inline int StateChangeBatch::change_batch_size() const {
  return _internal_change_batch_size();
}
inline void StateChangeBatch::clear_change_batch() {
  change_batch_.Clear();
}
inline ::remote::StateChange* StateChangeBatch::mutable_change_batch(int index) {
  // @@protoc_insertion_point(field_mutable:remote.StateChangeBatch.change_batch)
  return change_batch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StateChange >*
StateChangeBatch::mutable_change_batch() {
  // @@protoc_insertion_point(field_mutable_list:remote.StateChangeBatch.change_batch)
  return &change_batch_;
}
inline const ::remote::StateChange& StateChangeBatch::_internal_change_batch(int index) const {
  return change_batch_.Get(index);
}
inline const ::remote::StateChange& StateChangeBatch::change_batch(int index) const {
  // @@protoc_insertion_point(field_get:remote.StateChangeBatch.change_batch)
  return _internal_change_batch(index);
}
inline ::remote::StateChange* StateChangeBatch::_internal_add_change_batch() {
  return change_batch_.Add();
}
inline ::remote::StateChange* StateChangeBatch::add_change_batch() {
  // @@protoc_insertion_point(field_add:remote.StateChangeBatch.change_batch)
  return _internal_add_change_batch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::StateChange >&
StateChangeBatch::change_batch() const {
  // @@protoc_insertion_point(field_list:remote.StateChangeBatch.change_batch)
  return change_batch_;
}

// uint64 pending_block_base_fee = 3;
inline void StateChangeBatch::clear_pending_block_base_fee() {
  pending_block_base_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangeBatch::_internal_pending_block_base_fee() const {
  return pending_block_base_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangeBatch::pending_block_base_fee() const {
  // @@protoc_insertion_point(field_get:remote.StateChangeBatch.pending_block_base_fee)
  return _internal_pending_block_base_fee();
}
inline void StateChangeBatch::_internal_set_pending_block_base_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pending_block_base_fee_ = value;
}
inline void StateChangeBatch::set_pending_block_base_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pending_block_base_fee(value);
  // @@protoc_insertion_point(field_set:remote.StateChangeBatch.pending_block_base_fee)
}

// uint64 block_gas_limit = 4;
inline void StateChangeBatch::clear_block_gas_limit() {
  block_gas_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangeBatch::_internal_block_gas_limit() const {
  return block_gas_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChangeBatch::block_gas_limit() const {
  // @@protoc_insertion_point(field_get:remote.StateChangeBatch.block_gas_limit)
  return _internal_block_gas_limit();
}
inline void StateChangeBatch::_internal_set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_gas_limit_ = value;
}
inline void StateChangeBatch::set_block_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_gas_limit(value);
  // @@protoc_insertion_point(field_set:remote.StateChangeBatch.block_gas_limit)
}

// -------------------------------------------------------------------

// StateChange

// .remote.Direction direction = 1;
inline void StateChange::clear_direction() {
  direction_ = 0;
}
inline ::remote::Direction StateChange::_internal_direction() const {
  return static_cast< ::remote::Direction >(direction_);
}
inline ::remote::Direction StateChange::direction() const {
  // @@protoc_insertion_point(field_get:remote.StateChange.direction)
  return _internal_direction();
}
inline void StateChange::_internal_set_direction(::remote::Direction value) {
  
  direction_ = value;
}
inline void StateChange::set_direction(::remote::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:remote.StateChange.direction)
}

// uint64 block_height = 2;
inline void StateChange::clear_block_height() {
  block_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChange::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StateChange::block_height() const {
  // @@protoc_insertion_point(field_get:remote.StateChange.block_height)
  return _internal_block_height();
}
inline void StateChange::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_height_ = value;
}
inline void StateChange::set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:remote.StateChange.block_height)
}

// .types.H256 block_hash = 3;
inline bool StateChange::_internal_has_block_hash() const {
  return this != internal_default_instance() && block_hash_ != nullptr;
}
inline bool StateChange::has_block_hash() const {
  return _internal_has_block_hash();
}
inline const ::types::H256& StateChange::_internal_block_hash() const {
  const ::types::H256* p = block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& StateChange::block_hash() const {
  // @@protoc_insertion_point(field_get:remote.StateChange.block_hash)
  return _internal_block_hash();
}
inline void StateChange::unsafe_arena_set_allocated_block_hash(
    ::types::H256* block_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash_);
  }
  block_hash_ = block_hash;
  if (block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.StateChange.block_hash)
}
inline ::types::H256* StateChange::release_block_hash() {
  
  ::types::H256* temp = block_hash_;
  block_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* StateChange::unsafe_arena_release_block_hash() {
  // @@protoc_insertion_point(field_release:remote.StateChange.block_hash)
  
  ::types::H256* temp = block_hash_;
  block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* StateChange::_internal_mutable_block_hash() {
  
  if (block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    block_hash_ = p;
  }
  return block_hash_;
}
inline ::types::H256* StateChange::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:remote.StateChange.block_hash)
  return _internal_mutable_block_hash();
}
inline void StateChange::set_allocated_block_hash(::types::H256* block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash_);
  }
  if (block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash)->GetArena();
    if (message_arena != submessage_arena) {
      block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_hash, submessage_arena);
    }
    
  } else {
    
  }
  block_hash_ = block_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.StateChange.block_hash)
}

// repeated .remote.AccountChange changes = 4;
inline int StateChange::_internal_changes_size() const {
  return changes_.size();
}
inline int StateChange::changes_size() const {
  return _internal_changes_size();
}
inline void StateChange::clear_changes() {
  changes_.Clear();
}
inline ::remote::AccountChange* StateChange::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:remote.StateChange.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::AccountChange >*
StateChange::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:remote.StateChange.changes)
  return &changes_;
}
inline const ::remote::AccountChange& StateChange::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::remote::AccountChange& StateChange::changes(int index) const {
  // @@protoc_insertion_point(field_get:remote.StateChange.changes)
  return _internal_changes(index);
}
inline ::remote::AccountChange* StateChange::_internal_add_changes() {
  return changes_.Add();
}
inline ::remote::AccountChange* StateChange::add_changes() {
  // @@protoc_insertion_point(field_add:remote.StateChange.changes)
  return _internal_add_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::AccountChange >&
StateChange::changes() const {
  // @@protoc_insertion_point(field_list:remote.StateChange.changes)
  return changes_;
}

// repeated bytes txs = 5;
inline int StateChange::_internal_txs_size() const {
  return txs_.size();
}
inline int StateChange::txs_size() const {
  return _internal_txs_size();
}
inline void StateChange::clear_txs() {
  txs_.Clear();
}
inline std::string* StateChange::add_txs() {
  // @@protoc_insertion_point(field_add_mutable:remote.StateChange.txs)
  return _internal_add_txs();
}
inline const std::string& StateChange::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const std::string& StateChange::txs(int index) const {
  // @@protoc_insertion_point(field_get:remote.StateChange.txs)
  return _internal_txs(index);
}
inline std::string* StateChange::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:remote.StateChange.txs)
  return txs_.Mutable(index);
}
inline void StateChange::set_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:remote.StateChange.txs)
  txs_.Mutable(index)->assign(value);
}
inline void StateChange::set_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:remote.StateChange.txs)
  txs_.Mutable(index)->assign(std::move(value));
}
inline void StateChange::set_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:remote.StateChange.txs)
}
inline void StateChange::set_txs(int index, const void* value, size_t size) {
  txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:remote.StateChange.txs)
}
inline std::string* StateChange::_internal_add_txs() {
  return txs_.Add();
}
inline void StateChange::add_txs(const std::string& value) {
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:remote.StateChange.txs)
}
inline void StateChange::add_txs(std::string&& value) {
  txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:remote.StateChange.txs)
}
inline void StateChange::add_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:remote.StateChange.txs)
}
inline void StateChange::add_txs(const void* value, size_t size) {
  txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:remote.StateChange.txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StateChange::txs() const {
  // @@protoc_insertion_point(field_list:remote.StateChange.txs)
  return txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StateChange::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:remote.StateChange.txs)
  return &txs_;
}

// -------------------------------------------------------------------

// StateChangeRequest

// bool with_storage = 1;
inline void StateChangeRequest::clear_with_storage() {
  with_storage_ = false;
}
inline bool StateChangeRequest::_internal_with_storage() const {
  return with_storage_;
}
inline bool StateChangeRequest::with_storage() const {
  // @@protoc_insertion_point(field_get:remote.StateChangeRequest.with_storage)
  return _internal_with_storage();
}
inline void StateChangeRequest::_internal_set_with_storage(bool value) {
  
  with_storage_ = value;
}
inline void StateChangeRequest::set_with_storage(bool value) {
  _internal_set_with_storage(value);
  // @@protoc_insertion_point(field_set:remote.StateChangeRequest.with_storage)
}

// bool with_transactions = 2;
inline void StateChangeRequest::clear_with_transactions() {
  with_transactions_ = false;
}
inline bool StateChangeRequest::_internal_with_transactions() const {
  return with_transactions_;
}
inline bool StateChangeRequest::with_transactions() const {
  // @@protoc_insertion_point(field_get:remote.StateChangeRequest.with_transactions)
  return _internal_with_transactions();
}
inline void StateChangeRequest::_internal_set_with_transactions(bool value) {
  
  with_transactions_ = value;
}
inline void StateChangeRequest::set_with_transactions(bool value) {
  _internal_set_with_transactions(value);
  // @@protoc_insertion_point(field_set:remote.StateChangeRequest.with_transactions)
}

// -------------------------------------------------------------------

// SnapshotsRequest

// -------------------------------------------------------------------

// SnapshotsReply

// repeated string blocks_files = 1;
inline int SnapshotsReply::_internal_blocks_files_size() const {
  return blocks_files_.size();
}
inline int SnapshotsReply::blocks_files_size() const {
  return _internal_blocks_files_size();
}
inline void SnapshotsReply::clear_blocks_files() {
  blocks_files_.Clear();
}
inline std::string* SnapshotsReply::add_blocks_files() {
  // @@protoc_insertion_point(field_add_mutable:remote.SnapshotsReply.blocks_files)
  return _internal_add_blocks_files();
}
inline const std::string& SnapshotsReply::_internal_blocks_files(int index) const {
  return blocks_files_.Get(index);
}
inline const std::string& SnapshotsReply::blocks_files(int index) const {
  // @@protoc_insertion_point(field_get:remote.SnapshotsReply.blocks_files)
  return _internal_blocks_files(index);
}
inline std::string* SnapshotsReply::mutable_blocks_files(int index) {
  // @@protoc_insertion_point(field_mutable:remote.SnapshotsReply.blocks_files)
  return blocks_files_.Mutable(index);
}
inline void SnapshotsReply::set_blocks_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:remote.SnapshotsReply.blocks_files)
  blocks_files_.Mutable(index)->assign(value);
}
inline void SnapshotsReply::set_blocks_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:remote.SnapshotsReply.blocks_files)
  blocks_files_.Mutable(index)->assign(std::move(value));
}
inline void SnapshotsReply::set_blocks_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocks_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:remote.SnapshotsReply.blocks_files)
}
inline void SnapshotsReply::set_blocks_files(int index, const char* value, size_t size) {
  blocks_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:remote.SnapshotsReply.blocks_files)
}
inline std::string* SnapshotsReply::_internal_add_blocks_files() {
  return blocks_files_.Add();
}
inline void SnapshotsReply::add_blocks_files(const std::string& value) {
  blocks_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:remote.SnapshotsReply.blocks_files)
}
inline void SnapshotsReply::add_blocks_files(std::string&& value) {
  blocks_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:remote.SnapshotsReply.blocks_files)
}
inline void SnapshotsReply::add_blocks_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blocks_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:remote.SnapshotsReply.blocks_files)
}
inline void SnapshotsReply::add_blocks_files(const char* value, size_t size) {
  blocks_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:remote.SnapshotsReply.blocks_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnapshotsReply::blocks_files() const {
  // @@protoc_insertion_point(field_list:remote.SnapshotsReply.blocks_files)
  return blocks_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnapshotsReply::mutable_blocks_files() {
  // @@protoc_insertion_point(field_mutable_list:remote.SnapshotsReply.blocks_files)
  return &blocks_files_;
}

// repeated string history_files = 2;
inline int SnapshotsReply::_internal_history_files_size() const {
  return history_files_.size();
}
inline int SnapshotsReply::history_files_size() const {
  return _internal_history_files_size();
}
inline void SnapshotsReply::clear_history_files() {
  history_files_.Clear();
}
inline std::string* SnapshotsReply::add_history_files() {
  // @@protoc_insertion_point(field_add_mutable:remote.SnapshotsReply.history_files)
  return _internal_add_history_files();
}
inline const std::string& SnapshotsReply::_internal_history_files(int index) const {
  return history_files_.Get(index);
}
inline const std::string& SnapshotsReply::history_files(int index) const {
  // @@protoc_insertion_point(field_get:remote.SnapshotsReply.history_files)
  return _internal_history_files(index);
}
inline std::string* SnapshotsReply::mutable_history_files(int index) {
  // @@protoc_insertion_point(field_mutable:remote.SnapshotsReply.history_files)
  return history_files_.Mutable(index);
}
inline void SnapshotsReply::set_history_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:remote.SnapshotsReply.history_files)
  history_files_.Mutable(index)->assign(value);
}
inline void SnapshotsReply::set_history_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:remote.SnapshotsReply.history_files)
  history_files_.Mutable(index)->assign(std::move(value));
}
inline void SnapshotsReply::set_history_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  history_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:remote.SnapshotsReply.history_files)
}
inline void SnapshotsReply::set_history_files(int index, const char* value, size_t size) {
  history_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:remote.SnapshotsReply.history_files)
}
inline std::string* SnapshotsReply::_internal_add_history_files() {
  return history_files_.Add();
}
inline void SnapshotsReply::add_history_files(const std::string& value) {
  history_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:remote.SnapshotsReply.history_files)
}
inline void SnapshotsReply::add_history_files(std::string&& value) {
  history_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:remote.SnapshotsReply.history_files)
}
inline void SnapshotsReply::add_history_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  history_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:remote.SnapshotsReply.history_files)
}
inline void SnapshotsReply::add_history_files(const char* value, size_t size) {
  history_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:remote.SnapshotsReply.history_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnapshotsReply::history_files() const {
  // @@protoc_insertion_point(field_list:remote.SnapshotsReply.history_files)
  return history_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnapshotsReply::mutable_history_files() {
  // @@protoc_insertion_point(field_mutable_list:remote.SnapshotsReply.history_files)
  return &history_files_;
}

// -------------------------------------------------------------------

// RangeReq

// uint64 tx_id = 1;
inline void RangeReq::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RangeReq::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RangeReq::tx_id() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.tx_id)
  return _internal_tx_id();
}
inline void RangeReq::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void RangeReq::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.tx_id)
}

// string table = 2;
inline void RangeReq::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& RangeReq::table() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.table)
  return _internal_table();
}
inline void RangeReq::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.table)
}
inline std::string* RangeReq::mutable_table() {
  // @@protoc_insertion_point(field_mutable:remote.RangeReq.table)
  return _internal_mutable_table();
}
inline const std::string& RangeReq::_internal_table() const {
  return table_.Get();
}
inline void RangeReq::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RangeReq::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.RangeReq.table)
}
inline void RangeReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.RangeReq.table)
}
inline void RangeReq::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.RangeReq.table)
}
inline std::string* RangeReq::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RangeReq::release_table() {
  // @@protoc_insertion_point(field_release:remote.RangeReq.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RangeReq::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.RangeReq.table)
}

// bytes from_prefix = 3;
inline void RangeReq::clear_from_prefix() {
  from_prefix_.ClearToEmpty();
}
inline const std::string& RangeReq::from_prefix() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.from_prefix)
  return _internal_from_prefix();
}
inline void RangeReq::set_from_prefix(const std::string& value) {
  _internal_set_from_prefix(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.from_prefix)
}
inline std::string* RangeReq::mutable_from_prefix() {
  // @@protoc_insertion_point(field_mutable:remote.RangeReq.from_prefix)
  return _internal_mutable_from_prefix();
}
inline const std::string& RangeReq::_internal_from_prefix() const {
  return from_prefix_.Get();
}
inline void RangeReq::_internal_set_from_prefix(const std::string& value) {
  
  from_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RangeReq::set_from_prefix(std::string&& value) {
  
  from_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.RangeReq.from_prefix)
}
inline void RangeReq::set_from_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.RangeReq.from_prefix)
}
inline void RangeReq::set_from_prefix(const void* value,
    size_t size) {
  
  from_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.RangeReq.from_prefix)
}
inline std::string* RangeReq::_internal_mutable_from_prefix() {
  
  return from_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RangeReq::release_from_prefix() {
  // @@protoc_insertion_point(field_release:remote.RangeReq.from_prefix)
  return from_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RangeReq::set_allocated_from_prefix(std::string* from_prefix) {
  if (from_prefix != nullptr) {
    
  } else {
    
  }
  from_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.RangeReq.from_prefix)
}

// bytes to_prefix = 4;
inline void RangeReq::clear_to_prefix() {
  to_prefix_.ClearToEmpty();
}
inline const std::string& RangeReq::to_prefix() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.to_prefix)
  return _internal_to_prefix();
}
inline void RangeReq::set_to_prefix(const std::string& value) {
  _internal_set_to_prefix(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.to_prefix)
}
inline std::string* RangeReq::mutable_to_prefix() {
  // @@protoc_insertion_point(field_mutable:remote.RangeReq.to_prefix)
  return _internal_mutable_to_prefix();
}
inline const std::string& RangeReq::_internal_to_prefix() const {
  return to_prefix_.Get();
}
inline void RangeReq::_internal_set_to_prefix(const std::string& value) {
  
  to_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RangeReq::set_to_prefix(std::string&& value) {
  
  to_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.RangeReq.to_prefix)
}
inline void RangeReq::set_to_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.RangeReq.to_prefix)
}
inline void RangeReq::set_to_prefix(const void* value,
    size_t size) {
  
  to_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.RangeReq.to_prefix)
}
inline std::string* RangeReq::_internal_mutable_to_prefix() {
  
  return to_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RangeReq::release_to_prefix() {
  // @@protoc_insertion_point(field_release:remote.RangeReq.to_prefix)
  return to_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RangeReq::set_allocated_to_prefix(std::string* to_prefix) {
  if (to_prefix != nullptr) {
    
  } else {
    
  }
  to_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.RangeReq.to_prefix)
}

// bool order_ascend = 5;
inline void RangeReq::clear_order_ascend() {
  order_ascend_ = false;
}
inline bool RangeReq::_internal_order_ascend() const {
  return order_ascend_;
}
inline bool RangeReq::order_ascend() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.order_ascend)
  return _internal_order_ascend();
}
inline void RangeReq::_internal_set_order_ascend(bool value) {
  
  order_ascend_ = value;
}
inline void RangeReq::set_order_ascend(bool value) {
  _internal_set_order_ascend(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.order_ascend)
}

// sint64 limit = 6;
inline void RangeReq::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeReq::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeReq::limit() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.limit)
  return _internal_limit();
}
inline void RangeReq::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void RangeReq::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.limit)
}

// int32 page_size = 7;
inline void RangeReq::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RangeReq::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RangeReq::page_size() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.page_size)
  return _internal_page_size();
}
inline void RangeReq::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void RangeReq::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.page_size)
}

// string page_token = 8;
inline void RangeReq::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& RangeReq::page_token() const {
  // @@protoc_insertion_point(field_get:remote.RangeReq.page_token)
  return _internal_page_token();
}
inline void RangeReq::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:remote.RangeReq.page_token)
}
inline std::string* RangeReq::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:remote.RangeReq.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& RangeReq::_internal_page_token() const {
  return page_token_.Get();
}
inline void RangeReq::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RangeReq::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.RangeReq.page_token)
}
inline void RangeReq::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.RangeReq.page_token)
}
inline void RangeReq::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.RangeReq.page_token)
}
inline std::string* RangeReq::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RangeReq::release_page_token() {
  // @@protoc_insertion_point(field_release:remote.RangeReq.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RangeReq::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.RangeReq.page_token)
}

// -------------------------------------------------------------------

// DomainGetReq

// uint64 tx_id = 1;
inline void DomainGetReq::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainGetReq::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainGetReq::tx_id() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReq.tx_id)
  return _internal_tx_id();
}
inline void DomainGetReq::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void DomainGetReq::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReq.tx_id)
}

// string table = 2;
inline void DomainGetReq::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& DomainGetReq::table() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReq.table)
  return _internal_table();
}
inline void DomainGetReq::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReq.table)
}
inline std::string* DomainGetReq::mutable_table() {
  // @@protoc_insertion_point(field_mutable:remote.DomainGetReq.table)
  return _internal_mutable_table();
}
inline const std::string& DomainGetReq::_internal_table() const {
  return table_.Get();
}
inline void DomainGetReq::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainGetReq::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainGetReq.table)
}
inline void DomainGetReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainGetReq.table)
}
inline void DomainGetReq::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainGetReq.table)
}
inline std::string* DomainGetReq::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainGetReq::release_table() {
  // @@protoc_insertion_point(field_release:remote.DomainGetReq.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainGetReq::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainGetReq.table)
}

// bytes k = 3;
inline void DomainGetReq::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& DomainGetReq::k() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReq.k)
  return _internal_k();
}
inline void DomainGetReq::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReq.k)
}
inline std::string* DomainGetReq::mutable_k() {
  // @@protoc_insertion_point(field_mutable:remote.DomainGetReq.k)
  return _internal_mutable_k();
}
inline const std::string& DomainGetReq::_internal_k() const {
  return k_.Get();
}
inline void DomainGetReq::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainGetReq::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainGetReq.k)
}
inline void DomainGetReq::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainGetReq.k)
}
inline void DomainGetReq::set_k(const void* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainGetReq.k)
}
inline std::string* DomainGetReq::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainGetReq::release_k() {
  // @@protoc_insertion_point(field_release:remote.DomainGetReq.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainGetReq::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainGetReq.k)
}

// uint64 ts = 4;
inline void DomainGetReq::clear_ts() {
  ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainGetReq::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainGetReq::ts() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReq.ts)
  return _internal_ts();
}
inline void DomainGetReq::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ts_ = value;
}
inline void DomainGetReq::set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReq.ts)
}

// bytes k2 = 5;
inline void DomainGetReq::clear_k2() {
  k2_.ClearToEmpty();
}
inline const std::string& DomainGetReq::k2() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReq.k2)
  return _internal_k2();
}
inline void DomainGetReq::set_k2(const std::string& value) {
  _internal_set_k2(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReq.k2)
}
inline std::string* DomainGetReq::mutable_k2() {
  // @@protoc_insertion_point(field_mutable:remote.DomainGetReq.k2)
  return _internal_mutable_k2();
}
inline const std::string& DomainGetReq::_internal_k2() const {
  return k2_.Get();
}
inline void DomainGetReq::_internal_set_k2(const std::string& value) {
  
  k2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainGetReq::set_k2(std::string&& value) {
  
  k2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainGetReq.k2)
}
inline void DomainGetReq::set_k2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainGetReq.k2)
}
inline void DomainGetReq::set_k2(const void* value,
    size_t size) {
  
  k2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainGetReq.k2)
}
inline std::string* DomainGetReq::_internal_mutable_k2() {
  
  return k2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainGetReq::release_k2() {
  // @@protoc_insertion_point(field_release:remote.DomainGetReq.k2)
  return k2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainGetReq::set_allocated_k2(std::string* k2) {
  if (k2 != nullptr) {
    
  } else {
    
  }
  k2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainGetReq.k2)
}

// bool latest = 6;
inline void DomainGetReq::clear_latest() {
  latest_ = false;
}
inline bool DomainGetReq::_internal_latest() const {
  return latest_;
}
inline bool DomainGetReq::latest() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReq.latest)
  return _internal_latest();
}
inline void DomainGetReq::_internal_set_latest(bool value) {
  
  latest_ = value;
}
inline void DomainGetReq::set_latest(bool value) {
  _internal_set_latest(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReq.latest)
}

// -------------------------------------------------------------------

// DomainGetReply

// bytes v = 1;
inline void DomainGetReply::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& DomainGetReply::v() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReply.v)
  return _internal_v();
}
inline void DomainGetReply::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReply.v)
}
inline std::string* DomainGetReply::mutable_v() {
  // @@protoc_insertion_point(field_mutable:remote.DomainGetReply.v)
  return _internal_mutable_v();
}
inline const std::string& DomainGetReply::_internal_v() const {
  return v_.Get();
}
inline void DomainGetReply::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainGetReply::set_v(std::string&& value) {
  
  v_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainGetReply.v)
}
inline void DomainGetReply::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainGetReply.v)
}
inline void DomainGetReply::set_v(const void* value,
    size_t size) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainGetReply.v)
}
inline std::string* DomainGetReply::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainGetReply::release_v() {
  // @@protoc_insertion_point(field_release:remote.DomainGetReply.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainGetReply::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainGetReply.v)
}

// bool ok = 2;
inline void DomainGetReply::clear_ok() {
  ok_ = false;
}
inline bool DomainGetReply::_internal_ok() const {
  return ok_;
}
inline bool DomainGetReply::ok() const {
  // @@protoc_insertion_point(field_get:remote.DomainGetReply.ok)
  return _internal_ok();
}
inline void DomainGetReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void DomainGetReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:remote.DomainGetReply.ok)
}

// -------------------------------------------------------------------

// HistoryGetReq

// uint64 tx_id = 1;
inline void HistoryGetReq::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryGetReq::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryGetReq::tx_id() const {
  // @@protoc_insertion_point(field_get:remote.HistoryGetReq.tx_id)
  return _internal_tx_id();
}
inline void HistoryGetReq::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void HistoryGetReq::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:remote.HistoryGetReq.tx_id)
}

// string table = 2;
inline void HistoryGetReq::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& HistoryGetReq::table() const {
  // @@protoc_insertion_point(field_get:remote.HistoryGetReq.table)
  return _internal_table();
}
inline void HistoryGetReq::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:remote.HistoryGetReq.table)
}
inline std::string* HistoryGetReq::mutable_table() {
  // @@protoc_insertion_point(field_mutable:remote.HistoryGetReq.table)
  return _internal_mutable_table();
}
inline const std::string& HistoryGetReq::_internal_table() const {
  return table_.Get();
}
inline void HistoryGetReq::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistoryGetReq::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.HistoryGetReq.table)
}
inline void HistoryGetReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.HistoryGetReq.table)
}
inline void HistoryGetReq::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.HistoryGetReq.table)
}
inline std::string* HistoryGetReq::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistoryGetReq::release_table() {
  // @@protoc_insertion_point(field_release:remote.HistoryGetReq.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryGetReq::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.HistoryGetReq.table)
}

// bytes k = 3;
inline void HistoryGetReq::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& HistoryGetReq::k() const {
  // @@protoc_insertion_point(field_get:remote.HistoryGetReq.k)
  return _internal_k();
}
inline void HistoryGetReq::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:remote.HistoryGetReq.k)
}
inline std::string* HistoryGetReq::mutable_k() {
  // @@protoc_insertion_point(field_mutable:remote.HistoryGetReq.k)
  return _internal_mutable_k();
}
inline const std::string& HistoryGetReq::_internal_k() const {
  return k_.Get();
}
inline void HistoryGetReq::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistoryGetReq::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.HistoryGetReq.k)
}
inline void HistoryGetReq::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.HistoryGetReq.k)
}
inline void HistoryGetReq::set_k(const void* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.HistoryGetReq.k)
}
inline std::string* HistoryGetReq::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistoryGetReq::release_k() {
  // @@protoc_insertion_point(field_release:remote.HistoryGetReq.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryGetReq::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.HistoryGetReq.k)
}

// uint64 ts = 4;
inline void HistoryGetReq::clear_ts() {
  ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryGetReq::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryGetReq::ts() const {
  // @@protoc_insertion_point(field_get:remote.HistoryGetReq.ts)
  return _internal_ts();
}
inline void HistoryGetReq::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ts_ = value;
}
inline void HistoryGetReq::set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:remote.HistoryGetReq.ts)
}

// -------------------------------------------------------------------

// HistoryGetReply

// bytes v = 1;
inline void HistoryGetReply::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& HistoryGetReply::v() const {
  // @@protoc_insertion_point(field_get:remote.HistoryGetReply.v)
  return _internal_v();
}
inline void HistoryGetReply::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:remote.HistoryGetReply.v)
}
inline std::string* HistoryGetReply::mutable_v() {
  // @@protoc_insertion_point(field_mutable:remote.HistoryGetReply.v)
  return _internal_mutable_v();
}
inline const std::string& HistoryGetReply::_internal_v() const {
  return v_.Get();
}
inline void HistoryGetReply::_internal_set_v(const std::string& value) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistoryGetReply::set_v(std::string&& value) {
  
  v_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.HistoryGetReply.v)
}
inline void HistoryGetReply::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.HistoryGetReply.v)
}
inline void HistoryGetReply::set_v(const void* value,
    size_t size) {
  
  v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.HistoryGetReply.v)
}
inline std::string* HistoryGetReply::_internal_mutable_v() {
  
  return v_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistoryGetReply::release_v() {
  // @@protoc_insertion_point(field_release:remote.HistoryGetReply.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryGetReply::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.HistoryGetReply.v)
}

// bool ok = 2;
inline void HistoryGetReply::clear_ok() {
  ok_ = false;
}
inline bool HistoryGetReply::_internal_ok() const {
  return ok_;
}
inline bool HistoryGetReply::ok() const {
  // @@protoc_insertion_point(field_get:remote.HistoryGetReply.ok)
  return _internal_ok();
}
inline void HistoryGetReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void HistoryGetReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:remote.HistoryGetReply.ok)
}

// -------------------------------------------------------------------

// IndexRangeReq

// uint64 tx_id = 1;
inline void IndexRangeReq::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndexRangeReq::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndexRangeReq::tx_id() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.tx_id)
  return _internal_tx_id();
}
inline void IndexRangeReq::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void IndexRangeReq::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.tx_id)
}

// string table = 2;
inline void IndexRangeReq::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& IndexRangeReq::table() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.table)
  return _internal_table();
}
inline void IndexRangeReq::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.table)
}
inline std::string* IndexRangeReq::mutable_table() {
  // @@protoc_insertion_point(field_mutable:remote.IndexRangeReq.table)
  return _internal_mutable_table();
}
inline const std::string& IndexRangeReq::_internal_table() const {
  return table_.Get();
}
inline void IndexRangeReq::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IndexRangeReq::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.IndexRangeReq.table)
}
inline void IndexRangeReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.IndexRangeReq.table)
}
inline void IndexRangeReq::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.IndexRangeReq.table)
}
inline std::string* IndexRangeReq::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IndexRangeReq::release_table() {
  // @@protoc_insertion_point(field_release:remote.IndexRangeReq.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IndexRangeReq::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.IndexRangeReq.table)
}

// bytes k = 3;
inline void IndexRangeReq::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& IndexRangeReq::k() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.k)
  return _internal_k();
}
inline void IndexRangeReq::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.k)
}
inline std::string* IndexRangeReq::mutable_k() {
  // @@protoc_insertion_point(field_mutable:remote.IndexRangeReq.k)
  return _internal_mutable_k();
}
inline const std::string& IndexRangeReq::_internal_k() const {
  return k_.Get();
}
inline void IndexRangeReq::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IndexRangeReq::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.IndexRangeReq.k)
}
inline void IndexRangeReq::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.IndexRangeReq.k)
}
inline void IndexRangeReq::set_k(const void* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.IndexRangeReq.k)
}
inline std::string* IndexRangeReq::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IndexRangeReq::release_k() {
  // @@protoc_insertion_point(field_release:remote.IndexRangeReq.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IndexRangeReq::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.IndexRangeReq.k)
}

// sint64 from_ts = 4;
inline void IndexRangeReq::clear_from_ts() {
  from_ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexRangeReq::_internal_from_ts() const {
  return from_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexRangeReq::from_ts() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.from_ts)
  return _internal_from_ts();
}
inline void IndexRangeReq::_internal_set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_ts_ = value;
}
inline void IndexRangeReq::set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_ts(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.from_ts)
}

// sint64 to_ts = 5;
inline void IndexRangeReq::clear_to_ts() {
  to_ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexRangeReq::_internal_to_ts() const {
  return to_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexRangeReq::to_ts() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.to_ts)
  return _internal_to_ts();
}
inline void IndexRangeReq::_internal_set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_ts_ = value;
}
inline void IndexRangeReq::set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_ts(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.to_ts)
}

// bool order_ascend = 6;
inline void IndexRangeReq::clear_order_ascend() {
  order_ascend_ = false;
}
inline bool IndexRangeReq::_internal_order_ascend() const {
  return order_ascend_;
}
inline bool IndexRangeReq::order_ascend() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.order_ascend)
  return _internal_order_ascend();
}
inline void IndexRangeReq::_internal_set_order_ascend(bool value) {
  
  order_ascend_ = value;
}
inline void IndexRangeReq::set_order_ascend(bool value) {
  _internal_set_order_ascend(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.order_ascend)
}

// sint64 limit = 7;
inline void IndexRangeReq::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexRangeReq::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexRangeReq::limit() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.limit)
  return _internal_limit();
}
inline void IndexRangeReq::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void IndexRangeReq::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.limit)
}

// int32 page_size = 8;
inline void IndexRangeReq::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexRangeReq::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexRangeReq::page_size() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.page_size)
  return _internal_page_size();
}
inline void IndexRangeReq::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void IndexRangeReq::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.page_size)
}

// string page_token = 9;
inline void IndexRangeReq::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& IndexRangeReq::page_token() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReq.page_token)
  return _internal_page_token();
}
inline void IndexRangeReq::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReq.page_token)
}
inline std::string* IndexRangeReq::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:remote.IndexRangeReq.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& IndexRangeReq::_internal_page_token() const {
  return page_token_.Get();
}
inline void IndexRangeReq::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IndexRangeReq::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.IndexRangeReq.page_token)
}
inline void IndexRangeReq::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.IndexRangeReq.page_token)
}
inline void IndexRangeReq::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.IndexRangeReq.page_token)
}
inline std::string* IndexRangeReq::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IndexRangeReq::release_page_token() {
  // @@protoc_insertion_point(field_release:remote.IndexRangeReq.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IndexRangeReq::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.IndexRangeReq.page_token)
}

// -------------------------------------------------------------------

// IndexRangeReply

// repeated uint64 timestamps = 1;
inline int IndexRangeReply::_internal_timestamps_size() const {
  return timestamps_.size();
}
inline int IndexRangeReply::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void IndexRangeReply::clear_timestamps() {
  timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndexRangeReply::_internal_timestamps(int index) const {
  return timestamps_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndexRangeReply::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReply.timestamps)
  return _internal_timestamps(index);
}
inline void IndexRangeReply::set_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReply.timestamps)
}
inline void IndexRangeReply::_internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  timestamps_.Add(value);
}
inline void IndexRangeReply::add_timestamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_timestamps(value);
  // @@protoc_insertion_point(field_add:remote.IndexRangeReply.timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
IndexRangeReply::_internal_timestamps() const {
  return timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
IndexRangeReply::timestamps() const {
  // @@protoc_insertion_point(field_list:remote.IndexRangeReply.timestamps)
  return _internal_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
IndexRangeReply::_internal_mutable_timestamps() {
  return &timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
IndexRangeReply::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:remote.IndexRangeReply.timestamps)
  return _internal_mutable_timestamps();
}

// string next_page_token = 2;
inline void IndexRangeReply::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& IndexRangeReply::next_page_token() const {
  // @@protoc_insertion_point(field_get:remote.IndexRangeReply.next_page_token)
  return _internal_next_page_token();
}
inline void IndexRangeReply::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:remote.IndexRangeReply.next_page_token)
}
inline std::string* IndexRangeReply::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:remote.IndexRangeReply.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& IndexRangeReply::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void IndexRangeReply::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IndexRangeReply::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.IndexRangeReply.next_page_token)
}
inline void IndexRangeReply::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.IndexRangeReply.next_page_token)
}
inline void IndexRangeReply::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.IndexRangeReply.next_page_token)
}
inline std::string* IndexRangeReply::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IndexRangeReply::release_next_page_token() {
  // @@protoc_insertion_point(field_release:remote.IndexRangeReply.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IndexRangeReply::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.IndexRangeReply.next_page_token)
}

// -------------------------------------------------------------------

// HistoryRangeReq

// uint64 tx_id = 1;
inline void HistoryRangeReq::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryRangeReq::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryRangeReq::tx_id() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.tx_id)
  return _internal_tx_id();
}
inline void HistoryRangeReq::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void HistoryRangeReq::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.tx_id)
}

// string table = 2;
inline void HistoryRangeReq::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& HistoryRangeReq::table() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.table)
  return _internal_table();
}
inline void HistoryRangeReq::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.table)
}
inline std::string* HistoryRangeReq::mutable_table() {
  // @@protoc_insertion_point(field_mutable:remote.HistoryRangeReq.table)
  return _internal_mutable_table();
}
inline const std::string& HistoryRangeReq::_internal_table() const {
  return table_.Get();
}
inline void HistoryRangeReq::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistoryRangeReq::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.HistoryRangeReq.table)
}
inline void HistoryRangeReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.HistoryRangeReq.table)
}
inline void HistoryRangeReq::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.HistoryRangeReq.table)
}
inline std::string* HistoryRangeReq::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistoryRangeReq::release_table() {
  // @@protoc_insertion_point(field_release:remote.HistoryRangeReq.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryRangeReq::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.HistoryRangeReq.table)
}

// sint64 from_ts = 4;
inline void HistoryRangeReq::clear_from_ts() {
  from_ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRangeReq::_internal_from_ts() const {
  return from_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRangeReq::from_ts() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.from_ts)
  return _internal_from_ts();
}
inline void HistoryRangeReq::_internal_set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_ts_ = value;
}
inline void HistoryRangeReq::set_from_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_ts(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.from_ts)
}

// sint64 to_ts = 5;
inline void HistoryRangeReq::clear_to_ts() {
  to_ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRangeReq::_internal_to_ts() const {
  return to_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRangeReq::to_ts() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.to_ts)
  return _internal_to_ts();
}
inline void HistoryRangeReq::_internal_set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_ts_ = value;
}
inline void HistoryRangeReq::set_to_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_ts(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.to_ts)
}

// bool order_ascend = 6;
inline void HistoryRangeReq::clear_order_ascend() {
  order_ascend_ = false;
}
inline bool HistoryRangeReq::_internal_order_ascend() const {
  return order_ascend_;
}
inline bool HistoryRangeReq::order_ascend() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.order_ascend)
  return _internal_order_ascend();
}
inline void HistoryRangeReq::_internal_set_order_ascend(bool value) {
  
  order_ascend_ = value;
}
inline void HistoryRangeReq::set_order_ascend(bool value) {
  _internal_set_order_ascend(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.order_ascend)
}

// sint64 limit = 7;
inline void HistoryRangeReq::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRangeReq::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HistoryRangeReq::limit() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.limit)
  return _internal_limit();
}
inline void HistoryRangeReq::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void HistoryRangeReq::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.limit)
}

// int32 page_size = 8;
inline void HistoryRangeReq::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRangeReq::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRangeReq::page_size() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.page_size)
  return _internal_page_size();
}
inline void HistoryRangeReq::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void HistoryRangeReq::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.page_size)
}

// string page_token = 9;
inline void HistoryRangeReq::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& HistoryRangeReq::page_token() const {
  // @@protoc_insertion_point(field_get:remote.HistoryRangeReq.page_token)
  return _internal_page_token();
}
inline void HistoryRangeReq::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:remote.HistoryRangeReq.page_token)
}
inline std::string* HistoryRangeReq::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:remote.HistoryRangeReq.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& HistoryRangeReq::_internal_page_token() const {
  return page_token_.Get();
}
inline void HistoryRangeReq::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistoryRangeReq::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.HistoryRangeReq.page_token)
}
inline void HistoryRangeReq::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.HistoryRangeReq.page_token)
}
inline void HistoryRangeReq::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.HistoryRangeReq.page_token)
}
inline std::string* HistoryRangeReq::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistoryRangeReq::release_page_token() {
  // @@protoc_insertion_point(field_release:remote.HistoryRangeReq.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryRangeReq::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.HistoryRangeReq.page_token)
}

// -------------------------------------------------------------------

// DomainRangeReq

// uint64 tx_id = 1;
inline void DomainRangeReq::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainRangeReq::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainRangeReq::tx_id() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.tx_id)
  return _internal_tx_id();
}
inline void DomainRangeReq::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void DomainRangeReq::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.tx_id)
}

// string table = 2;
inline void DomainRangeReq::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& DomainRangeReq::table() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.table)
  return _internal_table();
}
inline void DomainRangeReq::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.table)
}
inline std::string* DomainRangeReq::mutable_table() {
  // @@protoc_insertion_point(field_mutable:remote.DomainRangeReq.table)
  return _internal_mutable_table();
}
inline const std::string& DomainRangeReq::_internal_table() const {
  return table_.Get();
}
inline void DomainRangeReq::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainRangeReq::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainRangeReq.table)
}
inline void DomainRangeReq::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainRangeReq.table)
}
inline void DomainRangeReq::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainRangeReq.table)
}
inline std::string* DomainRangeReq::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainRangeReq::release_table() {
  // @@protoc_insertion_point(field_release:remote.DomainRangeReq.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainRangeReq::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainRangeReq.table)
}

// bytes from_key = 3;
inline void DomainRangeReq::clear_from_key() {
  from_key_.ClearToEmpty();
}
inline const std::string& DomainRangeReq::from_key() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.from_key)
  return _internal_from_key();
}
inline void DomainRangeReq::set_from_key(const std::string& value) {
  _internal_set_from_key(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.from_key)
}
inline std::string* DomainRangeReq::mutable_from_key() {
  // @@protoc_insertion_point(field_mutable:remote.DomainRangeReq.from_key)
  return _internal_mutable_from_key();
}
inline const std::string& DomainRangeReq::_internal_from_key() const {
  return from_key_.Get();
}
inline void DomainRangeReq::_internal_set_from_key(const std::string& value) {
  
  from_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainRangeReq::set_from_key(std::string&& value) {
  
  from_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainRangeReq.from_key)
}
inline void DomainRangeReq::set_from_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainRangeReq.from_key)
}
inline void DomainRangeReq::set_from_key(const void* value,
    size_t size) {
  
  from_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainRangeReq.from_key)
}
inline std::string* DomainRangeReq::_internal_mutable_from_key() {
  
  return from_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainRangeReq::release_from_key() {
  // @@protoc_insertion_point(field_release:remote.DomainRangeReq.from_key)
  return from_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainRangeReq::set_allocated_from_key(std::string* from_key) {
  if (from_key != nullptr) {
    
  } else {
    
  }
  from_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainRangeReq.from_key)
}

// bytes to_key = 4;
inline void DomainRangeReq::clear_to_key() {
  to_key_.ClearToEmpty();
}
inline const std::string& DomainRangeReq::to_key() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.to_key)
  return _internal_to_key();
}
inline void DomainRangeReq::set_to_key(const std::string& value) {
  _internal_set_to_key(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.to_key)
}
inline std::string* DomainRangeReq::mutable_to_key() {
  // @@protoc_insertion_point(field_mutable:remote.DomainRangeReq.to_key)
  return _internal_mutable_to_key();
}
inline const std::string& DomainRangeReq::_internal_to_key() const {
  return to_key_.Get();
}
inline void DomainRangeReq::_internal_set_to_key(const std::string& value) {
  
  to_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainRangeReq::set_to_key(std::string&& value) {
  
  to_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainRangeReq.to_key)
}
inline void DomainRangeReq::set_to_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainRangeReq.to_key)
}
inline void DomainRangeReq::set_to_key(const void* value,
    size_t size) {
  
  to_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainRangeReq.to_key)
}
inline std::string* DomainRangeReq::_internal_mutable_to_key() {
  
  return to_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainRangeReq::release_to_key() {
  // @@protoc_insertion_point(field_release:remote.DomainRangeReq.to_key)
  return to_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainRangeReq::set_allocated_to_key(std::string* to_key) {
  if (to_key != nullptr) {
    
  } else {
    
  }
  to_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainRangeReq.to_key)
}

// uint64 ts = 5;
inline void DomainRangeReq::clear_ts() {
  ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainRangeReq::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DomainRangeReq::ts() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.ts)
  return _internal_ts();
}
inline void DomainRangeReq::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ts_ = value;
}
inline void DomainRangeReq::set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.ts)
}

// bool latest = 6;
inline void DomainRangeReq::clear_latest() {
  latest_ = false;
}
inline bool DomainRangeReq::_internal_latest() const {
  return latest_;
}
inline bool DomainRangeReq::latest() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.latest)
  return _internal_latest();
}
inline void DomainRangeReq::_internal_set_latest(bool value) {
  
  latest_ = value;
}
inline void DomainRangeReq::set_latest(bool value) {
  _internal_set_latest(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.latest)
}

// bool order_ascend = 7;
inline void DomainRangeReq::clear_order_ascend() {
  order_ascend_ = false;
}
inline bool DomainRangeReq::_internal_order_ascend() const {
  return order_ascend_;
}
inline bool DomainRangeReq::order_ascend() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.order_ascend)
  return _internal_order_ascend();
}
inline void DomainRangeReq::_internal_set_order_ascend(bool value) {
  
  order_ascend_ = value;
}
inline void DomainRangeReq::set_order_ascend(bool value) {
  _internal_set_order_ascend(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.order_ascend)
}

// sint64 limit = 8;
inline void DomainRangeReq::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DomainRangeReq::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DomainRangeReq::limit() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.limit)
  return _internal_limit();
}
inline void DomainRangeReq::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void DomainRangeReq::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.limit)
}

// int32 page_size = 9;
inline void DomainRangeReq::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DomainRangeReq::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DomainRangeReq::page_size() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.page_size)
  return _internal_page_size();
}
inline void DomainRangeReq::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void DomainRangeReq::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.page_size)
}

// string page_token = 10;
inline void DomainRangeReq::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& DomainRangeReq::page_token() const {
  // @@protoc_insertion_point(field_get:remote.DomainRangeReq.page_token)
  return _internal_page_token();
}
inline void DomainRangeReq::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:remote.DomainRangeReq.page_token)
}
inline std::string* DomainRangeReq::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:remote.DomainRangeReq.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& DomainRangeReq::_internal_page_token() const {
  return page_token_.Get();
}
inline void DomainRangeReq::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DomainRangeReq::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.DomainRangeReq.page_token)
}
inline void DomainRangeReq::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.DomainRangeReq.page_token)
}
inline void DomainRangeReq::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.DomainRangeReq.page_token)
}
inline std::string* DomainRangeReq::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DomainRangeReq::release_page_token() {
  // @@protoc_insertion_point(field_release:remote.DomainRangeReq.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DomainRangeReq::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.DomainRangeReq.page_token)
}

// -------------------------------------------------------------------

// Pairs

// repeated bytes keys = 1;
inline int Pairs::_internal_keys_size() const {
  return keys_.size();
}
inline int Pairs::keys_size() const {
  return _internal_keys_size();
}
inline void Pairs::clear_keys() {
  keys_.Clear();
}
inline std::string* Pairs::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:remote.Pairs.keys)
  return _internal_add_keys();
}
inline const std::string& Pairs::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& Pairs::keys(int index) const {
  // @@protoc_insertion_point(field_get:remote.Pairs.keys)
  return _internal_keys(index);
}
inline std::string* Pairs::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:remote.Pairs.keys)
  return keys_.Mutable(index);
}
inline void Pairs::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:remote.Pairs.keys)
  keys_.Mutable(index)->assign(value);
}
inline void Pairs::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:remote.Pairs.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void Pairs::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:remote.Pairs.keys)
}
inline void Pairs::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:remote.Pairs.keys)
}
inline std::string* Pairs::_internal_add_keys() {
  return keys_.Add();
}
inline void Pairs::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:remote.Pairs.keys)
}
inline void Pairs::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:remote.Pairs.keys)
}
inline void Pairs::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:remote.Pairs.keys)
}
inline void Pairs::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:remote.Pairs.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pairs::keys() const {
  // @@protoc_insertion_point(field_list:remote.Pairs.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pairs::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:remote.Pairs.keys)
  return &keys_;
}

// repeated bytes values = 2;
inline int Pairs::_internal_values_size() const {
  return values_.size();
}
inline int Pairs::values_size() const {
  return _internal_values_size();
}
inline void Pairs::clear_values() {
  values_.Clear();
}
inline std::string* Pairs::add_values() {
  // @@protoc_insertion_point(field_add_mutable:remote.Pairs.values)
  return _internal_add_values();
}
inline const std::string& Pairs::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& Pairs::values(int index) const {
  // @@protoc_insertion_point(field_get:remote.Pairs.values)
  return _internal_values(index);
}
inline std::string* Pairs::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:remote.Pairs.values)
  return values_.Mutable(index);
}
inline void Pairs::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:remote.Pairs.values)
  values_.Mutable(index)->assign(value);
}
inline void Pairs::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:remote.Pairs.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void Pairs::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:remote.Pairs.values)
}
inline void Pairs::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:remote.Pairs.values)
}
inline std::string* Pairs::_internal_add_values() {
  return values_.Add();
}
inline void Pairs::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:remote.Pairs.values)
}
inline void Pairs::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:remote.Pairs.values)
}
inline void Pairs::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:remote.Pairs.values)
}
inline void Pairs::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:remote.Pairs.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pairs::values() const {
  // @@protoc_insertion_point(field_list:remote.Pairs.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pairs::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:remote.Pairs.values)
  return &values_;
}

// string next_page_token = 3;
inline void Pairs::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& Pairs::next_page_token() const {
  // @@protoc_insertion_point(field_get:remote.Pairs.next_page_token)
  return _internal_next_page_token();
}
inline void Pairs::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:remote.Pairs.next_page_token)
}
inline std::string* Pairs::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:remote.Pairs.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& Pairs::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void Pairs::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Pairs::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Pairs.next_page_token)
}
inline void Pairs::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Pairs.next_page_token)
}
inline void Pairs::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Pairs.next_page_token)
}
inline std::string* Pairs::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Pairs::release_next_page_token() {
  // @@protoc_insertion_point(field_release:remote.Pairs.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pairs::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Pairs.next_page_token)
}

// -------------------------------------------------------------------

// ParisPagination

// bytes next_key = 1;
inline void ParisPagination::clear_next_key() {
  next_key_.ClearToEmpty();
}
inline const std::string& ParisPagination::next_key() const {
  // @@protoc_insertion_point(field_get:remote.ParisPagination.next_key)
  return _internal_next_key();
}
inline void ParisPagination::set_next_key(const std::string& value) {
  _internal_set_next_key(value);
  // @@protoc_insertion_point(field_set:remote.ParisPagination.next_key)
}
inline std::string* ParisPagination::mutable_next_key() {
  // @@protoc_insertion_point(field_mutable:remote.ParisPagination.next_key)
  return _internal_mutable_next_key();
}
inline const std::string& ParisPagination::_internal_next_key() const {
  return next_key_.Get();
}
inline void ParisPagination::_internal_set_next_key(const std::string& value) {
  
  next_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParisPagination::set_next_key(std::string&& value) {
  
  next_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.ParisPagination.next_key)
}
inline void ParisPagination::set_next_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.ParisPagination.next_key)
}
inline void ParisPagination::set_next_key(const void* value,
    size_t size) {
  
  next_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.ParisPagination.next_key)
}
inline std::string* ParisPagination::_internal_mutable_next_key() {
  
  return next_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParisPagination::release_next_key() {
  // @@protoc_insertion_point(field_release:remote.ParisPagination.next_key)
  return next_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParisPagination::set_allocated_next_key(std::string* next_key) {
  if (next_key != nullptr) {
    
  } else {
    
  }
  next_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.ParisPagination.next_key)
}

// sint64 limit = 2;
inline void ParisPagination::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ParisPagination::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ParisPagination::limit() const {
  // @@protoc_insertion_point(field_get:remote.ParisPagination.limit)
  return _internal_limit();
}
inline void ParisPagination::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void ParisPagination::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:remote.ParisPagination.limit)
}

// -------------------------------------------------------------------

// IndexPagination

// sint64 next_time_stamp = 1;
inline void IndexPagination::clear_next_time_stamp() {
  next_time_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexPagination::_internal_next_time_stamp() const {
  return next_time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexPagination::next_time_stamp() const {
  // @@protoc_insertion_point(field_get:remote.IndexPagination.next_time_stamp)
  return _internal_next_time_stamp();
}
inline void IndexPagination::_internal_set_next_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  next_time_stamp_ = value;
}
inline void IndexPagination::set_next_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_next_time_stamp(value);
  // @@protoc_insertion_point(field_set:remote.IndexPagination.next_time_stamp)
}

// sint64 limit = 2;
inline void IndexPagination::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexPagination::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexPagination::limit() const {
  // @@protoc_insertion_point(field_get:remote.IndexPagination.limit)
  return _internal_limit();
}
inline void IndexPagination::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void IndexPagination::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:remote.IndexPagination.limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::remote::Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::remote::Op>() {
  return ::remote::Op_descriptor();
}
template <> struct is_proto_enum< ::remote::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::remote::Action>() {
  return ::remote::Action_descriptor();
}
template <> struct is_proto_enum< ::remote::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::remote::Direction>() {
  return ::remote::Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remote_2fkv_2eproto
