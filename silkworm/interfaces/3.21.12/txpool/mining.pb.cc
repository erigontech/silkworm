// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/mining.proto

#include "txpool/mining.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace txpool {
PROTOBUF_CONSTEXPR OnPendingBlockRequest::OnPendingBlockRequest(
    ::_pbi::ConstantInitialized) {}
struct OnPendingBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnPendingBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnPendingBlockRequestDefaultTypeInternal() {}
  union {
    OnPendingBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnPendingBlockRequestDefaultTypeInternal _OnPendingBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR OnPendingBlockReply::OnPendingBlockReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpl_block_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnPendingBlockReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnPendingBlockReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnPendingBlockReplyDefaultTypeInternal() {}
  union {
    OnPendingBlockReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnPendingBlockReplyDefaultTypeInternal _OnPendingBlockReply_default_instance_;
PROTOBUF_CONSTEXPR OnMinedBlockRequest::OnMinedBlockRequest(
    ::_pbi::ConstantInitialized) {}
struct OnMinedBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnMinedBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnMinedBlockRequestDefaultTypeInternal() {}
  union {
    OnMinedBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnMinedBlockRequestDefaultTypeInternal _OnMinedBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR OnMinedBlockReply::OnMinedBlockReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpl_block_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnMinedBlockReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnMinedBlockReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnMinedBlockReplyDefaultTypeInternal() {}
  union {
    OnMinedBlockReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnMinedBlockReplyDefaultTypeInternal _OnMinedBlockReply_default_instance_;
PROTOBUF_CONSTEXPR OnPendingLogsRequest::OnPendingLogsRequest(
    ::_pbi::ConstantInitialized) {}
struct OnPendingLogsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnPendingLogsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnPendingLogsRequestDefaultTypeInternal() {}
  union {
    OnPendingLogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnPendingLogsRequestDefaultTypeInternal _OnPendingLogsRequest_default_instance_;
PROTOBUF_CONSTEXPR OnPendingLogsReply::OnPendingLogsReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpl_logs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnPendingLogsReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnPendingLogsReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnPendingLogsReplyDefaultTypeInternal() {}
  union {
    OnPendingLogsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnPendingLogsReplyDefaultTypeInternal _OnPendingLogsReply_default_instance_;
PROTOBUF_CONSTEXPR GetWorkRequest::GetWorkRequest(
    ::_pbi::ConstantInitialized) {}
struct GetWorkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkRequestDefaultTypeInternal() {}
  union {
    GetWorkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkRequestDefaultTypeInternal _GetWorkRequest_default_instance_;
PROTOBUF_CONSTEXPR GetWorkReply::GetWorkReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.seed_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorkReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkReplyDefaultTypeInternal() {}
  union {
    GetWorkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkReplyDefaultTypeInternal _GetWorkReply_default_instance_;
PROTOBUF_CONSTEXPR SubmitWorkRequest::SubmitWorkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pow_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitWorkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitWorkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitWorkRequestDefaultTypeInternal() {}
  union {
    SubmitWorkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitWorkRequestDefaultTypeInternal _SubmitWorkRequest_default_instance_;
PROTOBUF_CONSTEXPR SubmitWorkReply::SubmitWorkReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitWorkReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitWorkReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitWorkReplyDefaultTypeInternal() {}
  union {
    SubmitWorkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitWorkReplyDefaultTypeInternal _SubmitWorkReply_default_instance_;
PROTOBUF_CONSTEXPR SubmitHashRateRequest::SubmitHashRateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rate_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitHashRateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitHashRateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitHashRateRequestDefaultTypeInternal() {}
  union {
    SubmitHashRateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitHashRateRequestDefaultTypeInternal _SubmitHashRateRequest_default_instance_;
PROTOBUF_CONSTEXPR SubmitHashRateReply::SubmitHashRateReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitHashRateReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitHashRateReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitHashRateReplyDefaultTypeInternal() {}
  union {
    SubmitHashRateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitHashRateReplyDefaultTypeInternal _SubmitHashRateReply_default_instance_;
PROTOBUF_CONSTEXPR HashRateRequest::HashRateRequest(
    ::_pbi::ConstantInitialized) {}
struct HashRateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashRateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashRateRequestDefaultTypeInternal() {}
  union {
    HashRateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashRateRequestDefaultTypeInternal _HashRateRequest_default_instance_;
PROTOBUF_CONSTEXPR HashRateReply::HashRateReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_rate_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HashRateReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashRateReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashRateReplyDefaultTypeInternal() {}
  union {
    HashRateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashRateReplyDefaultTypeInternal _HashRateReply_default_instance_;
PROTOBUF_CONSTEXPR MiningRequest::MiningRequest(
    ::_pbi::ConstantInitialized) {}
struct MiningRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MiningRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MiningRequestDefaultTypeInternal() {}
  union {
    MiningRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MiningRequestDefaultTypeInternal _MiningRequest_default_instance_;
PROTOBUF_CONSTEXPR MiningReply::MiningReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.running_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MiningReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MiningReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MiningReplyDefaultTypeInternal() {}
  union {
    MiningReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MiningReplyDefaultTypeInternal _MiningReply_default_instance_;
}  // namespace txpool
static ::_pb::Metadata file_level_metadata_txpool_2fmining_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_txpool_2fmining_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_txpool_2fmining_2eproto = nullptr;

const uint32_t TableStruct_txpool_2fmining_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingBlockReply, _impl_.rpl_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnMinedBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnMinedBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::OnMinedBlockReply, _impl_.rpl_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingLogsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingLogsReply, _impl_.rpl_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, _impl_.header_hash_),
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, _impl_.seed_hash_),
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, _impl_.block_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, _impl_.block_nonce_),
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, _impl_.pow_hash_),
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, _impl_.digest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkReply, _impl_.ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateRequest, _impl_.rate_),
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateReply, _impl_.ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::HashRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::HashRateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::HashRateReply, _impl_.hash_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::MiningRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::MiningReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::MiningReply, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::txpool::MiningReply, _impl_.running_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::txpool::OnPendingBlockRequest)},
  { 6, -1, -1, sizeof(::txpool::OnPendingBlockReply)},
  { 13, -1, -1, sizeof(::txpool::OnMinedBlockRequest)},
  { 19, -1, -1, sizeof(::txpool::OnMinedBlockReply)},
  { 26, -1, -1, sizeof(::txpool::OnPendingLogsRequest)},
  { 32, -1, -1, sizeof(::txpool::OnPendingLogsReply)},
  { 39, -1, -1, sizeof(::txpool::GetWorkRequest)},
  { 45, -1, -1, sizeof(::txpool::GetWorkReply)},
  { 55, -1, -1, sizeof(::txpool::SubmitWorkRequest)},
  { 64, -1, -1, sizeof(::txpool::SubmitWorkReply)},
  { 71, -1, -1, sizeof(::txpool::SubmitHashRateRequest)},
  { 79, -1, -1, sizeof(::txpool::SubmitHashRateReply)},
  { 86, -1, -1, sizeof(::txpool::HashRateRequest)},
  { 92, -1, -1, sizeof(::txpool::HashRateReply)},
  { 99, -1, -1, sizeof(::txpool::MiningRequest)},
  { 105, -1, -1, sizeof(::txpool::MiningReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::txpool::_OnPendingBlockRequest_default_instance_._instance,
  &::txpool::_OnPendingBlockReply_default_instance_._instance,
  &::txpool::_OnMinedBlockRequest_default_instance_._instance,
  &::txpool::_OnMinedBlockReply_default_instance_._instance,
  &::txpool::_OnPendingLogsRequest_default_instance_._instance,
  &::txpool::_OnPendingLogsReply_default_instance_._instance,
  &::txpool::_GetWorkRequest_default_instance_._instance,
  &::txpool::_GetWorkReply_default_instance_._instance,
  &::txpool::_SubmitWorkRequest_default_instance_._instance,
  &::txpool::_SubmitWorkReply_default_instance_._instance,
  &::txpool::_SubmitHashRateRequest_default_instance_._instance,
  &::txpool::_SubmitHashRateReply_default_instance_._instance,
  &::txpool::_HashRateRequest_default_instance_._instance,
  &::txpool::_HashRateReply_default_instance_._instance,
  &::txpool::_MiningRequest_default_instance_._instance,
  &::txpool::_MiningReply_default_instance_._instance,
};

const char descriptor_table_protodef_txpool_2fmining_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023txpool/mining.proto\022\006txpool\032\033google/pr"
  "otobuf/empty.proto\032\021types/types.proto\"\027\n"
  "\025OnPendingBlockRequest\"(\n\023OnPendingBlock"
  "Reply\022\021\n\trpl_block\030\001 \001(\014\"\025\n\023OnMinedBlock"
  "Request\"&\n\021OnMinedBlockReply\022\021\n\trpl_bloc"
  "k\030\001 \001(\014\"\026\n\024OnPendingLogsRequest\"&\n\022OnPen"
  "dingLogsReply\022\020\n\010rpl_logs\030\001 \001(\014\"\020\n\016GetWo"
  "rkRequest\"\\\n\014GetWorkReply\022\023\n\013header_hash"
  "\030\001 \001(\t\022\021\n\tseed_hash\030\002 \001(\t\022\016\n\006target\030\003 \001("
  "\t\022\024\n\014block_number\030\004 \001(\t\"J\n\021SubmitWorkReq"
  "uest\022\023\n\013block_nonce\030\001 \001(\014\022\020\n\010pow_hash\030\002 "
  "\001(\014\022\016\n\006digest\030\003 \001(\014\"\035\n\017SubmitWorkReply\022\n"
  "\n\002ok\030\001 \001(\010\"1\n\025SubmitHashRateRequest\022\014\n\004r"
  "ate\030\001 \001(\004\022\n\n\002id\030\002 \001(\014\"!\n\023SubmitHashRateR"
  "eply\022\n\n\002ok\030\001 \001(\010\"\021\n\017HashRateRequest\"\"\n\rH"
  "ashRateReply\022\021\n\thash_rate\030\001 \001(\004\"\017\n\rMinin"
  "gRequest\"/\n\013MiningReply\022\017\n\007enabled\030\001 \001(\010"
  "\022\017\n\007running\030\002 \001(\0102\342\004\n\006Mining\0226\n\007Version\022"
  "\026.google.protobuf.Empty\032\023.types.VersionR"
  "eply\022N\n\016OnPendingBlock\022\035.txpool.OnPendin"
  "gBlockRequest\032\033.txpool.OnPendingBlockRep"
  "ly0\001\022H\n\014OnMinedBlock\022\033.txpool.OnMinedBlo"
  "ckRequest\032\031.txpool.OnMinedBlockReply0\001\022K"
  "\n\rOnPendingLogs\022\034.txpool.OnPendingLogsRe"
  "quest\032\032.txpool.OnPendingLogsReply0\001\0227\n\007G"
  "etWork\022\026.txpool.GetWorkRequest\032\024.txpool."
  "GetWorkReply\022@\n\nSubmitWork\022\031.txpool.Subm"
  "itWorkRequest\032\027.txpool.SubmitWorkReply\022L"
  "\n\016SubmitHashRate\022\035.txpool.SubmitHashRate"
  "Request\032\033.txpool.SubmitHashRateReply\022:\n\010"
  "HashRate\022\027.txpool.HashRateRequest\032\025.txpo"
  "ol.HashRateReply\0224\n\006Mining\022\025.txpool.Mini"
  "ngRequest\032\023.txpool.MiningReplyB\021Z\017./txpo"
  "ol;txpoolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_txpool_2fmining_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_txpool_2fmining_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_txpool_2fmining_2eproto = {
    false, false, 1337, descriptor_table_protodef_txpool_2fmining_2eproto,
    "txpool/mining.proto",
    &descriptor_table_txpool_2fmining_2eproto_once, descriptor_table_txpool_2fmining_2eproto_deps, 2, 16,
    schemas, file_default_instances, TableStruct_txpool_2fmining_2eproto::offsets,
    file_level_metadata_txpool_2fmining_2eproto, file_level_enum_descriptors_txpool_2fmining_2eproto,
    file_level_service_descriptors_txpool_2fmining_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_txpool_2fmining_2eproto_getter() {
  return &descriptor_table_txpool_2fmining_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_txpool_2fmining_2eproto(&descriptor_table_txpool_2fmining_2eproto);
namespace txpool {

// ===================================================================

class OnPendingBlockRequest::_Internal {
 public:
};

OnPendingBlockRequest::OnPendingBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingBlockRequest)
}
OnPendingBlockRequest::OnPendingBlockRequest(const OnPendingBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  OnPendingBlockRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingBlockRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnPendingBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnPendingBlockRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnPendingBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[0]);
}

// ===================================================================

class OnPendingBlockReply::_Internal {
 public:
};

OnPendingBlockReply::OnPendingBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingBlockReply)
}
OnPendingBlockReply::OnPendingBlockReply(const OnPendingBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnPendingBlockReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rpl_block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpl_block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rpl_block().empty()) {
    _this->_impl_.rpl_block_.Set(from._internal_rpl_block(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingBlockReply)
}

inline void OnPendingBlockReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_block_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rpl_block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpl_block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OnPendingBlockReply::~OnPendingBlockReply() {
  // @@protoc_insertion_point(destructor:txpool.OnPendingBlockReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnPendingBlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rpl_block_.Destroy();
}

void OnPendingBlockReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnPendingBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnPendingBlockReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rpl_block_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnPendingBlockReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes rpl_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rpl_block();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnPendingBlockReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnPendingBlockReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (!this->_internal_rpl_block().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rpl_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnPendingBlockReply)
  return target;
}

size_t OnPendingBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnPendingBlockReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (!this->_internal_rpl_block().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rpl_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnPendingBlockReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnPendingBlockReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnPendingBlockReply::GetClassData() const { return &_class_data_; }


void OnPendingBlockReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnPendingBlockReply*>(&to_msg);
  auto& from = static_cast<const OnPendingBlockReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnPendingBlockReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rpl_block().empty()) {
    _this->_internal_set_rpl_block(from._internal_rpl_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnPendingBlockReply::CopyFrom(const OnPendingBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnPendingBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnPendingBlockReply::IsInitialized() const {
  return true;
}

void OnPendingBlockReply::InternalSwap(OnPendingBlockReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rpl_block_, lhs_arena,
      &other->_impl_.rpl_block_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OnPendingBlockReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[1]);
}

// ===================================================================

class OnMinedBlockRequest::_Internal {
 public:
};

OnMinedBlockRequest::OnMinedBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.OnMinedBlockRequest)
}
OnMinedBlockRequest::OnMinedBlockRequest(const OnMinedBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  OnMinedBlockRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnMinedBlockRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnMinedBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnMinedBlockRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnMinedBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[2]);
}

// ===================================================================

class OnMinedBlockReply::_Internal {
 public:
};

OnMinedBlockReply::OnMinedBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.OnMinedBlockReply)
}
OnMinedBlockReply::OnMinedBlockReply(const OnMinedBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnMinedBlockReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rpl_block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpl_block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rpl_block().empty()) {
    _this->_impl_.rpl_block_.Set(from._internal_rpl_block(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.OnMinedBlockReply)
}

inline void OnMinedBlockReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_block_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rpl_block_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpl_block_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OnMinedBlockReply::~OnMinedBlockReply() {
  // @@protoc_insertion_point(destructor:txpool.OnMinedBlockReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnMinedBlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rpl_block_.Destroy();
}

void OnMinedBlockReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnMinedBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnMinedBlockReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rpl_block_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnMinedBlockReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes rpl_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rpl_block();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnMinedBlockReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnMinedBlockReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (!this->_internal_rpl_block().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rpl_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnMinedBlockReply)
  return target;
}

size_t OnMinedBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnMinedBlockReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (!this->_internal_rpl_block().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rpl_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnMinedBlockReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnMinedBlockReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnMinedBlockReply::GetClassData() const { return &_class_data_; }


void OnMinedBlockReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnMinedBlockReply*>(&to_msg);
  auto& from = static_cast<const OnMinedBlockReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnMinedBlockReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rpl_block().empty()) {
    _this->_internal_set_rpl_block(from._internal_rpl_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnMinedBlockReply::CopyFrom(const OnMinedBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnMinedBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnMinedBlockReply::IsInitialized() const {
  return true;
}

void OnMinedBlockReply::InternalSwap(OnMinedBlockReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rpl_block_, lhs_arena,
      &other->_impl_.rpl_block_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OnMinedBlockReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[3]);
}

// ===================================================================

class OnPendingLogsRequest::_Internal {
 public:
};

OnPendingLogsRequest::OnPendingLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingLogsRequest)
}
OnPendingLogsRequest::OnPendingLogsRequest(const OnPendingLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  OnPendingLogsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingLogsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnPendingLogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnPendingLogsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnPendingLogsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[4]);
}

// ===================================================================

class OnPendingLogsReply::_Internal {
 public:
};

OnPendingLogsReply::OnPendingLogsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingLogsReply)
}
OnPendingLogsReply::OnPendingLogsReply(const OnPendingLogsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnPendingLogsReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_logs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rpl_logs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpl_logs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rpl_logs().empty()) {
    _this->_impl_.rpl_logs_.Set(from._internal_rpl_logs(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingLogsReply)
}

inline void OnPendingLogsReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_logs_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rpl_logs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpl_logs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OnPendingLogsReply::~OnPendingLogsReply() {
  // @@protoc_insertion_point(destructor:txpool.OnPendingLogsReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnPendingLogsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rpl_logs_.Destroy();
}

void OnPendingLogsReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnPendingLogsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnPendingLogsReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rpl_logs_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnPendingLogsReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes rpl_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rpl_logs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnPendingLogsReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnPendingLogsReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rpl_logs = 1;
  if (!this->_internal_rpl_logs().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rpl_logs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnPendingLogsReply)
  return target;
}

size_t OnPendingLogsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnPendingLogsReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rpl_logs = 1;
  if (!this->_internal_rpl_logs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rpl_logs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnPendingLogsReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnPendingLogsReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnPendingLogsReply::GetClassData() const { return &_class_data_; }


void OnPendingLogsReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnPendingLogsReply*>(&to_msg);
  auto& from = static_cast<const OnPendingLogsReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnPendingLogsReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rpl_logs().empty()) {
    _this->_internal_set_rpl_logs(from._internal_rpl_logs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnPendingLogsReply::CopyFrom(const OnPendingLogsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnPendingLogsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnPendingLogsReply::IsInitialized() const {
  return true;
}

void OnPendingLogsReply::InternalSwap(OnPendingLogsReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rpl_logs_, lhs_arena,
      &other->_impl_.rpl_logs_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OnPendingLogsReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[5]);
}

// ===================================================================

class GetWorkRequest::_Internal {
 public:
};

GetWorkRequest::GetWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.GetWorkRequest)
}
GetWorkRequest::GetWorkRequest(const GetWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetWorkRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.GetWorkRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetWorkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[6]);
}

// ===================================================================

class GetWorkReply::_Internal {
 public:
};

GetWorkReply::GetWorkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.GetWorkReply)
}
GetWorkReply::GetWorkReply(const GetWorkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorkReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_hash_){}
    , decltype(_impl_.seed_hash_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.block_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.header_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header_hash().empty()) {
    _this->_impl_.header_hash_.Set(from._internal_header_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.seed_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seed_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seed_hash().empty()) {
    _this->_impl_.seed_hash_.Set(from._internal_seed_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_number().empty()) {
    _this->_impl_.block_number_.Set(from._internal_block_number(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.GetWorkReply)
}

inline void GetWorkReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_hash_){}
    , decltype(_impl_.seed_hash_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.block_number_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.header_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.header_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.seed_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seed_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWorkReply::~GetWorkReply() {
  // @@protoc_insertion_point(destructor:txpool.GetWorkReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_hash_.Destroy();
  _impl_.seed_hash_.Destroy();
  _impl_.target_.Destroy();
  _impl_.block_number_.Destroy();
}

void GetWorkReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.GetWorkReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_hash_.ClearToEmpty();
  _impl_.seed_hash_.ClearToEmpty();
  _impl_.target_.ClearToEmpty();
  _impl_.block_number_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string header_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "txpool.GetWorkReply.header_hash"));
        } else
          goto handle_unusual;
        continue;
      // string seed_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_seed_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "txpool.GetWorkReply.seed_hash"));
        } else
          goto handle_unusual;
        continue;
      // string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "txpool.GetWorkReply.target"));
        } else
          goto handle_unusual;
        continue;
      // string block_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "txpool.GetWorkReply.block_number"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.GetWorkReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_hash = 1;
  if (!this->_internal_header_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_hash().data(), static_cast<int>(this->_internal_header_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.header_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_hash(), target);
  }

  // string seed_hash = 2;
  if (!this->_internal_seed_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seed_hash().data(), static_cast<int>(this->_internal_seed_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.seed_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_seed_hash(), target);
  }

  // string target = 3;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  // string block_number = 4;
  if (!this->_internal_block_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_number().data(), static_cast<int>(this->_internal_block_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.block_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_block_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.GetWorkReply)
  return target;
}

size_t GetWorkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.GetWorkReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header_hash = 1;
  if (!this->_internal_header_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_hash());
  }

  // string seed_hash = 2;
  if (!this->_internal_seed_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seed_hash());
  }

  // string target = 3;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string block_number = 4;
  if (!this->_internal_block_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorkReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkReply::GetClassData() const { return &_class_data_; }


void GetWorkReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorkReply*>(&to_msg);
  auto& from = static_cast<const GetWorkReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.GetWorkReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header_hash().empty()) {
    _this->_internal_set_header_hash(from._internal_header_hash());
  }
  if (!from._internal_seed_hash().empty()) {
    _this->_internal_set_seed_hash(from._internal_seed_hash());
  }
  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (!from._internal_block_number().empty()) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkReply::CopyFrom(const GetWorkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.GetWorkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkReply::IsInitialized() const {
  return true;
}

void GetWorkReply::InternalSwap(GetWorkReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.header_hash_, lhs_arena,
      &other->_impl_.header_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seed_hash_, lhs_arena,
      &other->_impl_.seed_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_number_, lhs_arena,
      &other->_impl_.block_number_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[7]);
}

// ===================================================================

class SubmitWorkRequest::_Internal {
 public:
};

SubmitWorkRequest::SubmitWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitWorkRequest)
}
SubmitWorkRequest::SubmitWorkRequest(const SubmitWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitWorkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_nonce_){}
    , decltype(_impl_.pow_hash_){}
    , decltype(_impl_.digest_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_nonce().empty()) {
    _this->_impl_.block_nonce_.Set(from._internal_block_nonce(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pow_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pow_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pow_hash().empty()) {
    _this->_impl_.pow_hash_.Set(from._internal_pow_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_digest().empty()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitWorkRequest)
}

inline void SubmitWorkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_nonce_){}
    , decltype(_impl_.pow_hash_){}
    , decltype(_impl_.digest_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pow_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pow_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmitWorkRequest::~SubmitWorkRequest() {
  // @@protoc_insertion_point(destructor:txpool.SubmitWorkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_nonce_.Destroy();
  _impl_.pow_hash_.Destroy();
  _impl_.digest_.Destroy();
}

void SubmitWorkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitWorkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_nonce_.ClearToEmpty();
  _impl_.pow_hash_.ClearToEmpty();
  _impl_.digest_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitWorkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pow_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pow_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes digest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitWorkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitWorkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_nonce = 1;
  if (!this->_internal_block_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_nonce(), target);
  }

  // bytes pow_hash = 2;
  if (!this->_internal_pow_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pow_hash(), target);
  }

  // bytes digest = 3;
  if (!this->_internal_digest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitWorkRequest)
  return target;
}

size_t SubmitWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitWorkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_nonce = 1;
  if (!this->_internal_block_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_nonce());
  }

  // bytes pow_hash = 2;
  if (!this->_internal_pow_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pow_hash());
  }

  // bytes digest = 3;
  if (!this->_internal_digest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitWorkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitWorkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitWorkRequest::GetClassData() const { return &_class_data_; }


void SubmitWorkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitWorkRequest*>(&to_msg);
  auto& from = static_cast<const SubmitWorkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitWorkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_nonce().empty()) {
    _this->_internal_set_block_nonce(from._internal_block_nonce());
  }
  if (!from._internal_pow_hash().empty()) {
    _this->_internal_set_pow_hash(from._internal_pow_hash());
  }
  if (!from._internal_digest().empty()) {
    _this->_internal_set_digest(from._internal_digest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitWorkRequest::CopyFrom(const SubmitWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitWorkRequest::IsInitialized() const {
  return true;
}

void SubmitWorkRequest::InternalSwap(SubmitWorkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_nonce_, lhs_arena,
      &other->_impl_.block_nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pow_hash_, lhs_arena,
      &other->_impl_.pow_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitWorkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[8]);
}

// ===================================================================

class SubmitWorkReply::_Internal {
 public:
};

SubmitWorkReply::SubmitWorkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitWorkReply)
}
SubmitWorkReply::SubmitWorkReply(const SubmitWorkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitWorkReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitWorkReply)
}

inline void SubmitWorkReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmitWorkReply::~SubmitWorkReply() {
  // @@protoc_insertion_point(destructor:txpool.SubmitWorkReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitWorkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubmitWorkReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitWorkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitWorkReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitWorkReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitWorkReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitWorkReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitWorkReply)
  return target;
}

size_t SubmitWorkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitWorkReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitWorkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitWorkReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitWorkReply::GetClassData() const { return &_class_data_; }


void SubmitWorkReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitWorkReply*>(&to_msg);
  auto& from = static_cast<const SubmitWorkReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitWorkReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitWorkReply::CopyFrom(const SubmitWorkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitWorkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitWorkReply::IsInitialized() const {
  return true;
}

void SubmitWorkReply::InternalSwap(SubmitWorkReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitWorkReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[9]);
}

// ===================================================================

class SubmitHashRateRequest::_Internal {
 public:
};

SubmitHashRateRequest::SubmitHashRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitHashRateRequest)
}
SubmitHashRateRequest::SubmitHashRateRequest(const SubmitHashRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitHashRateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.rate_ = from._impl_.rate_;
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitHashRateRequest)
}

inline void SubmitHashRateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rate_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmitHashRateRequest::~SubmitHashRateRequest() {
  // @@protoc_insertion_point(destructor:txpool.SubmitHashRateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitHashRateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void SubmitHashRateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitHashRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitHashRateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.rate_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitHashRateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitHashRateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitHashRateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rate = 1;
  if (this->_internal_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rate(), target);
  }

  // bytes id = 2;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitHashRateRequest)
  return target;
}

size_t SubmitHashRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitHashRateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // uint64 rate = 1;
  if (this->_internal_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitHashRateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitHashRateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitHashRateRequest::GetClassData() const { return &_class_data_; }


void SubmitHashRateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitHashRateRequest*>(&to_msg);
  auto& from = static_cast<const SubmitHashRateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitHashRateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_rate() != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitHashRateRequest::CopyFrom(const SubmitHashRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitHashRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitHashRateRequest::IsInitialized() const {
  return true;
}

void SubmitHashRateRequest::InternalSwap(SubmitHashRateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.rate_, other->_impl_.rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitHashRateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[10]);
}

// ===================================================================

class SubmitHashRateReply::_Internal {
 public:
};

SubmitHashRateReply::SubmitHashRateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitHashRateReply)
}
SubmitHashRateReply::SubmitHashRateReply(const SubmitHashRateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitHashRateReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitHashRateReply)
}

inline void SubmitHashRateReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubmitHashRateReply::~SubmitHashRateReply() {
  // @@protoc_insertion_point(destructor:txpool.SubmitHashRateReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitHashRateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubmitHashRateReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitHashRateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitHashRateReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitHashRateReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitHashRateReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitHashRateReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitHashRateReply)
  return target;
}

size_t SubmitHashRateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitHashRateReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitHashRateReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitHashRateReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitHashRateReply::GetClassData() const { return &_class_data_; }


void SubmitHashRateReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitHashRateReply*>(&to_msg);
  auto& from = static_cast<const SubmitHashRateReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitHashRateReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitHashRateReply::CopyFrom(const SubmitHashRateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitHashRateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitHashRateReply::IsInitialized() const {
  return true;
}

void SubmitHashRateReply::InternalSwap(SubmitHashRateReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitHashRateReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[11]);
}

// ===================================================================

class HashRateRequest::_Internal {
 public:
};

HashRateRequest::HashRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.HashRateRequest)
}
HashRateRequest::HashRateRequest(const HashRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HashRateRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.HashRateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashRateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashRateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HashRateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[12]);
}

// ===================================================================

class HashRateReply::_Internal {
 public:
};

HashRateReply::HashRateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.HashRateReply)
}
HashRateReply::HashRateReply(const HashRateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HashRateReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hash_rate_ = from._impl_.hash_rate_;
  // @@protoc_insertion_point(copy_constructor:txpool.HashRateReply)
}

inline void HashRateReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_rate_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HashRateReply::~HashRateReply() {
  // @@protoc_insertion_point(destructor:txpool.HashRateReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HashRateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HashRateReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HashRateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.HashRateReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_rate_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashRateReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hash_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hash_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashRateReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.HashRateReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash_rate = 1;
  if (this->_internal_hash_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.HashRateReply)
  return target;
}

size_t HashRateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.HashRateReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hash_rate = 1;
  if (this->_internal_hash_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hash_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashRateReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HashRateReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashRateReply::GetClassData() const { return &_class_data_; }


void HashRateReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HashRateReply*>(&to_msg);
  auto& from = static_cast<const HashRateReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.HashRateReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hash_rate() != 0) {
    _this->_internal_set_hash_rate(from._internal_hash_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashRateReply::CopyFrom(const HashRateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.HashRateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRateReply::IsInitialized() const {
  return true;
}

void HashRateReply::InternalSwap(HashRateReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.hash_rate_, other->_impl_.hash_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashRateReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[13]);
}

// ===================================================================

class MiningRequest::_Internal {
 public:
};

MiningRequest::MiningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.MiningRequest)
}
MiningRequest::MiningRequest(const MiningRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MiningRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.MiningRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MiningRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MiningRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MiningRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[14]);
}

// ===================================================================

class MiningReply::_Internal {
 public:
};

MiningReply::MiningReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.MiningReply)
}
MiningReply::MiningReply(const MiningReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MiningReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){}
    , decltype(_impl_.running_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.running_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.running_));
  // @@protoc_insertion_point(copy_constructor:txpool.MiningReply)
}

inline void MiningReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){false}
    , decltype(_impl_.running_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MiningReply::~MiningReply() {
  // @@protoc_insertion_point(destructor:txpool.MiningReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MiningReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MiningReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MiningReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.MiningReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.running_) -
      reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.running_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MiningReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool running = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MiningReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.MiningReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool running = 2;
  if (this->_internal_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_running(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.MiningReply)
  return target;
}

size_t MiningReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.MiningReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool running = 2;
  if (this->_internal_running() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MiningReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MiningReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MiningReply::GetClassData() const { return &_class_data_; }


void MiningReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MiningReply*>(&to_msg);
  auto& from = static_cast<const MiningReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.MiningReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_running() != 0) {
    _this->_internal_set_running(from._internal_running());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MiningReply::CopyFrom(const MiningReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.MiningReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiningReply::IsInitialized() const {
  return true;
}

void MiningReply::InternalSwap(MiningReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MiningReply, _impl_.running_)
      + sizeof(MiningReply::_impl_.running_)
      - PROTOBUF_FIELD_OFFSET(MiningReply, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MiningReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2fmining_2eproto_getter, &descriptor_table_txpool_2fmining_2eproto_once,
      file_level_metadata_txpool_2fmining_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace txpool
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::txpool::OnPendingBlockRequest*
Arena::CreateMaybeMessage< ::txpool::OnPendingBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnPendingBlockReply*
Arena::CreateMaybeMessage< ::txpool::OnPendingBlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingBlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnMinedBlockRequest*
Arena::CreateMaybeMessage< ::txpool::OnMinedBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnMinedBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnMinedBlockReply*
Arena::CreateMaybeMessage< ::txpool::OnMinedBlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnMinedBlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnPendingLogsRequest*
Arena::CreateMaybeMessage< ::txpool::OnPendingLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnPendingLogsReply*
Arena::CreateMaybeMessage< ::txpool::OnPendingLogsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingLogsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::GetWorkRequest*
Arena::CreateMaybeMessage< ::txpool::GetWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::GetWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::GetWorkReply*
Arena::CreateMaybeMessage< ::txpool::GetWorkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::GetWorkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitWorkRequest*
Arena::CreateMaybeMessage< ::txpool::SubmitWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitWorkReply*
Arena::CreateMaybeMessage< ::txpool::SubmitWorkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitWorkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitHashRateRequest*
Arena::CreateMaybeMessage< ::txpool::SubmitHashRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitHashRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitHashRateReply*
Arena::CreateMaybeMessage< ::txpool::SubmitHashRateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitHashRateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::HashRateRequest*
Arena::CreateMaybeMessage< ::txpool::HashRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::HashRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::HashRateReply*
Arena::CreateMaybeMessage< ::txpool::HashRateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::HashRateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::MiningRequest*
Arena::CreateMaybeMessage< ::txpool::MiningRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::MiningRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::MiningReply*
Arena::CreateMaybeMessage< ::txpool::MiningReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::MiningReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
