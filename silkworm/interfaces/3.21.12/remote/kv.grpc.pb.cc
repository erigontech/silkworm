// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remote/kv.proto

#include "remote/kv.pb.h"
#include "remote/kv.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace remote {

static const char* KV_method_names[] = {
  "/remote.KV/Version",
  "/remote.KV/Tx",
  "/remote.KV/StateChanges",
  "/remote.KV/Snapshots",
  "/remote.KV/Range",
  "/remote.KV/GetLatest",
  "/remote.KV/HistorySeek",
  "/remote.KV/IndexRange",
  "/remote.KV/HistoryRange",
  "/remote.KV/RangeAsOf",
};

std::unique_ptr< KV::Stub> KV::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KV::Stub> stub(new KV::Stub(channel, options));
  return stub;
}

KV::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Version_(KV_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tx_(KV_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_StateChanges_(KV_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Snapshots_(KV_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Range_(KV_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatest_(KV_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HistorySeek_(KV_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IndexRange_(KV_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HistoryRange_(KV_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RangeAsOf_(KV_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KV::Stub::Version(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::VersionReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::types::VersionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Version_, context, request, response);
}

void KV::Stub::async::Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::types::VersionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, std::move(f));
}

void KV::Stub::async::Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::types::VersionReply>* KV::Stub::PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::types::VersionReply, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Version_, context, request);
}

::grpc::ClientAsyncResponseReader< ::types::VersionReply>* KV::Stub::AsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::remote::Cursor, ::remote::Pair>* KV::Stub::TxRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::remote::Cursor, ::remote::Pair>::Create(channel_.get(), rpcmethod_Tx_, context);
}

void KV::Stub::async::Tx(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::remote::Cursor,::remote::Pair>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::remote::Cursor,::remote::Pair>::Create(stub_->channel_.get(), stub_->rpcmethod_Tx_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::remote::Cursor, ::remote::Pair>* KV::Stub::AsyncTxRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::remote::Cursor, ::remote::Pair>::Create(channel_.get(), cq, rpcmethod_Tx_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::remote::Cursor, ::remote::Pair>* KV::Stub::PrepareAsyncTxRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::remote::Cursor, ::remote::Pair>::Create(channel_.get(), cq, rpcmethod_Tx_, context, false, nullptr);
}

::grpc::ClientReader< ::remote::StateChangeBatch>* KV::Stub::StateChangesRaw(::grpc::ClientContext* context, const ::remote::StateChangeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::remote::StateChangeBatch>::Create(channel_.get(), rpcmethod_StateChanges_, context, request);
}

void KV::Stub::async::StateChanges(::grpc::ClientContext* context, const ::remote::StateChangeRequest* request, ::grpc::ClientReadReactor< ::remote::StateChangeBatch>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::remote::StateChangeBatch>::Create(stub_->channel_.get(), stub_->rpcmethod_StateChanges_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::remote::StateChangeBatch>* KV::Stub::AsyncStateChangesRaw(::grpc::ClientContext* context, const ::remote::StateChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::remote::StateChangeBatch>::Create(channel_.get(), cq, rpcmethod_StateChanges_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::remote::StateChangeBatch>* KV::Stub::PrepareAsyncStateChangesRaw(::grpc::ClientContext* context, const ::remote::StateChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::remote::StateChangeBatch>::Create(channel_.get(), cq, rpcmethod_StateChanges_, context, request, false, nullptr);
}

::grpc::Status KV::Stub::Snapshots(::grpc::ClientContext* context, const ::remote::SnapshotsRequest& request, ::remote::SnapshotsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::SnapshotsRequest, ::remote::SnapshotsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Snapshots_, context, request, response);
}

void KV::Stub::async::Snapshots(::grpc::ClientContext* context, const ::remote::SnapshotsRequest* request, ::remote::SnapshotsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::SnapshotsRequest, ::remote::SnapshotsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Snapshots_, context, request, response, std::move(f));
}

void KV::Stub::async::Snapshots(::grpc::ClientContext* context, const ::remote::SnapshotsRequest* request, ::remote::SnapshotsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Snapshots_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::SnapshotsReply>* KV::Stub::PrepareAsyncSnapshotsRaw(::grpc::ClientContext* context, const ::remote::SnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::SnapshotsReply, ::remote::SnapshotsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Snapshots_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::SnapshotsReply>* KV::Stub::AsyncSnapshotsRaw(::grpc::ClientContext* context, const ::remote::SnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSnapshotsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV::Stub::Range(::grpc::ClientContext* context, const ::remote::RangeReq& request, ::remote::Pairs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::RangeReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Range_, context, request, response);
}

void KV::Stub::async::Range(::grpc::ClientContext* context, const ::remote::RangeReq* request, ::remote::Pairs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::RangeReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Range_, context, request, response, std::move(f));
}

void KV::Stub::async::Range(::grpc::ClientContext* context, const ::remote::RangeReq* request, ::remote::Pairs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Range_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::Pairs>* KV::Stub::PrepareAsyncRangeRaw(::grpc::ClientContext* context, const ::remote::RangeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::Pairs, ::remote::RangeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Range_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::Pairs>* KV::Stub::AsyncRangeRaw(::grpc::ClientContext* context, const ::remote::RangeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV::Stub::GetLatest(::grpc::ClientContext* context, const ::remote::GetLatestReq& request, ::remote::GetLatestReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::GetLatestReq, ::remote::GetLatestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatest_, context, request, response);
}

void KV::Stub::async::GetLatest(::grpc::ClientContext* context, const ::remote::GetLatestReq* request, ::remote::GetLatestReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::GetLatestReq, ::remote::GetLatestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatest_, context, request, response, std::move(f));
}

void KV::Stub::async::GetLatest(::grpc::ClientContext* context, const ::remote::GetLatestReq* request, ::remote::GetLatestReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::GetLatestReply>* KV::Stub::PrepareAsyncGetLatestRaw(::grpc::ClientContext* context, const ::remote::GetLatestReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::GetLatestReply, ::remote::GetLatestReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::GetLatestReply>* KV::Stub::AsyncGetLatestRaw(::grpc::ClientContext* context, const ::remote::GetLatestReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV::Stub::HistorySeek(::grpc::ClientContext* context, const ::remote::HistorySeekReq& request, ::remote::HistorySeekReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::HistorySeekReq, ::remote::HistorySeekReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HistorySeek_, context, request, response);
}

void KV::Stub::async::HistorySeek(::grpc::ClientContext* context, const ::remote::HistorySeekReq* request, ::remote::HistorySeekReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::HistorySeekReq, ::remote::HistorySeekReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistorySeek_, context, request, response, std::move(f));
}

void KV::Stub::async::HistorySeek(::grpc::ClientContext* context, const ::remote::HistorySeekReq* request, ::remote::HistorySeekReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistorySeek_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::HistorySeekReply>* KV::Stub::PrepareAsyncHistorySeekRaw(::grpc::ClientContext* context, const ::remote::HistorySeekReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::HistorySeekReply, ::remote::HistorySeekReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HistorySeek_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::HistorySeekReply>* KV::Stub::AsyncHistorySeekRaw(::grpc::ClientContext* context, const ::remote::HistorySeekReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHistorySeekRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV::Stub::IndexRange(::grpc::ClientContext* context, const ::remote::IndexRangeReq& request, ::remote::IndexRangeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::IndexRangeReq, ::remote::IndexRangeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IndexRange_, context, request, response);
}

void KV::Stub::async::IndexRange(::grpc::ClientContext* context, const ::remote::IndexRangeReq* request, ::remote::IndexRangeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::IndexRangeReq, ::remote::IndexRangeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexRange_, context, request, response, std::move(f));
}

void KV::Stub::async::IndexRange(::grpc::ClientContext* context, const ::remote::IndexRangeReq* request, ::remote::IndexRangeReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::IndexRangeReply>* KV::Stub::PrepareAsyncIndexRangeRaw(::grpc::ClientContext* context, const ::remote::IndexRangeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::IndexRangeReply, ::remote::IndexRangeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IndexRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::IndexRangeReply>* KV::Stub::AsyncIndexRangeRaw(::grpc::ClientContext* context, const ::remote::IndexRangeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV::Stub::HistoryRange(::grpc::ClientContext* context, const ::remote::HistoryRangeReq& request, ::remote::Pairs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::HistoryRangeReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HistoryRange_, context, request, response);
}

void KV::Stub::async::HistoryRange(::grpc::ClientContext* context, const ::remote::HistoryRangeReq* request, ::remote::Pairs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::HistoryRangeReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoryRange_, context, request, response, std::move(f));
}

void KV::Stub::async::HistoryRange(::grpc::ClientContext* context, const ::remote::HistoryRangeReq* request, ::remote::Pairs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoryRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::Pairs>* KV::Stub::PrepareAsyncHistoryRangeRaw(::grpc::ClientContext* context, const ::remote::HistoryRangeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::Pairs, ::remote::HistoryRangeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HistoryRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::Pairs>* KV::Stub::AsyncHistoryRangeRaw(::grpc::ClientContext* context, const ::remote::HistoryRangeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHistoryRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV::Stub::RangeAsOf(::grpc::ClientContext* context, const ::remote::RangeAsOfReq& request, ::remote::Pairs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remote::RangeAsOfReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RangeAsOf_, context, request, response);
}

void KV::Stub::async::RangeAsOf(::grpc::ClientContext* context, const ::remote::RangeAsOfReq* request, ::remote::Pairs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remote::RangeAsOfReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RangeAsOf_, context, request, response, std::move(f));
}

void KV::Stub::async::RangeAsOf(::grpc::ClientContext* context, const ::remote::RangeAsOfReq* request, ::remote::Pairs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RangeAsOf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remote::Pairs>* KV::Stub::PrepareAsyncRangeAsOfRaw(::grpc::ClientContext* context, const ::remote::RangeAsOfReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remote::Pairs, ::remote::RangeAsOfReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RangeAsOf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remote::Pairs>* KV::Stub::AsyncRangeAsOfRaw(::grpc::ClientContext* context, const ::remote::RangeAsOfReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRangeAsOfRaw(context, request, cq);
  result->StartCall();
  return result;
}

KV::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::google::protobuf::Empty, ::types::VersionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::types::VersionReply* resp) {
               return service->Version(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< KV::Service, ::remote::Cursor, ::remote::Pair>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::remote::Pair,
             ::remote::Cursor>* stream) {
               return service->Tx(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KV::Service, ::remote::StateChangeRequest, ::remote::StateChangeBatch>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::StateChangeRequest* req,
             ::grpc::ServerWriter<::remote::StateChangeBatch>* writer) {
               return service->StateChanges(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::remote::SnapshotsRequest, ::remote::SnapshotsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::SnapshotsRequest* req,
             ::remote::SnapshotsReply* resp) {
               return service->Snapshots(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::remote::RangeReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::RangeReq* req,
             ::remote::Pairs* resp) {
               return service->Range(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::remote::GetLatestReq, ::remote::GetLatestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::GetLatestReq* req,
             ::remote::GetLatestReply* resp) {
               return service->GetLatest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::remote::HistorySeekReq, ::remote::HistorySeekReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::HistorySeekReq* req,
             ::remote::HistorySeekReply* resp) {
               return service->HistorySeek(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::remote::IndexRangeReq, ::remote::IndexRangeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::IndexRangeReq* req,
             ::remote::IndexRangeReply* resp) {
               return service->IndexRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::remote::HistoryRangeReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::HistoryRangeReq* req,
             ::remote::Pairs* resp) {
               return service->HistoryRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV::Service, ::remote::RangeAsOfReq, ::remote::Pairs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remote::RangeAsOfReq* req,
             ::remote::Pairs* resp) {
               return service->RangeAsOf(ctx, req, resp);
             }, this)));
}

KV::Service::~Service() {
}

::grpc::Status KV::Service::Version(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::Tx(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::remote::Pair, ::remote::Cursor>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::StateChanges(::grpc::ServerContext* context, const ::remote::StateChangeRequest* request, ::grpc::ServerWriter< ::remote::StateChangeBatch>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::Snapshots(::grpc::ServerContext* context, const ::remote::SnapshotsRequest* request, ::remote::SnapshotsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::Range(::grpc::ServerContext* context, const ::remote::RangeReq* request, ::remote::Pairs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::GetLatest(::grpc::ServerContext* context, const ::remote::GetLatestReq* request, ::remote::GetLatestReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::HistorySeek(::grpc::ServerContext* context, const ::remote::HistorySeekReq* request, ::remote::HistorySeekReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::IndexRange(::grpc::ServerContext* context, const ::remote::IndexRangeReq* request, ::remote::IndexRangeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::HistoryRange(::grpc::ServerContext* context, const ::remote::HistoryRangeReq* request, ::remote::Pairs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV::Service::RangeAsOf(::grpc::ServerContext* context, const ::remote::RangeAsOfReq* request, ::remote::Pairs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace remote

