// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/txpool.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_txpool_2ftxpool_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_txpool_2ftxpool_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_txpool_2ftxpool_2eproto;
namespace txpool {
class AddReply;
class AddReplyDefaultTypeInternal;
extern AddReplyDefaultTypeInternal _AddReply_default_instance_;
class AddRequest;
class AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class AllReply;
class AllReplyDefaultTypeInternal;
extern AllReplyDefaultTypeInternal _AllReply_default_instance_;
class AllReply_Tx;
class AllReply_TxDefaultTypeInternal;
extern AllReply_TxDefaultTypeInternal _AllReply_Tx_default_instance_;
class AllRequest;
class AllRequestDefaultTypeInternal;
extern AllRequestDefaultTypeInternal _AllRequest_default_instance_;
class NonceReply;
class NonceReplyDefaultTypeInternal;
extern NonceReplyDefaultTypeInternal _NonceReply_default_instance_;
class NonceRequest;
class NonceRequestDefaultTypeInternal;
extern NonceRequestDefaultTypeInternal _NonceRequest_default_instance_;
class OnAddReply;
class OnAddReplyDefaultTypeInternal;
extern OnAddReplyDefaultTypeInternal _OnAddReply_default_instance_;
class OnAddRequest;
class OnAddRequestDefaultTypeInternal;
extern OnAddRequestDefaultTypeInternal _OnAddRequest_default_instance_;
class PendingReply;
class PendingReplyDefaultTypeInternal;
extern PendingReplyDefaultTypeInternal _PendingReply_default_instance_;
class PendingReply_Tx;
class PendingReply_TxDefaultTypeInternal;
extern PendingReply_TxDefaultTypeInternal _PendingReply_Tx_default_instance_;
class StatusReply;
class StatusReplyDefaultTypeInternal;
extern StatusReplyDefaultTypeInternal _StatusReply_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class TransactionsReply;
class TransactionsReplyDefaultTypeInternal;
extern TransactionsReplyDefaultTypeInternal _TransactionsReply_default_instance_;
class TransactionsRequest;
class TransactionsRequestDefaultTypeInternal;
extern TransactionsRequestDefaultTypeInternal _TransactionsRequest_default_instance_;
class TxHashes;
class TxHashesDefaultTypeInternal;
extern TxHashesDefaultTypeInternal _TxHashes_default_instance_;
}  // namespace txpool
PROTOBUF_NAMESPACE_OPEN
template<> ::txpool::AddReply* Arena::CreateMaybeMessage<::txpool::AddReply>(Arena*);
template<> ::txpool::AddRequest* Arena::CreateMaybeMessage<::txpool::AddRequest>(Arena*);
template<> ::txpool::AllReply* Arena::CreateMaybeMessage<::txpool::AllReply>(Arena*);
template<> ::txpool::AllReply_Tx* Arena::CreateMaybeMessage<::txpool::AllReply_Tx>(Arena*);
template<> ::txpool::AllRequest* Arena::CreateMaybeMessage<::txpool::AllRequest>(Arena*);
template<> ::txpool::NonceReply* Arena::CreateMaybeMessage<::txpool::NonceReply>(Arena*);
template<> ::txpool::NonceRequest* Arena::CreateMaybeMessage<::txpool::NonceRequest>(Arena*);
template<> ::txpool::OnAddReply* Arena::CreateMaybeMessage<::txpool::OnAddReply>(Arena*);
template<> ::txpool::OnAddRequest* Arena::CreateMaybeMessage<::txpool::OnAddRequest>(Arena*);
template<> ::txpool::PendingReply* Arena::CreateMaybeMessage<::txpool::PendingReply>(Arena*);
template<> ::txpool::PendingReply_Tx* Arena::CreateMaybeMessage<::txpool::PendingReply_Tx>(Arena*);
template<> ::txpool::StatusReply* Arena::CreateMaybeMessage<::txpool::StatusReply>(Arena*);
template<> ::txpool::StatusRequest* Arena::CreateMaybeMessage<::txpool::StatusRequest>(Arena*);
template<> ::txpool::TransactionsReply* Arena::CreateMaybeMessage<::txpool::TransactionsReply>(Arena*);
template<> ::txpool::TransactionsRequest* Arena::CreateMaybeMessage<::txpool::TransactionsRequest>(Arena*);
template<> ::txpool::TxHashes* Arena::CreateMaybeMessage<::txpool::TxHashes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace txpool {

enum AllReply_TxnType : int {
  AllReply_TxnType_PENDING = 0,
  AllReply_TxnType_QUEUED = 1,
  AllReply_TxnType_BASE_FEE = 2,
  AllReply_TxnType_AllReply_TxnType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AllReply_TxnType_AllReply_TxnType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AllReply_TxnType_IsValid(int value);
constexpr AllReply_TxnType AllReply_TxnType_TxnType_MIN = AllReply_TxnType_PENDING;
constexpr AllReply_TxnType AllReply_TxnType_TxnType_MAX = AllReply_TxnType_BASE_FEE;
constexpr int AllReply_TxnType_TxnType_ARRAYSIZE = AllReply_TxnType_TxnType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllReply_TxnType_descriptor();
template<typename T>
inline const std::string& AllReply_TxnType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AllReply_TxnType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AllReply_TxnType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AllReply_TxnType_descriptor(), enum_t_value);
}
inline bool AllReply_TxnType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AllReply_TxnType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AllReply_TxnType>(
    AllReply_TxnType_descriptor(), name, value);
}
enum ImportResult : int {
  SUCCESS = 0,
  ALREADY_EXISTS = 1,
  FEE_TOO_LOW = 2,
  STALE = 3,
  INVALID = 4,
  INTERNAL_ERROR = 5,
  ImportResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImportResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImportResult_IsValid(int value);
constexpr ImportResult ImportResult_MIN = SUCCESS;
constexpr ImportResult ImportResult_MAX = INTERNAL_ERROR;
constexpr int ImportResult_ARRAYSIZE = ImportResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportResult_descriptor();
template<typename T>
inline const std::string& ImportResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImportResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImportResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImportResult_descriptor(), enum_t_value);
}
inline bool ImportResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImportResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImportResult>(
    ImportResult_descriptor(), name, value);
}
// ===================================================================

class TxHashes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.TxHashes) */ {
 public:
  inline TxHashes() : TxHashes(nullptr) {}
  virtual ~TxHashes();

  TxHashes(const TxHashes& from);
  TxHashes(TxHashes&& from) noexcept
    : TxHashes() {
    *this = ::std::move(from);
  }

  inline TxHashes& operator=(const TxHashes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxHashes& operator=(TxHashes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxHashes& default_instance();

  static inline const TxHashes* internal_default_instance() {
    return reinterpret_cast<const TxHashes*>(
               &_TxHashes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxHashes& a, TxHashes& b) {
    a.Swap(&b);
  }
  inline void Swap(TxHashes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxHashes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxHashes* New() const final {
    return CreateMaybeMessage<TxHashes>(nullptr);
  }

  TxHashes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxHashes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxHashes& from);
  void MergeFrom(const TxHashes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxHashes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.TxHashes";
  }
  protected:
  explicit TxHashes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .types.H256 hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::types::H256* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
      mutable_hashes();
  private:
  const ::types::H256& _internal_hashes(int index) const;
  ::types::H256* _internal_add_hashes();
  public:
  const ::types::H256& hashes(int index) const;
  ::types::H256* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:txpool.TxHashes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.AddRequest) */ {
 public:
  inline AddRequest() : AddRequest(nullptr) {}
  virtual ~AddRequest();

  AddRequest(const AddRequest& from);
  AddRequest(AddRequest&& from) noexcept
    : AddRequest() {
    *this = ::std::move(from);
  }

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRequest& default_instance();

  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
               &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddRequest& a, AddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRequest* New() const final {
    return CreateMaybeMessage<AddRequest>(nullptr);
  }

  AddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRequest& from);
  void MergeFrom(const AddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.AddRequest";
  }
  protected:
  explicit AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlpTxsFieldNumber = 1,
  };
  // repeated bytes rlp_txs = 1;
  int rlp_txs_size() const;
  private:
  int _internal_rlp_txs_size() const;
  public:
  void clear_rlp_txs();
  const std::string& rlp_txs(int index) const;
  std::string* mutable_rlp_txs(int index);
  void set_rlp_txs(int index, const std::string& value);
  void set_rlp_txs(int index, std::string&& value);
  void set_rlp_txs(int index, const char* value);
  void set_rlp_txs(int index, const void* value, size_t size);
  std::string* add_rlp_txs();
  void add_rlp_txs(const std::string& value);
  void add_rlp_txs(std::string&& value);
  void add_rlp_txs(const char* value);
  void add_rlp_txs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rlp_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rlp_txs();
  private:
  const std::string& _internal_rlp_txs(int index) const;
  std::string* _internal_add_rlp_txs();
  public:

  // @@protoc_insertion_point(class_scope:txpool.AddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rlp_txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AddReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.AddReply) */ {
 public:
  inline AddReply() : AddReply(nullptr) {}
  virtual ~AddReply();

  AddReply(const AddReply& from);
  AddReply(AddReply&& from) noexcept
    : AddReply() {
    *this = ::std::move(from);
  }

  inline AddReply& operator=(const AddReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReply& operator=(AddReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddReply& default_instance();

  static inline const AddReply* internal_default_instance() {
    return reinterpret_cast<const AddReply*>(
               &_AddReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddReply& a, AddReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddReply* New() const final {
    return CreateMaybeMessage<AddReply>(nullptr);
  }

  AddReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddReply& from);
  void MergeFrom(const AddReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.AddReply";
  }
  protected:
  explicit AddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImportedFieldNumber = 1,
    kErrorsFieldNumber = 2,
  };
  // repeated .txpool.ImportResult imported = 1;
  int imported_size() const;
  private:
  int _internal_imported_size() const;
  public:
  void clear_imported();
  private:
  ::txpool::ImportResult _internal_imported(int index) const;
  void _internal_add_imported(::txpool::ImportResult value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_imported();
  public:
  ::txpool::ImportResult imported(int index) const;
  void set_imported(int index, ::txpool::ImportResult value);
  void add_imported(::txpool::ImportResult value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& imported() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_imported();

  // repeated string errors = 2;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, size_t size);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();
  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();
  public:

  // @@protoc_insertion_point(class_scope:txpool.AddReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> imported_;
  mutable std::atomic<int> _imported_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class TransactionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.TransactionsRequest) */ {
 public:
  inline TransactionsRequest() : TransactionsRequest(nullptr) {}
  virtual ~TransactionsRequest();

  TransactionsRequest(const TransactionsRequest& from);
  TransactionsRequest(TransactionsRequest&& from) noexcept
    : TransactionsRequest() {
    *this = ::std::move(from);
  }

  inline TransactionsRequest& operator=(const TransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsRequest& operator=(TransactionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionsRequest& default_instance();

  static inline const TransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionsRequest*>(
               &_TransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionsRequest& a, TransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionsRequest* New() const final {
    return CreateMaybeMessage<TransactionsRequest>(nullptr);
  }

  TransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionsRequest& from);
  void MergeFrom(const TransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.TransactionsRequest";
  }
  protected:
  explicit TransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .types.H256 hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::types::H256* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
      mutable_hashes();
  private:
  const ::types::H256& _internal_hashes(int index) const;
  ::types::H256* _internal_add_hashes();
  public:
  const ::types::H256& hashes(int index) const;
  ::types::H256* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:txpool.TransactionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class TransactionsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.TransactionsReply) */ {
 public:
  inline TransactionsReply() : TransactionsReply(nullptr) {}
  virtual ~TransactionsReply();

  TransactionsReply(const TransactionsReply& from);
  TransactionsReply(TransactionsReply&& from) noexcept
    : TransactionsReply() {
    *this = ::std::move(from);
  }

  inline TransactionsReply& operator=(const TransactionsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsReply& operator=(TransactionsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionsReply& default_instance();

  static inline const TransactionsReply* internal_default_instance() {
    return reinterpret_cast<const TransactionsReply*>(
               &_TransactionsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionsReply& a, TransactionsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionsReply* New() const final {
    return CreateMaybeMessage<TransactionsReply>(nullptr);
  }

  TransactionsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionsReply& from);
  void MergeFrom(const TransactionsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.TransactionsReply";
  }
  protected:
  explicit TransactionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlpTxsFieldNumber = 1,
  };
  // repeated bytes rlp_txs = 1;
  int rlp_txs_size() const;
  private:
  int _internal_rlp_txs_size() const;
  public:
  void clear_rlp_txs();
  const std::string& rlp_txs(int index) const;
  std::string* mutable_rlp_txs(int index);
  void set_rlp_txs(int index, const std::string& value);
  void set_rlp_txs(int index, std::string&& value);
  void set_rlp_txs(int index, const char* value);
  void set_rlp_txs(int index, const void* value, size_t size);
  std::string* add_rlp_txs();
  void add_rlp_txs(const std::string& value);
  void add_rlp_txs(std::string&& value);
  void add_rlp_txs(const char* value);
  void add_rlp_txs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rlp_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rlp_txs();
  private:
  const std::string& _internal_rlp_txs(int index) const;
  std::string* _internal_add_rlp_txs();
  public:

  // @@protoc_insertion_point(class_scope:txpool.TransactionsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rlp_txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class OnAddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnAddRequest) */ {
 public:
  inline OnAddRequest() : OnAddRequest(nullptr) {}
  virtual ~OnAddRequest();

  OnAddRequest(const OnAddRequest& from);
  OnAddRequest(OnAddRequest&& from) noexcept
    : OnAddRequest() {
    *this = ::std::move(from);
  }

  inline OnAddRequest& operator=(const OnAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnAddRequest& operator=(OnAddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnAddRequest& default_instance();

  static inline const OnAddRequest* internal_default_instance() {
    return reinterpret_cast<const OnAddRequest*>(
               &_OnAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OnAddRequest& a, OnAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnAddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnAddRequest* New() const final {
    return CreateMaybeMessage<OnAddRequest>(nullptr);
  }

  OnAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnAddRequest& from);
  void MergeFrom(const OnAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnAddRequest";
  }
  protected:
  explicit OnAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.OnAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class OnAddReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnAddReply) */ {
 public:
  inline OnAddReply() : OnAddReply(nullptr) {}
  virtual ~OnAddReply();

  OnAddReply(const OnAddReply& from);
  OnAddReply(OnAddReply&& from) noexcept
    : OnAddReply() {
    *this = ::std::move(from);
  }

  inline OnAddReply& operator=(const OnAddReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnAddReply& operator=(OnAddReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnAddReply& default_instance();

  static inline const OnAddReply* internal_default_instance() {
    return reinterpret_cast<const OnAddReply*>(
               &_OnAddReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OnAddReply& a, OnAddReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnAddReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnAddReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnAddReply* New() const final {
    return CreateMaybeMessage<OnAddReply>(nullptr);
  }

  OnAddReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnAddReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnAddReply& from);
  void MergeFrom(const OnAddReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnAddReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnAddReply";
  }
  protected:
  explicit OnAddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRplTxsFieldNumber = 1,
  };
  // repeated bytes rpl_txs = 1;
  int rpl_txs_size() const;
  private:
  int _internal_rpl_txs_size() const;
  public:
  void clear_rpl_txs();
  const std::string& rpl_txs(int index) const;
  std::string* mutable_rpl_txs(int index);
  void set_rpl_txs(int index, const std::string& value);
  void set_rpl_txs(int index, std::string&& value);
  void set_rpl_txs(int index, const char* value);
  void set_rpl_txs(int index, const void* value, size_t size);
  std::string* add_rpl_txs();
  void add_rpl_txs(const std::string& value);
  void add_rpl_txs(std::string&& value);
  void add_rpl_txs(const char* value);
  void add_rpl_txs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rpl_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rpl_txs();
  private:
  const std::string& _internal_rpl_txs(int index) const;
  std::string* _internal_add_rpl_txs();
  public:

  // @@protoc_insertion_point(class_scope:txpool.OnAddReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rpl_txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AllRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.AllRequest) */ {
 public:
  inline AllRequest() : AllRequest(nullptr) {}
  virtual ~AllRequest();

  AllRequest(const AllRequest& from);
  AllRequest(AllRequest&& from) noexcept
    : AllRequest() {
    *this = ::std::move(from);
  }

  inline AllRequest& operator=(const AllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllRequest& operator=(AllRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllRequest& default_instance();

  static inline const AllRequest* internal_default_instance() {
    return reinterpret_cast<const AllRequest*>(
               &_AllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AllRequest& a, AllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AllRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllRequest* New() const final {
    return CreateMaybeMessage<AllRequest>(nullptr);
  }

  AllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllRequest& from);
  void MergeFrom(const AllRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.AllRequest";
  }
  protected:
  explicit AllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.AllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AllReply_Tx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.AllReply.Tx) */ {
 public:
  inline AllReply_Tx() : AllReply_Tx(nullptr) {}
  virtual ~AllReply_Tx();

  AllReply_Tx(const AllReply_Tx& from);
  AllReply_Tx(AllReply_Tx&& from) noexcept
    : AllReply_Tx() {
    *this = ::std::move(from);
  }

  inline AllReply_Tx& operator=(const AllReply_Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllReply_Tx& operator=(AllReply_Tx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllReply_Tx& default_instance();

  static inline const AllReply_Tx* internal_default_instance() {
    return reinterpret_cast<const AllReply_Tx*>(
               &_AllReply_Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AllReply_Tx& a, AllReply_Tx& b) {
    a.Swap(&b);
  }
  inline void Swap(AllReply_Tx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllReply_Tx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllReply_Tx* New() const final {
    return CreateMaybeMessage<AllReply_Tx>(nullptr);
  }

  AllReply_Tx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllReply_Tx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllReply_Tx& from);
  void MergeFrom(const AllReply_Tx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllReply_Tx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.AllReply.Tx";
  }
  protected:
  explicit AllReply_Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlpTxFieldNumber = 3,
    kSenderFieldNumber = 2,
    kTxnTypeFieldNumber = 1,
  };
  // bytes rlp_tx = 3;
  void clear_rlp_tx();
  const std::string& rlp_tx() const;
  void set_rlp_tx(const std::string& value);
  void set_rlp_tx(std::string&& value);
  void set_rlp_tx(const char* value);
  void set_rlp_tx(const void* value, size_t size);
  std::string* mutable_rlp_tx();
  std::string* release_rlp_tx();
  void set_allocated_rlp_tx(std::string* rlp_tx);
  private:
  const std::string& _internal_rlp_tx() const;
  void _internal_set_rlp_tx(const std::string& value);
  std::string* _internal_mutable_rlp_tx();
  public:

  // .types.H160 sender = 2;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::types::H160& sender() const;
  ::types::H160* release_sender();
  ::types::H160* mutable_sender();
  void set_allocated_sender(::types::H160* sender);
  private:
  const ::types::H160& _internal_sender() const;
  ::types::H160* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::types::H160* sender);
  ::types::H160* unsafe_arena_release_sender();

  // .txpool.AllReply.TxnType txn_type = 1;
  void clear_txn_type();
  ::txpool::AllReply_TxnType txn_type() const;
  void set_txn_type(::txpool::AllReply_TxnType value);
  private:
  ::txpool::AllReply_TxnType _internal_txn_type() const;
  void _internal_set_txn_type(::txpool::AllReply_TxnType value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.AllReply.Tx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rlp_tx_;
  ::types::H160* sender_;
  int txn_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AllReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.AllReply) */ {
 public:
  inline AllReply() : AllReply(nullptr) {}
  virtual ~AllReply();

  AllReply(const AllReply& from);
  AllReply(AllReply&& from) noexcept
    : AllReply() {
    *this = ::std::move(from);
  }

  inline AllReply& operator=(const AllReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllReply& operator=(AllReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllReply& default_instance();

  static inline const AllReply* internal_default_instance() {
    return reinterpret_cast<const AllReply*>(
               &_AllReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AllReply& a, AllReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AllReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllReply* New() const final {
    return CreateMaybeMessage<AllReply>(nullptr);
  }

  AllReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllReply& from);
  void MergeFrom(const AllReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.AllReply";
  }
  protected:
  explicit AllReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AllReply_Tx Tx;

  typedef AllReply_TxnType TxnType;
  static constexpr TxnType PENDING =
    AllReply_TxnType_PENDING;
  static constexpr TxnType QUEUED =
    AllReply_TxnType_QUEUED;
  static constexpr TxnType BASE_FEE =
    AllReply_TxnType_BASE_FEE;
  static inline bool TxnType_IsValid(int value) {
    return AllReply_TxnType_IsValid(value);
  }
  static constexpr TxnType TxnType_MIN =
    AllReply_TxnType_TxnType_MIN;
  static constexpr TxnType TxnType_MAX =
    AllReply_TxnType_TxnType_MAX;
  static constexpr int TxnType_ARRAYSIZE =
    AllReply_TxnType_TxnType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TxnType_descriptor() {
    return AllReply_TxnType_descriptor();
  }
  template<typename T>
  static inline const std::string& TxnType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TxnType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TxnType_Name.");
    return AllReply_TxnType_Name(enum_t_value);
  }
  static inline bool TxnType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TxnType* value) {
    return AllReply_TxnType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 1,
  };
  // repeated .txpool.AllReply.Tx txs = 1;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::txpool::AllReply_Tx* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::AllReply_Tx >*
      mutable_txs();
  private:
  const ::txpool::AllReply_Tx& _internal_txs(int index) const;
  ::txpool::AllReply_Tx* _internal_add_txs();
  public:
  const ::txpool::AllReply_Tx& txs(int index) const;
  ::txpool::AllReply_Tx* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::AllReply_Tx >&
      txs() const;

  // @@protoc_insertion_point(class_scope:txpool.AllReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::AllReply_Tx > txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class PendingReply_Tx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.PendingReply.Tx) */ {
 public:
  inline PendingReply_Tx() : PendingReply_Tx(nullptr) {}
  virtual ~PendingReply_Tx();

  PendingReply_Tx(const PendingReply_Tx& from);
  PendingReply_Tx(PendingReply_Tx&& from) noexcept
    : PendingReply_Tx() {
    *this = ::std::move(from);
  }

  inline PendingReply_Tx& operator=(const PendingReply_Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingReply_Tx& operator=(PendingReply_Tx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingReply_Tx& default_instance();

  static inline const PendingReply_Tx* internal_default_instance() {
    return reinterpret_cast<const PendingReply_Tx*>(
               &_PendingReply_Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PendingReply_Tx& a, PendingReply_Tx& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingReply_Tx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingReply_Tx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingReply_Tx* New() const final {
    return CreateMaybeMessage<PendingReply_Tx>(nullptr);
  }

  PendingReply_Tx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingReply_Tx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingReply_Tx& from);
  void MergeFrom(const PendingReply_Tx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingReply_Tx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.PendingReply.Tx";
  }
  protected:
  explicit PendingReply_Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlpTxFieldNumber = 2,
    kSenderFieldNumber = 1,
    kIsLocalFieldNumber = 3,
  };
  // bytes rlp_tx = 2;
  void clear_rlp_tx();
  const std::string& rlp_tx() const;
  void set_rlp_tx(const std::string& value);
  void set_rlp_tx(std::string&& value);
  void set_rlp_tx(const char* value);
  void set_rlp_tx(const void* value, size_t size);
  std::string* mutable_rlp_tx();
  std::string* release_rlp_tx();
  void set_allocated_rlp_tx(std::string* rlp_tx);
  private:
  const std::string& _internal_rlp_tx() const;
  void _internal_set_rlp_tx(const std::string& value);
  std::string* _internal_mutable_rlp_tx();
  public:

  // .types.H160 sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::types::H160& sender() const;
  ::types::H160* release_sender();
  ::types::H160* mutable_sender();
  void set_allocated_sender(::types::H160* sender);
  private:
  const ::types::H160& _internal_sender() const;
  ::types::H160* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::types::H160* sender);
  ::types::H160* unsafe_arena_release_sender();

  // bool is_local = 3;
  void clear_is_local();
  bool is_local() const;
  void set_is_local(bool value);
  private:
  bool _internal_is_local() const;
  void _internal_set_is_local(bool value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.PendingReply.Tx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rlp_tx_;
  ::types::H160* sender_;
  bool is_local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class PendingReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.PendingReply) */ {
 public:
  inline PendingReply() : PendingReply(nullptr) {}
  virtual ~PendingReply();

  PendingReply(const PendingReply& from);
  PendingReply(PendingReply&& from) noexcept
    : PendingReply() {
    *this = ::std::move(from);
  }

  inline PendingReply& operator=(const PendingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingReply& operator=(PendingReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingReply& default_instance();

  static inline const PendingReply* internal_default_instance() {
    return reinterpret_cast<const PendingReply*>(
               &_PendingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PendingReply& a, PendingReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingReply* New() const final {
    return CreateMaybeMessage<PendingReply>(nullptr);
  }

  PendingReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingReply& from);
  void MergeFrom(const PendingReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.PendingReply";
  }
  protected:
  explicit PendingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PendingReply_Tx Tx;

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 1,
  };
  // repeated .txpool.PendingReply.Tx txs = 1;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::txpool::PendingReply_Tx* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::PendingReply_Tx >*
      mutable_txs();
  private:
  const ::txpool::PendingReply_Tx& _internal_txs(int index) const;
  ::txpool::PendingReply_Tx* _internal_add_txs();
  public:
  const ::txpool::PendingReply_Tx& txs(int index) const;
  ::txpool::PendingReply_Tx* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::PendingReply_Tx >&
      txs() const;

  // @@protoc_insertion_point(class_scope:txpool.PendingReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::PendingReply_Tx > txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {}
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class StatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.StatusReply) */ {
 public:
  inline StatusReply() : StatusReply(nullptr) {}
  virtual ~StatusReply();

  StatusReply(const StatusReply& from);
  StatusReply(StatusReply&& from) noexcept
    : StatusReply() {
    *this = ::std::move(from);
  }

  inline StatusReply& operator=(const StatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusReply& operator=(StatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusReply& default_instance();

  static inline const StatusReply* internal_default_instance() {
    return reinterpret_cast<const StatusReply*>(
               &_StatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StatusReply& a, StatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusReply* New() const final {
    return CreateMaybeMessage<StatusReply>(nullptr);
  }

  StatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusReply& from);
  void MergeFrom(const StatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.StatusReply";
  }
  protected:
  explicit StatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingCountFieldNumber = 1,
    kQueuedCountFieldNumber = 2,
    kBaseFeeCountFieldNumber = 3,
  };
  // uint32 pending_count = 1;
  void clear_pending_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_count() const;
  void set_pending_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending_count() const;
  void _internal_set_pending_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 queued_count = 2;
  void clear_queued_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 queued_count() const;
  void set_queued_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_queued_count() const;
  void _internal_set_queued_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 base_fee_count = 3;
  void clear_base_fee_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_fee_count() const;
  void set_base_fee_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_fee_count() const;
  void _internal_set_base_fee_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.StatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 queued_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_fee_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class NonceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.NonceRequest) */ {
 public:
  inline NonceRequest() : NonceRequest(nullptr) {}
  virtual ~NonceRequest();

  NonceRequest(const NonceRequest& from);
  NonceRequest(NonceRequest&& from) noexcept
    : NonceRequest() {
    *this = ::std::move(from);
  }

  inline NonceRequest& operator=(const NonceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonceRequest& operator=(NonceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NonceRequest& default_instance();

  static inline const NonceRequest* internal_default_instance() {
    return reinterpret_cast<const NonceRequest*>(
               &_NonceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NonceRequest& a, NonceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NonceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NonceRequest* New() const final {
    return CreateMaybeMessage<NonceRequest>(nullptr);
  }

  NonceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NonceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NonceRequest& from);
  void MergeFrom(const NonceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.NonceRequest";
  }
  protected:
  explicit NonceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // .types.H160 address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::types::H160& address() const;
  ::types::H160* release_address();
  ::types::H160* mutable_address();
  void set_allocated_address(::types::H160* address);
  private:
  const ::types::H160& _internal_address() const;
  ::types::H160* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::types::H160* address);
  ::types::H160* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:txpool.NonceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::types::H160* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class NonceReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.NonceReply) */ {
 public:
  inline NonceReply() : NonceReply(nullptr) {}
  virtual ~NonceReply();

  NonceReply(const NonceReply& from);
  NonceReply(NonceReply&& from) noexcept
    : NonceReply() {
    *this = ::std::move(from);
  }

  inline NonceReply& operator=(const NonceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonceReply& operator=(NonceReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NonceReply& default_instance();

  static inline const NonceReply* internal_default_instance() {
    return reinterpret_cast<const NonceReply*>(
               &_NonceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NonceReply& a, NonceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NonceReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NonceReply* New() const final {
    return CreateMaybeMessage<NonceReply>(nullptr);
  }

  NonceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NonceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NonceReply& from);
  void MergeFrom(const NonceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.NonceReply";
  }
  protected:
  explicit NonceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // uint64 nonce = 2;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.NonceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxHashes

// repeated .types.H256 hashes = 1;
inline int TxHashes::_internal_hashes_size() const {
  return hashes_.size();
}
inline int TxHashes::hashes_size() const {
  return _internal_hashes_size();
}
inline ::types::H256* TxHashes::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.TxHashes.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
TxHashes::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:txpool.TxHashes.hashes)
  return &hashes_;
}
inline const ::types::H256& TxHashes::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::types::H256& TxHashes::hashes(int index) const {
  // @@protoc_insertion_point(field_get:txpool.TxHashes.hashes)
  return _internal_hashes(index);
}
inline ::types::H256* TxHashes::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::types::H256* TxHashes::add_hashes() {
  // @@protoc_insertion_point(field_add:txpool.TxHashes.hashes)
  return _internal_add_hashes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
TxHashes::hashes() const {
  // @@protoc_insertion_point(field_list:txpool.TxHashes.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// AddRequest

// repeated bytes rlp_txs = 1;
inline int AddRequest::_internal_rlp_txs_size() const {
  return rlp_txs_.size();
}
inline int AddRequest::rlp_txs_size() const {
  return _internal_rlp_txs_size();
}
inline void AddRequest::clear_rlp_txs() {
  rlp_txs_.Clear();
}
inline std::string* AddRequest::add_rlp_txs() {
  // @@protoc_insertion_point(field_add_mutable:txpool.AddRequest.rlp_txs)
  return _internal_add_rlp_txs();
}
inline const std::string& AddRequest::_internal_rlp_txs(int index) const {
  return rlp_txs_.Get(index);
}
inline const std::string& AddRequest::rlp_txs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AddRequest.rlp_txs)
  return _internal_rlp_txs(index);
}
inline std::string* AddRequest::mutable_rlp_txs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.AddRequest.rlp_txs)
  return rlp_txs_.Mutable(index);
}
inline void AddRequest::set_rlp_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.AddRequest.rlp_txs)
  rlp_txs_.Mutable(index)->assign(value);
}
inline void AddRequest::set_rlp_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.AddRequest.rlp_txs)
  rlp_txs_.Mutable(index)->assign(std::move(value));
}
inline void AddRequest::set_rlp_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlp_txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::set_rlp_txs(int index, const void* value, size_t size) {
  rlp_txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.AddRequest.rlp_txs)
}
inline std::string* AddRequest::_internal_add_rlp_txs() {
  return rlp_txs_.Add();
}
inline void AddRequest::add_rlp_txs(const std::string& value) {
  rlp_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(std::string&& value) {
  rlp_txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlp_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(const void* value, size_t size) {
  rlp_txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.AddRequest.rlp_txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddRequest::rlp_txs() const {
  // @@protoc_insertion_point(field_list:txpool.AddRequest.rlp_txs)
  return rlp_txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddRequest::mutable_rlp_txs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddRequest.rlp_txs)
  return &rlp_txs_;
}

// -------------------------------------------------------------------

// AddReply

// repeated .txpool.ImportResult imported = 1;
inline int AddReply::_internal_imported_size() const {
  return imported_.size();
}
inline int AddReply::imported_size() const {
  return _internal_imported_size();
}
inline void AddReply::clear_imported() {
  imported_.Clear();
}
inline ::txpool::ImportResult AddReply::_internal_imported(int index) const {
  return static_cast< ::txpool::ImportResult >(imported_.Get(index));
}
inline ::txpool::ImportResult AddReply::imported(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AddReply.imported)
  return _internal_imported(index);
}
inline void AddReply::set_imported(int index, ::txpool::ImportResult value) {
  imported_.Set(index, value);
  // @@protoc_insertion_point(field_set:txpool.AddReply.imported)
}
inline void AddReply::_internal_add_imported(::txpool::ImportResult value) {
  imported_.Add(value);
}
inline void AddReply::add_imported(::txpool::ImportResult value) {
  // @@protoc_insertion_point(field_add:txpool.AddReply.imported)
  _internal_add_imported(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AddReply::imported() const {
  // @@protoc_insertion_point(field_list:txpool.AddReply.imported)
  return imported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AddReply::_internal_mutable_imported() {
  return &imported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AddReply::mutable_imported() {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddReply.imported)
  return _internal_mutable_imported();
}

// repeated string errors = 2;
inline int AddReply::_internal_errors_size() const {
  return errors_.size();
}
inline int AddReply::errors_size() const {
  return _internal_errors_size();
}
inline void AddReply::clear_errors() {
  errors_.Clear();
}
inline std::string* AddReply::add_errors() {
  // @@protoc_insertion_point(field_add_mutable:txpool.AddReply.errors)
  return _internal_add_errors();
}
inline const std::string& AddReply::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const std::string& AddReply::errors(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AddReply.errors)
  return _internal_errors(index);
}
inline std::string* AddReply::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.AddReply.errors)
  return errors_.Mutable(index);
}
inline void AddReply::set_errors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.AddReply.errors)
  errors_.Mutable(index)->assign(value);
}
inline void AddReply::set_errors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.AddReply.errors)
  errors_.Mutable(index)->assign(std::move(value));
}
inline void AddReply::set_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.AddReply.errors)
}
inline void AddReply::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.AddReply.errors)
}
inline std::string* AddReply::_internal_add_errors() {
  return errors_.Add();
}
inline void AddReply::add_errors(const std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.AddReply.errors)
}
inline void AddReply::add_errors(std::string&& value) {
  errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.AddReply.errors)
}
inline void AddReply::add_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.AddReply.errors)
}
inline void AddReply::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.AddReply.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddReply::errors() const {
  // @@protoc_insertion_point(field_list:txpool.AddReply.errors)
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddReply::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddReply.errors)
  return &errors_;
}

// -------------------------------------------------------------------

// TransactionsRequest

// repeated .types.H256 hashes = 1;
inline int TransactionsRequest::_internal_hashes_size() const {
  return hashes_.size();
}
inline int TransactionsRequest::hashes_size() const {
  return _internal_hashes_size();
}
inline ::types::H256* TransactionsRequest::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.TransactionsRequest.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
TransactionsRequest::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:txpool.TransactionsRequest.hashes)
  return &hashes_;
}
inline const ::types::H256& TransactionsRequest::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::types::H256& TransactionsRequest::hashes(int index) const {
  // @@protoc_insertion_point(field_get:txpool.TransactionsRequest.hashes)
  return _internal_hashes(index);
}
inline ::types::H256* TransactionsRequest::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::types::H256* TransactionsRequest::add_hashes() {
  // @@protoc_insertion_point(field_add:txpool.TransactionsRequest.hashes)
  return _internal_add_hashes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
TransactionsRequest::hashes() const {
  // @@protoc_insertion_point(field_list:txpool.TransactionsRequest.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// TransactionsReply

// repeated bytes rlp_txs = 1;
inline int TransactionsReply::_internal_rlp_txs_size() const {
  return rlp_txs_.size();
}
inline int TransactionsReply::rlp_txs_size() const {
  return _internal_rlp_txs_size();
}
inline void TransactionsReply::clear_rlp_txs() {
  rlp_txs_.Clear();
}
inline std::string* TransactionsReply::add_rlp_txs() {
  // @@protoc_insertion_point(field_add_mutable:txpool.TransactionsReply.rlp_txs)
  return _internal_add_rlp_txs();
}
inline const std::string& TransactionsReply::_internal_rlp_txs(int index) const {
  return rlp_txs_.Get(index);
}
inline const std::string& TransactionsReply::rlp_txs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.TransactionsReply.rlp_txs)
  return _internal_rlp_txs(index);
}
inline std::string* TransactionsReply::mutable_rlp_txs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.TransactionsReply.rlp_txs)
  return rlp_txs_.Mutable(index);
}
inline void TransactionsReply::set_rlp_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.TransactionsReply.rlp_txs)
  rlp_txs_.Mutable(index)->assign(value);
}
inline void TransactionsReply::set_rlp_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.TransactionsReply.rlp_txs)
  rlp_txs_.Mutable(index)->assign(std::move(value));
}
inline void TransactionsReply::set_rlp_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlp_txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::set_rlp_txs(int index, const void* value, size_t size) {
  rlp_txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.TransactionsReply.rlp_txs)
}
inline std::string* TransactionsReply::_internal_add_rlp_txs() {
  return rlp_txs_.Add();
}
inline void TransactionsReply::add_rlp_txs(const std::string& value) {
  rlp_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(std::string&& value) {
  rlp_txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlp_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(const void* value, size_t size) {
  rlp_txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.TransactionsReply.rlp_txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionsReply::rlp_txs() const {
  // @@protoc_insertion_point(field_list:txpool.TransactionsReply.rlp_txs)
  return rlp_txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionsReply::mutable_rlp_txs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.TransactionsReply.rlp_txs)
  return &rlp_txs_;
}

// -------------------------------------------------------------------

// OnAddRequest

// -------------------------------------------------------------------

// OnAddReply

// repeated bytes rpl_txs = 1;
inline int OnAddReply::_internal_rpl_txs_size() const {
  return rpl_txs_.size();
}
inline int OnAddReply::rpl_txs_size() const {
  return _internal_rpl_txs_size();
}
inline void OnAddReply::clear_rpl_txs() {
  rpl_txs_.Clear();
}
inline std::string* OnAddReply::add_rpl_txs() {
  // @@protoc_insertion_point(field_add_mutable:txpool.OnAddReply.rpl_txs)
  return _internal_add_rpl_txs();
}
inline const std::string& OnAddReply::_internal_rpl_txs(int index) const {
  return rpl_txs_.Get(index);
}
inline const std::string& OnAddReply::rpl_txs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.OnAddReply.rpl_txs)
  return _internal_rpl_txs(index);
}
inline std::string* OnAddReply::mutable_rpl_txs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.OnAddReply.rpl_txs)
  return rpl_txs_.Mutable(index);
}
inline void OnAddReply::set_rpl_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.OnAddReply.rpl_txs)
  rpl_txs_.Mutable(index)->assign(value);
}
inline void OnAddReply::set_rpl_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.OnAddReply.rpl_txs)
  rpl_txs_.Mutable(index)->assign(std::move(value));
}
inline void OnAddReply::set_rpl_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rpl_txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::set_rpl_txs(int index, const void* value, size_t size) {
  rpl_txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.OnAddReply.rpl_txs)
}
inline std::string* OnAddReply::_internal_add_rpl_txs() {
  return rpl_txs_.Add();
}
inline void OnAddReply::add_rpl_txs(const std::string& value) {
  rpl_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(std::string&& value) {
  rpl_txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rpl_txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(const void* value, size_t size) {
  rpl_txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.OnAddReply.rpl_txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OnAddReply::rpl_txs() const {
  // @@protoc_insertion_point(field_list:txpool.OnAddReply.rpl_txs)
  return rpl_txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OnAddReply::mutable_rpl_txs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.OnAddReply.rpl_txs)
  return &rpl_txs_;
}

// -------------------------------------------------------------------

// AllRequest

// -------------------------------------------------------------------

// AllReply_Tx

// .txpool.AllReply.TxnType txn_type = 1;
inline void AllReply_Tx::clear_txn_type() {
  txn_type_ = 0;
}
inline ::txpool::AllReply_TxnType AllReply_Tx::_internal_txn_type() const {
  return static_cast< ::txpool::AllReply_TxnType >(txn_type_);
}
inline ::txpool::AllReply_TxnType AllReply_Tx::txn_type() const {
  // @@protoc_insertion_point(field_get:txpool.AllReply.Tx.txn_type)
  return _internal_txn_type();
}
inline void AllReply_Tx::_internal_set_txn_type(::txpool::AllReply_TxnType value) {
  
  txn_type_ = value;
}
inline void AllReply_Tx::set_txn_type(::txpool::AllReply_TxnType value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:txpool.AllReply.Tx.txn_type)
}

// .types.H160 sender = 2;
inline bool AllReply_Tx::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool AllReply_Tx::has_sender() const {
  return _internal_has_sender();
}
inline const ::types::H160& AllReply_Tx::_internal_sender() const {
  const ::types::H160* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& AllReply_Tx::sender() const {
  // @@protoc_insertion_point(field_get:txpool.AllReply.Tx.sender)
  return _internal_sender();
}
inline void AllReply_Tx::unsafe_arena_set_allocated_sender(
    ::types::H160* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txpool.AllReply.Tx.sender)
}
inline ::types::H160* AllReply_Tx::release_sender() {
  
  ::types::H160* temp = sender_;
  sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H160* AllReply_Tx::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:txpool.AllReply.Tx.sender)
  
  ::types::H160* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::types::H160* AllReply_Tx::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::types::H160* AllReply_Tx::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:txpool.AllReply.Tx.sender)
  return _internal_mutable_sender();
}
inline void AllReply_Tx::set_allocated_sender(::types::H160* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender)->GetArena();
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:txpool.AllReply.Tx.sender)
}

// bytes rlp_tx = 3;
inline void AllReply_Tx::clear_rlp_tx() {
  rlp_tx_.ClearToEmpty();
}
inline const std::string& AllReply_Tx::rlp_tx() const {
  // @@protoc_insertion_point(field_get:txpool.AllReply.Tx.rlp_tx)
  return _internal_rlp_tx();
}
inline void AllReply_Tx::set_rlp_tx(const std::string& value) {
  _internal_set_rlp_tx(value);
  // @@protoc_insertion_point(field_set:txpool.AllReply.Tx.rlp_tx)
}
inline std::string* AllReply_Tx::mutable_rlp_tx() {
  // @@protoc_insertion_point(field_mutable:txpool.AllReply.Tx.rlp_tx)
  return _internal_mutable_rlp_tx();
}
inline const std::string& AllReply_Tx::_internal_rlp_tx() const {
  return rlp_tx_.Get();
}
inline void AllReply_Tx::_internal_set_rlp_tx(const std::string& value) {
  
  rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AllReply_Tx::set_rlp_tx(std::string&& value) {
  
  rlp_tx_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.AllReply.Tx.rlp_tx)
}
inline void AllReply_Tx::set_rlp_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.AllReply.Tx.rlp_tx)
}
inline void AllReply_Tx::set_rlp_tx(const void* value,
    size_t size) {
  
  rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.AllReply.Tx.rlp_tx)
}
inline std::string* AllReply_Tx::_internal_mutable_rlp_tx() {
  
  return rlp_tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AllReply_Tx::release_rlp_tx() {
  // @@protoc_insertion_point(field_release:txpool.AllReply.Tx.rlp_tx)
  return rlp_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AllReply_Tx::set_allocated_rlp_tx(std::string* rlp_tx) {
  if (rlp_tx != nullptr) {
    
  } else {
    
  }
  rlp_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rlp_tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.AllReply.Tx.rlp_tx)
}

// -------------------------------------------------------------------

// AllReply

// repeated .txpool.AllReply.Tx txs = 1;
inline int AllReply::_internal_txs_size() const {
  return txs_.size();
}
inline int AllReply::txs_size() const {
  return _internal_txs_size();
}
inline void AllReply::clear_txs() {
  txs_.Clear();
}
inline ::txpool::AllReply_Tx* AllReply::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.AllReply.txs)
  return txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::AllReply_Tx >*
AllReply::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.AllReply.txs)
  return &txs_;
}
inline const ::txpool::AllReply_Tx& AllReply::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const ::txpool::AllReply_Tx& AllReply::txs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AllReply.txs)
  return _internal_txs(index);
}
inline ::txpool::AllReply_Tx* AllReply::_internal_add_txs() {
  return txs_.Add();
}
inline ::txpool::AllReply_Tx* AllReply::add_txs() {
  // @@protoc_insertion_point(field_add:txpool.AllReply.txs)
  return _internal_add_txs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::AllReply_Tx >&
AllReply::txs() const {
  // @@protoc_insertion_point(field_list:txpool.AllReply.txs)
  return txs_;
}

// -------------------------------------------------------------------

// PendingReply_Tx

// .types.H160 sender = 1;
inline bool PendingReply_Tx::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool PendingReply_Tx::has_sender() const {
  return _internal_has_sender();
}
inline const ::types::H160& PendingReply_Tx::_internal_sender() const {
  const ::types::H160* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& PendingReply_Tx::sender() const {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.Tx.sender)
  return _internal_sender();
}
inline void PendingReply_Tx::unsafe_arena_set_allocated_sender(
    ::types::H160* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txpool.PendingReply.Tx.sender)
}
inline ::types::H160* PendingReply_Tx::release_sender() {
  
  ::types::H160* temp = sender_;
  sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H160* PendingReply_Tx::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:txpool.PendingReply.Tx.sender)
  
  ::types::H160* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::types::H160* PendingReply_Tx::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::types::H160* PendingReply_Tx::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:txpool.PendingReply.Tx.sender)
  return _internal_mutable_sender();
}
inline void PendingReply_Tx::set_allocated_sender(::types::H160* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender)->GetArena();
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:txpool.PendingReply.Tx.sender)
}

// bytes rlp_tx = 2;
inline void PendingReply_Tx::clear_rlp_tx() {
  rlp_tx_.ClearToEmpty();
}
inline const std::string& PendingReply_Tx::rlp_tx() const {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.Tx.rlp_tx)
  return _internal_rlp_tx();
}
inline void PendingReply_Tx::set_rlp_tx(const std::string& value) {
  _internal_set_rlp_tx(value);
  // @@protoc_insertion_point(field_set:txpool.PendingReply.Tx.rlp_tx)
}
inline std::string* PendingReply_Tx::mutable_rlp_tx() {
  // @@protoc_insertion_point(field_mutable:txpool.PendingReply.Tx.rlp_tx)
  return _internal_mutable_rlp_tx();
}
inline const std::string& PendingReply_Tx::_internal_rlp_tx() const {
  return rlp_tx_.Get();
}
inline void PendingReply_Tx::_internal_set_rlp_tx(const std::string& value) {
  
  rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PendingReply_Tx::set_rlp_tx(std::string&& value) {
  
  rlp_tx_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.PendingReply.Tx.rlp_tx)
}
inline void PendingReply_Tx::set_rlp_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.PendingReply.Tx.rlp_tx)
}
inline void PendingReply_Tx::set_rlp_tx(const void* value,
    size_t size) {
  
  rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.PendingReply.Tx.rlp_tx)
}
inline std::string* PendingReply_Tx::_internal_mutable_rlp_tx() {
  
  return rlp_tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PendingReply_Tx::release_rlp_tx() {
  // @@protoc_insertion_point(field_release:txpool.PendingReply.Tx.rlp_tx)
  return rlp_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PendingReply_Tx::set_allocated_rlp_tx(std::string* rlp_tx) {
  if (rlp_tx != nullptr) {
    
  } else {
    
  }
  rlp_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rlp_tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.PendingReply.Tx.rlp_tx)
}

// bool is_local = 3;
inline void PendingReply_Tx::clear_is_local() {
  is_local_ = false;
}
inline bool PendingReply_Tx::_internal_is_local() const {
  return is_local_;
}
inline bool PendingReply_Tx::is_local() const {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.Tx.is_local)
  return _internal_is_local();
}
inline void PendingReply_Tx::_internal_set_is_local(bool value) {
  
  is_local_ = value;
}
inline void PendingReply_Tx::set_is_local(bool value) {
  _internal_set_is_local(value);
  // @@protoc_insertion_point(field_set:txpool.PendingReply.Tx.is_local)
}

// -------------------------------------------------------------------

// PendingReply

// repeated .txpool.PendingReply.Tx txs = 1;
inline int PendingReply::_internal_txs_size() const {
  return txs_.size();
}
inline int PendingReply::txs_size() const {
  return _internal_txs_size();
}
inline void PendingReply::clear_txs() {
  txs_.Clear();
}
inline ::txpool::PendingReply_Tx* PendingReply::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.PendingReply.txs)
  return txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::PendingReply_Tx >*
PendingReply::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.PendingReply.txs)
  return &txs_;
}
inline const ::txpool::PendingReply_Tx& PendingReply::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const ::txpool::PendingReply_Tx& PendingReply::txs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.txs)
  return _internal_txs(index);
}
inline ::txpool::PendingReply_Tx* PendingReply::_internal_add_txs() {
  return txs_.Add();
}
inline ::txpool::PendingReply_Tx* PendingReply::add_txs() {
  // @@protoc_insertion_point(field_add:txpool.PendingReply.txs)
  return _internal_add_txs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::txpool::PendingReply_Tx >&
PendingReply::txs() const {
  // @@protoc_insertion_point(field_list:txpool.PendingReply.txs)
  return txs_;
}

// -------------------------------------------------------------------

// StatusRequest

// -------------------------------------------------------------------

// StatusReply

// uint32 pending_count = 1;
inline void StatusReply::clear_pending_count() {
  pending_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusReply::_internal_pending_count() const {
  return pending_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusReply::pending_count() const {
  // @@protoc_insertion_point(field_get:txpool.StatusReply.pending_count)
  return _internal_pending_count();
}
inline void StatusReply::_internal_set_pending_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pending_count_ = value;
}
inline void StatusReply::set_pending_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending_count(value);
  // @@protoc_insertion_point(field_set:txpool.StatusReply.pending_count)
}

// uint32 queued_count = 2;
inline void StatusReply::clear_queued_count() {
  queued_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusReply::_internal_queued_count() const {
  return queued_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusReply::queued_count() const {
  // @@protoc_insertion_point(field_get:txpool.StatusReply.queued_count)
  return _internal_queued_count();
}
inline void StatusReply::_internal_set_queued_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  queued_count_ = value;
}
inline void StatusReply::set_queued_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_queued_count(value);
  // @@protoc_insertion_point(field_set:txpool.StatusReply.queued_count)
}

// uint32 base_fee_count = 3;
inline void StatusReply::clear_base_fee_count() {
  base_fee_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusReply::_internal_base_fee_count() const {
  return base_fee_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusReply::base_fee_count() const {
  // @@protoc_insertion_point(field_get:txpool.StatusReply.base_fee_count)
  return _internal_base_fee_count();
}
inline void StatusReply::_internal_set_base_fee_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  base_fee_count_ = value;
}
inline void StatusReply::set_base_fee_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_fee_count(value);
  // @@protoc_insertion_point(field_set:txpool.StatusReply.base_fee_count)
}

// -------------------------------------------------------------------

// NonceRequest

// .types.H160 address = 1;
inline bool NonceRequest::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool NonceRequest::has_address() const {
  return _internal_has_address();
}
inline const ::types::H160& NonceRequest::_internal_address() const {
  const ::types::H160* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& NonceRequest::address() const {
  // @@protoc_insertion_point(field_get:txpool.NonceRequest.address)
  return _internal_address();
}
inline void NonceRequest::unsafe_arena_set_allocated_address(
    ::types::H160* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txpool.NonceRequest.address)
}
inline ::types::H160* NonceRequest::release_address() {
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H160* NonceRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:txpool.NonceRequest.address)
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::types::H160* NonceRequest::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::types::H160* NonceRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:txpool.NonceRequest.address)
  return _internal_mutable_address();
}
inline void NonceRequest::set_allocated_address(::types::H160* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:txpool.NonceRequest.address)
}

// -------------------------------------------------------------------

// NonceReply

// bool found = 1;
inline void NonceReply::clear_found() {
  found_ = false;
}
inline bool NonceReply::_internal_found() const {
  return found_;
}
inline bool NonceReply::found() const {
  // @@protoc_insertion_point(field_get:txpool.NonceReply.found)
  return _internal_found();
}
inline void NonceReply::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void NonceReply::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:txpool.NonceReply.found)
}

// uint64 nonce = 2;
inline void NonceReply::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NonceReply::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NonceReply::nonce() const {
  // @@protoc_insertion_point(field_get:txpool.NonceReply.nonce)
  return _internal_nonce();
}
inline void NonceReply::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void NonceReply::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:txpool.NonceReply.nonce)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txpool

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::txpool::AllReply_TxnType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txpool::AllReply_TxnType>() {
  return ::txpool::AllReply_TxnType_descriptor();
}
template <> struct is_proto_enum< ::txpool::ImportResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txpool::ImportResult>() {
  return ::txpool::ImportResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto
