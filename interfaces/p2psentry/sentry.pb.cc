// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2psentry/sentry.proto

#include "p2psentry/sentry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_p2psentry_2fsentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Forks_p2psentry_2fsentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_p2psentry_2fsentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H256_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H512_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerInfo_types_2ftypes_2eproto;
namespace sentry {
class OutboundMessageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutboundMessageData> _instance;
} _OutboundMessageData_default_instance_;
class SendMessageByMinBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageByMinBlockRequest> _instance;
} _SendMessageByMinBlockRequest_default_instance_;
class SendMessageByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageByIdRequest> _instance;
} _SendMessageByIdRequest_default_instance_;
class SendMessageToRandomPeersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageToRandomPeersRequest> _instance;
} _SendMessageToRandomPeersRequest_default_instance_;
class SentPeersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentPeers> _instance;
} _SentPeers_default_instance_;
class PenalizePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PenalizePeerRequest> _instance;
} _PenalizePeerRequest_default_instance_;
class PeerMinBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerMinBlockRequest> _instance;
} _PeerMinBlockRequest_default_instance_;
class InboundMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InboundMessage> _instance;
} _InboundMessage_default_instance_;
class ForksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Forks> _instance;
} _Forks_default_instance_;
class StatusDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusData> _instance;
} _StatusData_default_instance_;
class SetStatusReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetStatusReply> _instance;
} _SetStatusReply_default_instance_;
class HandShakeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandShakeReply> _instance;
} _HandShakeReply_default_instance_;
class MessagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagesRequest> _instance;
} _MessagesRequest_default_instance_;
class PeersReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeersReply> _instance;
} _PeersReply_default_instance_;
class PeerCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerCountRequest> _instance;
} _PeerCountRequest_default_instance_;
class PeerCountReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerCountReply> _instance;
} _PeerCountReply_default_instance_;
class PeerByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerByIdRequest> _instance;
} _PeerByIdRequest_default_instance_;
class PeerByIdReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerByIdReply> _instance;
} _PeerByIdReply_default_instance_;
class PeerEventsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerEventsRequest> _instance;
} _PeerEventsRequest_default_instance_;
class PeerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerEvent> _instance;
} _PeerEvent_default_instance_;
}  // namespace sentry
static void InitDefaultsscc_info_Forks_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_Forks_default_instance_;
    new (ptr) ::sentry::Forks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Forks_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Forks_p2psentry_2fsentry_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_HandShakeReply_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_HandShakeReply_default_instance_;
    new (ptr) ::sentry::HandShakeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandShakeReply_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HandShakeReply_p2psentry_2fsentry_2eproto}, {}};

static void InitDefaultsscc_info_InboundMessage_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_InboundMessage_default_instance_;
    new (ptr) ::sentry::InboundMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InboundMessage_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InboundMessage_p2psentry_2fsentry_2eproto}, {
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_MessagesRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_MessagesRequest_default_instance_;
    new (ptr) ::sentry::MessagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagesRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagesRequest_p2psentry_2fsentry_2eproto}, {}};

static void InitDefaultsscc_info_OutboundMessageData_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_OutboundMessageData_default_instance_;
    new (ptr) ::sentry::OutboundMessageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutboundMessageData_p2psentry_2fsentry_2eproto}, {}};

static void InitDefaultsscc_info_PeerByIdReply_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerByIdReply_default_instance_;
    new (ptr) ::sentry::PeerByIdReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerByIdReply_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PeerByIdReply_p2psentry_2fsentry_2eproto}, {
      &scc_info_PeerInfo_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_PeerByIdRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerByIdRequest_default_instance_;
    new (ptr) ::sentry::PeerByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerByIdRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PeerByIdRequest_p2psentry_2fsentry_2eproto}, {
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_PeerCountReply_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerCountReply_default_instance_;
    new (ptr) ::sentry::PeerCountReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerCountReply_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerCountReply_p2psentry_2fsentry_2eproto}, {}};

static void InitDefaultsscc_info_PeerCountRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerCountRequest_default_instance_;
    new (ptr) ::sentry::PeerCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerCountRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerCountRequest_p2psentry_2fsentry_2eproto}, {}};

static void InitDefaultsscc_info_PeerEvent_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerEvent_default_instance_;
    new (ptr) ::sentry::PeerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerEvent_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PeerEvent_p2psentry_2fsentry_2eproto}, {
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_PeerEventsRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerEventsRequest_default_instance_;
    new (ptr) ::sentry::PeerEventsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerEventsRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerEventsRequest_p2psentry_2fsentry_2eproto}, {}};

static void InitDefaultsscc_info_PeerMinBlockRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerMinBlockRequest_default_instance_;
    new (ptr) ::sentry::PeerMinBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerMinBlockRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PeerMinBlockRequest_p2psentry_2fsentry_2eproto}, {
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_PeersReply_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeersReply_default_instance_;
    new (ptr) ::sentry::PeersReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeersReply_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PeersReply_p2psentry_2fsentry_2eproto}, {
      &scc_info_PeerInfo_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_PenalizePeerRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PenalizePeerRequest_default_instance_;
    new (ptr) ::sentry::PenalizePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PenalizePeerRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PenalizePeerRequest_p2psentry_2fsentry_2eproto}, {
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageByIdRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SendMessageByIdRequest_default_instance_;
    new (ptr) ::sentry::SendMessageByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendMessageByIdRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendMessageByIdRequest_p2psentry_2fsentry_2eproto}, {
      &scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto.base,
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageByMinBlockRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SendMessageByMinBlockRequest_default_instance_;
    new (ptr) ::sentry::SendMessageByMinBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageByMinBlockRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMessageByMinBlockRequest_p2psentry_2fsentry_2eproto}, {
      &scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageToRandomPeersRequest_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SendMessageToRandomPeersRequest_default_instance_;
    new (ptr) ::sentry::SendMessageToRandomPeersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageToRandomPeersRequest_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMessageToRandomPeersRequest_p2psentry_2fsentry_2eproto}, {
      &scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto.base,}};

static void InitDefaultsscc_info_SentPeers_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SentPeers_default_instance_;
    new (ptr) ::sentry::SentPeers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SentPeers_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SentPeers_p2psentry_2fsentry_2eproto}, {
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SetStatusReply_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SetStatusReply_default_instance_;
    new (ptr) ::sentry::SetStatusReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetStatusReply_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetStatusReply_p2psentry_2fsentry_2eproto}, {}};

static void InitDefaultsscc_info_StatusData_p2psentry_2fsentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_StatusData_default_instance_;
    new (ptr) ::sentry::StatusData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatusData_p2psentry_2fsentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StatusData_p2psentry_2fsentry_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,
      &scc_info_Forks_p2psentry_2fsentry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p2psentry_2fsentry_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_p2psentry_2fsentry_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p2psentry_2fsentry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_p2psentry_2fsentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, id_),
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, min_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, max_peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, penalty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, min_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, id_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, genesis_),
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, forks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, network_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, total_difficulty_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, best_hash_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, fork_data_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, max_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SetStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::HandShakeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::HandShakeReply, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::MessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::MessagesRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeersReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PeersReply, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountReply, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdRequest, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdReply, peer_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEvent, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEvent, event_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sentry::OutboundMessageData)},
  { 7, -1, sizeof(::sentry::SendMessageByMinBlockRequest)},
  { 14, -1, sizeof(::sentry::SendMessageByIdRequest)},
  { 21, -1, sizeof(::sentry::SendMessageToRandomPeersRequest)},
  { 28, -1, sizeof(::sentry::SentPeers)},
  { 34, -1, sizeof(::sentry::PenalizePeerRequest)},
  { 41, -1, sizeof(::sentry::PeerMinBlockRequest)},
  { 48, -1, sizeof(::sentry::InboundMessage)},
  { 56, -1, sizeof(::sentry::Forks)},
  { 63, -1, sizeof(::sentry::StatusData)},
  { 73, -1, sizeof(::sentry::SetStatusReply)},
  { 78, -1, sizeof(::sentry::HandShakeReply)},
  { 84, -1, sizeof(::sentry::MessagesRequest)},
  { 90, -1, sizeof(::sentry::PeersReply)},
  { 96, -1, sizeof(::sentry::PeerCountRequest)},
  { 101, -1, sizeof(::sentry::PeerCountReply)},
  { 107, -1, sizeof(::sentry::PeerByIdRequest)},
  { 113, 119, sizeof(::sentry::PeerByIdReply)},
  { 120, -1, sizeof(::sentry::PeerEventsRequest)},
  { 125, -1, sizeof(::sentry::PeerEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_OutboundMessageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageByMinBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageToRandomPeersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SentPeers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PenalizePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerMinBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_InboundMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_Forks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_StatusData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SetStatusReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_HandShakeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_MessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeersReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerCountReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerByIdReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerEventsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerEvent_default_instance_),
};

const char descriptor_table_protodef_p2psentry_2fsentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026p2psentry/sentry.proto\022\006sentry\032\033google"
  "/protobuf/empty.proto\032\021types/types.proto"
  "\"B\n\023OutboundMessageData\022\035\n\002id\030\001 \001(\0162\021.se"
  "ntry.MessageId\022\014\n\004data\030\002 \001(\014\"\\\n\034SendMess"
  "ageByMinBlockRequest\022)\n\004data\030\001 \001(\0132\033.sen"
  "try.OutboundMessageData\022\021\n\tmin_block\030\002 \001"
  "(\004\"a\n\026SendMessageByIdRequest\022)\n\004data\030\001 \001"
  "(\0132\033.sentry.OutboundMessageData\022\034\n\007peer_"
  "id\030\002 \001(\0132\013.types.H512\"_\n\037SendMessageToRa"
  "ndomPeersRequest\022)\n\004data\030\001 \001(\0132\033.sentry."
  "OutboundMessageData\022\021\n\tmax_peers\030\002 \001(\004\"\'"
  "\n\tSentPeers\022\032\n\005peers\030\001 \003(\0132\013.types.H512\""
  "Y\n\023PenalizePeerRequest\022\034\n\007peer_id\030\001 \001(\0132"
  "\013.types.H512\022$\n\007penalty\030\002 \001(\0162\023.sentry.P"
  "enaltyKind\"F\n\023PeerMinBlockRequest\022\034\n\007pee"
  "r_id\030\001 \001(\0132\013.types.H512\022\021\n\tmin_block\030\002 \001"
  "(\004\"[\n\016InboundMessage\022\035\n\002id\030\001 \001(\0162\021.sentr"
  "y.MessageId\022\014\n\004data\030\002 \001(\014\022\034\n\007peer_id\030\003 \001"
  "(\0132\013.types.H512\"4\n\005Forks\022\034\n\007genesis\030\001 \001("
  "\0132\013.types.H256\022\r\n\005forks\030\002 \003(\004\"\234\001\n\nStatus"
  "Data\022\022\n\nnetwork_id\030\001 \001(\004\022%\n\020total_diffic"
  "ulty\030\002 \001(\0132\013.types.H256\022\036\n\tbest_hash\030\003 \001"
  "(\0132\013.types.H256\022 \n\tfork_data\030\004 \001(\0132\r.sen"
  "try.Forks\022\021\n\tmax_block\030\005 \001(\004\"\020\n\016SetStatu"
  "sReply\"4\n\016HandShakeReply\022\"\n\010protocol\030\001 \001"
  "(\0162\020.sentry.Protocol\"1\n\017MessagesRequest\022"
  "\036\n\003ids\030\001 \003(\0162\021.sentry.MessageId\",\n\nPeers"
  "Reply\022\036\n\005peers\030\001 \003(\0132\017.types.PeerInfo\"\022\n"
  "\020PeerCountRequest\"\037\n\016PeerCountReply\022\r\n\005c"
  "ount\030\001 \001(\004\"/\n\017PeerByIdRequest\022\034\n\007peer_id"
  "\030\001 \001(\0132\013.types.H512\"<\n\rPeerByIdReply\022\"\n\004"
  "peer\030\001 \001(\0132\017.types.PeerInfoH\000\210\001\001B\007\n\005_pee"
  "r\"\023\n\021PeerEventsRequest\"\206\001\n\tPeerEvent\022\034\n\007"
  "peer_id\030\001 \001(\0132\013.types.H512\022/\n\010event_id\030\002"
  " \001(\0162\035.sentry.PeerEvent.PeerEventId\"*\n\013P"
  "eerEventId\022\013\n\007Connect\020\000\022\016\n\nDisconnect\020\001*"
  "\332\005\n\tMessageId\022\r\n\tSTATUS_65\020\000\022\030\n\024GET_BLOC"
  "K_HEADERS_65\020\001\022\024\n\020BLOCK_HEADERS_65\020\002\022\023\n\017"
  "BLOCK_HASHES_65\020\003\022\027\n\023GET_BLOCK_BODIES_65"
  "\020\004\022\023\n\017BLOCK_BODIES_65\020\005\022\024\n\020GET_NODE_DATA"
  "_65\020\006\022\020\n\014NODE_DATA_65\020\007\022\023\n\017GET_RECEIPTS_"
  "65\020\010\022\017\n\013RECEIPTS_65\020\t\022\027\n\023NEW_BLOCK_HASHE"
  "S_65\020\n\022\020\n\014NEW_BLOCK_65\020\013\022\023\n\017TRANSACTIONS"
  "_65\020\014\022$\n NEW_POOLED_TRANSACTION_HASHES_6"
  "5\020\r\022\036\n\032GET_POOLED_TRANSACTIONS_65\020\016\022\032\n\026P"
  "OOLED_TRANSACTIONS_65\020\017\022\r\n\tSTATUS_66\020\021\022\027"
  "\n\023NEW_BLOCK_HASHES_66\020\022\022\020\n\014NEW_BLOCK_66\020"
  "\023\022\023\n\017TRANSACTIONS_66\020\024\022$\n NEW_POOLED_TRA"
  "NSACTION_HASHES_66\020\025\022\030\n\024GET_BLOCK_HEADER"
  "S_66\020\026\022\027\n\023GET_BLOCK_BODIES_66\020\027\022\024\n\020GET_N"
  "ODE_DATA_66\020\030\022\023\n\017GET_RECEIPTS_66\020\031\022\036\n\032GE"
  "T_POOLED_TRANSACTIONS_66\020\032\022\024\n\020BLOCK_HEAD"
  "ERS_66\020\033\022\023\n\017BLOCK_BODIES_66\020\034\022\020\n\014NODE_DA"
  "TA_66\020\035\022\017\n\013RECEIPTS_66\020\036\022\032\n\026POOLED_TRANS"
  "ACTIONS_66\020\037*\027\n\013PenaltyKind\022\010\n\004Kick\020\000*+\n"
  "\010Protocol\022\t\n\005ETH65\020\000\022\t\n\005ETH66\020\001\022\t\n\005ETH67"
  "\020\0022\243\007\n\006Sentry\0227\n\tSetStatus\022\022.sentry.Stat"
  "usData\032\026.sentry.SetStatusReply\022C\n\014Penali"
  "zePeer\022\033.sentry.PenalizePeerRequest\032\026.go"
  "ogle.protobuf.Empty\022C\n\014PeerMinBlock\022\033.se"
  "ntry.PeerMinBlockRequest\032\026.google.protob"
  "uf.Empty\022;\n\tHandShake\022\026.google.protobuf."
  "Empty\032\026.sentry.HandShakeReply\022P\n\025SendMes"
  "sageByMinBlock\022$.sentry.SendMessageByMin"
  "BlockRequest\032\021.sentry.SentPeers\022D\n\017SendM"
  "essageById\022\036.sentry.SendMessageByIdReque"
  "st\032\021.sentry.SentPeers\022V\n\030SendMessageToRa"
  "ndomPeers\022\'.sentry.SendMessageToRandomPe"
  "ersRequest\032\021.sentry.SentPeers\022B\n\020SendMes"
  "sageToAll\022\033.sentry.OutboundMessageData\032\021"
  ".sentry.SentPeers\022=\n\010Messages\022\027.sentry.M"
  "essagesRequest\032\026.sentry.InboundMessage0\001"
  "\0223\n\005Peers\022\026.google.protobuf.Empty\032\022.sent"
  "ry.PeersReply\022=\n\tPeerCount\022\030.sentry.Peer"
  "CountRequest\032\026.sentry.PeerCountReply\022:\n\010"
  "PeerById\022\027.sentry.PeerByIdRequest\032\025.sent"
  "ry.PeerByIdReply\022<\n\nPeerEvents\022\031.sentry."
  "PeerEventsRequest\032\021.sentry.PeerEvent0\001\0228"
  "\n\010NodeInfo\022\026.google.protobuf.Empty\032\024.typ"
  "es.NodeInfoReplyB\021Z\017./sentry;sentryb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_p2psentry_2fsentry_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_p2psentry_2fsentry_2eproto_sccs[20] = {
  &scc_info_Forks_p2psentry_2fsentry_2eproto.base,
  &scc_info_HandShakeReply_p2psentry_2fsentry_2eproto.base,
  &scc_info_InboundMessage_p2psentry_2fsentry_2eproto.base,
  &scc_info_MessagesRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeerByIdReply_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeerByIdRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeerCountReply_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeerCountRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeerEvent_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeerEventsRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeerMinBlockRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_PeersReply_p2psentry_2fsentry_2eproto.base,
  &scc_info_PenalizePeerRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_SendMessageByIdRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_SendMessageByMinBlockRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_SendMessageToRandomPeersRequest_p2psentry_2fsentry_2eproto.base,
  &scc_info_SentPeers_p2psentry_2fsentry_2eproto.base,
  &scc_info_SetStatusReply_p2psentry_2fsentry_2eproto.base,
  &scc_info_StatusData_p2psentry_2fsentry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p2psentry_2fsentry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p2psentry_2fsentry_2eproto = {
  false, false, descriptor_table_protodef_p2psentry_2fsentry_2eproto, "p2psentry/sentry.proto", 3203,
  &descriptor_table_p2psentry_2fsentry_2eproto_once, descriptor_table_p2psentry_2fsentry_2eproto_sccs, descriptor_table_p2psentry_2fsentry_2eproto_deps, 20, 2,
  schemas, file_default_instances, TableStruct_p2psentry_2fsentry_2eproto::offsets,
  file_level_metadata_p2psentry_2fsentry_2eproto, 20, file_level_enum_descriptors_p2psentry_2fsentry_2eproto, file_level_service_descriptors_p2psentry_2fsentry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_p2psentry_2fsentry_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto)), true);
namespace sentry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerEvent_PeerEventId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[0];
}
bool PeerEvent_PeerEventId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerEvent_PeerEventId PeerEvent::Connect;
constexpr PeerEvent_PeerEventId PeerEvent::Disconnect;
constexpr PeerEvent_PeerEventId PeerEvent::PeerEventId_MIN;
constexpr PeerEvent_PeerEventId PeerEvent::PeerEventId_MAX;
constexpr int PeerEvent::PeerEventId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[1];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PenaltyKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[2];
}
bool PenaltyKind_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[3];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OutboundMessageData::_Internal {
 public:
};

OutboundMessageData::OutboundMessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.OutboundMessageData)
}
OutboundMessageData::OutboundMessageData(const OutboundMessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.OutboundMessageData)
}

void OutboundMessageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

OutboundMessageData::~OutboundMessageData() {
  // @@protoc_insertion_point(destructor:sentry.OutboundMessageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutboundMessageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutboundMessageData::ArenaDtor(void* object) {
  OutboundMessageData* _this = reinterpret_cast< OutboundMessageData* >(object);
  (void)_this;
}
void OutboundMessageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutboundMessageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutboundMessageData& OutboundMessageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutboundMessageData_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void OutboundMessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.OutboundMessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutboundMessageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutboundMessageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.OutboundMessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.OutboundMessageData)
  return target;
}

size_t OutboundMessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.OutboundMessageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutboundMessageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.OutboundMessageData)
  GOOGLE_DCHECK_NE(&from, this);
  const OutboundMessageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutboundMessageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.OutboundMessageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.OutboundMessageData)
    MergeFrom(*source);
  }
}

void OutboundMessageData::MergeFrom(const OutboundMessageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.OutboundMessageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void OutboundMessageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.OutboundMessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutboundMessageData::CopyFrom(const OutboundMessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.OutboundMessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundMessageData::IsInitialized() const {
  return true;
}

void OutboundMessageData::InternalSwap(OutboundMessageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutboundMessageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageByMinBlockRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByMinBlockRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByMinBlockRequest::_Internal::data(const SendMessageByMinBlockRequest* msg) {
  return *msg->data_;
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByMinBlockRequest)
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(const SendMessageByMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  min_block_ = from.min_block_;
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByMinBlockRequest)
}

void SendMessageByMinBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageByMinBlockRequest_p2psentry_2fsentry_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_block_) -
      reinterpret_cast<char*>(&data_)) + sizeof(min_block_));
}

SendMessageByMinBlockRequest::~SendMessageByMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByMinBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageByMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SendMessageByMinBlockRequest::ArenaDtor(void* object) {
  SendMessageByMinBlockRequest* _this = reinterpret_cast< SendMessageByMinBlockRequest* >(object);
  (void)_this;
}
void SendMessageByMinBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageByMinBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageByMinBlockRequest& SendMessageByMinBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageByMinBlockRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void SendMessageByMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  min_block_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByMinBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageByMinBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByMinBlockRequest)
  return target;
}

size_t SendMessageByMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByMinBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageByMinBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SendMessageByMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageByMinBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageByMinBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SendMessageByMinBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SendMessageByMinBlockRequest)
    MergeFrom(*source);
  }
}

void SendMessageByMinBlockRequest::MergeFrom(const SendMessageByMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from.min_block() != 0) {
    _internal_set_min_block(from._internal_min_block());
  }
}

void SendMessageByMinBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SendMessageByMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageByMinBlockRequest::CopyFrom(const SendMessageByMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByMinBlockRequest::IsInitialized() const {
  return true;
}

void SendMessageByMinBlockRequest::InternalSwap(SendMessageByMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, min_block_)
      + sizeof(SendMessageByMinBlockRequest::min_block_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByMinBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageByIdRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByIdRequest* msg);
  static const ::types::H512& peer_id(const SendMessageByIdRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByIdRequest::_Internal::data(const SendMessageByIdRequest* msg) {
  return *msg->data_;
}
const ::types::H512&
SendMessageByIdRequest::_Internal::peer_id(const SendMessageByIdRequest* msg) {
  return *msg->peer_id_;
}
void SendMessageByIdRequest::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
SendMessageByIdRequest::SendMessageByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByIdRequest)
}
SendMessageByIdRequest::SendMessageByIdRequest(const SendMessageByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByIdRequest)
}

void SendMessageByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageByIdRequest_p2psentry_2fsentry_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&peer_id_) -
      reinterpret_cast<char*>(&data_)) + sizeof(peer_id_));
}

SendMessageByIdRequest::~SendMessageByIdRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete peer_id_;
}

void SendMessageByIdRequest::ArenaDtor(void* object) {
  SendMessageByIdRequest* _this = reinterpret_cast< SendMessageByIdRequest* >(object);
  (void)_this;
}
void SendMessageByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageByIdRequest& SendMessageByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageByIdRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void SendMessageByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H512 peer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .types.H512 peer_id = 2;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::peer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByIdRequest)
  return target;
}

size_t SendMessageByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .types.H512 peer_id = 2;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SendMessageByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SendMessageByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SendMessageByIdRequest)
    MergeFrom(*source);
  }
}

void SendMessageByIdRequest::MergeFrom(const SendMessageByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
}

void SendMessageByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SendMessageByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageByIdRequest::CopyFrom(const SendMessageByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByIdRequest::IsInitialized() const {
  return true;
}

void SendMessageByIdRequest::InternalSwap(SendMessageByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, peer_id_)
      + sizeof(SendMessageByIdRequest::peer_id_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageToRandomPeersRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageToRandomPeersRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageToRandomPeersRequest::_Internal::data(const SendMessageToRandomPeersRequest* msg) {
  return *msg->data_;
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageToRandomPeersRequest)
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(const SendMessageToRandomPeersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  max_peers_ = from.max_peers_;
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageToRandomPeersRequest)
}

void SendMessageToRandomPeersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageToRandomPeersRequest_p2psentry_2fsentry_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_peers_) -
      reinterpret_cast<char*>(&data_)) + sizeof(max_peers_));
}

SendMessageToRandomPeersRequest::~SendMessageToRandomPeersRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageToRandomPeersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageToRandomPeersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SendMessageToRandomPeersRequest::ArenaDtor(void* object) {
  SendMessageToRandomPeersRequest* _this = reinterpret_cast< SendMessageToRandomPeersRequest* >(object);
  (void)_this;
}
void SendMessageToRandomPeersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageToRandomPeersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageToRandomPeersRequest& SendMessageToRandomPeersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageToRandomPeersRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void SendMessageToRandomPeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageToRandomPeersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  max_peers_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageToRandomPeersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_peers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageToRandomPeersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageToRandomPeersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // uint64 max_peers = 2;
  if (this->max_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_peers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageToRandomPeersRequest)
  return target;
}

size_t SendMessageToRandomPeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageToRandomPeersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 max_peers = 2;
  if (this->max_peers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_peers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageToRandomPeersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SendMessageToRandomPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageToRandomPeersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageToRandomPeersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SendMessageToRandomPeersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SendMessageToRandomPeersRequest)
    MergeFrom(*source);
  }
}

void SendMessageToRandomPeersRequest::MergeFrom(const SendMessageToRandomPeersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageToRandomPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from.max_peers() != 0) {
    _internal_set_max_peers(from._internal_max_peers());
  }
}

void SendMessageToRandomPeersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SendMessageToRandomPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageToRandomPeersRequest::CopyFrom(const SendMessageToRandomPeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageToRandomPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageToRandomPeersRequest::IsInitialized() const {
  return true;
}

void SendMessageToRandomPeersRequest::InternalSwap(SendMessageToRandomPeersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, max_peers_)
      + sizeof(SendMessageToRandomPeersRequest::max_peers_)
      - PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageToRandomPeersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SentPeers::_Internal {
 public:
};

void SentPeers::clear_peers() {
  peers_.Clear();
}
SentPeers::SentPeers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  peers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SentPeers)
}
SentPeers::SentPeers(const SentPeers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.SentPeers)
}

void SentPeers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentPeers_p2psentry_2fsentry_2eproto.base);
}

SentPeers::~SentPeers() {
  // @@protoc_insertion_point(destructor:sentry.SentPeers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SentPeers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SentPeers::ArenaDtor(void* object) {
  SentPeers* _this = reinterpret_cast< SentPeers* >(object);
  (void)_this;
}
void SentPeers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SentPeers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentPeers& SentPeers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentPeers_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void SentPeers::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SentPeers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentPeers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .types.H512 peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentPeers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SentPeers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SentPeers)
  return target;
}

size_t SentPeers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SentPeers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentPeers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SentPeers)
  GOOGLE_DCHECK_NE(&from, this);
  const SentPeers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentPeers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SentPeers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SentPeers)
    MergeFrom(*source);
  }
}

void SentPeers::MergeFrom(const SentPeers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SentPeers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void SentPeers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SentPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentPeers::CopyFrom(const SentPeers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SentPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentPeers::IsInitialized() const {
  return true;
}

void SentPeers::InternalSwap(SentPeers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SentPeers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PenalizePeerRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PenalizePeerRequest* msg);
};

const ::types::H512&
PenalizePeerRequest::_Internal::peer_id(const PenalizePeerRequest* msg) {
  return *msg->peer_id_;
}
void PenalizePeerRequest::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PenalizePeerRequest::PenalizePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PenalizePeerRequest)
}
PenalizePeerRequest::PenalizePeerRequest(const PenalizePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  penalty_ = from.penalty_;
  // @@protoc_insertion_point(copy_constructor:sentry.PenalizePeerRequest)
}

void PenalizePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PenalizePeerRequest_p2psentry_2fsentry_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&penalty_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(penalty_));
}

PenalizePeerRequest::~PenalizePeerRequest() {
  // @@protoc_insertion_point(destructor:sentry.PenalizePeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PenalizePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PenalizePeerRequest::ArenaDtor(void* object) {
  PenalizePeerRequest* _this = reinterpret_cast< PenalizePeerRequest* >(object);
  (void)_this;
}
void PenalizePeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PenalizePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PenalizePeerRequest& PenalizePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PenalizePeerRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PenalizePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PenalizePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  penalty_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PenalizePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sentry.PenaltyKind penalty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_penalty(static_cast<::sentry::PenaltyKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PenalizePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PenalizePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->penalty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PenalizePeerRequest)
  return target;
}

size_t PenalizePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PenalizePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->penalty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_penalty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PenalizePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PenalizePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PenalizePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PenalizePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PenalizePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PenalizePeerRequest)
    MergeFrom(*source);
  }
}

void PenalizePeerRequest::MergeFrom(const PenalizePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PenalizePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from.penalty() != 0) {
    _internal_set_penalty(from._internal_penalty());
  }
}

void PenalizePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PenalizePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PenalizePeerRequest::CopyFrom(const PenalizePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PenalizePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PenalizePeerRequest::IsInitialized() const {
  return true;
}

void PenalizePeerRequest::InternalSwap(PenalizePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, penalty_)
      + sizeof(PenalizePeerRequest::penalty_)
      - PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PenalizePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerMinBlockRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerMinBlockRequest* msg);
};

const ::types::H512&
PeerMinBlockRequest::_Internal::peer_id(const PeerMinBlockRequest* msg) {
  return *msg->peer_id_;
}
void PeerMinBlockRequest::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PeerMinBlockRequest::PeerMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerMinBlockRequest)
}
PeerMinBlockRequest::PeerMinBlockRequest(const PeerMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  min_block_ = from.min_block_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerMinBlockRequest)
}

void PeerMinBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerMinBlockRequest_p2psentry_2fsentry_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_block_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(min_block_));
}

PeerMinBlockRequest::~PeerMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerMinBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PeerMinBlockRequest::ArenaDtor(void* object) {
  PeerMinBlockRequest* _this = reinterpret_cast< PeerMinBlockRequest* >(object);
  (void)_this;
}
void PeerMinBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerMinBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerMinBlockRequest& PeerMinBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerMinBlockRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeerMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  min_block_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerMinBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerMinBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerMinBlockRequest)
  return target;
}

size_t PeerMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerMinBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerMinBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerMinBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerMinBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerMinBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerMinBlockRequest)
    MergeFrom(*source);
  }
}

void PeerMinBlockRequest::MergeFrom(const PeerMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from.min_block() != 0) {
    _internal_set_min_block(from._internal_min_block());
  }
}

void PeerMinBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerMinBlockRequest::CopyFrom(const PeerMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerMinBlockRequest::IsInitialized() const {
  return true;
}

void PeerMinBlockRequest::InternalSwap(PeerMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, min_block_)
      + sizeof(PeerMinBlockRequest::min_block_)
      - PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerMinBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InboundMessage::_Internal {
 public:
  static const ::types::H512& peer_id(const InboundMessage* msg);
};

const ::types::H512&
InboundMessage::_Internal::peer_id(const InboundMessage* msg) {
  return *msg->peer_id_;
}
void InboundMessage::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
InboundMessage::InboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.InboundMessage)
}
InboundMessage::InboundMessage(const InboundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.InboundMessage)
}

void InboundMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InboundMessage_p2psentry_2fsentry_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(id_));
}

InboundMessage::~InboundMessage() {
  // @@protoc_insertion_point(destructor:sentry.InboundMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InboundMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_id_;
}

void InboundMessage::ArenaDtor(void* object) {
  InboundMessage* _this = reinterpret_cast< InboundMessage* >(object);
  (void)_this;
}
void InboundMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InboundMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InboundMessage& InboundMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InboundMessage_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void InboundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.InboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InboundMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H512 peer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InboundMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.InboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .types.H512 peer_id = 3;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.InboundMessage)
  return target;
}

size_t InboundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.InboundMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H512 peer_id = 3;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InboundMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.InboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InboundMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InboundMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.InboundMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.InboundMessage)
    MergeFrom(*source);
  }
}

void InboundMessage::MergeFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.InboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void InboundMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboundMessage::CopyFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundMessage::IsInitialized() const {
  return true;
}

void InboundMessage::InternalSwap(InboundMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundMessage, id_)
      + sizeof(InboundMessage::id_)
      - PROTOBUF_FIELD_OFFSET(InboundMessage, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InboundMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Forks::_Internal {
 public:
  static const ::types::H256& genesis(const Forks* msg);
};

const ::types::H256&
Forks::_Internal::genesis(const Forks* msg) {
  return *msg->genesis_;
}
void Forks::clear_genesis() {
  if (GetArena() == nullptr && genesis_ != nullptr) {
    delete genesis_;
  }
  genesis_ = nullptr;
}
Forks::Forks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  forks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.Forks)
}
Forks::Forks(const Forks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      forks_(from.forks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_genesis()) {
    genesis_ = new ::types::H256(*from.genesis_);
  } else {
    genesis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.Forks)
}

void Forks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Forks_p2psentry_2fsentry_2eproto.base);
  genesis_ = nullptr;
}

Forks::~Forks() {
  // @@protoc_insertion_point(destructor:sentry.Forks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Forks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete genesis_;
}

void Forks::ArenaDtor(void* object) {
  Forks* _this = reinterpret_cast< Forks* >(object);
  (void)_this;
}
void Forks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Forks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Forks& Forks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Forks_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void Forks::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.Forks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forks_.Clear();
  if (GetArena() == nullptr && genesis_ != nullptr) {
    delete genesis_;
  }
  genesis_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Forks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H256 genesis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_genesis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 forks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_forks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_forks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Forks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.Forks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 genesis = 1;
  if (this->has_genesis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::genesis(this), target, stream);
  }

  // repeated uint64 forks = 2;
  {
    int byte_size = _forks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_forks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.Forks)
  return target;
}

size_t Forks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.Forks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 forks = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->forks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _forks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .types.H256 genesis = 1;
  if (this->has_genesis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *genesis_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Forks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.Forks)
  GOOGLE_DCHECK_NE(&from, this);
  const Forks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Forks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.Forks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.Forks)
    MergeFrom(*source);
  }
}

void Forks::MergeFrom(const Forks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.Forks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forks_.MergeFrom(from.forks_);
  if (from.has_genesis()) {
    _internal_mutable_genesis()->::types::H256::MergeFrom(from._internal_genesis());
  }
}

void Forks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.Forks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Forks::CopyFrom(const Forks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.Forks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Forks::IsInitialized() const {
  return true;
}

void Forks::InternalSwap(Forks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  forks_.InternalSwap(&other->forks_);
  swap(genesis_, other->genesis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Forks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusData::_Internal {
 public:
  static const ::types::H256& total_difficulty(const StatusData* msg);
  static const ::types::H256& best_hash(const StatusData* msg);
  static const ::sentry::Forks& fork_data(const StatusData* msg);
};

const ::types::H256&
StatusData::_Internal::total_difficulty(const StatusData* msg) {
  return *msg->total_difficulty_;
}
const ::types::H256&
StatusData::_Internal::best_hash(const StatusData* msg) {
  return *msg->best_hash_;
}
const ::sentry::Forks&
StatusData::_Internal::fork_data(const StatusData* msg) {
  return *msg->fork_data_;
}
void StatusData::clear_total_difficulty() {
  if (GetArena() == nullptr && total_difficulty_ != nullptr) {
    delete total_difficulty_;
  }
  total_difficulty_ = nullptr;
}
void StatusData::clear_best_hash() {
  if (GetArena() == nullptr && best_hash_ != nullptr) {
    delete best_hash_;
  }
  best_hash_ = nullptr;
}
StatusData::StatusData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.StatusData)
}
StatusData::StatusData(const StatusData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_difficulty()) {
    total_difficulty_ = new ::types::H256(*from.total_difficulty_);
  } else {
    total_difficulty_ = nullptr;
  }
  if (from._internal_has_best_hash()) {
    best_hash_ = new ::types::H256(*from.best_hash_);
  } else {
    best_hash_ = nullptr;
  }
  if (from._internal_has_fork_data()) {
    fork_data_ = new ::sentry::Forks(*from.fork_data_);
  } else {
    fork_data_ = nullptr;
  }
  ::memcpy(&network_id_, &from.network_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_block_) -
    reinterpret_cast<char*>(&network_id_)) + sizeof(max_block_));
  // @@protoc_insertion_point(copy_constructor:sentry.StatusData)
}

void StatusData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusData_p2psentry_2fsentry_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&total_difficulty_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_block_) -
      reinterpret_cast<char*>(&total_difficulty_)) + sizeof(max_block_));
}

StatusData::~StatusData() {
  // @@protoc_insertion_point(destructor:sentry.StatusData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete total_difficulty_;
  if (this != internal_default_instance()) delete best_hash_;
  if (this != internal_default_instance()) delete fork_data_;
}

void StatusData::ArenaDtor(void* object) {
  StatusData* _this = reinterpret_cast< StatusData* >(object);
  (void)_this;
}
void StatusData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusData& StatusData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusData_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void StatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.StatusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && total_difficulty_ != nullptr) {
    delete total_difficulty_;
  }
  total_difficulty_ = nullptr;
  if (GetArena() == nullptr && best_hash_ != nullptr) {
    delete best_hash_;
  }
  best_hash_ = nullptr;
  if (GetArena() == nullptr && fork_data_ != nullptr) {
    delete fork_data_;
  }
  fork_data_ = nullptr;
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_block_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(max_block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 network_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 total_difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_difficulty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 best_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sentry.Forks fork_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fork_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.StatusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 network_id = 1;
  if (this->network_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_network_id(), target);
  }

  // .types.H256 total_difficulty = 2;
  if (this->has_total_difficulty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total_difficulty(this), target, stream);
  }

  // .types.H256 best_hash = 3;
  if (this->has_best_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::best_hash(this), target, stream);
  }

  // .sentry.Forks fork_data = 4;
  if (this->has_fork_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fork_data(this), target, stream);
  }

  // uint64 max_block = 5;
  if (this->max_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_max_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.StatusData)
  return target;
}

size_t StatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.StatusData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 total_difficulty = 2;
  if (this->has_total_difficulty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_difficulty_);
  }

  // .types.H256 best_hash = 3;
  if (this->has_best_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *best_hash_);
  }

  // .sentry.Forks fork_data = 4;
  if (this->has_fork_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fork_data_);
  }

  // uint64 network_id = 1;
  if (this->network_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_network_id());
  }

  // uint64 max_block = 5;
  if (this->max_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.StatusData)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.StatusData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.StatusData)
    MergeFrom(*source);
  }
}

void StatusData::MergeFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.StatusData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total_difficulty()) {
    _internal_mutable_total_difficulty()->::types::H256::MergeFrom(from._internal_total_difficulty());
  }
  if (from.has_best_hash()) {
    _internal_mutable_best_hash()->::types::H256::MergeFrom(from._internal_best_hash());
  }
  if (from.has_fork_data()) {
    _internal_mutable_fork_data()->::sentry::Forks::MergeFrom(from._internal_fork_data());
  }
  if (from.network_id() != 0) {
    _internal_set_network_id(from._internal_network_id());
  }
  if (from.max_block() != 0) {
    _internal_set_max_block(from._internal_max_block());
  }
}

void StatusData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.StatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusData::CopyFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.StatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusData::IsInitialized() const {
  return true;
}

void StatusData::InternalSwap(StatusData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusData, max_block_)
      + sizeof(StatusData::max_block_)
      - PROTOBUF_FIELD_OFFSET(StatusData, total_difficulty_)>(
          reinterpret_cast<char*>(&total_difficulty_),
          reinterpret_cast<char*>(&other->total_difficulty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetStatusReply::_Internal {
 public:
};

SetStatusReply::SetStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SetStatusReply)
}
SetStatusReply::SetStatusReply(const SetStatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.SetStatusReply)
}

void SetStatusReply::SharedCtor() {
}

SetStatusReply::~SetStatusReply() {
  // @@protoc_insertion_point(destructor:sentry.SetStatusReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetStatusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetStatusReply::ArenaDtor(void* object) {
  SetStatusReply* _this = reinterpret_cast< SetStatusReply* >(object);
  (void)_this;
}
void SetStatusReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetStatusReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetStatusReply& SetStatusReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetStatusReply_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void SetStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SetStatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStatusReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetStatusReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SetStatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SetStatusReply)
  return target;
}

size_t SetStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SetStatusReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetStatusReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SetStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStatusReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetStatusReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SetStatusReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SetStatusReply)
    MergeFrom(*source);
  }
}

void SetStatusReply::MergeFrom(const SetStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SetStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetStatusReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SetStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStatusReply::CopyFrom(const SetStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SetStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStatusReply::IsInitialized() const {
  return true;
}

void SetStatusReply::InternalSwap(SetStatusReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStatusReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HandShakeReply::_Internal {
 public:
};

HandShakeReply::HandShakeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.HandShakeReply)
}
HandShakeReply::HandShakeReply(const HandShakeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:sentry.HandShakeReply)
}

void HandShakeReply::SharedCtor() {
  protocol_ = 0;
}

HandShakeReply::~HandShakeReply() {
  // @@protoc_insertion_point(destructor:sentry.HandShakeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HandShakeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HandShakeReply::ArenaDtor(void* object) {
  HandShakeReply* _this = reinterpret_cast< HandShakeReply* >(object);
  (void)_this;
}
void HandShakeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandShakeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandShakeReply& HandShakeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandShakeReply_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void HandShakeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.HandShakeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandShakeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.Protocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::sentry::Protocol>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandShakeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.HandShakeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.Protocol protocol = 1;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.HandShakeReply)
  return target;
}

size_t HandShakeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.HandShakeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.Protocol protocol = 1;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandShakeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.HandShakeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HandShakeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandShakeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.HandShakeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.HandShakeReply)
    MergeFrom(*source);
  }
}

void HandShakeReply::MergeFrom(const HandShakeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.HandShakeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
}

void HandShakeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.HandShakeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandShakeReply::CopyFrom(const HandShakeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.HandShakeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandShakeReply::IsInitialized() const {
  return true;
}

void HandShakeReply::InternalSwap(HandShakeReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandShakeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagesRequest::_Internal {
 public:
};

MessagesRequest::MessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.MessagesRequest)
}
MessagesRequest::MessagesRequest(const MessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.MessagesRequest)
}

void MessagesRequest::SharedCtor() {
}

MessagesRequest::~MessagesRequest() {
  // @@protoc_insertion_point(destructor:sentry.MessagesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessagesRequest::ArenaDtor(void* object) {
  MessagesRequest* _this = reinterpret_cast< MessagesRequest* >(object);
  (void)_this;
}
void MessagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagesRequest& MessagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagesRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void MessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.MessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sentry.MessageId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ids(static_cast<::sentry::MessageId>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.MessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sentry.MessageId ids = 1;
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ids_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.MessagesRequest)
  return target;
}

size_t MessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.MessagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sentry.MessageId ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ids(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.MessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.MessagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.MessagesRequest)
    MergeFrom(*source);
  }
}

void MessagesRequest::MergeFrom(const MessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.MessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void MessagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.MessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagesRequest::CopyFrom(const MessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.MessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesRequest::IsInitialized() const {
  return true;
}

void MessagesRequest::InternalSwap(MessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeersReply::_Internal {
 public:
};

void PeersReply::clear_peers() {
  peers_.Clear();
}
PeersReply::PeersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  peers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeersReply)
}
PeersReply::PeersReply(const PeersReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeersReply)
}

void PeersReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeersReply_p2psentry_2fsentry_2eproto.base);
}

PeersReply::~PeersReply() {
  // @@protoc_insertion_point(destructor:sentry.PeersReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeersReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeersReply::ArenaDtor(void* object) {
  PeersReply* _this = reinterpret_cast< PeersReply* >(object);
  (void)_this;
}
void PeersReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeersReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeersReply& PeersReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeersReply_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeersReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeersReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeersReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .types.PeerInfo peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeersReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeersReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeersReply)
  return target;
}

size_t PeersReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeersReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeersReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeersReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PeersReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeersReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeersReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeersReply)
    MergeFrom(*source);
  }
}

void PeersReply::MergeFrom(const PeersReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeersReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void PeersReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeersReply::CopyFrom(const PeersReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeersReply::IsInitialized() const {
  return true;
}

void PeersReply::InternalSwap(PeersReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeersReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerCountRequest::_Internal {
 public:
};

PeerCountRequest::PeerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerCountRequest)
}
PeerCountRequest::PeerCountRequest(const PeerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeerCountRequest)
}

void PeerCountRequest::SharedCtor() {
}

PeerCountRequest::~PeerCountRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerCountRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeerCountRequest::ArenaDtor(void* object) {
  PeerCountRequest* _this = reinterpret_cast< PeerCountRequest* >(object);
  (void)_this;
}
void PeerCountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerCountRequest& PeerCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerCountRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeerCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerCountRequest)
  return target;
}

size_t PeerCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerCountRequest)
    MergeFrom(*source);
  }
}

void PeerCountRequest::MergeFrom(const PeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PeerCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerCountRequest::CopyFrom(const PeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCountRequest::IsInitialized() const {
  return true;
}

void PeerCountRequest::InternalSwap(PeerCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerCountReply::_Internal {
 public:
};

PeerCountReply::PeerCountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerCountReply)
}
PeerCountReply::PeerCountReply(const PeerCountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerCountReply)
}

void PeerCountReply::SharedCtor() {
  count_ = PROTOBUF_ULONGLONG(0);
}

PeerCountReply::~PeerCountReply() {
  // @@protoc_insertion_point(destructor:sentry.PeerCountReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerCountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeerCountReply::ArenaDtor(void* object) {
  PeerCountReply* _this = reinterpret_cast< PeerCountReply* >(object);
  (void)_this;
}
void PeerCountReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerCountReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerCountReply& PeerCountReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerCountReply_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeerCountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerCountReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerCountReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerCountReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerCountReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerCountReply)
  return target;
}

size_t PeerCountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerCountReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerCountReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerCountReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerCountReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerCountReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerCountReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerCountReply)
    MergeFrom(*source);
  }
}

void PeerCountReply::MergeFrom(const PeerCountReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerCountReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PeerCountReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerCountReply::CopyFrom(const PeerCountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCountReply::IsInitialized() const {
  return true;
}

void PeerCountReply::InternalSwap(PeerCountReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerCountReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerByIdRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerByIdRequest* msg);
};

const ::types::H512&
PeerByIdRequest::_Internal::peer_id(const PeerByIdRequest* msg) {
  return *msg->peer_id_;
}
void PeerByIdRequest::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PeerByIdRequest::PeerByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerByIdRequest)
}
PeerByIdRequest::PeerByIdRequest(const PeerByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.PeerByIdRequest)
}

void PeerByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerByIdRequest_p2psentry_2fsentry_2eproto.base);
  peer_id_ = nullptr;
}

PeerByIdRequest::~PeerByIdRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PeerByIdRequest::ArenaDtor(void* object) {
  PeerByIdRequest* _this = reinterpret_cast< PeerByIdRequest* >(object);
  (void)_this;
}
void PeerByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerByIdRequest& PeerByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerByIdRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeerByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerByIdRequest)
  return target;
}

size_t PeerByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerByIdRequest)
    MergeFrom(*source);
  }
}

void PeerByIdRequest::MergeFrom(const PeerByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
}

void PeerByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerByIdRequest::CopyFrom(const PeerByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerByIdRequest::IsInitialized() const {
  return true;
}

void PeerByIdRequest::InternalSwap(PeerByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(peer_id_, other->peer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerByIdReply::_Internal {
 public:
  using HasBits = decltype(std::declval<PeerByIdReply>()._has_bits_);
  static const ::types::PeerInfo& peer(const PeerByIdReply* msg);
  static void set_has_peer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::PeerInfo&
PeerByIdReply::_Internal::peer(const PeerByIdReply* msg) {
  return *msg->peer_;
}
void PeerByIdReply::clear_peer() {
  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
PeerByIdReply::PeerByIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerByIdReply)
}
PeerByIdReply::PeerByIdReply(const PeerByIdReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::types::PeerInfo(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.PeerByIdReply)
}

void PeerByIdReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerByIdReply_p2psentry_2fsentry_2eproto.base);
  peer_ = nullptr;
}

PeerByIdReply::~PeerByIdReply() {
  // @@protoc_insertion_point(destructor:sentry.PeerByIdReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerByIdReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void PeerByIdReply::ArenaDtor(void* object) {
  PeerByIdReply* _this = reinterpret_cast< PeerByIdReply* >(object);
  (void)_this;
}
void PeerByIdReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerByIdReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerByIdReply& PeerByIdReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerByIdReply_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeerByIdReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerByIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && peer_ != nullptr) {
      delete peer_;
    }
    peer_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerByIdReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.PeerInfo peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerByIdReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerByIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.PeerInfo peer = 1;
  if (_internal_has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerByIdReply)
  return target;
}

size_t PeerByIdReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerByIdReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.PeerInfo peer = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerByIdReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerByIdReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerByIdReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerByIdReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerByIdReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerByIdReply)
    MergeFrom(*source);
  }
}

void PeerByIdReply::MergeFrom(const PeerByIdReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerByIdReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::types::PeerInfo::MergeFrom(from._internal_peer());
  }
}

void PeerByIdReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerByIdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerByIdReply::CopyFrom(const PeerByIdReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerByIdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerByIdReply::IsInitialized() const {
  return true;
}

void PeerByIdReply::InternalSwap(PeerByIdReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerByIdReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerEventsRequest::_Internal {
 public:
};

PeerEventsRequest::PeerEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerEventsRequest)
}
PeerEventsRequest::PeerEventsRequest(const PeerEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeerEventsRequest)
}

void PeerEventsRequest::SharedCtor() {
}

PeerEventsRequest::~PeerEventsRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerEventsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeerEventsRequest::ArenaDtor(void* object) {
  PeerEventsRequest* _this = reinterpret_cast< PeerEventsRequest* >(object);
  (void)_this;
}
void PeerEventsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerEventsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerEventsRequest& PeerEventsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerEventsRequest_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeerEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerEventsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerEventsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerEventsRequest)
  return target;
}

size_t PeerEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerEventsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerEventsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerEventsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerEventsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerEventsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerEventsRequest)
    MergeFrom(*source);
  }
}

void PeerEventsRequest::MergeFrom(const PeerEventsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PeerEventsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerEventsRequest::CopyFrom(const PeerEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerEventsRequest::IsInitialized() const {
  return true;
}

void PeerEventsRequest::InternalSwap(PeerEventsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerEventsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerEvent::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerEvent* msg);
};

const ::types::H512&
PeerEvent::_Internal::peer_id(const PeerEvent* msg) {
  return *msg->peer_id_;
}
void PeerEvent::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PeerEvent::PeerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerEvent)
}
PeerEvent::PeerEvent(const PeerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerEvent)
}

void PeerEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerEvent_p2psentry_2fsentry_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(event_id_));
}

PeerEvent::~PeerEvent() {
  // @@protoc_insertion_point(destructor:sentry.PeerEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PeerEvent::ArenaDtor(void* object) {
  PeerEvent* _this = reinterpret_cast< PeerEvent* >(object);
  (void)_this;
}
void PeerEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerEvent& PeerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerEvent_p2psentry_2fsentry_2eproto.base);
  return *internal_default_instance();
}


void PeerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  event_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sentry.PeerEvent.PeerEventId event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_id(static_cast<::sentry::PeerEvent_PeerEventId>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // .sentry.PeerEvent.PeerEventId event_id = 2;
  if (this->event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerEvent)
  return target;
}

size_t PeerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.PeerEvent.PeerEventId event_id = 2;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerEvent)
    MergeFrom(*source);
  }
}

void PeerEvent::MergeFrom(const PeerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from.event_id() != 0) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void PeerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerEvent::CopyFrom(const PeerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerEvent::IsInitialized() const {
  return true;
}

void PeerEvent::InternalSwap(PeerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerEvent, event_id_)
      + sizeof(PeerEvent::event_id_)
      - PROTOBUF_FIELD_OFFSET(PeerEvent, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sentry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sentry::OutboundMessageData* Arena::CreateMaybeMessage< ::sentry::OutboundMessageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::OutboundMessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByMinBlockRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageByMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByIdRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageToRandomPeersRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageToRandomPeersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageToRandomPeersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SentPeers* Arena::CreateMaybeMessage< ::sentry::SentPeers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SentPeers >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PenalizePeerRequest* Arena::CreateMaybeMessage< ::sentry::PenalizePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PenalizePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerMinBlockRequest* Arena::CreateMaybeMessage< ::sentry::PeerMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::InboundMessage* Arena::CreateMaybeMessage< ::sentry::InboundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::InboundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::Forks* Arena::CreateMaybeMessage< ::sentry::Forks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::Forks >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::StatusData* Arena::CreateMaybeMessage< ::sentry::StatusData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::StatusData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SetStatusReply* Arena::CreateMaybeMessage< ::sentry::SetStatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SetStatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::HandShakeReply* Arena::CreateMaybeMessage< ::sentry::HandShakeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::HandShakeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::MessagesRequest* Arena::CreateMaybeMessage< ::sentry::MessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::MessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeersReply* Arena::CreateMaybeMessage< ::sentry::PeersReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeersReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerCountRequest* Arena::CreateMaybeMessage< ::sentry::PeerCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerCountReply* Arena::CreateMaybeMessage< ::sentry::PeerCountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerCountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerByIdRequest* Arena::CreateMaybeMessage< ::sentry::PeerByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerByIdReply* Arena::CreateMaybeMessage< ::sentry::PeerByIdReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerByIdReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerEventsRequest* Arena::CreateMaybeMessage< ::sentry::PeerEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerEvent* Arena::CreateMaybeMessage< ::sentry::PeerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
