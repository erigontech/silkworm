// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remote/ethbackend.proto

#include "remote/ethbackend.pb.h"
#include "remote/ethbackend.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace remote {

class MockETHBACKENDStub : public ETHBACKEND::StubInterface {
 public:
  MOCK_METHOD3(Etherbase, ::grpc::Status(::grpc::ClientContext* context, const ::remote::EtherbaseRequest& request, ::remote::EtherbaseReply* response));
  MOCK_METHOD3(AsyncEtherbaseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EtherbaseReply>*(::grpc::ClientContext* context, const ::remote::EtherbaseRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEtherbaseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EtherbaseReply>*(::grpc::ClientContext* context, const ::remote::EtherbaseRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(NetVersion, ::grpc::Status(::grpc::ClientContext* context, const ::remote::NetVersionRequest& request, ::remote::NetVersionReply* response));
  MOCK_METHOD3(AsyncNetVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::NetVersionReply>*(::grpc::ClientContext* context, const ::remote::NetVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncNetVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::NetVersionReply>*(::grpc::ClientContext* context, const ::remote::NetVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(NetPeerCount, ::grpc::Status(::grpc::ClientContext* context, const ::remote::NetPeerCountRequest& request, ::remote::NetPeerCountReply* response));
  MOCK_METHOD3(AsyncNetPeerCountRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::NetPeerCountReply>*(::grpc::ClientContext* context, const ::remote::NetPeerCountRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncNetPeerCountRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::NetPeerCountReply>*(::grpc::ClientContext* context, const ::remote::NetPeerCountRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EngineNewPayload, ::grpc::Status(::grpc::ClientContext* context, const ::types::ExecutionPayload& request, ::remote::EnginePayloadStatus* response));
  MOCK_METHOD3(AsyncEngineNewPayloadRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EnginePayloadStatus>*(::grpc::ClientContext* context, const ::types::ExecutionPayload& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEngineNewPayloadRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EnginePayloadStatus>*(::grpc::ClientContext* context, const ::types::ExecutionPayload& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EngineForkChoiceUpdated, ::grpc::Status(::grpc::ClientContext* context, const ::remote::EngineForkChoiceUpdatedRequest& request, ::remote::EngineForkChoiceUpdatedResponse* response));
  MOCK_METHOD3(AsyncEngineForkChoiceUpdatedRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineForkChoiceUpdatedResponse>*(::grpc::ClientContext* context, const ::remote::EngineForkChoiceUpdatedRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEngineForkChoiceUpdatedRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineForkChoiceUpdatedResponse>*(::grpc::ClientContext* context, const ::remote::EngineForkChoiceUpdatedRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EngineGetPayload, ::grpc::Status(::grpc::ClientContext* context, const ::remote::EngineGetPayloadRequest& request, ::remote::EngineGetPayloadResponse* response));
  MOCK_METHOD3(AsyncEngineGetPayloadRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineGetPayloadResponse>*(::grpc::ClientContext* context, const ::remote::EngineGetPayloadRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEngineGetPayloadRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineGetPayloadResponse>*(::grpc::ClientContext* context, const ::remote::EngineGetPayloadRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EngineGetPayloadBodiesByHashV1, ::grpc::Status(::grpc::ClientContext* context, const ::remote::EngineGetPayloadBodiesByHashV1Request& request, ::remote::EngineGetPayloadBodiesV1Response* response));
  MOCK_METHOD3(AsyncEngineGetPayloadBodiesByHashV1Raw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineGetPayloadBodiesV1Response>*(::grpc::ClientContext* context, const ::remote::EngineGetPayloadBodiesByHashV1Request& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEngineGetPayloadBodiesByHashV1Raw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineGetPayloadBodiesV1Response>*(::grpc::ClientContext* context, const ::remote::EngineGetPayloadBodiesByHashV1Request& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EngineGetPayloadBodiesByRangeV1, ::grpc::Status(::grpc::ClientContext* context, const ::remote::EngineGetPayloadBodiesByRangeV1Request& request, ::remote::EngineGetPayloadBodiesV1Response* response));
  MOCK_METHOD3(AsyncEngineGetPayloadBodiesByRangeV1Raw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineGetPayloadBodiesV1Response>*(::grpc::ClientContext* context, const ::remote::EngineGetPayloadBodiesByRangeV1Request& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEngineGetPayloadBodiesByRangeV1Raw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::EngineGetPayloadBodiesV1Response>*(::grpc::ClientContext* context, const ::remote::EngineGetPayloadBodiesByRangeV1Request& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Version, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::VersionReply* response));
  MOCK_METHOD3(AsyncVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ProtocolVersion, ::grpc::Status(::grpc::ClientContext* context, const ::remote::ProtocolVersionRequest& request, ::remote::ProtocolVersionReply* response));
  MOCK_METHOD3(AsyncProtocolVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::ProtocolVersionReply>*(::grpc::ClientContext* context, const ::remote::ProtocolVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncProtocolVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::ProtocolVersionReply>*(::grpc::ClientContext* context, const ::remote::ProtocolVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ClientVersion, ::grpc::Status(::grpc::ClientContext* context, const ::remote::ClientVersionRequest& request, ::remote::ClientVersionReply* response));
  MOCK_METHOD3(AsyncClientVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::ClientVersionReply>*(::grpc::ClientContext* context, const ::remote::ClientVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncClientVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::ClientVersionReply>*(::grpc::ClientContext* context, const ::remote::ClientVersionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(SubscribeRaw, ::grpc::ClientReaderInterface< ::remote::SubscribeReply>*(::grpc::ClientContext* context, const ::remote::SubscribeRequest& request));
  MOCK_METHOD4(AsyncSubscribeRaw, ::grpc::ClientAsyncReaderInterface< ::remote::SubscribeReply>*(::grpc::ClientContext* context, const ::remote::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncSubscribeRaw, ::grpc::ClientAsyncReaderInterface< ::remote::SubscribeReply>*(::grpc::ClientContext* context, const ::remote::SubscribeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD1(SubscribeLogsRaw, ::grpc::ClientReaderWriterInterface< ::remote::LogsFilterRequest, ::remote::SubscribeLogsReply>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncSubscribeLogsRaw, ::grpc::ClientAsyncReaderWriterInterface<::remote::LogsFilterRequest, ::remote::SubscribeLogsReply>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncSubscribeLogsRaw, ::grpc::ClientAsyncReaderWriterInterface<::remote::LogsFilterRequest, ::remote::SubscribeLogsReply>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Block, ::grpc::Status(::grpc::ClientContext* context, const ::remote::BlockRequest& request, ::remote::BlockReply* response));
  MOCK_METHOD3(AsyncBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::BlockReply>*(::grpc::ClientContext* context, const ::remote::BlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::BlockReply>*(::grpc::ClientContext* context, const ::remote::BlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(TxnLookup, ::grpc::Status(::grpc::ClientContext* context, const ::remote::TxnLookupRequest& request, ::remote::TxnLookupReply* response));
  MOCK_METHOD3(AsyncTxnLookupRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::TxnLookupReply>*(::grpc::ClientContext* context, const ::remote::TxnLookupRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncTxnLookupRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::TxnLookupReply>*(::grpc::ClientContext* context, const ::remote::TxnLookupRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(NodeInfo, ::grpc::Status(::grpc::ClientContext* context, const ::remote::NodesInfoRequest& request, ::remote::NodesInfoReply* response));
  MOCK_METHOD3(AsyncNodeInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::NodesInfoReply>*(::grpc::ClientContext* context, const ::remote::NodesInfoRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncNodeInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::NodesInfoReply>*(::grpc::ClientContext* context, const ::remote::NodesInfoRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Peers, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::remote::PeersReply* response));
  MOCK_METHOD3(AsyncPeersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::PeersReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPeersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::PeersReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PendingBlock, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::remote::PendingBlockReply* response));
  MOCK_METHOD3(AsyncPendingBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::PendingBlockReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPendingBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::remote::PendingBlockReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

} // namespace remote

