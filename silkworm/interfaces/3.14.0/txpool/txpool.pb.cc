// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/txpool.proto

#include "txpool/txpool.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_txpool_2ftxpool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllReply_Tx_txpool_2ftxpool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txpool_2ftxpool_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PendingReply_Tx_txpool_2ftxpool_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H160_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H256_types_2ftypes_2eproto;
namespace txpool {
class TxHashesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxHashes> _instance;
} _TxHashes_default_instance_;
class AddRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRequest> _instance;
} _AddRequest_default_instance_;
class AddReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddReply> _instance;
} _AddReply_default_instance_;
class TransactionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionsRequest> _instance;
} _TransactionsRequest_default_instance_;
class TransactionsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionsReply> _instance;
} _TransactionsReply_default_instance_;
class OnAddRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnAddRequest> _instance;
} _OnAddRequest_default_instance_;
class OnAddReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnAddReply> _instance;
} _OnAddReply_default_instance_;
class AllRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllRequest> _instance;
} _AllRequest_default_instance_;
class AllReply_TxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllReply_Tx> _instance;
} _AllReply_Tx_default_instance_;
class AllReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllReply> _instance;
} _AllReply_default_instance_;
class PendingReply_TxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingReply_Tx> _instance;
} _PendingReply_Tx_default_instance_;
class PendingReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingReply> _instance;
} _PendingReply_default_instance_;
class StatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusRequest> _instance;
} _StatusRequest_default_instance_;
class StatusReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusReply> _instance;
} _StatusReply_default_instance_;
class NonceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NonceRequest> _instance;
} _NonceRequest_default_instance_;
class NonceReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NonceReply> _instance;
} _NonceReply_default_instance_;
}  // namespace txpool
static void InitDefaultsscc_info_AddReply_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_AddReply_default_instance_;
    new (ptr) ::txpool::AddReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddReply_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddReply_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_AddRequest_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_AddRequest_default_instance_;
    new (ptr) ::txpool::AddRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddRequest_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddRequest_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_AllReply_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_AllReply_default_instance_;
    new (ptr) ::txpool::AllReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllReply_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllReply_txpool_2ftxpool_2eproto}, {
      &scc_info_AllReply_Tx_txpool_2ftxpool_2eproto.base,}};

static void InitDefaultsscc_info_AllReply_Tx_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_AllReply_Tx_default_instance_;
    new (ptr) ::txpool::AllReply_Tx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllReply_Tx_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllReply_Tx_txpool_2ftxpool_2eproto}, {
      &scc_info_H160_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_AllRequest_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_AllRequest_default_instance_;
    new (ptr) ::txpool::AllRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllRequest_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllRequest_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_NonceReply_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_NonceReply_default_instance_;
    new (ptr) ::txpool::NonceReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NonceReply_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NonceReply_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_NonceRequest_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_NonceRequest_default_instance_;
    new (ptr) ::txpool::NonceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NonceRequest_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NonceRequest_txpool_2ftxpool_2eproto}, {
      &scc_info_H160_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_OnAddReply_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnAddReply_default_instance_;
    new (ptr) ::txpool::OnAddReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnAddReply_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnAddReply_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_OnAddRequest_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnAddRequest_default_instance_;
    new (ptr) ::txpool::OnAddRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnAddRequest_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnAddRequest_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_PendingReply_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_PendingReply_default_instance_;
    new (ptr) ::txpool::PendingReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PendingReply_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PendingReply_txpool_2ftxpool_2eproto}, {
      &scc_info_PendingReply_Tx_txpool_2ftxpool_2eproto.base,}};

static void InitDefaultsscc_info_PendingReply_Tx_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_PendingReply_Tx_default_instance_;
    new (ptr) ::txpool::PendingReply_Tx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PendingReply_Tx_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PendingReply_Tx_txpool_2ftxpool_2eproto}, {
      &scc_info_H160_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_StatusReply_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_StatusReply_default_instance_;
    new (ptr) ::txpool::StatusReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusReply_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusReply_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_StatusRequest_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_StatusRequest_default_instance_;
    new (ptr) ::txpool::StatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusRequest_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusRequest_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_TransactionsReply_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_TransactionsReply_default_instance_;
    new (ptr) ::txpool::TransactionsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionsReply_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionsReply_txpool_2ftxpool_2eproto}, {}};

static void InitDefaultsscc_info_TransactionsRequest_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_TransactionsRequest_default_instance_;
    new (ptr) ::txpool::TransactionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionsRequest_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionsRequest_txpool_2ftxpool_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_TxHashes_txpool_2ftxpool_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_TxHashes_default_instance_;
    new (ptr) ::txpool::TxHashes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TxHashes_txpool_2ftxpool_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TxHashes_txpool_2ftxpool_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_txpool_2ftxpool_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_txpool_2ftxpool_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_txpool_2ftxpool_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_txpool_2ftxpool_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::TxHashes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::TxHashes, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::AddRequest, rlp_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AddReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::AddReply, imported_),
  PROTOBUF_FIELD_OFFSET(::txpool::AddReply, errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsRequest, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsReply, rlp_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnAddReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::OnAddReply, rpl_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, txn_type_),
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, sender_),
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, rlp_tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply, txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, sender_),
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, rlp_tx_),
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, is_local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply, txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, pending_count_),
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, queued_count_),
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, base_fee_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceReply, found_),
  PROTOBUF_FIELD_OFFSET(::txpool::NonceReply, nonce_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::txpool::TxHashes)},
  { 6, -1, sizeof(::txpool::AddRequest)},
  { 12, -1, sizeof(::txpool::AddReply)},
  { 19, -1, sizeof(::txpool::TransactionsRequest)},
  { 25, -1, sizeof(::txpool::TransactionsReply)},
  { 31, -1, sizeof(::txpool::OnAddRequest)},
  { 36, -1, sizeof(::txpool::OnAddReply)},
  { 42, -1, sizeof(::txpool::AllRequest)},
  { 47, -1, sizeof(::txpool::AllReply_Tx)},
  { 55, -1, sizeof(::txpool::AllReply)},
  { 61, -1, sizeof(::txpool::PendingReply_Tx)},
  { 69, -1, sizeof(::txpool::PendingReply)},
  { 75, -1, sizeof(::txpool::StatusRequest)},
  { 80, -1, sizeof(::txpool::StatusReply)},
  { 88, -1, sizeof(::txpool::NonceRequest)},
  { 94, -1, sizeof(::txpool::NonceReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_TxHashes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_AddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_AddReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_TransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_TransactionsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnAddReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_AllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_AllReply_Tx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_AllReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_PendingReply_Tx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_PendingReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_StatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_StatusReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_NonceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_NonceReply_default_instance_),
};

const char descriptor_table_protodef_txpool_2ftxpool_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023txpool/txpool.proto\022\006txpool\032\033google/pr"
  "otobuf/empty.proto\032\021types/types.proto\"\'\n"
  "\010TxHashes\022\033\n\006hashes\030\001 \003(\0132\013.types.H256\"\035"
  "\n\nAddRequest\022\017\n\007rlp_txs\030\001 \003(\014\"B\n\010AddRepl"
  "y\022&\n\010imported\030\001 \003(\0162\024.txpool.ImportResul"
  "t\022\016\n\006errors\030\002 \003(\t\"2\n\023TransactionsRequest"
  "\022\033\n\006hashes\030\001 \003(\0132\013.types.H256\"$\n\021Transac"
  "tionsReply\022\017\n\007rlp_txs\030\001 \003(\014\"\016\n\014OnAddRequ"
  "est\"\035\n\nOnAddReply\022\017\n\007rpl_txs\030\001 \003(\014\"\014\n\nAl"
  "lRequest\"\275\001\n\010AllReply\022 \n\003txs\030\001 \003(\0132\023.txp"
  "ool.AllReply.Tx\032]\n\002Tx\022*\n\010txn_type\030\001 \001(\0162"
  "\030.txpool.AllReply.TxnType\022\033\n\006sender\030\002 \001("
  "\0132\013.types.H160\022\016\n\006rlp_tx\030\003 \001(\014\"0\n\007TxnTyp"
  "e\022\013\n\007PENDING\020\000\022\n\n\006QUEUED\020\001\022\014\n\010BASE_FEE\020\002"
  "\"y\n\014PendingReply\022$\n\003txs\030\001 \003(\0132\027.txpool.P"
  "endingReply.Tx\032C\n\002Tx\022\033\n\006sender\030\001 \001(\0132\013.t"
  "ypes.H160\022\016\n\006rlp_tx\030\002 \001(\014\022\020\n\010is_local\030\003 "
  "\001(\010\"\017\n\rStatusRequest\"R\n\013StatusReply\022\025\n\rp"
  "ending_count\030\001 \001(\r\022\024\n\014queued_count\030\002 \001(\r"
  "\022\026\n\016base_fee_count\030\003 \001(\r\",\n\014NonceRequest"
  "\022\034\n\007address\030\001 \001(\0132\013.types.H160\"*\n\nNonceR"
  "eply\022\r\n\005found\030\001 \001(\010\022\r\n\005nonce\030\002 \001(\004*l\n\014Im"
  "portResult\022\013\n\007SUCCESS\020\000\022\022\n\016ALREADY_EXIST"
  "S\020\001\022\017\n\013FEE_TOO_LOW\020\002\022\t\n\005STALE\020\003\022\013\n\007INVAL"
  "ID\020\004\022\022\n\016INTERNAL_ERROR\020\0052\354\003\n\006Txpool\0226\n\007V"
  "ersion\022\026.google.protobuf.Empty\032\023.types.V"
  "ersionReply\0221\n\013FindUnknown\022\020.txpool.TxHa"
  "shes\032\020.txpool.TxHashes\022+\n\003Add\022\022.txpool.A"
  "ddRequest\032\020.txpool.AddReply\022F\n\014Transacti"
  "ons\022\033.txpool.TransactionsRequest\032\031.txpoo"
  "l.TransactionsReply\022+\n\003All\022\022.txpool.AllR"
  "equest\032\020.txpool.AllReply\0227\n\007Pending\022\026.go"
  "ogle.protobuf.Empty\032\024.txpool.PendingRepl"
  "y\0223\n\005OnAdd\022\024.txpool.OnAddRequest\032\022.txpoo"
  "l.OnAddReply0\001\0224\n\006Status\022\025.txpool.Status"
  "Request\032\023.txpool.StatusReply\0221\n\005Nonce\022\024."
  "txpool.NonceRequest\032\022.txpool.NonceReplyB"
  "\021Z\017./txpool;txpoolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_txpool_2ftxpool_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_txpool_2ftxpool_2eproto_sccs[16] = {
  &scc_info_AddReply_txpool_2ftxpool_2eproto.base,
  &scc_info_AddRequest_txpool_2ftxpool_2eproto.base,
  &scc_info_AllReply_txpool_2ftxpool_2eproto.base,
  &scc_info_AllReply_Tx_txpool_2ftxpool_2eproto.base,
  &scc_info_AllRequest_txpool_2ftxpool_2eproto.base,
  &scc_info_NonceReply_txpool_2ftxpool_2eproto.base,
  &scc_info_NonceRequest_txpool_2ftxpool_2eproto.base,
  &scc_info_OnAddReply_txpool_2ftxpool_2eproto.base,
  &scc_info_OnAddRequest_txpool_2ftxpool_2eproto.base,
  &scc_info_PendingReply_txpool_2ftxpool_2eproto.base,
  &scc_info_PendingReply_Tx_txpool_2ftxpool_2eproto.base,
  &scc_info_StatusReply_txpool_2ftxpool_2eproto.base,
  &scc_info_StatusRequest_txpool_2ftxpool_2eproto.base,
  &scc_info_TransactionsReply_txpool_2ftxpool_2eproto.base,
  &scc_info_TransactionsRequest_txpool_2ftxpool_2eproto.base,
  &scc_info_TxHashes_txpool_2ftxpool_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_txpool_2ftxpool_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_txpool_2ftxpool_2eproto = {
  false, false, descriptor_table_protodef_txpool_2ftxpool_2eproto, "txpool/txpool.proto", 1506,
  &descriptor_table_txpool_2ftxpool_2eproto_once, descriptor_table_txpool_2ftxpool_2eproto_sccs, descriptor_table_txpool_2ftxpool_2eproto_deps, 16, 2,
  schemas, file_default_instances, TableStruct_txpool_2ftxpool_2eproto::offsets,
  file_level_metadata_txpool_2ftxpool_2eproto, 16, file_level_enum_descriptors_txpool_2ftxpool_2eproto, file_level_service_descriptors_txpool_2ftxpool_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_txpool_2ftxpool_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_txpool_2ftxpool_2eproto)), true);
namespace txpool {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllReply_TxnType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txpool_2ftxpool_2eproto);
  return file_level_enum_descriptors_txpool_2ftxpool_2eproto[0];
}
bool AllReply_TxnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AllReply_TxnType AllReply::PENDING;
constexpr AllReply_TxnType AllReply::QUEUED;
constexpr AllReply_TxnType AllReply::BASE_FEE;
constexpr AllReply_TxnType AllReply::TxnType_MIN;
constexpr AllReply_TxnType AllReply::TxnType_MAX;
constexpr int AllReply::TxnType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txpool_2ftxpool_2eproto);
  return file_level_enum_descriptors_txpool_2ftxpool_2eproto[1];
}
bool ImportResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TxHashes::_Internal {
 public:
};

void TxHashes::clear_hashes() {
  hashes_.Clear();
}
TxHashes::TxHashes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.TxHashes)
}
TxHashes::TxHashes(const TxHashes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.TxHashes)
}

void TxHashes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TxHashes_txpool_2ftxpool_2eproto.base);
}

TxHashes::~TxHashes() {
  // @@protoc_insertion_point(destructor:txpool.TxHashes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TxHashes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TxHashes::ArenaDtor(void* object) {
  TxHashes* _this = reinterpret_cast< TxHashes* >(object);
  (void)_this;
}
void TxHashes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxHashes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxHashes& TxHashes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxHashes_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void TxHashes::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.TxHashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxHashes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .types.H256 hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxHashes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.TxHashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.TxHashes)
  return target;
}

size_t TxHashes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.TxHashes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxHashes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.TxHashes)
  GOOGLE_DCHECK_NE(&from, this);
  const TxHashes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxHashes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.TxHashes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.TxHashes)
    MergeFrom(*source);
  }
}

void TxHashes::MergeFrom(const TxHashes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.TxHashes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
}

void TxHashes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.TxHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxHashes::CopyFrom(const TxHashes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.TxHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxHashes::IsInitialized() const {
  return true;
}

void TxHashes::InternalSwap(TxHashes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxHashes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddRequest::_Internal {
 public:
};

AddRequest::AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rlp_txs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.AddRequest)
}
AddRequest::AddRequest(const AddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rlp_txs_(from.rlp_txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AddRequest)
}

void AddRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRequest_txpool_2ftxpool_2eproto.base);
}

AddRequest::~AddRequest() {
  // @@protoc_insertion_point(destructor:txpool.AddRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddRequest::ArenaDtor(void* object) {
  AddRequest* _this = reinterpret_cast< AddRequest* >(object);
  (void)_this;
}
void AddRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRequest& AddRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRequest_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void AddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rlp_txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes rlp_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rlp_txs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  for (int i = 0, n = this->_internal_rlp_txs_size(); i < n; i++) {
    const auto& s = this->_internal_rlp_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AddRequest)
  return target;
}

size_t AddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AddRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rlp_txs_.size());
  for (int i = 0, n = rlp_txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      rlp_txs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.AddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.AddRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.AddRequest)
    MergeFrom(*source);
  }
}

void AddRequest::MergeFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.AddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rlp_txs_.MergeFrom(from.rlp_txs_);
}

void AddRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequest::CopyFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequest::IsInitialized() const {
  return true;
}

void AddRequest::InternalSwap(AddRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rlp_txs_.InternalSwap(&other->rlp_txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddReply::_Internal {
 public:
};

AddReply::AddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  imported_(arena),
  errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.AddReply)
}
AddReply::AddReply(const AddReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      imported_(from.imported_),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AddReply)
}

void AddReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddReply_txpool_2ftxpool_2eproto.base);
}

AddReply::~AddReply() {
  // @@protoc_insertion_point(destructor:txpool.AddReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddReply::ArenaDtor(void* object) {
  AddReply* _this = reinterpret_cast< AddReply* >(object);
  (void)_this;
}
void AddReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddReply& AddReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddReply_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void AddReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AddReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imported_.Clear();
  errors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .txpool.ImportResult imported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_imported(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_imported(static_cast<::txpool::ImportResult>(val));
        } else goto handle_unusual;
        continue;
      // repeated string errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_errors();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "txpool.AddReply.errors"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AddReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txpool.ImportResult imported = 1;
  {
    int byte_size = _imported_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, imported_, byte_size, target);
    }
  }

  // repeated string errors = 2;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.AddReply.errors");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AddReply)
  return target;
}

size_t AddReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AddReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .txpool.ImportResult imported = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_imported_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_imported(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _imported_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string errors = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(errors_.size());
  for (int i = 0, n = errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      errors_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.AddReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AddReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.AddReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.AddReply)
    MergeFrom(*source);
  }
}

void AddReply::MergeFrom(const AddReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.AddReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imported_.MergeFrom(from.imported_);
  errors_.MergeFrom(from.errors_);
}

void AddReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.AddReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddReply::CopyFrom(const AddReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AddReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReply::IsInitialized() const {
  return true;
}

void AddReply::InternalSwap(AddReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imported_.InternalSwap(&other->imported_);
  errors_.InternalSwap(&other->errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionsRequest::_Internal {
 public:
};

void TransactionsRequest::clear_hashes() {
  hashes_.Clear();
}
TransactionsRequest::TransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.TransactionsRequest)
}
TransactionsRequest::TransactionsRequest(const TransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.TransactionsRequest)
}

void TransactionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionsRequest_txpool_2ftxpool_2eproto.base);
}

TransactionsRequest::~TransactionsRequest() {
  // @@protoc_insertion_point(destructor:txpool.TransactionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransactionsRequest::ArenaDtor(void* object) {
  TransactionsRequest* _this = reinterpret_cast< TransactionsRequest* >(object);
  (void)_this;
}
void TransactionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionsRequest& TransactionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionsRequest_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void TransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.TransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .types.H256 hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.TransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.TransactionsRequest)
  return target;
}

size_t TransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.TransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.TransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.TransactionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.TransactionsRequest)
    MergeFrom(*source);
  }
}

void TransactionsRequest::MergeFrom(const TransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.TransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
}

void TransactionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.TransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionsRequest::CopyFrom(const TransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.TransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsRequest::IsInitialized() const {
  return true;
}

void TransactionsRequest::InternalSwap(TransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionsReply::_Internal {
 public:
};

TransactionsReply::TransactionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rlp_txs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.TransactionsReply)
}
TransactionsReply::TransactionsReply(const TransactionsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rlp_txs_(from.rlp_txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.TransactionsReply)
}

void TransactionsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionsReply_txpool_2ftxpool_2eproto.base);
}

TransactionsReply::~TransactionsReply() {
  // @@protoc_insertion_point(destructor:txpool.TransactionsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransactionsReply::ArenaDtor(void* object) {
  TransactionsReply* _this = reinterpret_cast< TransactionsReply* >(object);
  (void)_this;
}
void TransactionsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionsReply& TransactionsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionsReply_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void TransactionsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.TransactionsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rlp_txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes rlp_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rlp_txs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.TransactionsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  for (int i = 0, n = this->_internal_rlp_txs_size(); i < n; i++) {
    const auto& s = this->_internal_rlp_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.TransactionsReply)
  return target;
}

size_t TransactionsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.TransactionsReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rlp_txs_.size());
  for (int i = 0, n = rlp_txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      rlp_txs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.TransactionsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.TransactionsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.TransactionsReply)
    MergeFrom(*source);
  }
}

void TransactionsReply::MergeFrom(const TransactionsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.TransactionsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rlp_txs_.MergeFrom(from.rlp_txs_);
}

void TransactionsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.TransactionsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionsReply::CopyFrom(const TransactionsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.TransactionsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsReply::IsInitialized() const {
  return true;
}

void TransactionsReply::InternalSwap(TransactionsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rlp_txs_.InternalSwap(&other->rlp_txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnAddRequest::_Internal {
 public:
};

OnAddRequest::OnAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnAddRequest)
}
OnAddRequest::OnAddRequest(const OnAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnAddRequest)
}

void OnAddRequest::SharedCtor() {
}

OnAddRequest::~OnAddRequest() {
  // @@protoc_insertion_point(destructor:txpool.OnAddRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnAddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnAddRequest::ArenaDtor(void* object) {
  OnAddRequest* _this = reinterpret_cast< OnAddRequest* >(object);
  (void)_this;
}
void OnAddRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnAddRequest& OnAddRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnAddRequest_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void OnAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnAddRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnAddRequest)
  return target;
}

size_t OnAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnAddRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnAddRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OnAddRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnAddRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnAddRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnAddRequest)
    MergeFrom(*source);
  }
}

void OnAddRequest::MergeFrom(const OnAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OnAddRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnAddRequest::CopyFrom(const OnAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnAddRequest::IsInitialized() const {
  return true;
}

void OnAddRequest::InternalSwap(OnAddRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnAddRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnAddReply::_Internal {
 public:
};

OnAddReply::OnAddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rpl_txs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnAddReply)
}
OnAddReply::OnAddReply(const OnAddReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rpl_txs_(from.rpl_txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnAddReply)
}

void OnAddReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnAddReply_txpool_2ftxpool_2eproto.base);
}

OnAddReply::~OnAddReply() {
  // @@protoc_insertion_point(destructor:txpool.OnAddReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnAddReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnAddReply::ArenaDtor(void* object) {
  OnAddReply* _this = reinterpret_cast< OnAddReply* >(object);
  (void)_this;
}
void OnAddReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnAddReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnAddReply& OnAddReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnAddReply_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void OnAddReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnAddReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpl_txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnAddReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes rpl_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rpl_txs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnAddReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnAddReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes rpl_txs = 1;
  for (int i = 0, n = this->_internal_rpl_txs_size(); i < n; i++) {
    const auto& s = this->_internal_rpl_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnAddReply)
  return target;
}

size_t OnAddReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnAddReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes rpl_txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rpl_txs_.size());
  for (int i = 0, n = rpl_txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      rpl_txs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnAddReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnAddReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OnAddReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnAddReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnAddReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnAddReply)
    MergeFrom(*source);
  }
}

void OnAddReply::MergeFrom(const OnAddReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnAddReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rpl_txs_.MergeFrom(from.rpl_txs_);
}

void OnAddReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnAddReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnAddReply::CopyFrom(const OnAddReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnAddReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnAddReply::IsInitialized() const {
  return true;
}

void OnAddReply::InternalSwap(OnAddReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rpl_txs_.InternalSwap(&other->rpl_txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnAddReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllRequest::_Internal {
 public:
};

AllRequest::AllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.AllRequest)
}
AllRequest::AllRequest(const AllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AllRequest)
}

void AllRequest::SharedCtor() {
}

AllRequest::~AllRequest() {
  // @@protoc_insertion_point(destructor:txpool.AllRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllRequest::ArenaDtor(void* object) {
  AllRequest* _this = reinterpret_cast< AllRequest* >(object);
  (void)_this;
}
void AllRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllRequest& AllRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllRequest_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void AllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AllRequest)
  return target;
}

size_t AllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AllRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.AllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.AllRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.AllRequest)
    MergeFrom(*source);
  }
}

void AllRequest::MergeFrom(const AllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.AllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AllRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.AllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllRequest::CopyFrom(const AllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllRequest::IsInitialized() const {
  return true;
}

void AllRequest::InternalSwap(AllRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllReply_Tx::_Internal {
 public:
  static const ::types::H160& sender(const AllReply_Tx* msg);
};

const ::types::H160&
AllReply_Tx::_Internal::sender(const AllReply_Tx* msg) {
  return *msg->sender_;
}
void AllReply_Tx::clear_sender() {
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
AllReply_Tx::AllReply_Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.AllReply.Tx)
}
AllReply_Tx::AllReply_Tx(const AllReply_Tx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rlp_tx().empty()) {
    rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rlp_tx(), 
      GetArena());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::types::H160(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  txn_type_ = from.txn_type_;
  // @@protoc_insertion_point(copy_constructor:txpool.AllReply.Tx)
}

void AllReply_Tx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllReply_Tx_txpool_2ftxpool_2eproto.base);
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&txn_type_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(txn_type_));
}

AllReply_Tx::~AllReply_Tx() {
  // @@protoc_insertion_point(destructor:txpool.AllReply.Tx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllReply_Tx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rlp_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void AllReply_Tx::ArenaDtor(void* object) {
  AllReply_Tx* _this = reinterpret_cast< AllReply_Tx* >(object);
  (void)_this;
}
void AllReply_Tx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllReply_Tx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllReply_Tx& AllReply_Tx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllReply_Tx_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void AllReply_Tx::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AllReply.Tx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rlp_tx_.ClearToEmpty();
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  txn_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllReply_Tx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .txpool.AllReply.TxnType txn_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_txn_type(static_cast<::txpool::AllReply_TxnType>(val));
        } else goto handle_unusual;
        continue;
      // .types.H160 sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rlp_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllReply_Tx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AllReply.Tx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txpool.AllReply.TxnType txn_type = 1;
  if (this->txn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_txn_type(), target);
  }

  // .types.H160 sender = 2;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender(this), target, stream);
  }

  // bytes rlp_tx = 3;
  if (this->rlp_tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rlp_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AllReply.Tx)
  return target;
}

size_t AllReply_Tx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AllReply.Tx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rlp_tx = 3;
  if (this->rlp_tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // .types.H160 sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // .txpool.AllReply.TxnType txn_type = 1;
  if (this->txn_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_txn_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllReply_Tx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.AllReply.Tx)
  GOOGLE_DCHECK_NE(&from, this);
  const AllReply_Tx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllReply_Tx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.AllReply.Tx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.AllReply.Tx)
    MergeFrom(*source);
  }
}

void AllReply_Tx::MergeFrom(const AllReply_Tx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.AllReply.Tx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rlp_tx().size() > 0) {
    _internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::types::H160::MergeFrom(from._internal_sender());
  }
  if (from.txn_type() != 0) {
    _internal_set_txn_type(from._internal_txn_type());
  }
}

void AllReply_Tx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.AllReply.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllReply_Tx::CopyFrom(const AllReply_Tx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AllReply.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllReply_Tx::IsInitialized() const {
  return true;
}

void AllReply_Tx::InternalSwap(AllReply_Tx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rlp_tx_.Swap(&other->rlp_tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllReply_Tx, txn_type_)
      + sizeof(AllReply_Tx::txn_type_)
      - PROTOBUF_FIELD_OFFSET(AllReply_Tx, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllReply_Tx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllReply::_Internal {
 public:
};

AllReply::AllReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  txs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.AllReply)
}
AllReply::AllReply(const AllReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AllReply)
}

void AllReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllReply_txpool_2ftxpool_2eproto.base);
}

AllReply::~AllReply() {
  // @@protoc_insertion_point(destructor:txpool.AllReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllReply::ArenaDtor(void* object) {
  AllReply* _this = reinterpret_cast< AllReply* >(object);
  (void)_this;
}
void AllReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllReply& AllReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllReply_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void AllReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AllReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .txpool.AllReply.Tx txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AllReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txpool.AllReply.Tx txs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_txs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AllReply)
  return target;
}

size_t AllReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AllReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .txpool.AllReply.Tx txs = 1;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.AllReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AllReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.AllReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.AllReply)
    MergeFrom(*source);
  }
}

void AllReply::MergeFrom(const AllReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.AllReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
}

void AllReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.AllReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllReply::CopyFrom(const AllReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AllReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllReply::IsInitialized() const {
  return true;
}

void AllReply::InternalSwap(AllReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  txs_.InternalSwap(&other->txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PendingReply_Tx::_Internal {
 public:
  static const ::types::H160& sender(const PendingReply_Tx* msg);
};

const ::types::H160&
PendingReply_Tx::_Internal::sender(const PendingReply_Tx* msg) {
  return *msg->sender_;
}
void PendingReply_Tx::clear_sender() {
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
PendingReply_Tx::PendingReply_Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.PendingReply.Tx)
}
PendingReply_Tx::PendingReply_Tx(const PendingReply_Tx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rlp_tx().empty()) {
    rlp_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rlp_tx(), 
      GetArena());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::types::H160(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  is_local_ = from.is_local_;
  // @@protoc_insertion_point(copy_constructor:txpool.PendingReply.Tx)
}

void PendingReply_Tx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingReply_Tx_txpool_2ftxpool_2eproto.base);
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_local_) -
      reinterpret_cast<char*>(&sender_)) + sizeof(is_local_));
}

PendingReply_Tx::~PendingReply_Tx() {
  // @@protoc_insertion_point(destructor:txpool.PendingReply.Tx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PendingReply_Tx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rlp_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void PendingReply_Tx::ArenaDtor(void* object) {
  PendingReply_Tx* _this = reinterpret_cast< PendingReply_Tx* >(object);
  (void)_this;
}
void PendingReply_Tx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PendingReply_Tx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingReply_Tx& PendingReply_Tx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingReply_Tx_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void PendingReply_Tx::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.PendingReply.Tx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rlp_tx_.ClearToEmpty();
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  is_local_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingReply_Tx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H160 sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rlp_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingReply_Tx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.PendingReply.Tx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 sender = 1;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sender(this), target, stream);
  }

  // bytes rlp_tx = 2;
  if (this->rlp_tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rlp_tx(), target);
  }

  // bool is_local = 3;
  if (this->is_local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_local(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.PendingReply.Tx)
  return target;
}

size_t PendingReply_Tx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.PendingReply.Tx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rlp_tx = 2;
  if (this->rlp_tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // .types.H160 sender = 1;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // bool is_local = 3;
  if (this->is_local() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingReply_Tx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.PendingReply.Tx)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingReply_Tx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingReply_Tx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.PendingReply.Tx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.PendingReply.Tx)
    MergeFrom(*source);
  }
}

void PendingReply_Tx::MergeFrom(const PendingReply_Tx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.PendingReply.Tx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rlp_tx().size() > 0) {
    _internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::types::H160::MergeFrom(from._internal_sender());
  }
  if (from.is_local() != 0) {
    _internal_set_is_local(from._internal_is_local());
  }
}

void PendingReply_Tx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.PendingReply.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingReply_Tx::CopyFrom(const PendingReply_Tx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.PendingReply.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingReply_Tx::IsInitialized() const {
  return true;
}

void PendingReply_Tx::InternalSwap(PendingReply_Tx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rlp_tx_.Swap(&other->rlp_tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PendingReply_Tx, is_local_)
      + sizeof(PendingReply_Tx::is_local_)
      - PROTOBUF_FIELD_OFFSET(PendingReply_Tx, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingReply_Tx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PendingReply::_Internal {
 public:
};

PendingReply::PendingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  txs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.PendingReply)
}
PendingReply::PendingReply(const PendingReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.PendingReply)
}

void PendingReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingReply_txpool_2ftxpool_2eproto.base);
}

PendingReply::~PendingReply() {
  // @@protoc_insertion_point(destructor:txpool.PendingReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PendingReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PendingReply::ArenaDtor(void* object) {
  PendingReply* _this = reinterpret_cast< PendingReply* >(object);
  (void)_this;
}
void PendingReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PendingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingReply& PendingReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingReply_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void PendingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.PendingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .txpool.PendingReply.Tx txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.PendingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txpool.PendingReply.Tx txs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_txs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.PendingReply)
  return target;
}

size_t PendingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.PendingReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .txpool.PendingReply.Tx txs = 1;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.PendingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.PendingReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.PendingReply)
    MergeFrom(*source);
  }
}

void PendingReply::MergeFrom(const PendingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.PendingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
}

void PendingReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.PendingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingReply::CopyFrom(const PendingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.PendingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingReply::IsInitialized() const {
  return true;
}

void PendingReply::InternalSwap(PendingReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  txs_.InternalSwap(&other->txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.StatusRequest)
}

void StatusRequest::SharedCtor() {
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:txpool.StatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusRequest::ArenaDtor(void* object) {
  StatusRequest* _this = reinterpret_cast< StatusRequest* >(object);
  (void)_this;
}
void StatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusRequest& StatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusRequest_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.StatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.StatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::InternalSwap(StatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusReply::_Internal {
 public:
};

StatusReply::StatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.StatusReply)
}
StatusReply::StatusReply(const StatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pending_count_, &from.pending_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_fee_count_) -
    reinterpret_cast<char*>(&pending_count_)) + sizeof(base_fee_count_));
  // @@protoc_insertion_point(copy_constructor:txpool.StatusReply)
}

void StatusReply::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pending_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&base_fee_count_) -
      reinterpret_cast<char*>(&pending_count_)) + sizeof(base_fee_count_));
}

StatusReply::~StatusReply() {
  // @@protoc_insertion_point(destructor:txpool.StatusReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusReply::ArenaDtor(void* object) {
  StatusReply* _this = reinterpret_cast< StatusReply* >(object);
  (void)_this;
}
void StatusReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusReply& StatusReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusReply_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void StatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.StatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pending_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_fee_count_) -
      reinterpret_cast<char*>(&pending_count_)) + sizeof(base_fee_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pending_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pending_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 queued_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          queued_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 base_fee_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          base_fee_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.StatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pending_count = 1;
  if (this->pending_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pending_count(), target);
  }

  // uint32 queued_count = 2;
  if (this->queued_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_queued_count(), target);
  }

  // uint32 base_fee_count = 3;
  if (this->base_fee_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_base_fee_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.StatusReply)
  return target;
}

size_t StatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.StatusReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pending_count = 1;
  if (this->pending_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pending_count());
  }

  // uint32 queued_count = 2;
  if (this->queued_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_queued_count());
  }

  // uint32 base_fee_count = 3;
  if (this->base_fee_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_fee_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.StatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.StatusReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.StatusReply)
    MergeFrom(*source);
  }
}

void StatusReply::MergeFrom(const StatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.StatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pending_count() != 0) {
    _internal_set_pending_count(from._internal_pending_count());
  }
  if (from.queued_count() != 0) {
    _internal_set_queued_count(from._internal_queued_count());
  }
  if (from.base_fee_count() != 0) {
    _internal_set_base_fee_count(from._internal_base_fee_count());
  }
}

void StatusReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.StatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusReply::CopyFrom(const StatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.StatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReply::IsInitialized() const {
  return true;
}

void StatusReply::InternalSwap(StatusReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusReply, base_fee_count_)
      + sizeof(StatusReply::base_fee_count_)
      - PROTOBUF_FIELD_OFFSET(StatusReply, pending_count_)>(
          reinterpret_cast<char*>(&pending_count_),
          reinterpret_cast<char*>(&other->pending_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NonceRequest::_Internal {
 public:
  static const ::types::H160& address(const NonceRequest* msg);
};

const ::types::H160&
NonceRequest::_Internal::address(const NonceRequest* msg) {
  return *msg->address_;
}
void NonceRequest::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
NonceRequest::NonceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.NonceRequest)
}
NonceRequest::NonceRequest(const NonceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::types::H160(*from.address_);
  } else {
    address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:txpool.NonceRequest)
}

void NonceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NonceRequest_txpool_2ftxpool_2eproto.base);
  address_ = nullptr;
}

NonceRequest::~NonceRequest() {
  // @@protoc_insertion_point(destructor:txpool.NonceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NonceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
}

void NonceRequest::ArenaDtor(void* object) {
  NonceRequest* _this = reinterpret_cast< NonceRequest* >(object);
  (void)_this;
}
void NonceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NonceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NonceRequest& NonceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NonceRequest_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void NonceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.NonceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NonceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.NonceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.NonceRequest)
  return target;
}

size_t NonceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.NonceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NonceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.NonceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NonceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NonceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.NonceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.NonceRequest)
    MergeFrom(*source);
  }
}

void NonceRequest::MergeFrom(const NonceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.NonceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->::types::H160::MergeFrom(from._internal_address());
  }
}

void NonceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.NonceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonceRequest::CopyFrom(const NonceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.NonceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonceRequest::IsInitialized() const {
  return true;
}

void NonceRequest::InternalSwap(NonceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NonceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NonceReply::_Internal {
 public:
};

NonceReply::NonceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.NonceReply)
}
NonceReply::NonceReply(const NonceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(found_));
  // @@protoc_insertion_point(copy_constructor:txpool.NonceReply)
}

void NonceReply::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(found_));
}

NonceReply::~NonceReply() {
  // @@protoc_insertion_point(destructor:txpool.NonceReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NonceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NonceReply::ArenaDtor(void* object) {
  NonceReply* _this = reinterpret_cast< NonceReply* >(object);
  (void)_this;
}
void NonceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NonceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NonceReply& NonceReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NonceReply_txpool_2ftxpool_2eproto.base);
  return *internal_default_instance();
}


void NonceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.NonceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(found_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NonceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.NonceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.NonceReply)
  return target;
}

size_t NonceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.NonceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NonceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.NonceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NonceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NonceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.NonceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.NonceReply)
    MergeFrom(*source);
  }
}

void NonceReply::MergeFrom(const NonceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.NonceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void NonceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.NonceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonceReply::CopyFrom(const NonceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.NonceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonceReply::IsInitialized() const {
  return true;
}

void NonceReply::InternalSwap(NonceReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NonceReply, found_)
      + sizeof(NonceReply::found_)
      - PROTOBUF_FIELD_OFFSET(NonceReply, nonce_)>(
          reinterpret_cast<char*>(&nonce_),
          reinterpret_cast<char*>(&other->nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NonceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace txpool
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::txpool::TxHashes* Arena::CreateMaybeMessage< ::txpool::TxHashes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::TxHashes >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AddRequest* Arena::CreateMaybeMessage< ::txpool::AddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AddReply* Arena::CreateMaybeMessage< ::txpool::AddReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AddReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::TransactionsRequest* Arena::CreateMaybeMessage< ::txpool::TransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::TransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::TransactionsReply* Arena::CreateMaybeMessage< ::txpool::TransactionsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::TransactionsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnAddRequest* Arena::CreateMaybeMessage< ::txpool::OnAddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnAddReply* Arena::CreateMaybeMessage< ::txpool::OnAddReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnAddReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AllRequest* Arena::CreateMaybeMessage< ::txpool::AllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AllReply_Tx* Arena::CreateMaybeMessage< ::txpool::AllReply_Tx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AllReply_Tx >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AllReply* Arena::CreateMaybeMessage< ::txpool::AllReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AllReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::PendingReply_Tx* Arena::CreateMaybeMessage< ::txpool::PendingReply_Tx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::PendingReply_Tx >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::PendingReply* Arena::CreateMaybeMessage< ::txpool::PendingReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::PendingReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::StatusRequest* Arena::CreateMaybeMessage< ::txpool::StatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::StatusReply* Arena::CreateMaybeMessage< ::txpool::StatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::StatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::NonceRequest* Arena::CreateMaybeMessage< ::txpool::NonceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::NonceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::NonceReply* Arena::CreateMaybeMessage< ::txpool::NonceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::NonceReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
