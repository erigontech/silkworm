// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: execution/execution.proto

#include "execution/execution.pb.h"
#include "execution/execution.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace execution {

static const char* Execution_method_names[] = {
  "/execution.Execution/InsertHeaders",
  "/execution.Execution/InsertBodies",
  "/execution.Execution/ValidateChain",
  "/execution.Execution/UpdateForkChoice",
  "/execution.Execution/AssembleBlock",
  "/execution.Execution/GetHeader",
  "/execution.Execution/GetBody",
  "/execution.Execution/IsCanonicalHash",
  "/execution.Execution/GetHeaderHashNumber",
};

std::unique_ptr< Execution::Stub> Execution::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Execution::Stub> stub(new Execution::Stub(channel, options));
  return stub;
}

Execution::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InsertHeaders_(Execution_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertBodies_(Execution_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateChain_(Execution_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateForkChoice_(Execution_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssembleBlock_(Execution_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHeader_(Execution_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBody_(Execution_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsCanonicalHash_(Execution_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHeaderHashNumber_(Execution_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Execution::Stub::InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::execution::EmptyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::execution::InsertHeadersRequest, ::execution::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertHeaders_, context, request, response);
}

void Execution::Stub::async::InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::execution::InsertHeadersRequest, ::execution::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertHeaders_, context, request, response, std::move(f));
}

void Execution::Stub::async::InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertHeaders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* Execution::Stub::PrepareAsyncInsertHeadersRaw(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::EmptyMessage, ::execution::InsertHeadersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertHeaders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* Execution::Stub::AsyncInsertHeadersRaw(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertHeadersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::execution::EmptyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::execution::InsertBodiesRequest, ::execution::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertBodies_, context, request, response);
}

void Execution::Stub::async::InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::execution::InsertBodiesRequest, ::execution::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBodies_, context, request, response, std::move(f));
}

void Execution::Stub::async::InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBodies_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* Execution::Stub::PrepareAsyncInsertBodiesRaw(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::EmptyMessage, ::execution::InsertBodiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertBodies_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* Execution::Stub::AsyncInsertBodiesRaw(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertBodiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::ValidateChain(::grpc::ClientContext* context, const ::types::H256& request, ::execution::ValidationReceipt* response) {
  return ::grpc::internal::BlockingUnaryCall< ::types::H256, ::execution::ValidationReceipt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateChain_, context, request, response);
}

void Execution::Stub::async::ValidateChain(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::types::H256, ::execution::ValidationReceipt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateChain_, context, request, response, std::move(f));
}

void Execution::Stub::async::ValidateChain(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateChain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>* Execution::Stub::PrepareAsyncValidateChainRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::ValidationReceipt, ::types::H256, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateChain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>* Execution::Stub::AsyncValidateChainRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateChainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256& request, ::execution::ForkChoiceReceipt* response) {
  return ::grpc::internal::BlockingUnaryCall< ::types::H256, ::execution::ForkChoiceReceipt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateForkChoice_, context, request, response);
}

void Execution::Stub::async::UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::types::H256, ::execution::ForkChoiceReceipt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateForkChoice_, context, request, response, std::move(f));
}

void Execution::Stub::async::UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateForkChoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>* Execution::Stub::PrepareAsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::ForkChoiceReceipt, ::types::H256, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateForkChoice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>* Execution::Stub::AsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateForkChoiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::types::ExecutionPayload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::execution::EmptyMessage, ::types::ExecutionPayload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssembleBlock_, context, request, response);
}

void Execution::Stub::async::AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::execution::EmptyMessage, ::types::ExecutionPayload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssembleBlock_, context, request, response, std::move(f));
}

void Execution::Stub::async::AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssembleBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>* Execution::Stub::PrepareAsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::types::ExecutionPayload, ::execution::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssembleBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>* Execution::Stub::AsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssembleBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetHeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHeader_, context, request, response);
}

void Execution::Stub::async::GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHeader_, context, request, response, std::move(f));
}

void Execution::Stub::async::GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* Execution::Stub::PrepareAsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::GetHeaderResponse, ::execution::GetSegmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHeader_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* Execution::Stub::AsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHeaderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetBodyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::execution::GetSegmentRequest, ::execution::GetBodyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBody_, context, request, response);
}

void Execution::Stub::async::GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::execution::GetSegmentRequest, ::execution::GetBodyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBody_, context, request, response, std::move(f));
}

void Execution::Stub::async::GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBody_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>* Execution::Stub::PrepareAsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::GetBodyResponse, ::execution::GetSegmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBody_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>* Execution::Stub::AsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBodyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::execution::IsCanonicalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::types::H256, ::execution::IsCanonicalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsCanonicalHash_, context, request, response);
}

void Execution::Stub::async::IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::types::H256, ::execution::IsCanonicalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCanonicalHash_, context, request, response, std::move(f));
}

void Execution::Stub::async::IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCanonicalHash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>* Execution::Stub::PrepareAsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::IsCanonicalResponse, ::types::H256, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsCanonicalHash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>* Execution::Stub::AsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsCanonicalHashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Execution::Stub::GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::execution::GetHeaderHashNumberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::types::H256, ::execution::GetHeaderHashNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHeaderHashNumber_, context, request, response);
}

void Execution::Stub::async::GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::types::H256, ::execution::GetHeaderHashNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHeaderHashNumber_, context, request, response, std::move(f));
}

void Execution::Stub::async::GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHeaderHashNumber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>* Execution::Stub::PrepareAsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::execution::GetHeaderHashNumberResponse, ::types::H256, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHeaderHashNumber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>* Execution::Stub::AsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHeaderHashNumberRaw(context, request, cq);
  result->StartCall();
  return result;
}

Execution::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::execution::InsertHeadersRequest, ::execution::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::execution::InsertHeadersRequest* req,
             ::execution::EmptyMessage* resp) {
               return service->InsertHeaders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::execution::InsertBodiesRequest, ::execution::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::execution::InsertBodiesRequest* req,
             ::execution::EmptyMessage* resp) {
               return service->InsertBodies(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::types::H256, ::execution::ValidationReceipt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::types::H256* req,
             ::execution::ValidationReceipt* resp) {
               return service->ValidateChain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::types::H256, ::execution::ForkChoiceReceipt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::types::H256* req,
             ::execution::ForkChoiceReceipt* resp) {
               return service->UpdateForkChoice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::execution::EmptyMessage, ::types::ExecutionPayload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::execution::EmptyMessage* req,
             ::types::ExecutionPayload* resp) {
               return service->AssembleBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::execution::GetSegmentRequest, ::execution::GetHeaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::execution::GetSegmentRequest* req,
             ::execution::GetHeaderResponse* resp) {
               return service->GetHeader(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::execution::GetSegmentRequest, ::execution::GetBodyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::execution::GetSegmentRequest* req,
             ::execution::GetBodyResponse* resp) {
               return service->GetBody(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::types::H256, ::execution::IsCanonicalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::types::H256* req,
             ::execution::IsCanonicalResponse* resp) {
               return service->IsCanonicalHash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Execution_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Execution::Service, ::types::H256, ::execution::GetHeaderHashNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Execution::Service* service,
             ::grpc::ServerContext* ctx,
             const ::types::H256* req,
             ::execution::GetHeaderHashNumberResponse* resp) {
               return service->GetHeaderHashNumber(ctx, req, resp);
             }, this)));
}

Execution::Service::~Service() {
}

::grpc::Status Execution::Service::InsertHeaders(::grpc::ServerContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::InsertBodies(::grpc::ServerContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::ValidateChain(::grpc::ServerContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::UpdateForkChoice(::grpc::ServerContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::AssembleBlock(::grpc::ServerContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::GetHeader(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::GetBody(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::IsCanonicalHash(::grpc::ServerContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Execution::Service::GetHeaderHashNumber(::grpc::ServerContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace execution

