// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/kv.proto

#include "remote/kv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_remote_2fkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountChange_remote_2fkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_2fkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateChange_remote_2fkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_2fkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageChange_remote_2fkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H160_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H256_types_2ftypes_2eproto;
namespace remote {
class CursorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cursor> _instance;
} _Cursor_default_instance_;
class PairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pair> _instance;
} _Pair_default_instance_;
class StorageChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageChange> _instance;
} _StorageChange_default_instance_;
class AccountChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountChange> _instance;
} _AccountChange_default_instance_;
class StateChangeBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateChangeBatch> _instance;
} _StateChangeBatch_default_instance_;
class StateChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateChange> _instance;
} _StateChange_default_instance_;
class StateChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateChangeRequest> _instance;
} _StateChangeRequest_default_instance_;
class SnapshotsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotsRequest> _instance;
} _SnapshotsRequest_default_instance_;
class SnapshotsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotsReply> _instance;
} _SnapshotsReply_default_instance_;
class RangeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangeReq> _instance;
} _RangeReq_default_instance_;
class DomainGetReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DomainGetReq> _instance;
} _DomainGetReq_default_instance_;
class DomainGetReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DomainGetReply> _instance;
} _DomainGetReply_default_instance_;
class HistoryGetReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryGetReq> _instance;
} _HistoryGetReq_default_instance_;
class HistoryGetReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryGetReply> _instance;
} _HistoryGetReply_default_instance_;
class IndexRangeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexRangeReq> _instance;
} _IndexRangeReq_default_instance_;
class IndexRangeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexRangeReply> _instance;
} _IndexRangeReply_default_instance_;
class HistoryRangeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryRangeReq> _instance;
} _HistoryRangeReq_default_instance_;
class DomainRangeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DomainRangeReq> _instance;
} _DomainRangeReq_default_instance_;
class PairsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pairs> _instance;
} _Pairs_default_instance_;
class ParisPaginationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParisPagination> _instance;
} _ParisPagination_default_instance_;
class IndexPaginationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexPagination> _instance;
} _IndexPagination_default_instance_;
}  // namespace remote
static void InitDefaultsscc_info_AccountChange_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_AccountChange_default_instance_;
    new (ptr) ::remote::AccountChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountChange_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccountChange_remote_2fkv_2eproto}, {
      &scc_info_H160_types_2ftypes_2eproto.base,
      &scc_info_StorageChange_remote_2fkv_2eproto.base,}};

static void InitDefaultsscc_info_Cursor_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_Cursor_default_instance_;
    new (ptr) ::remote::Cursor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cursor_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cursor_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_DomainGetReply_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_DomainGetReply_default_instance_;
    new (ptr) ::remote::DomainGetReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DomainGetReply_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DomainGetReply_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_DomainGetReq_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_DomainGetReq_default_instance_;
    new (ptr) ::remote::DomainGetReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DomainGetReq_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DomainGetReq_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_DomainRangeReq_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_DomainRangeReq_default_instance_;
    new (ptr) ::remote::DomainRangeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DomainRangeReq_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DomainRangeReq_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_HistoryGetReply_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_HistoryGetReply_default_instance_;
    new (ptr) ::remote::HistoryGetReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryGetReply_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistoryGetReply_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_HistoryGetReq_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_HistoryGetReq_default_instance_;
    new (ptr) ::remote::HistoryGetReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryGetReq_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistoryGetReq_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_HistoryRangeReq_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_HistoryRangeReq_default_instance_;
    new (ptr) ::remote::HistoryRangeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryRangeReq_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistoryRangeReq_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_IndexPagination_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_IndexPagination_default_instance_;
    new (ptr) ::remote::IndexPagination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexPagination_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexPagination_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_IndexRangeReply_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_IndexRangeReply_default_instance_;
    new (ptr) ::remote::IndexRangeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexRangeReply_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexRangeReply_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_IndexRangeReq_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_IndexRangeReq_default_instance_;
    new (ptr) ::remote::IndexRangeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexRangeReq_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexRangeReq_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_Pair_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_Pair_default_instance_;
    new (ptr) ::remote::Pair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pair_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pair_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_Pairs_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_Pairs_default_instance_;
    new (ptr) ::remote::Pairs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pairs_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pairs_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_ParisPagination_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_ParisPagination_default_instance_;
    new (ptr) ::remote::ParisPagination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParisPagination_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParisPagination_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_RangeReq_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_RangeReq_default_instance_;
    new (ptr) ::remote::RangeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RangeReq_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RangeReq_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotsReply_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_SnapshotsReply_default_instance_;
    new (ptr) ::remote::SnapshotsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotsReply_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapshotsReply_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotsRequest_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_SnapshotsRequest_default_instance_;
    new (ptr) ::remote::SnapshotsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotsRequest_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapshotsRequest_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_StateChange_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_StateChange_default_instance_;
    new (ptr) ::remote::StateChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StateChange_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StateChange_remote_2fkv_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,
      &scc_info_AccountChange_remote_2fkv_2eproto.base,}};

static void InitDefaultsscc_info_StateChangeBatch_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_StateChangeBatch_default_instance_;
    new (ptr) ::remote::StateChangeBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateChangeBatch_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StateChangeBatch_remote_2fkv_2eproto}, {
      &scc_info_StateChange_remote_2fkv_2eproto.base,}};

static void InitDefaultsscc_info_StateChangeRequest_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_StateChangeRequest_default_instance_;
    new (ptr) ::remote::StateChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateChangeRequest_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StateChangeRequest_remote_2fkv_2eproto}, {}};

static void InitDefaultsscc_info_StorageChange_remote_2fkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::remote::_StorageChange_default_instance_;
    new (ptr) ::remote::StorageChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageChange_remote_2fkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StorageChange_remote_2fkv_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_remote_2fkv_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_remote_2fkv_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_remote_2fkv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_remote_2fkv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, op_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, bucketname_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, cursor_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, k_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::Pair, k_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, v_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, cursorid_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, viewid_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StorageChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::StorageChange, location_),
  PROTOBUF_FIELD_OFFSET(::remote::StorageChange, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, address_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, incarnation_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, action_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, data_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, code_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, storagechanges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, stateversionid_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, changebatch_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, pendingblockbasefee_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, blockgaslimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, direction_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, blockheight_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, blockhash_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, changes_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeRequest, withstorage_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeRequest, withtransactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsReply, blocks_files_),
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsReply, history_files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, table_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, from_prefix_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, to_prefix_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, limit_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, table_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, k_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, ts_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, k2_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, latest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReply, v_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReply, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, table_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, k_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReply, v_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReply, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, table_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, k_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, from_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, to_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, limit_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReply, timestamps_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReply, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, table_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, from_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, to_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, limit_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, table_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, from_key_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, to_key_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, ts_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, latest_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, limit_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, keys_),
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, values_),
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ParisPagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::ParisPagination, next_key_),
  PROTOBUF_FIELD_OFFSET(::remote::ParisPagination, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::IndexPagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::remote::IndexPagination, next_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexPagination, limit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::remote::Cursor)},
  { 10, -1, sizeof(::remote::Pair)},
  { 20, -1, sizeof(::remote::StorageChange)},
  { 27, -1, sizeof(::remote::AccountChange)},
  { 38, -1, sizeof(::remote::StateChangeBatch)},
  { 47, -1, sizeof(::remote::StateChange)},
  { 57, -1, sizeof(::remote::StateChangeRequest)},
  { 64, -1, sizeof(::remote::SnapshotsRequest)},
  { 69, -1, sizeof(::remote::SnapshotsReply)},
  { 76, -1, sizeof(::remote::RangeReq)},
  { 89, -1, sizeof(::remote::DomainGetReq)},
  { 100, -1, sizeof(::remote::DomainGetReply)},
  { 107, -1, sizeof(::remote::HistoryGetReq)},
  { 116, -1, sizeof(::remote::HistoryGetReply)},
  { 123, -1, sizeof(::remote::IndexRangeReq)},
  { 137, -1, sizeof(::remote::IndexRangeReply)},
  { 144, -1, sizeof(::remote::HistoryRangeReq)},
  { 157, -1, sizeof(::remote::DomainRangeReq)},
  { 172, -1, sizeof(::remote::Pairs)},
  { 180, -1, sizeof(::remote::ParisPagination)},
  { 187, -1, sizeof(::remote::IndexPagination)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_Cursor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_Pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_StorageChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_AccountChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_StateChangeBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_StateChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_StateChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_SnapshotsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_SnapshotsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_RangeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_DomainGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_DomainGetReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_HistoryGetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_HistoryGetReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_IndexRangeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_IndexRangeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_HistoryRangeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_DomainRangeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_Pairs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_ParisPagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::remote::_IndexPagination_default_instance_),
};

const char descriptor_table_protodef_remote_2fkv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017remote/kv.proto\022\006remote\032\033google/protob"
  "uf/empty.proto\032\021types/types.proto\"Z\n\006Cur"
  "sor\022\026\n\002op\030\001 \001(\0162\n.remote.Op\022\022\n\nbucketNam"
  "e\030\002 \001(\t\022\016\n\006cursor\030\003 \001(\r\022\t\n\001k\030\004 \001(\014\022\t\n\001v\030"
  "\005 \001(\014\"L\n\004Pair\022\t\n\001k\030\001 \001(\014\022\t\n\001v\030\002 \001(\014\022\020\n\010c"
  "ursorID\030\003 \001(\r\022\016\n\006viewID\030\004 \001(\004\022\014\n\004txID\030\005 "
  "\001(\004\"<\n\rStorageChange\022\035\n\010location\030\001 \001(\0132\013"
  ".types.H256\022\014\n\004data\030\002 \001(\014\"\255\001\n\rAccountCha"
  "nge\022\034\n\007address\030\001 \001(\0132\013.types.H160\022\023\n\013inc"
  "arnation\030\002 \001(\004\022\036\n\006action\030\003 \001(\0162\016.remote."
  "Action\022\014\n\004data\030\004 \001(\014\022\014\n\004code\030\005 \001(\014\022-\n\016st"
  "orageChanges\030\006 \003(\0132\025.remote.StorageChang"
  "e\"\210\001\n\020StateChangeBatch\022\026\n\016stateVersionID"
  "\030\001 \001(\004\022(\n\013changeBatch\030\002 \003(\0132\023.remote.Sta"
  "teChange\022\033\n\023pendingBlockBaseFee\030\003 \001(\004\022\025\n"
  "\rblockGasLimit\030\004 \001(\004\"\235\001\n\013StateChange\022$\n\t"
  "direction\030\001 \001(\0162\021.remote.Direction\022\023\n\013bl"
  "ockHeight\030\002 \001(\004\022\036\n\tblockHash\030\003 \001(\0132\013.typ"
  "es.H256\022&\n\007changes\030\004 \003(\0132\025.remote.Accoun"
  "tChange\022\013\n\003txs\030\005 \003(\014\"C\n\022StateChangeReque"
  "st\022\023\n\013withStorage\030\001 \001(\010\022\030\n\020withTransacti"
  "ons\030\002 \001(\010\"\022\n\020SnapshotsRequest\"=\n\016Snapsho"
  "tsReply\022\024\n\014blocks_files\030\001 \003(\t\022\025\n\rhistory"
  "_files\030\002 \003(\t\"\234\001\n\010RangeReq\022\r\n\005tx_id\030\001 \001(\004"
  "\022\r\n\005table\030\002 \001(\t\022\023\n\013from_prefix\030\003 \001(\014\022\021\n\t"
  "to_prefix\030\004 \001(\014\022\024\n\014order_ascend\030\005 \001(\010\022\r\n"
  "\005limit\030\006 \001(\022\022\021\n\tpage_size\030\007 \001(\005\022\022\n\npage_"
  "token\030\010 \001(\t\"_\n\014DomainGetReq\022\r\n\005tx_id\030\001 \001"
  "(\004\022\r\n\005table\030\002 \001(\t\022\t\n\001k\030\003 \001(\014\022\n\n\002ts\030\004 \001(\004"
  "\022\n\n\002k2\030\005 \001(\014\022\016\n\006latest\030\006 \001(\010\"\'\n\016DomainGe"
  "tReply\022\t\n\001v\030\001 \001(\014\022\n\n\002ok\030\002 \001(\010\"D\n\rHistory"
  "GetReq\022\r\n\005tx_id\030\001 \001(\004\022\r\n\005table\030\002 \001(\t\022\t\n\001"
  "k\030\003 \001(\014\022\n\n\002ts\030\004 \001(\004\"(\n\017HistoryGetReply\022\t"
  "\n\001v\030\001 \001(\014\022\n\n\002ok\030\002 \001(\010\"\244\001\n\rIndexRangeReq\022"
  "\r\n\005tx_id\030\001 \001(\004\022\r\n\005table\030\002 \001(\t\022\t\n\001k\030\003 \001(\014"
  "\022\017\n\007from_ts\030\004 \001(\022\022\r\n\005to_ts\030\005 \001(\022\022\024\n\014orde"
  "r_ascend\030\006 \001(\010\022\r\n\005limit\030\007 \001(\022\022\021\n\tpage_si"
  "ze\030\010 \001(\005\022\022\n\npage_token\030\t \001(\t\">\n\017IndexRan"
  "geReply\022\022\n\ntimestamps\030\001 \003(\004\022\027\n\017next_page"
  "_token\030\002 \001(\t\"\233\001\n\017HistoryRangeReq\022\r\n\005tx_i"
  "d\030\001 \001(\004\022\r\n\005table\030\002 \001(\t\022\017\n\007from_ts\030\004 \001(\022\022"
  "\r\n\005to_ts\030\005 \001(\022\022\024\n\014order_ascend\030\006 \001(\010\022\r\n\005"
  "limit\030\007 \001(\022\022\021\n\tpage_size\030\010 \001(\005\022\022\n\npage_t"
  "oken\030\t \001(\t\"\270\001\n\016DomainRangeReq\022\r\n\005tx_id\030\001"
  " \001(\004\022\r\n\005table\030\002 \001(\t\022\020\n\010from_key\030\003 \001(\014\022\016\n"
  "\006to_key\030\004 \001(\014\022\n\n\002ts\030\005 \001(\004\022\016\n\006latest\030\006 \001("
  "\010\022\024\n\014order_ascend\030\007 \001(\010\022\r\n\005limit\030\010 \001(\022\022\021"
  "\n\tpage_size\030\t \001(\005\022\022\n\npage_token\030\n \001(\t\">\n"
  "\005Pairs\022\014\n\004keys\030\001 \003(\014\022\016\n\006values\030\002 \003(\014\022\027\n\017"
  "next_page_token\030\003 \001(\t\"2\n\017ParisPagination"
  "\022\020\n\010next_key\030\001 \001(\014\022\r\n\005limit\030\002 \001(\022\"9\n\017Ind"
  "exPagination\022\027\n\017next_time_stamp\030\001 \001(\022\022\r\n"
  "\005limit\030\002 \001(\022*\206\002\n\002Op\022\t\n\005FIRST\020\000\022\r\n\tFIRST_"
  "DUP\020\001\022\010\n\004SEEK\020\002\022\r\n\tSEEK_BOTH\020\003\022\013\n\007CURREN"
  "T\020\004\022\010\n\004LAST\020\006\022\014\n\010LAST_DUP\020\007\022\010\n\004NEXT\020\010\022\014\n"
  "\010NEXT_DUP\020\t\022\017\n\013NEXT_NO_DUP\020\013\022\010\n\004PREV\020\014\022\014"
  "\n\010PREV_DUP\020\r\022\017\n\013PREV_NO_DUP\020\016\022\016\n\nSEEK_EX"
  "ACT\020\017\022\023\n\017SEEK_BOTH_EXACT\020\020\022\010\n\004OPEN\020\036\022\t\n\005"
  "CLOSE\020\037\022\021\n\rOPEN_DUP_SORT\020 \022\t\n\005COUNT\020!*H\n"
  "\006Action\022\013\n\007STORAGE\020\000\022\n\n\006UPSERT\020\001\022\010\n\004CODE"
  "\020\002\022\017\n\013UPSERT_CODE\020\003\022\n\n\006REMOVE\020\004*$\n\tDirec"
  "tion\022\013\n\007FORWARD\020\000\022\n\n\006UNWIND\020\0012\272\004\n\002KV\0226\n\007"
  "Version\022\026.google.protobuf.Empty\032\023.types."
  "VersionReply\022&\n\002Tx\022\016.remote.Cursor\032\014.rem"
  "ote.Pair(\0010\001\022F\n\014StateChanges\022\032.remote.St"
  "ateChangeRequest\032\030.remote.StateChangeBat"
  "ch0\001\022=\n\tSnapshots\022\030.remote.SnapshotsRequ"
  "est\032\026.remote.SnapshotsReply\022(\n\005Range\022\020.r"
  "emote.RangeReq\032\r.remote.Pairs\0229\n\tDomainG"
  "et\022\024.remote.DomainGetReq\032\026.remote.Domain"
  "GetReply\022<\n\nHistoryGet\022\025.remote.HistoryG"
  "etReq\032\027.remote.HistoryGetReply\022<\n\nIndexR"
  "ange\022\025.remote.IndexRangeReq\032\027.remote.Ind"
  "exRangeReply\0226\n\014HistoryRange\022\027.remote.Hi"
  "storyRangeReq\032\r.remote.Pairs\0224\n\013DomainRa"
  "nge\022\026.remote.DomainRangeReq\032\r.remote.Pai"
  "rsB\021Z\017./remote;remoteb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_remote_2fkv_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_remote_2fkv_2eproto_sccs[21] = {
  &scc_info_AccountChange_remote_2fkv_2eproto.base,
  &scc_info_Cursor_remote_2fkv_2eproto.base,
  &scc_info_DomainGetReply_remote_2fkv_2eproto.base,
  &scc_info_DomainGetReq_remote_2fkv_2eproto.base,
  &scc_info_DomainRangeReq_remote_2fkv_2eproto.base,
  &scc_info_HistoryGetReply_remote_2fkv_2eproto.base,
  &scc_info_HistoryGetReq_remote_2fkv_2eproto.base,
  &scc_info_HistoryRangeReq_remote_2fkv_2eproto.base,
  &scc_info_IndexPagination_remote_2fkv_2eproto.base,
  &scc_info_IndexRangeReply_remote_2fkv_2eproto.base,
  &scc_info_IndexRangeReq_remote_2fkv_2eproto.base,
  &scc_info_Pair_remote_2fkv_2eproto.base,
  &scc_info_Pairs_remote_2fkv_2eproto.base,
  &scc_info_ParisPagination_remote_2fkv_2eproto.base,
  &scc_info_RangeReq_remote_2fkv_2eproto.base,
  &scc_info_SnapshotsReply_remote_2fkv_2eproto.base,
  &scc_info_SnapshotsRequest_remote_2fkv_2eproto.base,
  &scc_info_StateChange_remote_2fkv_2eproto.base,
  &scc_info_StateChangeBatch_remote_2fkv_2eproto.base,
  &scc_info_StateChangeRequest_remote_2fkv_2eproto.base,
  &scc_info_StorageChange_remote_2fkv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_remote_2fkv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_2fkv_2eproto = {
  false, false, descriptor_table_protodef_remote_2fkv_2eproto, "remote/kv.proto", 3069,
  &descriptor_table_remote_2fkv_2eproto_once, descriptor_table_remote_2fkv_2eproto_sccs, descriptor_table_remote_2fkv_2eproto_deps, 21, 2,
  schemas, file_default_instances, TableStruct_remote_2fkv_2eproto::offsets,
  file_level_metadata_remote_2fkv_2eproto, 21, file_level_enum_descriptors_remote_2fkv_2eproto, file_level_service_descriptors_remote_2fkv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remote_2fkv_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_remote_2fkv_2eproto)), true);
namespace remote {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fkv_2eproto);
  return file_level_enum_descriptors_remote_2fkv_2eproto[0];
}
bool Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fkv_2eproto);
  return file_level_enum_descriptors_remote_2fkv_2eproto[1];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fkv_2eproto);
  return file_level_enum_descriptors_remote_2fkv_2eproto[2];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Cursor::_Internal {
 public:
};

Cursor::Cursor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.Cursor)
}
Cursor::Cursor(const Cursor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucketname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bucketname().empty()) {
    bucketname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bucketname(), 
      GetArena());
  }
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k().empty()) {
    k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k(), 
      GetArena());
  }
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&cursor_) -
    reinterpret_cast<char*>(&op_)) + sizeof(cursor_));
  // @@protoc_insertion_point(copy_constructor:remote.Cursor)
}

void Cursor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cursor_remote_2fkv_2eproto.base);
  bucketname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&op_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cursor_) -
      reinterpret_cast<char*>(&op_)) + sizeof(cursor_));
}

Cursor::~Cursor() {
  // @@protoc_insertion_point(destructor:remote.Cursor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cursor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bucketname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Cursor::ArenaDtor(void* object) {
  Cursor* _this = reinterpret_cast< Cursor* >(object);
  (void)_this;
}
void Cursor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cursor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cursor& Cursor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cursor_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void Cursor::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.Cursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucketname_.ClearToEmpty();
  k_.ClearToEmpty();
  v_.ClearToEmpty();
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursor_) -
      reinterpret_cast<char*>(&op_)) + sizeof(cursor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cursor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .remote.Op op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::remote::Op>(val));
        } else goto handle_unusual;
        continue;
      // string bucketName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bucketname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.Cursor.bucketName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cursor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.Cursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Op op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // string bucketName = 2;
  if (this->bucketname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucketname().data(), static_cast<int>(this->_internal_bucketname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.Cursor.bucketName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucketname(), target);
  }

  // uint32 cursor = 3;
  if (this->cursor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cursor(), target);
  }

  // bytes k = 4;
  if (this->k().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_k(), target);
  }

  // bytes v = 5;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.Cursor)
  return target;
}

size_t Cursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.Cursor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucketName = 2;
  if (this->bucketname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucketname());
  }

  // bytes k = 4;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // bytes v = 5;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // .remote.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  // uint32 cursor = 3;
  if (this->cursor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cursor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.Cursor)
  GOOGLE_DCHECK_NE(&from, this);
  const Cursor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cursor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.Cursor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.Cursor)
    MergeFrom(*source);
  }
}

void Cursor::MergeFrom(const Cursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.Cursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bucketname().size() > 0) {
    _internal_set_bucketname(from._internal_bucketname());
  }
  if (from.k().size() > 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.cursor() != 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void Cursor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.Cursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cursor::CopyFrom(const Cursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.Cursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cursor::IsInitialized() const {
  return true;
}

void Cursor::InternalSwap(Cursor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bucketname_.Swap(&other->bucketname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cursor, cursor_)
      + sizeof(Cursor::cursor_)
      - PROTOBUF_FIELD_OFFSET(Cursor, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cursor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pair::_Internal {
 public:
};

Pair::Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.Pair)
}
Pair::Pair(const Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k().empty()) {
    k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k(), 
      GetArena());
  }
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  ::memcpy(&viewid_, &from.viewid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cursorid_) -
    reinterpret_cast<char*>(&viewid_)) + sizeof(cursorid_));
  // @@protoc_insertion_point(copy_constructor:remote.Pair)
}

void Pair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pair_remote_2fkv_2eproto.base);
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&viewid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cursorid_) -
      reinterpret_cast<char*>(&viewid_)) + sizeof(cursorid_));
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:remote.Pair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pair::ArenaDtor(void* object) {
  Pair* _this = reinterpret_cast< Pair* >(object);
  (void)_this;
}
void Pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pair& Pair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pair_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  k_.ClearToEmpty();
  v_.ClearToEmpty();
  ::memset(&viewid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursorid_) -
      reinterpret_cast<char*>(&viewid_)) + sizeof(cursorid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cursorID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cursorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 viewID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          viewid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 txID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          txid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes k = 1;
  if (this->k().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_k(), target);
  }

  // bytes v = 2;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_v(), target);
  }

  // uint32 cursorID = 3;
  if (this->cursorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cursorid(), target);
  }

  // uint64 viewID = 4;
  if (this->viewid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_viewid(), target);
  }

  // uint64 txID = 5;
  if (this->txid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.Pair)
  return target;
}

size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.Pair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes k = 1;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // bytes v = 2;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // uint64 viewID = 4;
  if (this->viewid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_viewid());
  }

  // uint64 txID = 5;
  if (this->txid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txid());
  }

  // uint32 cursorID = 3;
  if (this->cursorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursorid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const Pair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.Pair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.Pair)
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.k().size() > 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
  if (from.viewid() != 0) {
    _internal_set_viewid(from._internal_viewid());
  }
  if (from.txid() != 0) {
    _internal_set_txid(from._internal_txid());
  }
  if (from.cursorid() != 0) {
    _internal_set_cursorid(from._internal_cursorid());
  }
}

void Pair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  return true;
}

void Pair::InternalSwap(Pair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pair, cursorid_)
      + sizeof(Pair::cursorid_)
      - PROTOBUF_FIELD_OFFSET(Pair, viewid_)>(
          reinterpret_cast<char*>(&viewid_),
          reinterpret_cast<char*>(&other->viewid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StorageChange::_Internal {
 public:
  static const ::types::H256& location(const StorageChange* msg);
};

const ::types::H256&
StorageChange::_Internal::location(const StorageChange* msg) {
  return *msg->location_;
}
void StorageChange::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
StorageChange::StorageChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.StorageChange)
}
StorageChange::StorageChange(const StorageChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::types::H256(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:remote.StorageChange)
}

void StorageChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageChange_remote_2fkv_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_ = nullptr;
}

StorageChange::~StorageChange() {
  // @@protoc_insertion_point(destructor:remote.StorageChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StorageChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void StorageChange::ArenaDtor(void* object) {
  StorageChange* _this = reinterpret_cast< StorageChange* >(object);
  (void)_this;
}
void StorageChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StorageChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageChange& StorageChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageChange_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void StorageChange::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StorageChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H256 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StorageChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StorageChange)
  return target;
}

size_t StorageChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StorageChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H256 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.StorageChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.StorageChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.StorageChange)
    MergeFrom(*source);
  }
}

void StorageChange::MergeFrom(const StorageChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.StorageChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::types::H256::MergeFrom(from._internal_location());
  }
}

void StorageChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.StorageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageChange::CopyFrom(const StorageChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StorageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageChange::IsInitialized() const {
  return true;
}

void StorageChange::InternalSwap(StorageChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountChange::_Internal {
 public:
  static const ::types::H160& address(const AccountChange* msg);
};

const ::types::H160&
AccountChange::_Internal::address(const AccountChange* msg) {
  return *msg->address_;
}
void AccountChange::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
AccountChange::AccountChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  storagechanges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.AccountChange)
}
AccountChange::AccountChange(const AccountChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      storagechanges_(from.storagechanges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  if (from._internal_has_address()) {
    address_ = new ::types::H160(*from.address_);
  } else {
    address_ = nullptr;
  }
  ::memcpy(&incarnation_, &from.incarnation_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&incarnation_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:remote.AccountChange)
}

void AccountChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountChange_remote_2fkv_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&address_)) + sizeof(action_));
}

AccountChange::~AccountChange() {
  // @@protoc_insertion_point(destructor:remote.AccountChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
}

void AccountChange::ArenaDtor(void* object) {
  AccountChange* _this = reinterpret_cast< AccountChange* >(object);
  (void)_this;
}
void AccountChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountChange& AccountChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountChange_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void AccountChange::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.AccountChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storagechanges_.Clear();
  data_.ClearToEmpty();
  code_.ClearToEmpty();
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  ::memset(&incarnation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&incarnation_)) + sizeof(action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 incarnation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .remote.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::remote::Action>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .remote.StorageChange storageChanges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_storagechanges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.AccountChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  // uint64 incarnation = 2;
  if (this->incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_incarnation(), target);
  }

  // .remote.Action action = 3;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // bytes code = 5;
  if (this->code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_code(), target);
  }

  // repeated .remote.StorageChange storageChanges = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_storagechanges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_storagechanges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.AccountChange)
  return target;
}

size_t AccountChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.AccountChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remote.StorageChange storageChanges = 6;
  total_size += 1UL * this->_internal_storagechanges_size();
  for (const auto& msg : this->storagechanges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes code = 5;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // .types.H160 address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // uint64 incarnation = 2;
  if (this->incarnation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_incarnation());
  }

  // .remote.Action action = 3;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.AccountChange)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.AccountChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.AccountChange)
    MergeFrom(*source);
  }
}

void AccountChange::MergeFrom(const AccountChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.AccountChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  storagechanges_.MergeFrom(from.storagechanges_);
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.has_address()) {
    _internal_mutable_address()->::types::H160::MergeFrom(from._internal_address());
  }
  if (from.incarnation() != 0) {
    _internal_set_incarnation(from._internal_incarnation());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void AccountChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.AccountChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountChange::CopyFrom(const AccountChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.AccountChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountChange::IsInitialized() const {
  return true;
}

void AccountChange::InternalSwap(AccountChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  storagechanges_.InternalSwap(&other->storagechanges_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountChange, action_)
      + sizeof(AccountChange::action_)
      - PROTOBUF_FIELD_OFFSET(AccountChange, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateChangeBatch::_Internal {
 public:
};

StateChangeBatch::StateChangeBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  changebatch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.StateChangeBatch)
}
StateChangeBatch::StateChangeBatch(const StateChangeBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      changebatch_(from.changebatch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stateversionid_, &from.stateversionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockgaslimit_) -
    reinterpret_cast<char*>(&stateversionid_)) + sizeof(blockgaslimit_));
  // @@protoc_insertion_point(copy_constructor:remote.StateChangeBatch)
}

void StateChangeBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateChangeBatch_remote_2fkv_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stateversionid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blockgaslimit_) -
      reinterpret_cast<char*>(&stateversionid_)) + sizeof(blockgaslimit_));
}

StateChangeBatch::~StateChangeBatch() {
  // @@protoc_insertion_point(destructor:remote.StateChangeBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateChangeBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StateChangeBatch::ArenaDtor(void* object) {
  StateChangeBatch* _this = reinterpret_cast< StateChangeBatch* >(object);
  (void)_this;
}
void StateChangeBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateChangeBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateChangeBatch& StateChangeBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateChangeBatch_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void StateChangeBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StateChangeBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changebatch_.Clear();
  ::memset(&stateversionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockgaslimit_) -
      reinterpret_cast<char*>(&stateversionid_)) + sizeof(blockgaslimit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChangeBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 stateVersionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stateversionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .remote.StateChange changeBatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changebatch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 pendingBlockBaseFee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pendingblockbasefee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blockGasLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blockgaslimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateChangeBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StateChangeBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stateVersionID = 1;
  if (this->stateversionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stateversionid(), target);
  }

  // repeated .remote.StateChange changeBatch = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changebatch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_changebatch(i), target, stream);
  }

  // uint64 pendingBlockBaseFee = 3;
  if (this->pendingblockbasefee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pendingblockbasefee(), target);
  }

  // uint64 blockGasLimit = 4;
  if (this->blockgaslimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_blockgaslimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StateChangeBatch)
  return target;
}

size_t StateChangeBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StateChangeBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remote.StateChange changeBatch = 2;
  total_size += 1UL * this->_internal_changebatch_size();
  for (const auto& msg : this->changebatch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 stateVersionID = 1;
  if (this->stateversionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stateversionid());
  }

  // uint64 pendingBlockBaseFee = 3;
  if (this->pendingblockbasefee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pendingblockbasefee());
  }

  // uint64 blockGasLimit = 4;
  if (this->blockgaslimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blockgaslimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChangeBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.StateChangeBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChangeBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateChangeBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.StateChangeBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.StateChangeBatch)
    MergeFrom(*source);
  }
}

void StateChangeBatch::MergeFrom(const StateChangeBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.StateChangeBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changebatch_.MergeFrom(from.changebatch_);
  if (from.stateversionid() != 0) {
    _internal_set_stateversionid(from._internal_stateversionid());
  }
  if (from.pendingblockbasefee() != 0) {
    _internal_set_pendingblockbasefee(from._internal_pendingblockbasefee());
  }
  if (from.blockgaslimit() != 0) {
    _internal_set_blockgaslimit(from._internal_blockgaslimit());
  }
}

void StateChangeBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.StateChangeBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChangeBatch::CopyFrom(const StateChangeBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StateChangeBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChangeBatch::IsInitialized() const {
  return true;
}

void StateChangeBatch::InternalSwap(StateChangeBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  changebatch_.InternalSwap(&other->changebatch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChangeBatch, blockgaslimit_)
      + sizeof(StateChangeBatch::blockgaslimit_)
      - PROTOBUF_FIELD_OFFSET(StateChangeBatch, stateversionid_)>(
          reinterpret_cast<char*>(&stateversionid_),
          reinterpret_cast<char*>(&other->stateversionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChangeBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateChange::_Internal {
 public:
  static const ::types::H256& blockhash(const StateChange* msg);
};

const ::types::H256&
StateChange::_Internal::blockhash(const StateChange* msg) {
  return *msg->blockhash_;
}
void StateChange::clear_blockhash() {
  if (GetArena() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
}
StateChange::StateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  changes_(arena),
  txs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.StateChange)
}
StateChange::StateChange(const StateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      changes_(from.changes_),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blockhash()) {
    blockhash_ = new ::types::H256(*from.blockhash_);
  } else {
    blockhash_ = nullptr;
  }
  ::memcpy(&blockheight_, &from.blockheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&blockheight_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:remote.StateChange)
}

void StateChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateChange_remote_2fkv_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&blockhash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&blockhash_)) + sizeof(direction_));
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:remote.StateChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blockhash_;
}

void StateChange::ArenaDtor(void* object) {
  StateChange* _this = reinterpret_cast< StateChange* >(object);
  (void)_this;
}
void StateChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateChange& StateChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateChange_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  txs_.Clear();
  if (GetArena() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
  ::memset(&blockheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&blockheight_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .remote.Direction direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::remote::Direction>(val));
        } else goto handle_unusual;
        continue;
      // uint64 blockHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 blockHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .remote.AccountChange changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes txs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Direction direction = 1;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_direction(), target);
  }

  // uint64 blockHeight = 2;
  if (this->blockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_blockheight(), target);
  }

  // .types.H256 blockHash = 3;
  if (this->has_blockhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::blockhash(this), target, stream);
  }

  // repeated .remote.AccountChange changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_changes(i), target, stream);
  }

  // repeated bytes txs = 5;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StateChange)
  return target;
}

size_t StateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StateChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remote.AccountChange changes = 4;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes txs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(txs_.size());
  for (int i = 0, n = txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      txs_.Get(i));
  }

  // .types.H256 blockHash = 3;
  if (this->has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockhash_);
  }

  // uint64 blockHeight = 2;
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blockheight());
  }

  // .remote.Direction direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.StateChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.StateChange)
    MergeFrom(*source);
  }
}

void StateChange::MergeFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
  txs_.MergeFrom(from.txs_);
  if (from.has_blockhash()) {
    _internal_mutable_blockhash()->::types::H256::MergeFrom(from._internal_blockhash());
  }
  if (from.blockheight() != 0) {
    _internal_set_blockheight(from._internal_blockheight());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void StateChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  return true;
}

void StateChange::InternalSwap(StateChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  changes_.InternalSwap(&other->changes_);
  txs_.InternalSwap(&other->txs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChange, direction_)
      + sizeof(StateChange::direction_)
      - PROTOBUF_FIELD_OFFSET(StateChange, blockhash_)>(
          reinterpret_cast<char*>(&blockhash_),
          reinterpret_cast<char*>(&other->blockhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateChangeRequest::_Internal {
 public:
};

StateChangeRequest::StateChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.StateChangeRequest)
}
StateChangeRequest::StateChangeRequest(const StateChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&withstorage_, &from.withstorage_,
    static_cast<size_t>(reinterpret_cast<char*>(&withtransactions_) -
    reinterpret_cast<char*>(&withstorage_)) + sizeof(withtransactions_));
  // @@protoc_insertion_point(copy_constructor:remote.StateChangeRequest)
}

void StateChangeRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&withstorage_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&withtransactions_) -
      reinterpret_cast<char*>(&withstorage_)) + sizeof(withtransactions_));
}

StateChangeRequest::~StateChangeRequest() {
  // @@protoc_insertion_point(destructor:remote.StateChangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StateChangeRequest::ArenaDtor(void* object) {
  StateChangeRequest* _this = reinterpret_cast< StateChangeRequest* >(object);
  (void)_this;
}
void StateChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateChangeRequest& StateChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateChangeRequest_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void StateChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StateChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&withstorage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&withtransactions_) -
      reinterpret_cast<char*>(&withstorage_)) + sizeof(withtransactions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool withStorage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          withstorage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool withTransactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          withtransactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StateChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool withStorage = 1;
  if (this->withstorage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_withstorage(), target);
  }

  // bool withTransactions = 2;
  if (this->withtransactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_withtransactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StateChangeRequest)
  return target;
}

size_t StateChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StateChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool withStorage = 1;
  if (this->withstorage() != 0) {
    total_size += 1 + 1;
  }

  // bool withTransactions = 2;
  if (this->withtransactions() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.StateChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.StateChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.StateChangeRequest)
    MergeFrom(*source);
  }
}

void StateChangeRequest::MergeFrom(const StateChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.StateChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.withstorage() != 0) {
    _internal_set_withstorage(from._internal_withstorage());
  }
  if (from.withtransactions() != 0) {
    _internal_set_withtransactions(from._internal_withtransactions());
  }
}

void StateChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.StateChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChangeRequest::CopyFrom(const StateChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StateChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChangeRequest::IsInitialized() const {
  return true;
}

void StateChangeRequest::InternalSwap(StateChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChangeRequest, withtransactions_)
      + sizeof(StateChangeRequest::withtransactions_)
      - PROTOBUF_FIELD_OFFSET(StateChangeRequest, withstorage_)>(
          reinterpret_cast<char*>(&withstorage_),
          reinterpret_cast<char*>(&other->withstorage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SnapshotsRequest::_Internal {
 public:
};

SnapshotsRequest::SnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.SnapshotsRequest)
}
SnapshotsRequest::SnapshotsRequest(const SnapshotsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.SnapshotsRequest)
}

void SnapshotsRequest::SharedCtor() {
}

SnapshotsRequest::~SnapshotsRequest() {
  // @@protoc_insertion_point(destructor:remote.SnapshotsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SnapshotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SnapshotsRequest::ArenaDtor(void* object) {
  SnapshotsRequest* _this = reinterpret_cast< SnapshotsRequest* >(object);
  (void)_this;
}
void SnapshotsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapshotsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotsRequest& SnapshotsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotsRequest_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void SnapshotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SnapshotsRequest)
  return target;
}

size_t SnapshotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SnapshotsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.SnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.SnapshotsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.SnapshotsRequest)
    MergeFrom(*source);
  }
}

void SnapshotsRequest::MergeFrom(const SnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.SnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SnapshotsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.SnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotsRequest::CopyFrom(const SnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotsRequest::IsInitialized() const {
  return true;
}

void SnapshotsRequest::InternalSwap(SnapshotsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SnapshotsReply::_Internal {
 public:
};

SnapshotsReply::SnapshotsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_files_(arena),
  history_files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.SnapshotsReply)
}
SnapshotsReply::SnapshotsReply(const SnapshotsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_files_(from.blocks_files_),
      history_files_(from.history_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.SnapshotsReply)
}

void SnapshotsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotsReply_remote_2fkv_2eproto.base);
}

SnapshotsReply::~SnapshotsReply() {
  // @@protoc_insertion_point(destructor:remote.SnapshotsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SnapshotsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SnapshotsReply::ArenaDtor(void* object) {
  SnapshotsReply* _this = reinterpret_cast< SnapshotsReply* >(object);
  (void)_this;
}
void SnapshotsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapshotsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotsReply& SnapshotsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotsReply_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void SnapshotsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SnapshotsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_files_.Clear();
  history_files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string blocks_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blocks_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.SnapshotsReply.blocks_files"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string history_files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_history_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.SnapshotsReply.history_files"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SnapshotsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string blocks_files = 1;
  for (int i = 0, n = this->_internal_blocks_files_size(); i < n; i++) {
    const auto& s = this->_internal_blocks_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.SnapshotsReply.blocks_files");
    target = stream->WriteString(1, s, target);
  }

  // repeated string history_files = 2;
  for (int i = 0, n = this->_internal_history_files_size(); i < n; i++) {
    const auto& s = this->_internal_history_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.SnapshotsReply.history_files");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SnapshotsReply)
  return target;
}

size_t SnapshotsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SnapshotsReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blocks_files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blocks_files_.size());
  for (int i = 0, n = blocks_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blocks_files_.Get(i));
  }

  // repeated string history_files = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(history_files_.size());
  for (int i = 0, n = history_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      history_files_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.SnapshotsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.SnapshotsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.SnapshotsReply)
    MergeFrom(*source);
  }
}

void SnapshotsReply::MergeFrom(const SnapshotsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.SnapshotsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_files_.MergeFrom(from.blocks_files_);
  history_files_.MergeFrom(from.history_files_);
}

void SnapshotsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.SnapshotsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotsReply::CopyFrom(const SnapshotsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SnapshotsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotsReply::IsInitialized() const {
  return true;
}

void SnapshotsReply::InternalSwap(SnapshotsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_files_.InternalSwap(&other->blocks_files_);
  history_files_.InternalSwap(&other->history_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RangeReq::_Internal {
 public:
};

RangeReq::RangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.RangeReq)
}
RangeReq::RangeReq(const RangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  from_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_prefix().empty()) {
    from_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_prefix(), 
      GetArena());
  }
  to_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_prefix().empty()) {
    to_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_prefix(), 
      GetArena());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArena());
  }
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:remote.RangeReq)
}

void RangeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RangeReq_remote_2fkv_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
}

RangeReq::~RangeReq() {
  // @@protoc_insertion_point(destructor:remote.RangeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RangeReq::ArenaDtor(void* object) {
  RangeReq* _this = reinterpret_cast< RangeReq* >(object);
  (void)_this;
}
void RangeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeReq& RangeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangeReq_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void RangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.RangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmpty();
  from_prefix_.ClearToEmpty();
  to_prefix_.ClearToEmpty();
  page_token_.ClearToEmpty();
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.RangeReq.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes from_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_from_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool order_ascend = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.RangeReq.page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.RangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.RangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes from_prefix = 3;
  if (this->from_prefix().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_from_prefix(), target);
  }

  // bytes to_prefix = 4;
  if (this->to_prefix().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_to_prefix(), target);
  }

  // bool order_ascend = 5;
  if (this->order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 6;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_limit(), target);
  }

  // int32 page_size = 7;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_page_size(), target);
  }

  // string page_token = 8;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.RangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.RangeReq)
  return target;
}

size_t RangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.RangeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes from_prefix = 3;
  if (this->from_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_prefix());
  }

  // bytes to_prefix = 4;
  if (this->to_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_prefix());
  }

  // string page_token = 8;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // sint64 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_limit());
  }

  // bool order_ascend = 5;
  if (this->order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 7;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.RangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.RangeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.RangeReq)
    MergeFrom(*source);
  }
}

void RangeReq::MergeFrom(const RangeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.RangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.from_prefix().size() > 0) {
    _internal_set_from_prefix(from._internal_from_prefix());
  }
  if (from.to_prefix().size() > 0) {
    _internal_set_to_prefix(from._internal_to_prefix());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.order_ascend() != 0) {
    _internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void RangeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.RangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeReq::CopyFrom(const RangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.RangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeReq::IsInitialized() const {
  return true;
}

void RangeReq::InternalSwap(RangeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_prefix_.Swap(&other->from_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_prefix_.Swap(&other->to_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeReq, page_size_)
      + sizeof(RangeReq::page_size_)
      - PROTOBUF_FIELD_OFFSET(RangeReq, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DomainGetReq::_Internal {
 public:
};

DomainGetReq::DomainGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.DomainGetReq)
}
DomainGetReq::DomainGetReq(const DomainGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k().empty()) {
    k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k(), 
      GetArena());
  }
  k2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k2().empty()) {
    k2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k2(), 
      GetArena());
  }
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(latest_));
  // @@protoc_insertion_point(copy_constructor:remote.DomainGetReq)
}

void DomainGetReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DomainGetReq_remote_2fkv_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&latest_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(latest_));
}

DomainGetReq::~DomainGetReq() {
  // @@protoc_insertion_point(destructor:remote.DomainGetReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DomainGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DomainGetReq::ArenaDtor(void* object) {
  DomainGetReq* _this = reinterpret_cast< DomainGetReq* >(object);
  (void)_this;
}
void DomainGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DomainGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DomainGetReq& DomainGetReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DomainGetReq_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void DomainGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.DomainGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmpty();
  k_.ClearToEmpty();
  k2_.ClearToEmpty();
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(latest_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DomainGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.DomainGetReq.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_k2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool latest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          latest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DomainGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.DomainGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.DomainGetReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes k = 3;
  if (this->k().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_k(), target);
  }

  // uint64 ts = 4;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ts(), target);
  }

  // bytes k2 = 5;
  if (this->k2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_k2(), target);
  }

  // bool latest = 6;
  if (this->latest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_latest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.DomainGetReq)
  return target;
}

size_t DomainGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.DomainGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes k = 3;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // bytes k2 = 5;
  if (this->k2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k2());
  }

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // uint64 ts = 4;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ts());
  }

  // bool latest = 6;
  if (this->latest() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainGetReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.DomainGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DomainGetReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DomainGetReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.DomainGetReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.DomainGetReq)
    MergeFrom(*source);
  }
}

void DomainGetReq::MergeFrom(const DomainGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.DomainGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.k().size() > 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.k2().size() > 0) {
    _internal_set_k2(from._internal_k2());
  }
  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.latest() != 0) {
    _internal_set_latest(from._internal_latest());
  }
}

void DomainGetReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.DomainGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainGetReq::CopyFrom(const DomainGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.DomainGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainGetReq::IsInitialized() const {
  return true;
}

void DomainGetReq::InternalSwap(DomainGetReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  k2_.Swap(&other->k2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DomainGetReq, latest_)
      + sizeof(DomainGetReq::latest_)
      - PROTOBUF_FIELD_OFFSET(DomainGetReq, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DomainGetReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DomainGetReply::_Internal {
 public:
};

DomainGetReply::DomainGetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.DomainGetReply)
}
DomainGetReply::DomainGetReply(const DomainGetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:remote.DomainGetReply)
}

void DomainGetReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DomainGetReply_remote_2fkv_2eproto.base);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
}

DomainGetReply::~DomainGetReply() {
  // @@protoc_insertion_point(destructor:remote.DomainGetReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DomainGetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DomainGetReply::ArenaDtor(void* object) {
  DomainGetReply* _this = reinterpret_cast< DomainGetReply* >(object);
  (void)_this;
}
void DomainGetReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DomainGetReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DomainGetReply& DomainGetReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DomainGetReply_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void DomainGetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.DomainGetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.ClearToEmpty();
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DomainGetReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DomainGetReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.DomainGetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_v(), target);
  }

  // bool ok = 2;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.DomainGetReply)
  return target;
}

size_t DomainGetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.DomainGetReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // bool ok = 2;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainGetReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.DomainGetReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DomainGetReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DomainGetReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.DomainGetReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.DomainGetReply)
    MergeFrom(*source);
  }
}

void DomainGetReply::MergeFrom(const DomainGetReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.DomainGetReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void DomainGetReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.DomainGetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainGetReply::CopyFrom(const DomainGetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.DomainGetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainGetReply::IsInitialized() const {
  return true;
}

void DomainGetReply::InternalSwap(DomainGetReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DomainGetReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistoryGetReq::_Internal {
 public:
};

HistoryGetReq::HistoryGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.HistoryGetReq)
}
HistoryGetReq::HistoryGetReq(const HistoryGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k().empty()) {
    k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k(), 
      GetArena());
  }
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(ts_));
  // @@protoc_insertion_point(copy_constructor:remote.HistoryGetReq)
}

void HistoryGetReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryGetReq_remote_2fkv_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(ts_));
}

HistoryGetReq::~HistoryGetReq() {
  // @@protoc_insertion_point(destructor:remote.HistoryGetReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HistoryGetReq::ArenaDtor(void* object) {
  HistoryGetReq* _this = reinterpret_cast< HistoryGetReq* >(object);
  (void)_this;
}
void HistoryGetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryGetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryGetReq& HistoryGetReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryGetReq_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void HistoryGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.HistoryGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmpty();
  k_.ClearToEmpty();
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryGetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.HistoryGetReq.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryGetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.HistoryGetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.HistoryGetReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes k = 3;
  if (this->k().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_k(), target);
  }

  // uint64 ts = 4;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.HistoryGetReq)
  return target;
}

size_t HistoryGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.HistoryGetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes k = 3;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // uint64 ts = 4;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryGetReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.HistoryGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryGetReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryGetReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.HistoryGetReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.HistoryGetReq)
    MergeFrom(*source);
  }
}

void HistoryGetReq::MergeFrom(const HistoryGetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.HistoryGetReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.k().size() > 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void HistoryGetReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.HistoryGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryGetReq::CopyFrom(const HistoryGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.HistoryGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryGetReq::IsInitialized() const {
  return true;
}

void HistoryGetReq::InternalSwap(HistoryGetReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryGetReq, ts_)
      + sizeof(HistoryGetReq::ts_)
      - PROTOBUF_FIELD_OFFSET(HistoryGetReq, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryGetReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistoryGetReply::_Internal {
 public:
};

HistoryGetReply::HistoryGetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.HistoryGetReply)
}
HistoryGetReply::HistoryGetReply(const HistoryGetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_v(), 
      GetArena());
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:remote.HistoryGetReply)
}

void HistoryGetReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryGetReply_remote_2fkv_2eproto.base);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
}

HistoryGetReply::~HistoryGetReply() {
  // @@protoc_insertion_point(destructor:remote.HistoryGetReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryGetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HistoryGetReply::ArenaDtor(void* object) {
  HistoryGetReply* _this = reinterpret_cast< HistoryGetReply* >(object);
  (void)_this;
}
void HistoryGetReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryGetReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryGetReply& HistoryGetReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryGetReply_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void HistoryGetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.HistoryGetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.ClearToEmpty();
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryGetReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryGetReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.HistoryGetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_v(), target);
  }

  // bool ok = 2;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.HistoryGetReply)
  return target;
}

size_t HistoryGetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.HistoryGetReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // bool ok = 2;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryGetReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.HistoryGetReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryGetReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryGetReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.HistoryGetReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.HistoryGetReply)
    MergeFrom(*source);
  }
}

void HistoryGetReply::MergeFrom(const HistoryGetReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.HistoryGetReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v().size() > 0) {
    _internal_set_v(from._internal_v());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void HistoryGetReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.HistoryGetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryGetReply::CopyFrom(const HistoryGetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.HistoryGetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryGetReply::IsInitialized() const {
  return true;
}

void HistoryGetReply::InternalSwap(HistoryGetReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryGetReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IndexRangeReq::_Internal {
 public:
};

IndexRangeReq::IndexRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.IndexRangeReq)
}
IndexRangeReq::IndexRangeReq(const IndexRangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_k().empty()) {
    k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k(), 
      GetArena());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArena());
  }
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:remote.IndexRangeReq)
}

void IndexRangeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexRangeReq_remote_2fkv_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
}

IndexRangeReq::~IndexRangeReq() {
  // @@protoc_insertion_point(destructor:remote.IndexRangeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexRangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndexRangeReq::ArenaDtor(void* object) {
  IndexRangeReq* _this = reinterpret_cast< IndexRangeReq* >(object);
  (void)_this;
}
void IndexRangeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexRangeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexRangeReq& IndexRangeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexRangeReq_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void IndexRangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.IndexRangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmpty();
  k_.ClearToEmpty();
  page_token_.ClearToEmpty();
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRangeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.IndexRangeReq.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 from_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          from_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 to_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          to_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool order_ascend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.IndexRangeReq.page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexRangeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.IndexRangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.IndexRangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes k = 3;
  if (this->k().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_k(), target);
  }

  // sint64 from_ts = 4;
  if (this->from_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(4, this->_internal_from_ts(), target);
  }

  // sint64 to_ts = 5;
  if (this->to_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(5, this->_internal_to_ts(), target);
  }

  // bool order_ascend = 6;
  if (this->order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 7;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(7, this->_internal_limit(), target);
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_page_size(), target);
  }

  // string page_token = 9;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.IndexRangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.IndexRangeReq)
  return target;
}

size_t IndexRangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.IndexRangeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes k = 3;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // string page_token = 9;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // sint64 from_ts = 4;
  if (this->from_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_from_ts());
  }

  // sint64 to_ts = 5;
  if (this->to_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_to_ts());
  }

  // sint64 limit = 7;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_limit());
  }

  // bool order_ascend = 6;
  if (this->order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexRangeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.IndexRangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexRangeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexRangeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.IndexRangeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.IndexRangeReq)
    MergeFrom(*source);
  }
}

void IndexRangeReq::MergeFrom(const IndexRangeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.IndexRangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.k().size() > 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.from_ts() != 0) {
    _internal_set_from_ts(from._internal_from_ts());
  }
  if (from.to_ts() != 0) {
    _internal_set_to_ts(from._internal_to_ts());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.order_ascend() != 0) {
    _internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void IndexRangeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.IndexRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexRangeReq::CopyFrom(const IndexRangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.IndexRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRangeReq::IsInitialized() const {
  return true;
}

void IndexRangeReq::InternalSwap(IndexRangeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  k_.Swap(&other->k_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexRangeReq, page_size_)
      + sizeof(IndexRangeReq::page_size_)
      - PROTOBUF_FIELD_OFFSET(IndexRangeReq, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRangeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IndexRangeReply::_Internal {
 public:
};

IndexRangeReply::IndexRangeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timestamps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.IndexRangeReply)
}
IndexRangeReply::IndexRangeReply(const IndexRangeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      timestamps_(from.timestamps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:remote.IndexRangeReply)
}

void IndexRangeReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexRangeReply_remote_2fkv_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IndexRangeReply::~IndexRangeReply() {
  // @@protoc_insertion_point(destructor:remote.IndexRangeReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexRangeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndexRangeReply::ArenaDtor(void* object) {
  IndexRangeReply* _this = reinterpret_cast< IndexRangeReply* >(object);
  (void)_this;
}
void IndexRangeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexRangeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexRangeReply& IndexRangeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexRangeReply_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void IndexRangeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.IndexRangeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamps_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRangeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 timestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.IndexRangeReply.next_page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexRangeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.IndexRangeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 timestamps = 1;
  {
    int byte_size = _timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_timestamps(), byte_size, target);
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.IndexRangeReply.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.IndexRangeReply)
  return target;
}

size_t IndexRangeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.IndexRangeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 timestamps = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexRangeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.IndexRangeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexRangeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexRangeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.IndexRangeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.IndexRangeReply)
    MergeFrom(*source);
  }
}

void IndexRangeReply::MergeFrom(const IndexRangeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.IndexRangeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timestamps_.MergeFrom(from.timestamps_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void IndexRangeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.IndexRangeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexRangeReply::CopyFrom(const IndexRangeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.IndexRangeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRangeReply::IsInitialized() const {
  return true;
}

void IndexRangeReply::InternalSwap(IndexRangeReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timestamps_.InternalSwap(&other->timestamps_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRangeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistoryRangeReq::_Internal {
 public:
};

HistoryRangeReq::HistoryRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.HistoryRangeReq)
}
HistoryRangeReq::HistoryRangeReq(const HistoryRangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArena());
  }
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:remote.HistoryRangeReq)
}

void HistoryRangeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryRangeReq_remote_2fkv_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
}

HistoryRangeReq::~HistoryRangeReq() {
  // @@protoc_insertion_point(destructor:remote.HistoryRangeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryRangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HistoryRangeReq::ArenaDtor(void* object) {
  HistoryRangeReq* _this = reinterpret_cast< HistoryRangeReq* >(object);
  (void)_this;
}
void HistoryRangeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryRangeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryRangeReq& HistoryRangeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryRangeReq_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void HistoryRangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.HistoryRangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmpty();
  page_token_.ClearToEmpty();
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryRangeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.HistoryRangeReq.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 from_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          from_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 to_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          to_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool order_ascend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.HistoryRangeReq.page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryRangeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.HistoryRangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.HistoryRangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // sint64 from_ts = 4;
  if (this->from_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(4, this->_internal_from_ts(), target);
  }

  // sint64 to_ts = 5;
  if (this->to_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(5, this->_internal_to_ts(), target);
  }

  // bool order_ascend = 6;
  if (this->order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 7;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(7, this->_internal_limit(), target);
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_page_size(), target);
  }

  // string page_token = 9;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.HistoryRangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.HistoryRangeReq)
  return target;
}

size_t HistoryRangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.HistoryRangeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // string page_token = 9;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // sint64 from_ts = 4;
  if (this->from_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_from_ts());
  }

  // sint64 to_ts = 5;
  if (this->to_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_to_ts());
  }

  // sint64 limit = 7;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_limit());
  }

  // bool order_ascend = 6;
  if (this->order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryRangeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.HistoryRangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryRangeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryRangeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.HistoryRangeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.HistoryRangeReq)
    MergeFrom(*source);
  }
}

void HistoryRangeReq::MergeFrom(const HistoryRangeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.HistoryRangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.from_ts() != 0) {
    _internal_set_from_ts(from._internal_from_ts());
  }
  if (from.to_ts() != 0) {
    _internal_set_to_ts(from._internal_to_ts());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.order_ascend() != 0) {
    _internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void HistoryRangeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.HistoryRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRangeReq::CopyFrom(const HistoryRangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.HistoryRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRangeReq::IsInitialized() const {
  return true;
}

void HistoryRangeReq::InternalSwap(HistoryRangeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryRangeReq, page_size_)
      + sizeof(HistoryRangeReq::page_size_)
      - PROTOBUF_FIELD_OFFSET(HistoryRangeReq, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryRangeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DomainRangeReq::_Internal {
 public:
};

DomainRangeReq::DomainRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.DomainRangeReq)
}
DomainRangeReq::DomainRangeReq(const DomainRangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  from_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_key().empty()) {
    from_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from_key(), 
      GetArena());
  }
  to_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_key().empty()) {
    to_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to_key(), 
      GetArena());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArena());
  }
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:remote.DomainRangeReq)
}

void DomainRangeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DomainRangeReq_remote_2fkv_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(limit_));
}

DomainRangeReq::~DomainRangeReq() {
  // @@protoc_insertion_point(destructor:remote.DomainRangeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DomainRangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DomainRangeReq::ArenaDtor(void* object) {
  DomainRangeReq* _this = reinterpret_cast< DomainRangeReq* >(object);
  (void)_this;
}
void DomainRangeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DomainRangeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DomainRangeReq& DomainRangeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DomainRangeReq_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void DomainRangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.DomainRangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.ClearToEmpty();
  from_key_.ClearToEmpty();
  to_key_.ClearToEmpty();
  page_token_.ClearToEmpty();
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DomainRangeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.DomainRangeReq.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes from_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_from_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_to_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool latest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          latest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool order_ascend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.DomainRangeReq.page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DomainRangeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.DomainRangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.DomainRangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes from_key = 3;
  if (this->from_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_from_key(), target);
  }

  // bytes to_key = 4;
  if (this->to_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_to_key(), target);
  }

  // uint64 ts = 5;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ts(), target);
  }

  // bool latest = 6;
  if (this->latest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_latest(), target);
  }

  // bool order_ascend = 7;
  if (this->order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 8;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_limit(), target);
  }

  // int32 page_size = 9;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_page_size(), target);
  }

  // string page_token = 10;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.DomainRangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.DomainRangeReq)
  return target;
}

size_t DomainRangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.DomainRangeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes from_key = 3;
  if (this->from_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_key());
  }

  // bytes to_key = 4;
  if (this->to_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_key());
  }

  // string page_token = 10;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // uint64 ts = 5;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ts());
  }

  // bool latest = 6;
  if (this->latest() != 0) {
    total_size += 1 + 1;
  }

  // bool order_ascend = 7;
  if (this->order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 9;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  // sint64 limit = 8;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainRangeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.DomainRangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DomainRangeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DomainRangeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.DomainRangeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.DomainRangeReq)
    MergeFrom(*source);
  }
}

void DomainRangeReq::MergeFrom(const DomainRangeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.DomainRangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.from_key().size() > 0) {
    _internal_set_from_key(from._internal_from_key());
  }
  if (from.to_key().size() > 0) {
    _internal_set_to_key(from._internal_to_key());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.latest() != 0) {
    _internal_set_latest(from._internal_latest());
  }
  if (from.order_ascend() != 0) {
    _internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void DomainRangeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.DomainRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainRangeReq::CopyFrom(const DomainRangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.DomainRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainRangeReq::IsInitialized() const {
  return true;
}

void DomainRangeReq::InternalSwap(DomainRangeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_key_.Swap(&other->from_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_key_.Swap(&other->to_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DomainRangeReq, limit_)
      + sizeof(DomainRangeReq::limit_)
      - PROTOBUF_FIELD_OFFSET(DomainRangeReq, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DomainRangeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pairs::_Internal {
 public:
};

Pairs::Pairs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.Pairs)
}
Pairs::Pairs(const Pairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:remote.Pairs)
}

void Pairs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pairs_remote_2fkv_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Pairs::~Pairs() {
  // @@protoc_insertion_point(destructor:remote.Pairs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pairs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pairs::ArenaDtor(void* object) {
  Pairs* _this = reinterpret_cast< Pairs* >(object);
  (void)_this;
}
void Pairs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pairs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pairs& Pairs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pairs_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void Pairs::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.Pairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  values_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pairs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "remote.Pairs.next_page_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pairs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.Pairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(2, s, target);
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.Pairs.next_page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.Pairs)
  return target;
}

size_t Pairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.Pairs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  // repeated bytes values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      values_.Get(i));
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pairs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.Pairs)
  GOOGLE_DCHECK_NE(&from, this);
  const Pairs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pairs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.Pairs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.Pairs)
    MergeFrom(*source);
  }
}

void Pairs::MergeFrom(const Pairs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.Pairs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void Pairs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.Pairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pairs::CopyFrom(const Pairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.Pairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pairs::IsInitialized() const {
  return true;
}

void Pairs::InternalSwap(Pairs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Pairs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParisPagination::_Internal {
 public:
};

ParisPagination::ParisPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.ParisPagination)
}
ParisPagination::ParisPagination(const ParisPagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_key().empty()) {
    next_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_key(), 
      GetArena());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:remote.ParisPagination)
}

void ParisPagination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParisPagination_remote_2fkv_2eproto.base);
  next_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = PROTOBUF_LONGLONG(0);
}

ParisPagination::~ParisPagination() {
  // @@protoc_insertion_point(destructor:remote.ParisPagination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParisPagination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParisPagination::ArenaDtor(void* object) {
  ParisPagination* _this = reinterpret_cast< ParisPagination* >(object);
  (void)_this;
}
void ParisPagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParisPagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParisPagination& ParisPagination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParisPagination_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void ParisPagination::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ParisPagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_key_.ClearToEmpty();
  limit_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParisPagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes next_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_next_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParisPagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ParisPagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes next_key = 1;
  if (this->next_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_next_key(), target);
  }

  // sint64 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ParisPagination)
  return target;
}

size_t ParisPagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ParisPagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes next_key = 1;
  if (this->next_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_key());
  }

  // sint64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParisPagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.ParisPagination)
  GOOGLE_DCHECK_NE(&from, this);
  const ParisPagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParisPagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.ParisPagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.ParisPagination)
    MergeFrom(*source);
  }
}

void ParisPagination::MergeFrom(const ParisPagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.ParisPagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_key().size() > 0) {
    _internal_set_next_key(from._internal_next_key());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void ParisPagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.ParisPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParisPagination::CopyFrom(const ParisPagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ParisPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParisPagination::IsInitialized() const {
  return true;
}

void ParisPagination::InternalSwap(ParisPagination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  next_key_.Swap(&other->next_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParisPagination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IndexPagination::_Internal {
 public:
};

IndexPagination::IndexPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:remote.IndexPagination)
}
IndexPagination::IndexPagination(const IndexPagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&next_time_stamp_, &from.next_time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&next_time_stamp_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:remote.IndexPagination)
}

void IndexPagination::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&next_time_stamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&next_time_stamp_)) + sizeof(limit_));
}

IndexPagination::~IndexPagination() {
  // @@protoc_insertion_point(destructor:remote.IndexPagination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexPagination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexPagination::ArenaDtor(void* object) {
  IndexPagination* _this = reinterpret_cast< IndexPagination* >(object);
  (void)_this;
}
void IndexPagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexPagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexPagination& IndexPagination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexPagination_remote_2fkv_2eproto.base);
  return *internal_default_instance();
}


void IndexPagination::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.IndexPagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&next_time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&next_time_stamp_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexPagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 next_time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          next_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexPagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.IndexPagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 next_time_stamp = 1;
  if (this->next_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->_internal_next_time_stamp(), target);
  }

  // sint64 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.IndexPagination)
  return target;
}

size_t IndexPagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.IndexPagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 next_time_stamp = 1;
  if (this->next_time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_next_time_stamp());
  }

  // sint64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexPagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:remote.IndexPagination)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexPagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexPagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:remote.IndexPagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:remote.IndexPagination)
    MergeFrom(*source);
  }
}

void IndexPagination::MergeFrom(const IndexPagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:remote.IndexPagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_time_stamp() != 0) {
    _internal_set_next_time_stamp(from._internal_next_time_stamp());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void IndexPagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:remote.IndexPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexPagination::CopyFrom(const IndexPagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.IndexPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexPagination::IsInitialized() const {
  return true;
}

void IndexPagination::InternalSwap(IndexPagination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexPagination, limit_)
      + sizeof(IndexPagination::limit_)
      - PROTOBUF_FIELD_OFFSET(IndexPagination, next_time_stamp_)>(
          reinterpret_cast<char*>(&next_time_stamp_),
          reinterpret_cast<char*>(&other->next_time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexPagination::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::remote::Cursor* Arena::CreateMaybeMessage< ::remote::Cursor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::Cursor >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::Pair* Arena::CreateMaybeMessage< ::remote::Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StorageChange* Arena::CreateMaybeMessage< ::remote::StorageChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StorageChange >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::AccountChange* Arena::CreateMaybeMessage< ::remote::AccountChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::AccountChange >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StateChangeBatch* Arena::CreateMaybeMessage< ::remote::StateChangeBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StateChangeBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StateChange* Arena::CreateMaybeMessage< ::remote::StateChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StateChangeRequest* Arena::CreateMaybeMessage< ::remote::StateChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StateChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SnapshotsRequest* Arena::CreateMaybeMessage< ::remote::SnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SnapshotsReply* Arena::CreateMaybeMessage< ::remote::SnapshotsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SnapshotsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::RangeReq* Arena::CreateMaybeMessage< ::remote::RangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::RangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::DomainGetReq* Arena::CreateMaybeMessage< ::remote::DomainGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::DomainGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::DomainGetReply* Arena::CreateMaybeMessage< ::remote::DomainGetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::DomainGetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::HistoryGetReq* Arena::CreateMaybeMessage< ::remote::HistoryGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::HistoryGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::HistoryGetReply* Arena::CreateMaybeMessage< ::remote::HistoryGetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::HistoryGetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::IndexRangeReq* Arena::CreateMaybeMessage< ::remote::IndexRangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::IndexRangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::IndexRangeReply* Arena::CreateMaybeMessage< ::remote::IndexRangeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::IndexRangeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::HistoryRangeReq* Arena::CreateMaybeMessage< ::remote::HistoryRangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::HistoryRangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::DomainRangeReq* Arena::CreateMaybeMessage< ::remote::DomainRangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::DomainRangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::Pairs* Arena::CreateMaybeMessage< ::remote::Pairs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::Pairs >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ParisPagination* Arena::CreateMaybeMessage< ::remote::ParisPagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ParisPagination >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::IndexPagination* Arena::CreateMaybeMessage< ::remote::IndexPagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::IndexPagination >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
