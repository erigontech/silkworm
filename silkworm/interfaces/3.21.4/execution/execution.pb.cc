// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution/execution.proto

#include "execution/execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace execution {
PROTOBUF_CONSTEXPR ForkChoiceReceipt::ForkChoiceReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latest_valid_hash_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForkChoiceReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForkChoiceReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForkChoiceReceiptDefaultTypeInternal() {}
  union {
    ForkChoiceReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForkChoiceReceiptDefaultTypeInternal _ForkChoiceReceipt_default_instance_;
PROTOBUF_CONSTEXPR ValidationReceipt::ValidationReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latest_valid_hash_)*/nullptr
  , /*decltype(_impl_.missing_hash_)*/nullptr
  , /*decltype(_impl_.validation_status_)*/0} {}
struct ValidationReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidationReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidationReceiptDefaultTypeInternal() {}
  union {
    ValidationReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidationReceiptDefaultTypeInternal _ValidationReceipt_default_instance_;
PROTOBUF_CONSTEXPR IsCanonicalResponse::IsCanonicalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.canonical_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsCanonicalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsCanonicalResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsCanonicalResponseDefaultTypeInternal() {}
  union {
    IsCanonicalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsCanonicalResponseDefaultTypeInternal _IsCanonicalResponse_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_hash_)*/nullptr
  , /*decltype(_impl_.coinbase_)*/nullptr
  , /*decltype(_impl_.state_root_)*/nullptr
  , /*decltype(_impl_.receipt_root_)*/nullptr
  , /*decltype(_impl_.logs_bloom_)*/nullptr
  , /*decltype(_impl_.prev_randao_)*/nullptr
  , /*decltype(_impl_.difficulty_)*/nullptr
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.ommer_hash_)*/nullptr
  , /*decltype(_impl_.transaction_hash_)*/nullptr
  , /*decltype(_impl_.base_fee_per_gas_)*/nullptr
  , /*decltype(_impl_.withdrawal_hash_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.data_gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.excess_data_gas_)*/uint64_t{0u}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR BlockBody::BlockBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.uncles_)*/{}
  , /*decltype(_impl_.withdrawals_)*/{}
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBodyDefaultTypeInternal() {}
  union {
    BlockBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBodyDefaultTypeInternal _BlockBody_default_instance_;
PROTOBUF_CONSTEXPR GetHeaderResponse::GetHeaderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct GetHeaderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeaderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeaderResponseDefaultTypeInternal() {}
  union {
    GetHeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeaderResponseDefaultTypeInternal _GetHeaderResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBodyResponse::GetBodyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_)*/nullptr} {}
struct GetBodyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBodyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBodyResponseDefaultTypeInternal() {}
  union {
    GetBodyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBodyResponseDefaultTypeInternal _GetBodyResponse_default_instance_;
PROTOBUF_CONSTEXPR GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}} {}
struct GetHeaderHashNumberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeaderHashNumberResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeaderHashNumberResponseDefaultTypeInternal() {}
  union {
    GetHeaderHashNumberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeaderHashNumberResponseDefaultTypeInternal _GetHeaderHashNumberResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentRequest::GetSegmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}} {}
struct GetSegmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentRequestDefaultTypeInternal() {}
  union {
    GetSegmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentRequestDefaultTypeInternal _GetSegmentRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertHeadersRequest::InsertHeadersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.headers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertHeadersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertHeadersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertHeadersRequestDefaultTypeInternal() {}
  union {
    InsertHeadersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertHeadersRequestDefaultTypeInternal _InsertHeadersRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertBodiesRequest::InsertBodiesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bodies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertBodiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBodiesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBodiesRequestDefaultTypeInternal() {}
  union {
    InsertBodiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBodiesRequestDefaultTypeInternal _InsertBodiesRequest_default_instance_;
PROTOBUF_CONSTEXPR EmptyMessage::EmptyMessage(
    ::_pbi::ConstantInitialized) {}
struct EmptyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyMessageDefaultTypeInternal() {}
  union {
    EmptyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
}  // namespace execution
static ::_pb::Metadata file_level_metadata_execution_2fexecution_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_execution_2fexecution_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_execution_2fexecution_2eproto = nullptr;

const uint32_t TableStruct_execution_2fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _impl_.latest_valid_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _impl_.validation_status_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _impl_.latest_valid_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _impl_.missing_hash_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::IsCanonicalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::IsCanonicalResponse, _impl_.canonical_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.parent_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.receipt_root_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.logs_bloom_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.prev_randao_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.gas_limit_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.extra_data_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.ommer_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.transaction_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.base_fee_per_gas_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.withdrawal_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.data_gas_used_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.excess_data_gas_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.transactions_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.uncles_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.withdrawals_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _impl_.header_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _impl_.body_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _impl_.block_number_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _impl_.block_hash_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::InsertHeadersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::InsertHeadersRequest, _impl_.headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::InsertBodiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::InsertBodiesRequest, _impl_.bodies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::EmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::execution::ForkChoiceReceipt)},
  { 8, 17, -1, sizeof(::execution::ValidationReceipt)},
  { 20, -1, -1, sizeof(::execution::IsCanonicalResponse)},
  { 27, 53, -1, sizeof(::execution::Header)},
  { 73, -1, -1, sizeof(::execution::BlockBody)},
  { 84, 91, -1, sizeof(::execution::GetHeaderResponse)},
  { 92, 99, -1, sizeof(::execution::GetBodyResponse)},
  { 100, 107, -1, sizeof(::execution::GetHeaderHashNumberResponse)},
  { 108, 116, -1, sizeof(::execution::GetSegmentRequest)},
  { 118, -1, -1, sizeof(::execution::InsertHeadersRequest)},
  { 125, -1, -1, sizeof(::execution::InsertBodiesRequest)},
  { 132, -1, -1, sizeof(::execution::EmptyMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::execution::_ForkChoiceReceipt_default_instance_._instance,
  &::execution::_ValidationReceipt_default_instance_._instance,
  &::execution::_IsCanonicalResponse_default_instance_._instance,
  &::execution::_Header_default_instance_._instance,
  &::execution::_BlockBody_default_instance_._instance,
  &::execution::_GetHeaderResponse_default_instance_._instance,
  &::execution::_GetBodyResponse_default_instance_._instance,
  &::execution::_GetHeaderHashNumberResponse_default_instance_._instance,
  &::execution::_GetSegmentRequest_default_instance_._instance,
  &::execution::_InsertHeadersRequest_default_instance_._instance,
  &::execution::_InsertBodiesRequest_default_instance_._instance,
  &::execution::_EmptyMessage_default_instance_._instance,
};

const char descriptor_table_protodef_execution_2fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031execution/execution.proto\022\texecution\032\021"
  "types/types.proto\"L\n\021ForkChoiceReceipt\022\017"
  "\n\007success\030\001 \001(\010\022&\n\021latest_valid_hash\030\002 \001"
  "(\0132\013.types.H256\"\254\001\n\021ValidationReceipt\0226\n"
  "\021validation_status\030\001 \001(\0162\033.execution.Val"
  "idationStatus\022&\n\021latest_valid_hash\030\002 \001(\013"
  "2\013.types.H256\022&\n\014missing_hash\030\003 \001(\0132\013.ty"
  "pes.H256H\000\210\001\001B\017\n\r_missing_hash\"(\n\023IsCano"
  "nicalResponse\022\021\n\tcanonical\030\001 \001(\010\"\254\005\n\006Hea"
  "der\022 \n\013parent_hash\030\001 \001(\0132\013.types.H256\022\035\n"
  "\010coinbase\030\002 \001(\0132\013.types.H160\022\037\n\nstate_ro"
  "ot\030\003 \001(\0132\013.types.H256\022!\n\014receipt_root\030\004 "
  "\001(\0132\013.types.H256\022 \n\nlogs_bloom\030\005 \001(\0132\014.t"
  "ypes.H2048\022 \n\013prev_randao\030\006 \001(\0132\013.types."
  "H256\022\024\n\014block_number\030\007 \001(\004\022\021\n\tgas_limit\030"
  "\010 \001(\004\022\020\n\010gas_used\030\t \001(\004\022\021\n\ttimestamp\030\n \001"
  "(\004\022\r\n\005nonce\030\013 \001(\004\022\022\n\nextra_data\030\014 \001(\014\022\037\n"
  "\ndifficulty\030\r \001(\0132\013.types.H256\022\037\n\nblock_"
  "hash\030\016 \001(\0132\013.types.H256\022\037\n\nommer_hash\030\017 "
  "\001(\0132\013.types.H256\022%\n\020transaction_hash\030\020 \001"
  "(\0132\013.types.H256\022*\n\020base_fee_per_gas\030\021 \001("
  "\0132\013.types.H256H\000\210\001\001\022)\n\017withdrawal_hash\030\022"
  " \001(\0132\013.types.H256H\001\210\001\001\022\032\n\rdata_gas_used\030"
  "\023 \001(\004H\002\210\001\001\022\034\n\017excess_data_gas\030\024 \001(\004H\003\210\001\001"
  "B\023\n\021_base_fee_per_gasB\022\n\020_withdrawal_has"
  "hB\020\n\016_data_gas_usedB\022\n\020_excess_data_gas\""
  "\243\001\n\tBlockBody\022\037\n\nblock_hash\030\001 \001(\0132\013.type"
  "s.H256\022\024\n\014block_number\030\002 \001(\004\022\024\n\014transact"
  "ions\030\003 \003(\014\022!\n\006uncles\030\004 \003(\0132\021.execution.H"
  "eader\022&\n\013withdrawals\030\005 \003(\0132\021.types.Withd"
  "rawal\"F\n\021GetHeaderResponse\022&\n\006header\030\001 \001"
  "(\0132\021.execution.HeaderH\000\210\001\001B\t\n\007_header\"C\n"
  "\017GetBodyResponse\022\'\n\004body\030\001 \001(\0132\024.executi"
  "on.BlockBodyH\000\210\001\001B\007\n\005_body\"I\n\033GetHeaderH"
  "ashNumberResponse\022\031\n\014block_number\030\001 \001(\004H"
  "\000\210\001\001B\017\n\r_block_number\"t\n\021GetSegmentReque"
  "st\022\031\n\014block_number\030\001 \001(\004H\000\210\001\001\022$\n\nblock_h"
  "ash\030\002 \001(\0132\013.types.H256H\001\210\001\001B\017\n\r_block_nu"
  "mberB\r\n\013_block_hash\":\n\024InsertHeadersRequ"
  "est\022\"\n\007headers\030\001 \003(\0132\021.execution.Header\""
  ";\n\023InsertBodiesRequest\022$\n\006bodies\030\001 \003(\0132\024"
  ".execution.BlockBody\"\016\n\014EmptyMessage*U\n\020"
  "ValidationStatus\022\013\n\007Success\020\000\022\020\n\014Invalid"
  "Chain\020\001\022\016\n\nTooFarAway\020\002\022\022\n\016MissingSegmen"
  "t\020\0032\367\004\n\tExecution\022I\n\rInsertHeaders\022\037.exe"
  "cution.InsertHeadersRequest\032\027.execution."
  "EmptyMessage\022G\n\014InsertBodies\022\036.execution"
  ".InsertBodiesRequest\032\027.execution.EmptyMe"
  "ssage\022:\n\rValidateChain\022\013.types.H256\032\034.ex"
  "ecution.ValidationReceipt\022=\n\020UpdateForkC"
  "hoice\022\013.types.H256\032\034.execution.ForkChoic"
  "eReceipt\022A\n\rAssembleBlock\022\027.execution.Em"
  "ptyMessage\032\027.types.ExecutionPayload\022G\n\tG"
  "etHeader\022\034.execution.GetSegmentRequest\032\034"
  ".execution.GetHeaderResponse\022C\n\007GetBody\022"
  "\034.execution.GetSegmentRequest\032\032.executio"
  "n.GetBodyResponse\022>\n\017IsCanonicalHash\022\013.t"
  "ypes.H256\032\036.execution.IsCanonicalRespons"
  "e\022J\n\023GetHeaderHashNumber\022\013.types.H256\032&."
  "execution.GetHeaderHashNumberResponseB\027Z"
  "\025./execution;executionb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_execution_2fexecution_2eproto_deps[1] = {
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_execution_2fexecution_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_execution_2fexecution_2eproto = {
    false, false, 2430, descriptor_table_protodef_execution_2fexecution_2eproto,
    "execution/execution.proto",
    &descriptor_table_execution_2fexecution_2eproto_once, descriptor_table_execution_2fexecution_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_execution_2fexecution_2eproto::offsets,
    file_level_metadata_execution_2fexecution_2eproto, file_level_enum_descriptors_execution_2fexecution_2eproto,
    file_level_service_descriptors_execution_2fexecution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_execution_2fexecution_2eproto_getter() {
  return &descriptor_table_execution_2fexecution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_execution_2fexecution_2eproto(&descriptor_table_execution_2fexecution_2eproto);
namespace execution {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_execution_2fexecution_2eproto);
  return file_level_enum_descriptors_execution_2fexecution_2eproto[0];
}
bool ValidationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ForkChoiceReceipt::_Internal {
 public:
  static const ::types::H256& latest_valid_hash(const ForkChoiceReceipt* msg);
};

const ::types::H256&
ForkChoiceReceipt::_Internal::latest_valid_hash(const ForkChoiceReceipt* msg) {
  return *msg->_impl_.latest_valid_hash_;
}
void ForkChoiceReceipt::clear_latest_valid_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
}
ForkChoiceReceipt::ForkChoiceReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.ForkChoiceReceipt)
}
ForkChoiceReceipt::ForkChoiceReceipt(const ForkChoiceReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForkChoiceReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_latest_valid_hash()) {
    _this->_impl_.latest_valid_hash_ = new ::types::H256(*from._impl_.latest_valid_hash_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:execution.ForkChoiceReceipt)
}

inline void ForkChoiceReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ForkChoiceReceipt::~ForkChoiceReceipt() {
  // @@protoc_insertion_point(destructor:execution.ForkChoiceReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForkChoiceReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.latest_valid_hash_;
}

void ForkChoiceReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForkChoiceReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ForkChoiceReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForkChoiceReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 latest_valid_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_valid_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForkChoiceReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ForkChoiceReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latest_valid_hash(this),
        _Internal::latest_valid_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ForkChoiceReceipt)
  return target;
}

size_t ForkChoiceReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ForkChoiceReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latest_valid_hash_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForkChoiceReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForkChoiceReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForkChoiceReceipt::GetClassData() const { return &_class_data_; }


void ForkChoiceReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForkChoiceReceipt*>(&to_msg);
  auto& from = static_cast<const ForkChoiceReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.ForkChoiceReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_latest_valid_hash()) {
    _this->_internal_mutable_latest_valid_hash()->::types::H256::MergeFrom(
        from._internal_latest_valid_hash());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForkChoiceReceipt::CopyFrom(const ForkChoiceReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ForkChoiceReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkChoiceReceipt::IsInitialized() const {
  return true;
}

void ForkChoiceReceipt::InternalSwap(ForkChoiceReceipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForkChoiceReceipt, _impl_.success_)
      + sizeof(ForkChoiceReceipt::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(ForkChoiceReceipt, _impl_.latest_valid_hash_)>(
          reinterpret_cast<char*>(&_impl_.latest_valid_hash_),
          reinterpret_cast<char*>(&other->_impl_.latest_valid_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForkChoiceReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[0]);
}

// ===================================================================

class ValidationReceipt::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidationReceipt>()._impl_._has_bits_);
  static const ::types::H256& latest_valid_hash(const ValidationReceipt* msg);
  static const ::types::H256& missing_hash(const ValidationReceipt* msg);
  static void set_has_missing_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
ValidationReceipt::_Internal::latest_valid_hash(const ValidationReceipt* msg) {
  return *msg->_impl_.latest_valid_hash_;
}
const ::types::H256&
ValidationReceipt::_Internal::missing_hash(const ValidationReceipt* msg) {
  return *msg->_impl_.missing_hash_;
}
void ValidationReceipt::clear_latest_valid_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
}
void ValidationReceipt::clear_missing_hash() {
  if (_impl_.missing_hash_ != nullptr) _impl_.missing_hash_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ValidationReceipt::ValidationReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.ValidationReceipt)
}
ValidationReceipt::ValidationReceipt(const ValidationReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidationReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.missing_hash_){nullptr}
    , decltype(_impl_.validation_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_latest_valid_hash()) {
    _this->_impl_.latest_valid_hash_ = new ::types::H256(*from._impl_.latest_valid_hash_);
  }
  if (from._internal_has_missing_hash()) {
    _this->_impl_.missing_hash_ = new ::types::H256(*from._impl_.missing_hash_);
  }
  _this->_impl_.validation_status_ = from._impl_.validation_status_;
  // @@protoc_insertion_point(copy_constructor:execution.ValidationReceipt)
}

inline void ValidationReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.missing_hash_){nullptr}
    , decltype(_impl_.validation_status_){0}
  };
}

ValidationReceipt::~ValidationReceipt() {
  // @@protoc_insertion_point(destructor:execution.ValidationReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidationReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.latest_valid_hash_;
  if (this != internal_default_instance()) delete _impl_.missing_hash_;
}

void ValidationReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidationReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ValidationReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.missing_hash_ != nullptr);
    _impl_.missing_hash_->Clear();
  }
  _impl_.validation_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .execution.ValidationStatus validation_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validation_status(static_cast<::execution::ValidationStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.H256 latest_valid_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_valid_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 missing_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_missing_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidationReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ValidationReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.ValidationStatus validation_status = 1;
  if (this->_internal_validation_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_validation_status(), target);
  }

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latest_valid_hash(this),
        _Internal::latest_valid_hash(this).GetCachedSize(), target, stream);
  }

  // optional .types.H256 missing_hash = 3;
  if (_internal_has_missing_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::missing_hash(this),
        _Internal::missing_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ValidationReceipt)
  return target;
}

size_t ValidationReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ValidationReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latest_valid_hash_);
  }

  // optional .types.H256 missing_hash = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.missing_hash_);
  }

  // .execution.ValidationStatus validation_status = 1;
  if (this->_internal_validation_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_validation_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidationReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidationReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidationReceipt::GetClassData() const { return &_class_data_; }


void ValidationReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidationReceipt*>(&to_msg);
  auto& from = static_cast<const ValidationReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.ValidationReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_latest_valid_hash()) {
    _this->_internal_mutable_latest_valid_hash()->::types::H256::MergeFrom(
        from._internal_latest_valid_hash());
  }
  if (from._internal_has_missing_hash()) {
    _this->_internal_mutable_missing_hash()->::types::H256::MergeFrom(
        from._internal_missing_hash());
  }
  if (from._internal_validation_status() != 0) {
    _this->_internal_set_validation_status(from._internal_validation_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidationReceipt::CopyFrom(const ValidationReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ValidationReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationReceipt::IsInitialized() const {
  return true;
}

void ValidationReceipt::InternalSwap(ValidationReceipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidationReceipt, _impl_.validation_status_)
      + sizeof(ValidationReceipt::_impl_.validation_status_)
      - PROTOBUF_FIELD_OFFSET(ValidationReceipt, _impl_.latest_valid_hash_)>(
          reinterpret_cast<char*>(&_impl_.latest_valid_hash_),
          reinterpret_cast<char*>(&other->_impl_.latest_valid_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[1]);
}

// ===================================================================

class IsCanonicalResponse::_Internal {
 public:
};

IsCanonicalResponse::IsCanonicalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.IsCanonicalResponse)
}
IsCanonicalResponse::IsCanonicalResponse(const IsCanonicalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsCanonicalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.canonical_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.canonical_ = from._impl_.canonical_;
  // @@protoc_insertion_point(copy_constructor:execution.IsCanonicalResponse)
}

inline void IsCanonicalResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.canonical_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IsCanonicalResponse::~IsCanonicalResponse() {
  // @@protoc_insertion_point(destructor:execution.IsCanonicalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsCanonicalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsCanonicalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsCanonicalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.IsCanonicalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.canonical_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCanonicalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool canonical = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.canonical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsCanonicalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.IsCanonicalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool canonical = 1;
  if (this->_internal_canonical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_canonical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.IsCanonicalResponse)
  return target;
}

size_t IsCanonicalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.IsCanonicalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool canonical = 1;
  if (this->_internal_canonical() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsCanonicalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsCanonicalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsCanonicalResponse::GetClassData() const { return &_class_data_; }


void IsCanonicalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsCanonicalResponse*>(&to_msg);
  auto& from = static_cast<const IsCanonicalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.IsCanonicalResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_canonical() != 0) {
    _this->_internal_set_canonical(from._internal_canonical());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsCanonicalResponse::CopyFrom(const IsCanonicalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.IsCanonicalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCanonicalResponse::IsInitialized() const {
  return true;
}

void IsCanonicalResponse::InternalSwap(IsCanonicalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.canonical_, other->_impl_.canonical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCanonicalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[2]);
}

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static const ::types::H256& parent_hash(const Header* msg);
  static const ::types::H160& coinbase(const Header* msg);
  static const ::types::H256& state_root(const Header* msg);
  static const ::types::H256& receipt_root(const Header* msg);
  static const ::types::H2048& logs_bloom(const Header* msg);
  static const ::types::H256& prev_randao(const Header* msg);
  static const ::types::H256& difficulty(const Header* msg);
  static const ::types::H256& block_hash(const Header* msg);
  static const ::types::H256& ommer_hash(const Header* msg);
  static const ::types::H256& transaction_hash(const Header* msg);
  static const ::types::H256& base_fee_per_gas(const Header* msg);
  static void set_has_base_fee_per_gas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::types::H256& withdrawal_hash(const Header* msg);
  static void set_has_withdrawal_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_gas_used(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_excess_data_gas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::types::H256&
Header::_Internal::parent_hash(const Header* msg) {
  return *msg->_impl_.parent_hash_;
}
const ::types::H160&
Header::_Internal::coinbase(const Header* msg) {
  return *msg->_impl_.coinbase_;
}
const ::types::H256&
Header::_Internal::state_root(const Header* msg) {
  return *msg->_impl_.state_root_;
}
const ::types::H256&
Header::_Internal::receipt_root(const Header* msg) {
  return *msg->_impl_.receipt_root_;
}
const ::types::H2048&
Header::_Internal::logs_bloom(const Header* msg) {
  return *msg->_impl_.logs_bloom_;
}
const ::types::H256&
Header::_Internal::prev_randao(const Header* msg) {
  return *msg->_impl_.prev_randao_;
}
const ::types::H256&
Header::_Internal::difficulty(const Header* msg) {
  return *msg->_impl_.difficulty_;
}
const ::types::H256&
Header::_Internal::block_hash(const Header* msg) {
  return *msg->_impl_.block_hash_;
}
const ::types::H256&
Header::_Internal::ommer_hash(const Header* msg) {
  return *msg->_impl_.ommer_hash_;
}
const ::types::H256&
Header::_Internal::transaction_hash(const Header* msg) {
  return *msg->_impl_.transaction_hash_;
}
const ::types::H256&
Header::_Internal::base_fee_per_gas(const Header* msg) {
  return *msg->_impl_.base_fee_per_gas_;
}
const ::types::H256&
Header::_Internal::withdrawal_hash(const Header* msg) {
  return *msg->_impl_.withdrawal_hash_;
}
void Header::clear_parent_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.parent_hash_ != nullptr) {
    delete _impl_.parent_hash_;
  }
  _impl_.parent_hash_ = nullptr;
}
void Header::clear_coinbase() {
  if (GetArenaForAllocation() == nullptr && _impl_.coinbase_ != nullptr) {
    delete _impl_.coinbase_;
  }
  _impl_.coinbase_ = nullptr;
}
void Header::clear_state_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_root_ != nullptr) {
    delete _impl_.state_root_;
  }
  _impl_.state_root_ = nullptr;
}
void Header::clear_receipt_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.receipt_root_ != nullptr) {
    delete _impl_.receipt_root_;
  }
  _impl_.receipt_root_ = nullptr;
}
void Header::clear_logs_bloom() {
  if (GetArenaForAllocation() == nullptr && _impl_.logs_bloom_ != nullptr) {
    delete _impl_.logs_bloom_;
  }
  _impl_.logs_bloom_ = nullptr;
}
void Header::clear_prev_randao() {
  if (GetArenaForAllocation() == nullptr && _impl_.prev_randao_ != nullptr) {
    delete _impl_.prev_randao_;
  }
  _impl_.prev_randao_ = nullptr;
}
void Header::clear_difficulty() {
  if (GetArenaForAllocation() == nullptr && _impl_.difficulty_ != nullptr) {
    delete _impl_.difficulty_;
  }
  _impl_.difficulty_ = nullptr;
}
void Header::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
void Header::clear_ommer_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.ommer_hash_ != nullptr) {
    delete _impl_.ommer_hash_;
  }
  _impl_.ommer_hash_ = nullptr;
}
void Header::clear_transaction_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_hash_ != nullptr) {
    delete _impl_.transaction_hash_;
  }
  _impl_.transaction_hash_ = nullptr;
}
void Header::clear_base_fee_per_gas() {
  if (_impl_.base_fee_per_gas_ != nullptr) _impl_.base_fee_per_gas_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Header::clear_withdrawal_hash() {
  if (_impl_.withdrawal_hash_ != nullptr) _impl_.withdrawal_hash_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.parent_hash_){nullptr}
    , decltype(_impl_.coinbase_){nullptr}
    , decltype(_impl_.state_root_){nullptr}
    , decltype(_impl_.receipt_root_){nullptr}
    , decltype(_impl_.logs_bloom_){nullptr}
    , decltype(_impl_.prev_randao_){nullptr}
    , decltype(_impl_.difficulty_){nullptr}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.ommer_hash_){nullptr}
    , decltype(_impl_.transaction_hash_){nullptr}
    , decltype(_impl_.base_fee_per_gas_){nullptr}
    , decltype(_impl_.withdrawal_hash_){nullptr}
    , decltype(_impl_.block_number_){}
    , decltype(_impl_.gas_limit_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.data_gas_used_){}
    , decltype(_impl_.excess_data_gas_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra_data().empty()) {
    _this->_impl_.extra_data_.Set(from._internal_extra_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent_hash()) {
    _this->_impl_.parent_hash_ = new ::types::H256(*from._impl_.parent_hash_);
  }
  if (from._internal_has_coinbase()) {
    _this->_impl_.coinbase_ = new ::types::H160(*from._impl_.coinbase_);
  }
  if (from._internal_has_state_root()) {
    _this->_impl_.state_root_ = new ::types::H256(*from._impl_.state_root_);
  }
  if (from._internal_has_receipt_root()) {
    _this->_impl_.receipt_root_ = new ::types::H256(*from._impl_.receipt_root_);
  }
  if (from._internal_has_logs_bloom()) {
    _this->_impl_.logs_bloom_ = new ::types::H2048(*from._impl_.logs_bloom_);
  }
  if (from._internal_has_prev_randao()) {
    _this->_impl_.prev_randao_ = new ::types::H256(*from._impl_.prev_randao_);
  }
  if (from._internal_has_difficulty()) {
    _this->_impl_.difficulty_ = new ::types::H256(*from._impl_.difficulty_);
  }
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  if (from._internal_has_ommer_hash()) {
    _this->_impl_.ommer_hash_ = new ::types::H256(*from._impl_.ommer_hash_);
  }
  if (from._internal_has_transaction_hash()) {
    _this->_impl_.transaction_hash_ = new ::types::H256(*from._impl_.transaction_hash_);
  }
  if (from._internal_has_base_fee_per_gas()) {
    _this->_impl_.base_fee_per_gas_ = new ::types::H256(*from._impl_.base_fee_per_gas_);
  }
  if (from._internal_has_withdrawal_hash()) {
    _this->_impl_.withdrawal_hash_ = new ::types::H256(*from._impl_.withdrawal_hash_);
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.excess_data_gas_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.excess_data_gas_));
  // @@protoc_insertion_point(copy_constructor:execution.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.parent_hash_){nullptr}
    , decltype(_impl_.coinbase_){nullptr}
    , decltype(_impl_.state_root_){nullptr}
    , decltype(_impl_.receipt_root_){nullptr}
    , decltype(_impl_.logs_bloom_){nullptr}
    , decltype(_impl_.prev_randao_){nullptr}
    , decltype(_impl_.difficulty_){nullptr}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.ommer_hash_){nullptr}
    , decltype(_impl_.transaction_hash_){nullptr}
    , decltype(_impl_.base_fee_per_gas_){nullptr}
    , decltype(_impl_.withdrawal_hash_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , decltype(_impl_.gas_limit_){uint64_t{0u}}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.data_gas_used_){uint64_t{0u}}
    , decltype(_impl_.excess_data_gas_){uint64_t{0u}}
  };
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:execution.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_hash_;
  if (this != internal_default_instance()) delete _impl_.coinbase_;
  if (this != internal_default_instance()) delete _impl_.state_root_;
  if (this != internal_default_instance()) delete _impl_.receipt_root_;
  if (this != internal_default_instance()) delete _impl_.logs_bloom_;
  if (this != internal_default_instance()) delete _impl_.prev_randao_;
  if (this != internal_default_instance()) delete _impl_.difficulty_;
  if (this != internal_default_instance()) delete _impl_.block_hash_;
  if (this != internal_default_instance()) delete _impl_.ommer_hash_;
  if (this != internal_default_instance()) delete _impl_.transaction_hash_;
  if (this != internal_default_instance()) delete _impl_.base_fee_per_gas_;
  if (this != internal_default_instance()) delete _impl_.withdrawal_hash_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.parent_hash_ != nullptr) {
    delete _impl_.parent_hash_;
  }
  _impl_.parent_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coinbase_ != nullptr) {
    delete _impl_.coinbase_;
  }
  _impl_.coinbase_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_root_ != nullptr) {
    delete _impl_.state_root_;
  }
  _impl_.state_root_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.receipt_root_ != nullptr) {
    delete _impl_.receipt_root_;
  }
  _impl_.receipt_root_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.logs_bloom_ != nullptr) {
    delete _impl_.logs_bloom_;
  }
  _impl_.logs_bloom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prev_randao_ != nullptr) {
    delete _impl_.prev_randao_;
  }
  _impl_.prev_randao_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.difficulty_ != nullptr) {
    delete _impl_.difficulty_;
  }
  _impl_.difficulty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ommer_hash_ != nullptr) {
    delete _impl_.ommer_hash_;
  }
  _impl_.ommer_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_hash_ != nullptr) {
    delete _impl_.transaction_hash_;
  }
  _impl_.transaction_hash_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.base_fee_per_gas_ != nullptr);
      _impl_.base_fee_per_gas_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.withdrawal_hash_ != nullptr);
      _impl_.withdrawal_hash_->Clear();
    }
  }
  ::memset(&_impl_.block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nonce_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.nonce_));
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.data_gas_used_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.excess_data_gas_) -
        reinterpret_cast<char*>(&_impl_.data_gas_used_)) + sizeof(_impl_.excess_data_gas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 parent_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H160 coinbase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coinbase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 state_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 receipt_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H2048 logs_bloom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_logs_bloom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 prev_randao = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_randao(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 difficulty = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_difficulty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 block_hash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 ommer_hash = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ommer_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 transaction_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 base_fee_per_gas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_fee_per_gas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 withdrawal_hash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 data_gas_used = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_data_gas_used(&has_bits);
          _impl_.data_gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 excess_data_gas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_excess_data_gas(&has_bits);
          _impl_.excess_data_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 parent_hash = 1;
  if (this->_internal_has_parent_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parent_hash(this),
        _Internal::parent_hash(this).GetCachedSize(), target, stream);
  }

  // .types.H160 coinbase = 2;
  if (this->_internal_has_coinbase()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coinbase(this),
        _Internal::coinbase(this).GetCachedSize(), target, stream);
  }

  // .types.H256 state_root = 3;
  if (this->_internal_has_state_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state_root(this),
        _Internal::state_root(this).GetCachedSize(), target, stream);
  }

  // .types.H256 receipt_root = 4;
  if (this->_internal_has_receipt_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::receipt_root(this),
        _Internal::receipt_root(this).GetCachedSize(), target, stream);
  }

  // .types.H2048 logs_bloom = 5;
  if (this->_internal_has_logs_bloom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::logs_bloom(this),
        _Internal::logs_bloom(this).GetCachedSize(), target, stream);
  }

  // .types.H256 prev_randao = 6;
  if (this->_internal_has_prev_randao()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::prev_randao(this),
        _Internal::prev_randao(this).GetCachedSize(), target, stream);
  }

  // uint64 block_number = 7;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_block_number(), target);
  }

  // uint64 gas_limit = 8;
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_limit(), target);
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // uint64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // uint64 nonce = 11;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_nonce(), target);
  }

  // bytes extra_data = 12;
  if (!this->_internal_extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extra_data(), target);
  }

  // .types.H256 difficulty = 13;
  if (this->_internal_has_difficulty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::difficulty(this),
        _Internal::difficulty(this).GetCachedSize(), target, stream);
  }

  // .types.H256 block_hash = 14;
  if (this->_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  // .types.H256 ommer_hash = 15;
  if (this->_internal_has_ommer_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ommer_hash(this),
        _Internal::ommer_hash(this).GetCachedSize(), target, stream);
  }

  // .types.H256 transaction_hash = 16;
  if (this->_internal_has_transaction_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::transaction_hash(this),
        _Internal::transaction_hash(this).GetCachedSize(), target, stream);
  }

  // optional .types.H256 base_fee_per_gas = 17;
  if (_internal_has_base_fee_per_gas()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::base_fee_per_gas(this),
        _Internal::base_fee_per_gas(this).GetCachedSize(), target, stream);
  }

  // optional .types.H256 withdrawal_hash = 18;
  if (_internal_has_withdrawal_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::withdrawal_hash(this),
        _Internal::withdrawal_hash(this).GetCachedSize(), target, stream);
  }

  // optional uint64 data_gas_used = 19;
  if (_internal_has_data_gas_used()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_data_gas_used(), target);
  }

  // optional uint64 excess_data_gas = 20;
  if (_internal_has_excess_data_gas()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_excess_data_gas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes extra_data = 12;
  if (!this->_internal_extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // .types.H256 parent_hash = 1;
  if (this->_internal_has_parent_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_hash_);
  }

  // .types.H160 coinbase = 2;
  if (this->_internal_has_coinbase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coinbase_);
  }

  // .types.H256 state_root = 3;
  if (this->_internal_has_state_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_root_);
  }

  // .types.H256 receipt_root = 4;
  if (this->_internal_has_receipt_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.receipt_root_);
  }

  // .types.H2048 logs_bloom = 5;
  if (this->_internal_has_logs_bloom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logs_bloom_);
  }

  // .types.H256 prev_randao = 6;
  if (this->_internal_has_prev_randao()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_randao_);
  }

  // .types.H256 difficulty = 13;
  if (this->_internal_has_difficulty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.difficulty_);
  }

  // .types.H256 block_hash = 14;
  if (this->_internal_has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_hash_);
  }

  // .types.H256 ommer_hash = 15;
  if (this->_internal_has_ommer_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ommer_hash_);
  }

  // .types.H256 transaction_hash = 16;
  if (this->_internal_has_transaction_hash()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transaction_hash_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .types.H256 base_fee_per_gas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_fee_per_gas_);
    }

    // optional .types.H256 withdrawal_hash = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.withdrawal_hash_);
    }

  }
  // uint64 block_number = 7;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // uint64 gas_limit = 8;
  if (this->_internal_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_limit());
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // uint64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 nonce = 11;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint64 data_gas_used = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_data_gas_used());
    }

    // optional uint64 excess_data_gas = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_excess_data_gas());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extra_data().empty()) {
    _this->_internal_set_extra_data(from._internal_extra_data());
  }
  if (from._internal_has_parent_hash()) {
    _this->_internal_mutable_parent_hash()->::types::H256::MergeFrom(
        from._internal_parent_hash());
  }
  if (from._internal_has_coinbase()) {
    _this->_internal_mutable_coinbase()->::types::H160::MergeFrom(
        from._internal_coinbase());
  }
  if (from._internal_has_state_root()) {
    _this->_internal_mutable_state_root()->::types::H256::MergeFrom(
        from._internal_state_root());
  }
  if (from._internal_has_receipt_root()) {
    _this->_internal_mutable_receipt_root()->::types::H256::MergeFrom(
        from._internal_receipt_root());
  }
  if (from._internal_has_logs_bloom()) {
    _this->_internal_mutable_logs_bloom()->::types::H2048::MergeFrom(
        from._internal_logs_bloom());
  }
  if (from._internal_has_prev_randao()) {
    _this->_internal_mutable_prev_randao()->::types::H256::MergeFrom(
        from._internal_prev_randao());
  }
  if (from._internal_has_difficulty()) {
    _this->_internal_mutable_difficulty()->::types::H256::MergeFrom(
        from._internal_difficulty());
  }
  if (from._internal_has_block_hash()) {
    _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
        from._internal_block_hash());
  }
  if (from._internal_has_ommer_hash()) {
    _this->_internal_mutable_ommer_hash()->::types::H256::MergeFrom(
        from._internal_ommer_hash());
  }
  if (from._internal_has_transaction_hash()) {
    _this->_internal_mutable_transaction_hash()->::types::H256::MergeFrom(
        from._internal_transaction_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_base_fee_per_gas()->::types::H256::MergeFrom(
          from._internal_base_fee_per_gas());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_withdrawal_hash()->::types::H256::MergeFrom(
          from._internal_withdrawal_hash());
    }
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_gas_used_ = from._impl_.data_gas_used_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.excess_data_gas_ = from._impl_.excess_data_gas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_data_, lhs_arena,
      &other->_impl_.extra_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.excess_data_gas_)
      + sizeof(Header::_impl_.excess_data_gas_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.parent_hash_)>(
          reinterpret_cast<char*>(&_impl_.parent_hash_),
          reinterpret_cast<char*>(&other->_impl_.parent_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[3]);
}

// ===================================================================

class BlockBody::_Internal {
 public:
  static const ::types::H256& block_hash(const BlockBody* msg);
};

const ::types::H256&
BlockBody::_Internal::block_hash(const BlockBody* msg) {
  return *msg->_impl_.block_hash_;
}
void BlockBody::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
void BlockBody::clear_withdrawals() {
  _impl_.withdrawals_.Clear();
}
BlockBody::BlockBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.BlockBody)
}
BlockBody::BlockBody(const BlockBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.uncles_){from._impl_.uncles_}
    , decltype(_impl_.withdrawals_){from._impl_.withdrawals_}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:execution.BlockBody)
}

inline void BlockBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.uncles_){arena}
    , decltype(_impl_.withdrawals_){arena}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockBody::~BlockBody() {
  // @@protoc_insertion_point(destructor:execution.BlockBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  _impl_.uncles_.~RepeatedPtrField();
  _impl_.withdrawals_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.block_hash_;
}

void BlockBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBody::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.BlockBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.uncles_.Clear();
  _impl_.withdrawals_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
  _impl_.block_number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .execution.Header uncles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uncles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.BlockBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 block_hash = 1;
  if (this->_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  // uint64 block_number = 2;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_number(), target);
  }

  // repeated bytes transactions = 3;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated .execution.Header uncles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uncles_size()); i < n; i++) {
    const auto& repfield = this->_internal_uncles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .types.Withdrawal withdrawals = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_withdrawals_size()); i < n; i++) {
    const auto& repfield = this->_internal_withdrawals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.BlockBody)
  return target;
}

size_t BlockBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.BlockBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.transactions_.size());
  for (int i = 0, n = _impl_.transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.transactions_.Get(i));
  }

  // repeated .execution.Header uncles = 4;
  total_size += 1UL * this->_internal_uncles_size();
  for (const auto& msg : this->_impl_.uncles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .types.Withdrawal withdrawals = 5;
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->_impl_.withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .types.H256 block_hash = 1;
  if (this->_internal_has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_hash_);
  }

  // uint64 block_number = 2;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBody::GetClassData() const { return &_class_data_; }


void BlockBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBody*>(&to_msg);
  auto& from = static_cast<const BlockBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.BlockBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  _this->_impl_.uncles_.MergeFrom(from._impl_.uncles_);
  _this->_impl_.withdrawals_.MergeFrom(from._impl_.withdrawals_);
  if (from._internal_has_block_hash()) {
    _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
        from._internal_block_hash());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBody::CopyFrom(const BlockBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.BlockBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBody::IsInitialized() const {
  return true;
}

void BlockBody::InternalSwap(BlockBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  _impl_.uncles_.InternalSwap(&other->_impl_.uncles_);
  _impl_.withdrawals_.InternalSwap(&other->_impl_.withdrawals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBody, _impl_.block_number_)
      + sizeof(BlockBody::_impl_.block_number_)
      - PROTOBUF_FIELD_OFFSET(BlockBody, _impl_.block_hash_)>(
          reinterpret_cast<char*>(&_impl_.block_hash_),
          reinterpret_cast<char*>(&other->_impl_.block_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[4]);
}

// ===================================================================

class GetHeaderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHeaderResponse>()._impl_._has_bits_);
  static const ::execution::Header& header(const GetHeaderResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::execution::Header&
GetHeaderResponse::_Internal::header(const GetHeaderResponse* msg) {
  return *msg->_impl_.header_;
}
GetHeaderResponse::GetHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetHeaderResponse)
}
GetHeaderResponse::GetHeaderResponse(const GetHeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHeaderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::execution::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:execution.GetHeaderResponse)
}

inline void GetHeaderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
  };
}

GetHeaderResponse::~GetHeaderResponse() {
  // @@protoc_insertion_point(destructor:execution.GetHeaderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void GetHeaderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetHeaderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeaderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .execution.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHeaderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetHeaderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .execution.Header header = 1;
  if (_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetHeaderResponse)
  return target;
}

size_t GetHeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetHeaderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .execution.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHeaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHeaderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHeaderResponse::GetClassData() const { return &_class_data_; }


void GetHeaderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHeaderResponse*>(&to_msg);
  auto& from = static_cast<const GetHeaderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetHeaderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::execution::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHeaderResponse::CopyFrom(const GetHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeaderResponse::IsInitialized() const {
  return true;
}

void GetHeaderResponse::InternalSwap(GetHeaderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeaderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[5]);
}

// ===================================================================

class GetBodyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBodyResponse>()._impl_._has_bits_);
  static const ::execution::BlockBody& body(const GetBodyResponse* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::execution::BlockBody&
GetBodyResponse::_Internal::body(const GetBodyResponse* msg) {
  return *msg->_impl_.body_;
}
GetBodyResponse::GetBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetBodyResponse)
}
GetBodyResponse::GetBodyResponse(const GetBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBodyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::execution::BlockBody(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:execution.GetBodyResponse)
}

inline void GetBodyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){nullptr}
  };
}

GetBodyResponse::~GetBodyResponse() {
  // @@protoc_insertion_point(destructor:execution.GetBodyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBodyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.body_;
}

void GetBodyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetBodyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.body_ != nullptr);
    _impl_.body_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBodyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .execution.BlockBody body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBodyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetBodyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .execution.BlockBody body = 1;
  if (_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetBodyResponse)
  return target;
}

size_t GetBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetBodyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .execution.BlockBody body = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBodyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBodyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBodyResponse::GetClassData() const { return &_class_data_; }


void GetBodyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBodyResponse*>(&to_msg);
  auto& from = static_cast<const GetBodyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetBodyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::execution::BlockBody::MergeFrom(
        from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBodyResponse::CopyFrom(const GetBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBodyResponse::IsInitialized() const {
  return true;
}

void GetBodyResponse::InternalSwap(GetBodyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.body_, other->_impl_.body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBodyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[6]);
}

// ===================================================================

class GetHeaderHashNumberResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHeaderHashNumberResponse>()._impl_._has_bits_);
  static void set_has_block_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetHeaderHashNumberResponse)
}
GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(const GetHeaderHashNumberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHeaderHashNumberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:execution.GetHeaderHashNumberResponse)
}

inline void GetHeaderHashNumberResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_number_){uint64_t{0u}}
  };
}

GetHeaderHashNumberResponse::~GetHeaderHashNumberResponse() {
  // @@protoc_insertion_point(destructor:execution.GetHeaderHashNumberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHeaderHashNumberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetHeaderHashNumberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHeaderHashNumberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetHeaderHashNumberResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_number_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeaderHashNumberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_block_number(&has_bits);
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHeaderHashNumberResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetHeaderHashNumberResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 block_number = 1;
  if (_internal_has_block_number()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetHeaderHashNumberResponse)
  return target;
}

size_t GetHeaderHashNumberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetHeaderHashNumberResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 block_number = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHeaderHashNumberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHeaderHashNumberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHeaderHashNumberResponse::GetClassData() const { return &_class_data_; }


void GetHeaderHashNumberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHeaderHashNumberResponse*>(&to_msg);
  auto& from = static_cast<const GetHeaderHashNumberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetHeaderHashNumberResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_number()) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHeaderHashNumberResponse::CopyFrom(const GetHeaderHashNumberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetHeaderHashNumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeaderHashNumberResponse::IsInitialized() const {
  return true;
}

void GetHeaderHashNumberResponse::InternalSwap(GetHeaderHashNumberResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.block_number_, other->_impl_.block_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeaderHashNumberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[7]);
}

// ===================================================================

class GetSegmentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSegmentRequest>()._impl_._has_bits_);
  static void set_has_block_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::types::H256& block_hash(const GetSegmentRequest* msg);
  static void set_has_block_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
GetSegmentRequest::_Internal::block_hash(const GetSegmentRequest* msg) {
  return *msg->_impl_.block_hash_;
}
void GetSegmentRequest::clear_block_hash() {
  if (_impl_.block_hash_ != nullptr) _impl_.block_hash_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetSegmentRequest::GetSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetSegmentRequest)
}
GetSegmentRequest::GetSegmentRequest(const GetSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:execution.GetSegmentRequest)
}

inline void GetSegmentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
  };
}

GetSegmentRequest::~GetSegmentRequest() {
  // @@protoc_insertion_point(destructor:execution.GetSegmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_hash_;
}

void GetSegmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetSegmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.block_hash_ != nullptr);
    _impl_.block_hash_->Clear();
  }
  _impl_.block_number_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_block_number(&has_bits);
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetSegmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 block_number = 1;
  if (_internal_has_block_number()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_number(), target);
  }

  // optional .types.H256 block_hash = 2;
  if (_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetSegmentRequest)
  return target;
}

size_t GetSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetSegmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .types.H256 block_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_hash_);
    }

    // optional uint64 block_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentRequest::GetClassData() const { return &_class_data_; }


void GetSegmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentRequest*>(&to_msg);
  auto& from = static_cast<const GetSegmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetSegmentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
          from._internal_block_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.block_number_ = from._impl_.block_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentRequest::CopyFrom(const GetSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentRequest::IsInitialized() const {
  return true;
}

void GetSegmentRequest::InternalSwap(GetSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSegmentRequest, _impl_.block_number_)
      + sizeof(GetSegmentRequest::_impl_.block_number_)
      - PROTOBUF_FIELD_OFFSET(GetSegmentRequest, _impl_.block_hash_)>(
          reinterpret_cast<char*>(&_impl_.block_hash_),
          reinterpret_cast<char*>(&other->_impl_.block_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[8]);
}

// ===================================================================

class InsertHeadersRequest::_Internal {
 public:
};

InsertHeadersRequest::InsertHeadersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.InsertHeadersRequest)
}
InsertHeadersRequest::InsertHeadersRequest(const InsertHeadersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertHeadersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.headers_){from._impl_.headers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.InsertHeadersRequest)
}

inline void InsertHeadersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.headers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InsertHeadersRequest::~InsertHeadersRequest() {
  // @@protoc_insertion_point(destructor:execution.InsertHeadersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertHeadersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.~RepeatedPtrField();
}

void InsertHeadersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertHeadersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.InsertHeadersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertHeadersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .execution.Header headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertHeadersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.InsertHeadersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .execution.Header headers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.InsertHeadersRequest)
  return target;
}

size_t InsertHeadersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.InsertHeadersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .execution.Header headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->_impl_.headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertHeadersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertHeadersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertHeadersRequest::GetClassData() const { return &_class_data_; }


void InsertHeadersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertHeadersRequest*>(&to_msg);
  auto& from = static_cast<const InsertHeadersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.InsertHeadersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertHeadersRequest::CopyFrom(const InsertHeadersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.InsertHeadersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertHeadersRequest::IsInitialized() const {
  return true;
}

void InsertHeadersRequest::InternalSwap(InsertHeadersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertHeadersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[9]);
}

// ===================================================================

class InsertBodiesRequest::_Internal {
 public:
};

InsertBodiesRequest::InsertBodiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.InsertBodiesRequest)
}
InsertBodiesRequest::InsertBodiesRequest(const InsertBodiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBodiesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bodies_){from._impl_.bodies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.InsertBodiesRequest)
}

inline void InsertBodiesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bodies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InsertBodiesRequest::~InsertBodiesRequest() {
  // @@protoc_insertion_point(destructor:execution.InsertBodiesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBodiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bodies_.~RepeatedPtrField();
}

void InsertBodiesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBodiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.InsertBodiesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bodies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBodiesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .execution.BlockBody bodies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBodiesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.InsertBodiesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .execution.BlockBody bodies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bodies_size()); i < n; i++) {
    const auto& repfield = this->_internal_bodies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.InsertBodiesRequest)
  return target;
}

size_t InsertBodiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.InsertBodiesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .execution.BlockBody bodies = 1;
  total_size += 1UL * this->_internal_bodies_size();
  for (const auto& msg : this->_impl_.bodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBodiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBodiesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBodiesRequest::GetClassData() const { return &_class_data_; }


void InsertBodiesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBodiesRequest*>(&to_msg);
  auto& from = static_cast<const InsertBodiesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.InsertBodiesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bodies_.MergeFrom(from._impl_.bodies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBodiesRequest::CopyFrom(const InsertBodiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.InsertBodiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBodiesRequest::IsInitialized() const {
  return true;
}

void InsertBodiesRequest::InternalSwap(InsertBodiesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bodies_.InternalSwap(&other->_impl_.bodies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBodiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[10]);
}

// ===================================================================

class EmptyMessage::_Internal {
 public:
};

EmptyMessage::EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:execution.EmptyMessage)
}
EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EmptyMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.EmptyMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmptyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace execution
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::execution::ForkChoiceReceipt*
Arena::CreateMaybeMessage< ::execution::ForkChoiceReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ForkChoiceReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::ValidationReceipt*
Arena::CreateMaybeMessage< ::execution::ValidationReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ValidationReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::IsCanonicalResponse*
Arena::CreateMaybeMessage< ::execution::IsCanonicalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::IsCanonicalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::Header*
Arena::CreateMaybeMessage< ::execution::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::BlockBody*
Arena::CreateMaybeMessage< ::execution::BlockBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::BlockBody >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetHeaderResponse*
Arena::CreateMaybeMessage< ::execution::GetHeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetHeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetBodyResponse*
Arena::CreateMaybeMessage< ::execution::GetBodyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetHeaderHashNumberResponse*
Arena::CreateMaybeMessage< ::execution::GetHeaderHashNumberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetHeaderHashNumberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetSegmentRequest*
Arena::CreateMaybeMessage< ::execution::GetSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::InsertHeadersRequest*
Arena::CreateMaybeMessage< ::execution::InsertHeadersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::InsertHeadersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::InsertBodiesRequest*
Arena::CreateMaybeMessage< ::execution::InsertBodiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::InsertBodiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::EmptyMessage*
Arena::CreateMaybeMessage< ::execution::EmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::EmptyMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
