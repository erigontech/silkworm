// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: p2psentry/sentry.proto

#include "p2psentry/sentry.pb.h"
#include "p2psentry/sentry.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sentry {

static const char* Sentry_method_names[] = {
  "/sentry.Sentry/SetStatus",
  "/sentry.Sentry/PenalizePeer",
  "/sentry.Sentry/PeerMinBlock",
  "/sentry.Sentry/HandShake",
  "/sentry.Sentry/SendMessageByMinBlock",
  "/sentry.Sentry/SendMessageById",
  "/sentry.Sentry/SendMessageToRandomPeers",
  "/sentry.Sentry/SendMessageToAll",
  "/sentry.Sentry/Messages",
  "/sentry.Sentry/Peers",
  "/sentry.Sentry/PeerCount",
  "/sentry.Sentry/PeerById",
  "/sentry.Sentry/PeerEvents",
  "/sentry.Sentry/NodeInfo",
};

std::unique_ptr< Sentry::Stub> Sentry::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sentry::Stub> stub(new Sentry::Stub(channel, options));
  return stub;
}

Sentry::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetStatus_(Sentry_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PenalizePeer_(Sentry_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PeerMinBlock_(Sentry_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandShake_(Sentry_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessageByMinBlock_(Sentry_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessageById_(Sentry_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessageToRandomPeers_(Sentry_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessageToAll_(Sentry_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Messages_(Sentry_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Peers_(Sentry_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PeerCount_(Sentry_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PeerById_(Sentry_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PeerEvents_(Sentry_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_NodeInfo_(Sentry_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Sentry::Stub::SetStatus(::grpc::ClientContext* context, const ::sentry::StatusData& request, ::sentry::SetStatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::StatusData, ::sentry::SetStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStatus_, context, request, response);
}

void Sentry::Stub::async::SetStatus(::grpc::ClientContext* context, const ::sentry::StatusData* request, ::sentry::SetStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::StatusData, ::sentry::SetStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStatus_, context, request, response, std::move(f));
}

void Sentry::Stub::async::SetStatus(::grpc::ClientContext* context, const ::sentry::StatusData* request, ::sentry::SetStatusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::SetStatusReply>* Sentry::Stub::PrepareAsyncSetStatusRaw(::grpc::ClientContext* context, const ::sentry::StatusData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::SetStatusReply, ::sentry::StatusData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::SetStatusReply>* Sentry::Stub::AsyncSetStatusRaw(::grpc::ClientContext* context, const ::sentry::StatusData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::PenalizePeer(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::PenalizePeerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PenalizePeer_, context, request, response);
}

void Sentry::Stub::async::PenalizePeer(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::PenalizePeerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PenalizePeer_, context, request, response, std::move(f));
}

void Sentry::Stub::async::PenalizePeer(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PenalizePeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sentry::Stub::PrepareAsyncPenalizePeerRaw(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sentry::PenalizePeerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PenalizePeer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sentry::Stub::AsyncPenalizePeerRaw(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPenalizePeerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::PeerMinBlock(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::PeerMinBlockRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PeerMinBlock_, context, request, response);
}

void Sentry::Stub::async::PeerMinBlock(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::PeerMinBlockRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeerMinBlock_, context, request, response, std::move(f));
}

void Sentry::Stub::async::PeerMinBlock(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeerMinBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sentry::Stub::PrepareAsyncPeerMinBlockRaw(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sentry::PeerMinBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PeerMinBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sentry::Stub::AsyncPeerMinBlockRaw(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPeerMinBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::HandShake(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sentry::HandShakeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sentry::HandShakeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandShake_, context, request, response);
}

void Sentry::Stub::async::HandShake(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sentry::HandShakeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sentry::HandShakeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandShake_, context, request, response, std::move(f));
}

void Sentry::Stub::async::HandShake(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sentry::HandShakeReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandShake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::HandShakeReply>* Sentry::Stub::PrepareAsyncHandShakeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::HandShakeReply, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandShake_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::HandShakeReply>* Sentry::Stub::AsyncHandShakeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandShakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::SendMessageByMinBlock(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest& request, ::sentry::SentPeers* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::SendMessageByMinBlockRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessageByMinBlock_, context, request, response);
}

void Sentry::Stub::async::SendMessageByMinBlock(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest* request, ::sentry::SentPeers* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::SendMessageByMinBlockRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageByMinBlock_, context, request, response, std::move(f));
}

void Sentry::Stub::async::SendMessageByMinBlock(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest* request, ::sentry::SentPeers* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageByMinBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::PrepareAsyncSendMessageByMinBlockRaw(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::SentPeers, ::sentry::SendMessageByMinBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessageByMinBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::AsyncSendMessageByMinBlockRaw(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageByMinBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::SendMessageById(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest& request, ::sentry::SentPeers* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::SendMessageByIdRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessageById_, context, request, response);
}

void Sentry::Stub::async::SendMessageById(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest* request, ::sentry::SentPeers* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::SendMessageByIdRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageById_, context, request, response, std::move(f));
}

void Sentry::Stub::async::SendMessageById(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest* request, ::sentry::SentPeers* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::PrepareAsyncSendMessageByIdRaw(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::SentPeers, ::sentry::SendMessageByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessageById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::AsyncSendMessageByIdRaw(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::SendMessageToRandomPeers(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest& request, ::sentry::SentPeers* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::SendMessageToRandomPeersRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessageToRandomPeers_, context, request, response);
}

void Sentry::Stub::async::SendMessageToRandomPeers(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest* request, ::sentry::SentPeers* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::SendMessageToRandomPeersRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageToRandomPeers_, context, request, response, std::move(f));
}

void Sentry::Stub::async::SendMessageToRandomPeers(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest* request, ::sentry::SentPeers* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageToRandomPeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::PrepareAsyncSendMessageToRandomPeersRaw(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::SentPeers, ::sentry::SendMessageToRandomPeersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessageToRandomPeers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::AsyncSendMessageToRandomPeersRaw(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageToRandomPeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::SendMessageToAll(::grpc::ClientContext* context, const ::sentry::OutboundMessageData& request, ::sentry::SentPeers* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::OutboundMessageData, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessageToAll_, context, request, response);
}

void Sentry::Stub::async::SendMessageToAll(::grpc::ClientContext* context, const ::sentry::OutboundMessageData* request, ::sentry::SentPeers* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::OutboundMessageData, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageToAll_, context, request, response, std::move(f));
}

void Sentry::Stub::async::SendMessageToAll(::grpc::ClientContext* context, const ::sentry::OutboundMessageData* request, ::sentry::SentPeers* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessageToAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::PrepareAsyncSendMessageToAllRaw(::grpc::ClientContext* context, const ::sentry::OutboundMessageData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::SentPeers, ::sentry::OutboundMessageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessageToAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::SentPeers>* Sentry::Stub::AsyncSendMessageToAllRaw(::grpc::ClientContext* context, const ::sentry::OutboundMessageData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageToAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sentry::InboundMessage>* Sentry::Stub::MessagesRaw(::grpc::ClientContext* context, const ::sentry::MessagesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sentry::InboundMessage>::Create(channel_.get(), rpcmethod_Messages_, context, request);
}

void Sentry::Stub::async::Messages(::grpc::ClientContext* context, const ::sentry::MessagesRequest* request, ::grpc::ClientReadReactor< ::sentry::InboundMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sentry::InboundMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_Messages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sentry::InboundMessage>* Sentry::Stub::AsyncMessagesRaw(::grpc::ClientContext* context, const ::sentry::MessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sentry::InboundMessage>::Create(channel_.get(), cq, rpcmethod_Messages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sentry::InboundMessage>* Sentry::Stub::PrepareAsyncMessagesRaw(::grpc::ClientContext* context, const ::sentry::MessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sentry::InboundMessage>::Create(channel_.get(), cq, rpcmethod_Messages_, context, request, false, nullptr);
}

::grpc::Status Sentry::Stub::Peers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sentry::PeersReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sentry::PeersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Peers_, context, request, response);
}

void Sentry::Stub::async::Peers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sentry::PeersReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sentry::PeersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Peers_, context, request, response, std::move(f));
}

void Sentry::Stub::async::Peers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sentry::PeersReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Peers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::PeersReply>* Sentry::Stub::PrepareAsyncPeersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::PeersReply, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Peers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::PeersReply>* Sentry::Stub::AsyncPeersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::PeerCount(::grpc::ClientContext* context, const ::sentry::PeerCountRequest& request, ::sentry::PeerCountReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::PeerCountRequest, ::sentry::PeerCountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PeerCount_, context, request, response);
}

void Sentry::Stub::async::PeerCount(::grpc::ClientContext* context, const ::sentry::PeerCountRequest* request, ::sentry::PeerCountReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::PeerCountRequest, ::sentry::PeerCountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeerCount_, context, request, response, std::move(f));
}

void Sentry::Stub::async::PeerCount(::grpc::ClientContext* context, const ::sentry::PeerCountRequest* request, ::sentry::PeerCountReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeerCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::PeerCountReply>* Sentry::Stub::PrepareAsyncPeerCountRaw(::grpc::ClientContext* context, const ::sentry::PeerCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::PeerCountReply, ::sentry::PeerCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PeerCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::PeerCountReply>* Sentry::Stub::AsyncPeerCountRaw(::grpc::ClientContext* context, const ::sentry::PeerCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPeerCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sentry::Stub::PeerById(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest& request, ::sentry::PeerByIdReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sentry::PeerByIdRequest, ::sentry::PeerByIdReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PeerById_, context, request, response);
}

void Sentry::Stub::async::PeerById(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest* request, ::sentry::PeerByIdReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sentry::PeerByIdRequest, ::sentry::PeerByIdReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeerById_, context, request, response, std::move(f));
}

void Sentry::Stub::async::PeerById(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest* request, ::sentry::PeerByIdReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeerById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sentry::PeerByIdReply>* Sentry::Stub::PrepareAsyncPeerByIdRaw(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sentry::PeerByIdReply, ::sentry::PeerByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PeerById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sentry::PeerByIdReply>* Sentry::Stub::AsyncPeerByIdRaw(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPeerByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sentry::PeerEvent>* Sentry::Stub::PeerEventsRaw(::grpc::ClientContext* context, const ::sentry::PeerEventsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sentry::PeerEvent>::Create(channel_.get(), rpcmethod_PeerEvents_, context, request);
}

void Sentry::Stub::async::PeerEvents(::grpc::ClientContext* context, const ::sentry::PeerEventsRequest* request, ::grpc::ClientReadReactor< ::sentry::PeerEvent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sentry::PeerEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_PeerEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sentry::PeerEvent>* Sentry::Stub::AsyncPeerEventsRaw(::grpc::ClientContext* context, const ::sentry::PeerEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sentry::PeerEvent>::Create(channel_.get(), cq, rpcmethod_PeerEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sentry::PeerEvent>* Sentry::Stub::PrepareAsyncPeerEventsRaw(::grpc::ClientContext* context, const ::sentry::PeerEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sentry::PeerEvent>::Create(channel_.get(), cq, rpcmethod_PeerEvents_, context, request, false, nullptr);
}

::grpc::Status Sentry::Stub::NodeInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::NodeInfoReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::types::NodeInfoReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NodeInfo_, context, request, response);
}

void Sentry::Stub::async::NodeInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::NodeInfoReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::types::NodeInfoReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NodeInfo_, context, request, response, std::move(f));
}

void Sentry::Stub::async::NodeInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::NodeInfoReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NodeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::types::NodeInfoReply>* Sentry::Stub::PrepareAsyncNodeInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::types::NodeInfoReply, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NodeInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::types::NodeInfoReply>* Sentry::Stub::AsyncNodeInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNodeInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

Sentry::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::StatusData, ::sentry::SetStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::StatusData* req,
             ::sentry::SetStatusReply* resp) {
               return service->SetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::PenalizePeerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::PenalizePeerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PenalizePeer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::PeerMinBlockRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::PeerMinBlockRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PeerMinBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::google::protobuf::Empty, ::sentry::HandShakeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sentry::HandShakeReply* resp) {
               return service->HandShake(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::SendMessageByMinBlockRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::SendMessageByMinBlockRequest* req,
             ::sentry::SentPeers* resp) {
               return service->SendMessageByMinBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::SendMessageByIdRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::SendMessageByIdRequest* req,
             ::sentry::SentPeers* resp) {
               return service->SendMessageById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::SendMessageToRandomPeersRequest, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::SendMessageToRandomPeersRequest* req,
             ::sentry::SentPeers* resp) {
               return service->SendMessageToRandomPeers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::OutboundMessageData, ::sentry::SentPeers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::OutboundMessageData* req,
             ::sentry::SentPeers* resp) {
               return service->SendMessageToAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sentry::Service, ::sentry::MessagesRequest, ::sentry::InboundMessage>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::MessagesRequest* req,
             ::grpc::ServerWriter<::sentry::InboundMessage>* writer) {
               return service->Messages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::google::protobuf::Empty, ::sentry::PeersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sentry::PeersReply* resp) {
               return service->Peers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::PeerCountRequest, ::sentry::PeerCountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::PeerCountRequest* req,
             ::sentry::PeerCountReply* resp) {
               return service->PeerCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::sentry::PeerByIdRequest, ::sentry::PeerByIdReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::PeerByIdRequest* req,
             ::sentry::PeerByIdReply* resp) {
               return service->PeerById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sentry::Service, ::sentry::PeerEventsRequest, ::sentry::PeerEvent>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sentry::PeerEventsRequest* req,
             ::grpc::ServerWriter<::sentry::PeerEvent>* writer) {
               return service->PeerEvents(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sentry_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sentry::Service, ::google::protobuf::Empty, ::types::NodeInfoReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sentry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::types::NodeInfoReply* resp) {
               return service->NodeInfo(ctx, req, resp);
             }, this)));
}

Sentry::Service::~Service() {
}

::grpc::Status Sentry::Service::SetStatus(::grpc::ServerContext* context, const ::sentry::StatusData* request, ::sentry::SetStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::PenalizePeer(::grpc::ServerContext* context, const ::sentry::PenalizePeerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::PeerMinBlock(::grpc::ServerContext* context, const ::sentry::PeerMinBlockRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::HandShake(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sentry::HandShakeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::SendMessageByMinBlock(::grpc::ServerContext* context, const ::sentry::SendMessageByMinBlockRequest* request, ::sentry::SentPeers* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::SendMessageById(::grpc::ServerContext* context, const ::sentry::SendMessageByIdRequest* request, ::sentry::SentPeers* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::SendMessageToRandomPeers(::grpc::ServerContext* context, const ::sentry::SendMessageToRandomPeersRequest* request, ::sentry::SentPeers* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::SendMessageToAll(::grpc::ServerContext* context, const ::sentry::OutboundMessageData* request, ::sentry::SentPeers* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::Messages(::grpc::ServerContext* context, const ::sentry::MessagesRequest* request, ::grpc::ServerWriter< ::sentry::InboundMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::Peers(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sentry::PeersReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::PeerCount(::grpc::ServerContext* context, const ::sentry::PeerCountRequest* request, ::sentry::PeerCountReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::PeerById(::grpc::ServerContext* context, const ::sentry::PeerByIdRequest* request, ::sentry::PeerByIdReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::PeerEvents(::grpc::ServerContext* context, const ::sentry::PeerEventsRequest* request, ::grpc::ServerWriter< ::sentry::PeerEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sentry::Service::NodeInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::types::NodeInfoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sentry

