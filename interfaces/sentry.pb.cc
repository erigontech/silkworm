// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sentry.proto

#include "sentry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Forks_sentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutboundMessageData_sentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H256_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H512_types_2eproto;
namespace sentry {
class OutboundMessageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutboundMessageData> _instance;
} _OutboundMessageData_default_instance_;
class SendMessageByMinBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageByMinBlockRequest> _instance;
} _SendMessageByMinBlockRequest_default_instance_;
class SendMessageByIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageByIdRequest> _instance;
} _SendMessageByIdRequest_default_instance_;
class SendMessageToRandomPeersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageToRandomPeersRequest> _instance;
} _SendMessageToRandomPeersRequest_default_instance_;
class SentPeersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentPeers> _instance;
} _SentPeers_default_instance_;
class PenalizePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PenalizePeerRequest> _instance;
} _PenalizePeerRequest_default_instance_;
class PeerMinBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerMinBlockRequest> _instance;
} _PeerMinBlockRequest_default_instance_;
class InboundMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InboundMessage> _instance;
} _InboundMessage_default_instance_;
class ForksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Forks> _instance;
} _Forks_default_instance_;
class StatusDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusData> _instance;
} _StatusData_default_instance_;
}  // namespace sentry
static void InitDefaultsscc_info_Forks_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_Forks_default_instance_;
    new (ptr) ::sentry::Forks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::Forks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Forks_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Forks_sentry_2eproto}, {
      &scc_info_H256_types_2eproto.base,}};

static void InitDefaultsscc_info_InboundMessage_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_InboundMessage_default_instance_;
    new (ptr) ::sentry::InboundMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::InboundMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InboundMessage_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InboundMessage_sentry_2eproto}, {
      &scc_info_H512_types_2eproto.base,}};

static void InitDefaultsscc_info_OutboundMessageData_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_OutboundMessageData_default_instance_;
    new (ptr) ::sentry::OutboundMessageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::OutboundMessageData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutboundMessageData_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutboundMessageData_sentry_2eproto}, {}};

static void InitDefaultsscc_info_PeerMinBlockRequest_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PeerMinBlockRequest_default_instance_;
    new (ptr) ::sentry::PeerMinBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::PeerMinBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerMinBlockRequest_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PeerMinBlockRequest_sentry_2eproto}, {
      &scc_info_H512_types_2eproto.base,}};

static void InitDefaultsscc_info_PenalizePeerRequest_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_PenalizePeerRequest_default_instance_;
    new (ptr) ::sentry::PenalizePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::PenalizePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PenalizePeerRequest_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PenalizePeerRequest_sentry_2eproto}, {
      &scc_info_H512_types_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageByIdRequest_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SendMessageByIdRequest_default_instance_;
    new (ptr) ::sentry::SendMessageByIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::SendMessageByIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendMessageByIdRequest_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendMessageByIdRequest_sentry_2eproto}, {
      &scc_info_OutboundMessageData_sentry_2eproto.base,
      &scc_info_H512_types_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageByMinBlockRequest_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SendMessageByMinBlockRequest_default_instance_;
    new (ptr) ::sentry::SendMessageByMinBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::SendMessageByMinBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageByMinBlockRequest_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMessageByMinBlockRequest_sentry_2eproto}, {
      &scc_info_OutboundMessageData_sentry_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageToRandomPeersRequest_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SendMessageToRandomPeersRequest_default_instance_;
    new (ptr) ::sentry::SendMessageToRandomPeersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::SendMessageToRandomPeersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageToRandomPeersRequest_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMessageToRandomPeersRequest_sentry_2eproto}, {
      &scc_info_OutboundMessageData_sentry_2eproto.base,}};

static void InitDefaultsscc_info_SentPeers_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_SentPeers_default_instance_;
    new (ptr) ::sentry::SentPeers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::SentPeers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SentPeers_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SentPeers_sentry_2eproto}, {
      &scc_info_H512_types_2eproto.base,}};

static void InitDefaultsscc_info_StatusData_sentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sentry::_StatusData_default_instance_;
    new (ptr) ::sentry::StatusData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sentry::StatusData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatusData_sentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StatusData_sentry_2eproto}, {
      &scc_info_H256_types_2eproto.base,
      &scc_info_Forks_sentry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sentry_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sentry_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sentry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, id_),
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, min_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, max_peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, penalty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, min_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, id_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, genesis_),
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, forks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, network_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, total_difficulty_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, best_hash_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, fork_data_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, max_block_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sentry::OutboundMessageData)},
  { 7, -1, sizeof(::sentry::SendMessageByMinBlockRequest)},
  { 14, -1, sizeof(::sentry::SendMessageByIdRequest)},
  { 21, -1, sizeof(::sentry::SendMessageToRandomPeersRequest)},
  { 28, -1, sizeof(::sentry::SentPeers)},
  { 34, -1, sizeof(::sentry::PenalizePeerRequest)},
  { 41, -1, sizeof(::sentry::PeerMinBlockRequest)},
  { 48, -1, sizeof(::sentry::InboundMessage)},
  { 56, -1, sizeof(::sentry::Forks)},
  { 63, -1, sizeof(::sentry::StatusData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_OutboundMessageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageByMinBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageToRandomPeersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SentPeers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PenalizePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerMinBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_InboundMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_Forks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_StatusData_default_instance_),
};

const char descriptor_table_protodef_sentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sentry.proto\022\006sentry\032\033google/protobuf/"
  "empty.proto\032\013types.proto\"B\n\023OutboundMess"
  "ageData\022\035\n\002id\030\001 \001(\0162\021.sentry.MessageId\022\014"
  "\n\004data\030\002 \001(\014\"\\\n\034SendMessageByMinBlockReq"
  "uest\022)\n\004data\030\001 \001(\0132\033.sentry.OutboundMess"
  "ageData\022\021\n\tmin_block\030\002 \001(\004\"a\n\026SendMessag"
  "eByIdRequest\022)\n\004data\030\001 \001(\0132\033.sentry.Outb"
  "oundMessageData\022\034\n\007peer_id\030\002 \001(\0132\013.types"
  ".H512\"_\n\037SendMessageToRandomPeersRequest"
  "\022)\n\004data\030\001 \001(\0132\033.sentry.OutboundMessageD"
  "ata\022\021\n\tmax_peers\030\002 \001(\004\"\'\n\tSentPeers\022\032\n\005p"
  "eers\030\001 \003(\0132\013.types.H512\"Y\n\023PenalizePeerR"
  "equest\022\034\n\007peer_id\030\001 \001(\0132\013.types.H512\022$\n\007"
  "penalty\030\002 \001(\0162\023.sentry.PenaltyKind\"F\n\023Pe"
  "erMinBlockRequest\022\034\n\007peer_id\030\001 \001(\0132\013.typ"
  "es.H512\022\021\n\tmin_block\030\002 \001(\004\"[\n\016InboundMes"
  "sage\022\035\n\002id\030\001 \001(\0162\021.sentry.MessageId\022\014\n\004d"
  "ata\030\002 \001(\014\022\034\n\007peer_id\030\003 \001(\0132\013.types.H512\""
  "4\n\005Forks\022\034\n\007genesis\030\001 \001(\0132\013.types.H256\022\r"
  "\n\005forks\030\002 \003(\004\"\234\001\n\nStatusData\022\022\n\nnetwork_"
  "id\030\001 \001(\004\022%\n\020total_difficulty\030\002 \001(\0132\013.typ"
  "es.H256\022\036\n\tbest_hash\030\003 \001(\0132\013.types.H256\022"
  " \n\tfork_data\030\004 \001(\0132\r.sentry.Forks\022\021\n\tmax"
  "_block\030\005 \001(\004*\234\002\n\tMessageId\022\022\n\016NewBlockHa"
  "shes\020\000\022\014\n\010NewBlock\020\001\022\020\n\014Transactions\020\002\022\036"
  "\n\032NewPooledTransactionHashes\020\003\022\023\n\017GetBlo"
  "ckHeaders\020\004\022\022\n\016GetBlockBodies\020\005\022\017\n\013GetNo"
  "deData\020\006\022\017\n\013GetReceipts\020\007\022\031\n\025GetPooledTr"
  "ansactions\020\010\022\020\n\014BlockHeaders\020\t\022\017\n\013BlockB"
  "odies\020\n\022\014\n\010NodeData\020\013\022\014\n\010Receipts\020\014\022\026\n\022P"
  "ooledTransactions\020\r*\027\n\013PenaltyKind\022\010\n\004Ki"
  "ck\020\0002\326\005\n\006Sentry\022C\n\014PenalizePeer\022\033.sentry"
  ".PenalizePeerRequest\032\026.google.protobuf.E"
  "mpty\022C\n\014PeerMinBlock\022\033.sentry.PeerMinBlo"
  "ckRequest\032\026.google.protobuf.Empty\022P\n\025Sen"
  "dMessageByMinBlock\022$.sentry.SendMessageB"
  "yMinBlockRequest\032\021.sentry.SentPeers\022D\n\017S"
  "endMessageById\022\036.sentry.SendMessageByIdR"
  "equest\032\021.sentry.SentPeers\022V\n\030SendMessage"
  "ToRandomPeers\022\'.sentry.SendMessageToRand"
  "omPeersRequest\032\021.sentry.SentPeers\022B\n\020Sen"
  "dMessageToAll\022\033.sentry.OutboundMessageDa"
  "ta\032\021.sentry.SentPeers\0227\n\tSetStatus\022\022.sen"
  "try.StatusData\032\026.google.protobuf.Empty\022C"
  "\n\017ReceiveMessages\022\026.google.protobuf.Empt"
  "y\032\026.sentry.InboundMessage0\001\022I\n\025ReceiveUp"
  "loadMessages\022\026.google.protobuf.Empty\032\026.s"
  "entry.InboundMessage0\001\022E\n\021ReceiveTxMessa"
  "ges\022\026.google.protobuf.Empty\032\026.sentry.Inb"
  "oundMessage0\001B\021Z\017./sentry;sentryb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sentry_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sentry_2eproto_sccs[10] = {
  &scc_info_Forks_sentry_2eproto.base,
  &scc_info_InboundMessage_sentry_2eproto.base,
  &scc_info_OutboundMessageData_sentry_2eproto.base,
  &scc_info_PeerMinBlockRequest_sentry_2eproto.base,
  &scc_info_PenalizePeerRequest_sentry_2eproto.base,
  &scc_info_SendMessageByIdRequest_sentry_2eproto.base,
  &scc_info_SendMessageByMinBlockRequest_sentry_2eproto.base,
  &scc_info_SendMessageToRandomPeersRequest_sentry_2eproto.base,
  &scc_info_SentPeers_sentry_2eproto.base,
  &scc_info_StatusData_sentry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sentry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sentry_2eproto = {
  false, false, descriptor_table_protodef_sentry_2eproto, "sentry.proto", 2000,
  &descriptor_table_sentry_2eproto_once, descriptor_table_sentry_2eproto_sccs, descriptor_table_sentry_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_sentry_2eproto::offsets,
  file_level_metadata_sentry_2eproto, 10, file_level_enum_descriptors_sentry_2eproto, file_level_service_descriptors_sentry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sentry_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sentry_2eproto)), true);
namespace sentry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sentry_2eproto);
  return file_level_enum_descriptors_sentry_2eproto[0];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PenaltyKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sentry_2eproto);
  return file_level_enum_descriptors_sentry_2eproto[1];
}
bool PenaltyKind_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OutboundMessageData::InitAsDefaultInstance() {
}
class OutboundMessageData::_Internal {
 public:
};

OutboundMessageData::OutboundMessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.OutboundMessageData)
}
OutboundMessageData::OutboundMessageData(const OutboundMessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.OutboundMessageData)
}

void OutboundMessageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutboundMessageData_sentry_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

OutboundMessageData::~OutboundMessageData() {
  // @@protoc_insertion_point(destructor:sentry.OutboundMessageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutboundMessageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutboundMessageData::ArenaDtor(void* object) {
  OutboundMessageData* _this = reinterpret_cast< OutboundMessageData* >(object);
  (void)_this;
}
void OutboundMessageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutboundMessageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutboundMessageData& OutboundMessageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutboundMessageData_sentry_2eproto.base);
  return *internal_default_instance();
}


void OutboundMessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.OutboundMessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutboundMessageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutboundMessageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.OutboundMessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.OutboundMessageData)
  return target;
}

size_t OutboundMessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.OutboundMessageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutboundMessageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.OutboundMessageData)
  GOOGLE_DCHECK_NE(&from, this);
  const OutboundMessageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutboundMessageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.OutboundMessageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.OutboundMessageData)
    MergeFrom(*source);
  }
}

void OutboundMessageData::MergeFrom(const OutboundMessageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.OutboundMessageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void OutboundMessageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.OutboundMessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutboundMessageData::CopyFrom(const OutboundMessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.OutboundMessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundMessageData::IsInitialized() const {
  return true;
}

void OutboundMessageData::InternalSwap(OutboundMessageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutboundMessageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMessageByMinBlockRequest::InitAsDefaultInstance() {
  ::sentry::_SendMessageByMinBlockRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::sentry::OutboundMessageData*>(
      ::sentry::OutboundMessageData::internal_default_instance());
}
class SendMessageByMinBlockRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByMinBlockRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByMinBlockRequest::_Internal::data(const SendMessageByMinBlockRequest* msg) {
  return *msg->data_;
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByMinBlockRequest)
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(const SendMessageByMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  min_block_ = from.min_block_;
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByMinBlockRequest)
}

void SendMessageByMinBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageByMinBlockRequest_sentry_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_block_) -
      reinterpret_cast<char*>(&data_)) + sizeof(min_block_));
}

SendMessageByMinBlockRequest::~SendMessageByMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByMinBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageByMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SendMessageByMinBlockRequest::ArenaDtor(void* object) {
  SendMessageByMinBlockRequest* _this = reinterpret_cast< SendMessageByMinBlockRequest* >(object);
  (void)_this;
}
void SendMessageByMinBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageByMinBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageByMinBlockRequest& SendMessageByMinBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageByMinBlockRequest_sentry_2eproto.base);
  return *internal_default_instance();
}


void SendMessageByMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  min_block_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByMinBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageByMinBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByMinBlockRequest)
  return target;
}

size_t SendMessageByMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByMinBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageByMinBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SendMessageByMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageByMinBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageByMinBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SendMessageByMinBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SendMessageByMinBlockRequest)
    MergeFrom(*source);
  }
}

void SendMessageByMinBlockRequest::MergeFrom(const SendMessageByMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from.min_block() != 0) {
    _internal_set_min_block(from._internal_min_block());
  }
}

void SendMessageByMinBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SendMessageByMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageByMinBlockRequest::CopyFrom(const SendMessageByMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByMinBlockRequest::IsInitialized() const {
  return true;
}

void SendMessageByMinBlockRequest::InternalSwap(SendMessageByMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, min_block_)
      + sizeof(SendMessageByMinBlockRequest::min_block_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByMinBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMessageByIdRequest::InitAsDefaultInstance() {
  ::sentry::_SendMessageByIdRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::sentry::OutboundMessageData*>(
      ::sentry::OutboundMessageData::internal_default_instance());
  ::sentry::_SendMessageByIdRequest_default_instance_._instance.get_mutable()->peer_id_ = const_cast< ::types::H512*>(
      ::types::H512::internal_default_instance());
}
class SendMessageByIdRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByIdRequest* msg);
  static const ::types::H512& peer_id(const SendMessageByIdRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByIdRequest::_Internal::data(const SendMessageByIdRequest* msg) {
  return *msg->data_;
}
const ::types::H512&
SendMessageByIdRequest::_Internal::peer_id(const SendMessageByIdRequest* msg) {
  return *msg->peer_id_;
}
void SendMessageByIdRequest::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
SendMessageByIdRequest::SendMessageByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByIdRequest)
}
SendMessageByIdRequest::SendMessageByIdRequest(const SendMessageByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByIdRequest)
}

void SendMessageByIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageByIdRequest_sentry_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) -
      reinterpret_cast<char*>(&data_)) + sizeof(peer_id_));
}

SendMessageByIdRequest::~SendMessageByIdRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete peer_id_;
}

void SendMessageByIdRequest::ArenaDtor(void* object) {
  SendMessageByIdRequest* _this = reinterpret_cast< SendMessageByIdRequest* >(object);
  (void)_this;
}
void SendMessageByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageByIdRequest& SendMessageByIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageByIdRequest_sentry_2eproto.base);
  return *internal_default_instance();
}


void SendMessageByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H512 peer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageByIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .types.H512 peer_id = 2;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::peer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByIdRequest)
  return target;
}

size_t SendMessageByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .types.H512 peer_id = 2;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageByIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SendMessageByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageByIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageByIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SendMessageByIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SendMessageByIdRequest)
    MergeFrom(*source);
  }
}

void SendMessageByIdRequest::MergeFrom(const SendMessageByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
}

void SendMessageByIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SendMessageByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageByIdRequest::CopyFrom(const SendMessageByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByIdRequest::IsInitialized() const {
  return true;
}

void SendMessageByIdRequest::InternalSwap(SendMessageByIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, peer_id_)
      + sizeof(SendMessageByIdRequest::peer_id_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMessageToRandomPeersRequest::InitAsDefaultInstance() {
  ::sentry::_SendMessageToRandomPeersRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::sentry::OutboundMessageData*>(
      ::sentry::OutboundMessageData::internal_default_instance());
}
class SendMessageToRandomPeersRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageToRandomPeersRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageToRandomPeersRequest::_Internal::data(const SendMessageToRandomPeersRequest* msg) {
  return *msg->data_;
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageToRandomPeersRequest)
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(const SendMessageToRandomPeersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  max_peers_ = from.max_peers_;
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageToRandomPeersRequest)
}

void SendMessageToRandomPeersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageToRandomPeersRequest_sentry_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_peers_) -
      reinterpret_cast<char*>(&data_)) + sizeof(max_peers_));
}

SendMessageToRandomPeersRequest::~SendMessageToRandomPeersRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageToRandomPeersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageToRandomPeersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SendMessageToRandomPeersRequest::ArenaDtor(void* object) {
  SendMessageToRandomPeersRequest* _this = reinterpret_cast< SendMessageToRandomPeersRequest* >(object);
  (void)_this;
}
void SendMessageToRandomPeersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageToRandomPeersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageToRandomPeersRequest& SendMessageToRandomPeersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageToRandomPeersRequest_sentry_2eproto.base);
  return *internal_default_instance();
}


void SendMessageToRandomPeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageToRandomPeersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  max_peers_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageToRandomPeersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_peers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageToRandomPeersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageToRandomPeersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // uint64 max_peers = 2;
  if (this->max_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_peers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageToRandomPeersRequest)
  return target;
}

size_t SendMessageToRandomPeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageToRandomPeersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 max_peers = 2;
  if (this->max_peers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_peers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageToRandomPeersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SendMessageToRandomPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageToRandomPeersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageToRandomPeersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SendMessageToRandomPeersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SendMessageToRandomPeersRequest)
    MergeFrom(*source);
  }
}

void SendMessageToRandomPeersRequest::MergeFrom(const SendMessageToRandomPeersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageToRandomPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from.max_peers() != 0) {
    _internal_set_max_peers(from._internal_max_peers());
  }
}

void SendMessageToRandomPeersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SendMessageToRandomPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageToRandomPeersRequest::CopyFrom(const SendMessageToRandomPeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageToRandomPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageToRandomPeersRequest::IsInitialized() const {
  return true;
}

void SendMessageToRandomPeersRequest::InternalSwap(SendMessageToRandomPeersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, max_peers_)
      + sizeof(SendMessageToRandomPeersRequest::max_peers_)
      - PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageToRandomPeersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SentPeers::InitAsDefaultInstance() {
}
class SentPeers::_Internal {
 public:
};

void SentPeers::clear_peers() {
  peers_.Clear();
}
SentPeers::SentPeers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  peers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.SentPeers)
}
SentPeers::SentPeers(const SentPeers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.SentPeers)
}

void SentPeers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentPeers_sentry_2eproto.base);
}

SentPeers::~SentPeers() {
  // @@protoc_insertion_point(destructor:sentry.SentPeers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SentPeers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SentPeers::ArenaDtor(void* object) {
  SentPeers* _this = reinterpret_cast< SentPeers* >(object);
  (void)_this;
}
void SentPeers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SentPeers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentPeers& SentPeers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentPeers_sentry_2eproto.base);
  return *internal_default_instance();
}


void SentPeers::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SentPeers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentPeers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .types.H512 peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentPeers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SentPeers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SentPeers)
  return target;
}

size_t SentPeers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SentPeers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentPeers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.SentPeers)
  GOOGLE_DCHECK_NE(&from, this);
  const SentPeers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentPeers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.SentPeers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.SentPeers)
    MergeFrom(*source);
  }
}

void SentPeers::MergeFrom(const SentPeers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SentPeers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void SentPeers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.SentPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentPeers::CopyFrom(const SentPeers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SentPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentPeers::IsInitialized() const {
  return true;
}

void SentPeers::InternalSwap(SentPeers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SentPeers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PenalizePeerRequest::InitAsDefaultInstance() {
  ::sentry::_PenalizePeerRequest_default_instance_._instance.get_mutable()->peer_id_ = const_cast< ::types::H512*>(
      ::types::H512::internal_default_instance());
}
class PenalizePeerRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PenalizePeerRequest* msg);
};

const ::types::H512&
PenalizePeerRequest::_Internal::peer_id(const PenalizePeerRequest* msg) {
  return *msg->peer_id_;
}
void PenalizePeerRequest::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PenalizePeerRequest::PenalizePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PenalizePeerRequest)
}
PenalizePeerRequest::PenalizePeerRequest(const PenalizePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  penalty_ = from.penalty_;
  // @@protoc_insertion_point(copy_constructor:sentry.PenalizePeerRequest)
}

void PenalizePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PenalizePeerRequest_sentry_2eproto.base);
  ::memset(&peer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(penalty_));
}

PenalizePeerRequest::~PenalizePeerRequest() {
  // @@protoc_insertion_point(destructor:sentry.PenalizePeerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PenalizePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PenalizePeerRequest::ArenaDtor(void* object) {
  PenalizePeerRequest* _this = reinterpret_cast< PenalizePeerRequest* >(object);
  (void)_this;
}
void PenalizePeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PenalizePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PenalizePeerRequest& PenalizePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PenalizePeerRequest_sentry_2eproto.base);
  return *internal_default_instance();
}


void PenalizePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PenalizePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  penalty_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PenalizePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sentry.PenaltyKind penalty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_penalty(static_cast<::sentry::PenaltyKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PenalizePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PenalizePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->penalty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PenalizePeerRequest)
  return target;
}

size_t PenalizePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PenalizePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->penalty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_penalty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PenalizePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PenalizePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PenalizePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PenalizePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PenalizePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PenalizePeerRequest)
    MergeFrom(*source);
  }
}

void PenalizePeerRequest::MergeFrom(const PenalizePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PenalizePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from.penalty() != 0) {
    _internal_set_penalty(from._internal_penalty());
  }
}

void PenalizePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PenalizePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PenalizePeerRequest::CopyFrom(const PenalizePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PenalizePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PenalizePeerRequest::IsInitialized() const {
  return true;
}

void PenalizePeerRequest::InternalSwap(PenalizePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, penalty_)
      + sizeof(PenalizePeerRequest::penalty_)
      - PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PenalizePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerMinBlockRequest::InitAsDefaultInstance() {
  ::sentry::_PeerMinBlockRequest_default_instance_._instance.get_mutable()->peer_id_ = const_cast< ::types::H512*>(
      ::types::H512::internal_default_instance());
}
class PeerMinBlockRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerMinBlockRequest* msg);
};

const ::types::H512&
PeerMinBlockRequest::_Internal::peer_id(const PeerMinBlockRequest* msg) {
  return *msg->peer_id_;
}
void PeerMinBlockRequest::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PeerMinBlockRequest::PeerMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerMinBlockRequest)
}
PeerMinBlockRequest::PeerMinBlockRequest(const PeerMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  min_block_ = from.min_block_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerMinBlockRequest)
}

void PeerMinBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerMinBlockRequest_sentry_2eproto.base);
  ::memset(&peer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_block_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(min_block_));
}

PeerMinBlockRequest::~PeerMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerMinBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PeerMinBlockRequest::ArenaDtor(void* object) {
  PeerMinBlockRequest* _this = reinterpret_cast< PeerMinBlockRequest* >(object);
  (void)_this;
}
void PeerMinBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerMinBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerMinBlockRequest& PeerMinBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerMinBlockRequest_sentry_2eproto.base);
  return *internal_default_instance();
}


void PeerMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  min_block_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerMinBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerMinBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerMinBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerMinBlockRequest)
  return target;
}

size_t PeerMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerMinBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // uint64 min_block = 2;
  if (this->min_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerMinBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.PeerMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerMinBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerMinBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.PeerMinBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.PeerMinBlockRequest)
    MergeFrom(*source);
  }
}

void PeerMinBlockRequest::MergeFrom(const PeerMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from.min_block() != 0) {
    _internal_set_min_block(from._internal_min_block());
  }
}

void PeerMinBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.PeerMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerMinBlockRequest::CopyFrom(const PeerMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerMinBlockRequest::IsInitialized() const {
  return true;
}

void PeerMinBlockRequest::InternalSwap(PeerMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, min_block_)
      + sizeof(PeerMinBlockRequest::min_block_)
      - PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerMinBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InboundMessage::InitAsDefaultInstance() {
  ::sentry::_InboundMessage_default_instance_._instance.get_mutable()->peer_id_ = const_cast< ::types::H512*>(
      ::types::H512::internal_default_instance());
}
class InboundMessage::_Internal {
 public:
  static const ::types::H512& peer_id(const InboundMessage* msg);
};

const ::types::H512&
InboundMessage::_Internal::peer_id(const InboundMessage* msg) {
  return *msg->peer_id_;
}
void InboundMessage::clear_peer_id() {
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
InboundMessage::InboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.InboundMessage)
}
InboundMessage::InboundMessage(const InboundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.InboundMessage)
}

void InboundMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InboundMessage_sentry_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&peer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(id_));
}

InboundMessage::~InboundMessage() {
  // @@protoc_insertion_point(destructor:sentry.InboundMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InboundMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_id_;
}

void InboundMessage::ArenaDtor(void* object) {
  InboundMessage* _this = reinterpret_cast< InboundMessage* >(object);
  (void)_this;
}
void InboundMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InboundMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InboundMessage& InboundMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InboundMessage_sentry_2eproto.base);
  return *internal_default_instance();
}


void InboundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.InboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InboundMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H512 peer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InboundMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.InboundMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .types.H512 peer_id = 3;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.InboundMessage)
  return target;
}

size_t InboundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.InboundMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H512 peer_id = 3;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.MessageId id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InboundMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.InboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InboundMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InboundMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.InboundMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.InboundMessage)
    MergeFrom(*source);
  }
}

void InboundMessage::MergeFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.InboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void InboundMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboundMessage::CopyFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundMessage::IsInitialized() const {
  return true;
}

void InboundMessage::InternalSwap(InboundMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundMessage, id_)
      + sizeof(InboundMessage::id_)
      - PROTOBUF_FIELD_OFFSET(InboundMessage, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InboundMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Forks::InitAsDefaultInstance() {
  ::sentry::_Forks_default_instance_._instance.get_mutable()->genesis_ = const_cast< ::types::H256*>(
      ::types::H256::internal_default_instance());
}
class Forks::_Internal {
 public:
  static const ::types::H256& genesis(const Forks* msg);
};

const ::types::H256&
Forks::_Internal::genesis(const Forks* msg) {
  return *msg->genesis_;
}
void Forks::clear_genesis() {
  if (GetArena() == nullptr && genesis_ != nullptr) {
    delete genesis_;
  }
  genesis_ = nullptr;
}
Forks::Forks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  forks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.Forks)
}
Forks::Forks(const Forks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      forks_(from.forks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_genesis()) {
    genesis_ = new ::types::H256(*from.genesis_);
  } else {
    genesis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.Forks)
}

void Forks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Forks_sentry_2eproto.base);
  genesis_ = nullptr;
}

Forks::~Forks() {
  // @@protoc_insertion_point(destructor:sentry.Forks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Forks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete genesis_;
}

void Forks::ArenaDtor(void* object) {
  Forks* _this = reinterpret_cast< Forks* >(object);
  (void)_this;
}
void Forks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Forks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Forks& Forks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Forks_sentry_2eproto.base);
  return *internal_default_instance();
}


void Forks::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.Forks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forks_.Clear();
  if (GetArena() == nullptr && genesis_ != nullptr) {
    delete genesis_;
  }
  genesis_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Forks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H256 genesis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_genesis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 forks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_forks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_forks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Forks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.Forks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 genesis = 1;
  if (this->has_genesis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::genesis(this), target, stream);
  }

  // repeated uint64 forks = 2;
  {
    int byte_size = _forks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_forks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.Forks)
  return target;
}

size_t Forks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.Forks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 forks = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->forks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _forks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .types.H256 genesis = 1;
  if (this->has_genesis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *genesis_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Forks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.Forks)
  GOOGLE_DCHECK_NE(&from, this);
  const Forks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Forks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.Forks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.Forks)
    MergeFrom(*source);
  }
}

void Forks::MergeFrom(const Forks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.Forks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forks_.MergeFrom(from.forks_);
  if (from.has_genesis()) {
    _internal_mutable_genesis()->::types::H256::MergeFrom(from._internal_genesis());
  }
}

void Forks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.Forks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Forks::CopyFrom(const Forks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.Forks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Forks::IsInitialized() const {
  return true;
}

void Forks::InternalSwap(Forks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  forks_.InternalSwap(&other->forks_);
  swap(genesis_, other->genesis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Forks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusData::InitAsDefaultInstance() {
  ::sentry::_StatusData_default_instance_._instance.get_mutable()->total_difficulty_ = const_cast< ::types::H256*>(
      ::types::H256::internal_default_instance());
  ::sentry::_StatusData_default_instance_._instance.get_mutable()->best_hash_ = const_cast< ::types::H256*>(
      ::types::H256::internal_default_instance());
  ::sentry::_StatusData_default_instance_._instance.get_mutable()->fork_data_ = const_cast< ::sentry::Forks*>(
      ::sentry::Forks::internal_default_instance());
}
class StatusData::_Internal {
 public:
  static const ::types::H256& total_difficulty(const StatusData* msg);
  static const ::types::H256& best_hash(const StatusData* msg);
  static const ::sentry::Forks& fork_data(const StatusData* msg);
};

const ::types::H256&
StatusData::_Internal::total_difficulty(const StatusData* msg) {
  return *msg->total_difficulty_;
}
const ::types::H256&
StatusData::_Internal::best_hash(const StatusData* msg) {
  return *msg->best_hash_;
}
const ::sentry::Forks&
StatusData::_Internal::fork_data(const StatusData* msg) {
  return *msg->fork_data_;
}
void StatusData::clear_total_difficulty() {
  if (GetArena() == nullptr && total_difficulty_ != nullptr) {
    delete total_difficulty_;
  }
  total_difficulty_ = nullptr;
}
void StatusData::clear_best_hash() {
  if (GetArena() == nullptr && best_hash_ != nullptr) {
    delete best_hash_;
  }
  best_hash_ = nullptr;
}
StatusData::StatusData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sentry.StatusData)
}
StatusData::StatusData(const StatusData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_difficulty()) {
    total_difficulty_ = new ::types::H256(*from.total_difficulty_);
  } else {
    total_difficulty_ = nullptr;
  }
  if (from._internal_has_best_hash()) {
    best_hash_ = new ::types::H256(*from.best_hash_);
  } else {
    best_hash_ = nullptr;
  }
  if (from._internal_has_fork_data()) {
    fork_data_ = new ::sentry::Forks(*from.fork_data_);
  } else {
    fork_data_ = nullptr;
  }
  ::memcpy(&network_id_, &from.network_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_block_) -
    reinterpret_cast<char*>(&network_id_)) + sizeof(max_block_));
  // @@protoc_insertion_point(copy_constructor:sentry.StatusData)
}

void StatusData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusData_sentry_2eproto.base);
  ::memset(&total_difficulty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_block_) -
      reinterpret_cast<char*>(&total_difficulty_)) + sizeof(max_block_));
}

StatusData::~StatusData() {
  // @@protoc_insertion_point(destructor:sentry.StatusData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete total_difficulty_;
  if (this != internal_default_instance()) delete best_hash_;
  if (this != internal_default_instance()) delete fork_data_;
}

void StatusData::ArenaDtor(void* object) {
  StatusData* _this = reinterpret_cast< StatusData* >(object);
  (void)_this;
}
void StatusData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusData& StatusData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusData_sentry_2eproto.base);
  return *internal_default_instance();
}


void StatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.StatusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && total_difficulty_ != nullptr) {
    delete total_difficulty_;
  }
  total_difficulty_ = nullptr;
  if (GetArena() == nullptr && best_hash_ != nullptr) {
    delete best_hash_;
  }
  best_hash_ = nullptr;
  if (GetArena() == nullptr && fork_data_ != nullptr) {
    delete fork_data_;
  }
  fork_data_ = nullptr;
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_block_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(max_block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 network_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 total_difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_difficulty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 best_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sentry.Forks fork_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fork_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.StatusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 network_id = 1;
  if (this->network_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_network_id(), target);
  }

  // .types.H256 total_difficulty = 2;
  if (this->has_total_difficulty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total_difficulty(this), target, stream);
  }

  // .types.H256 best_hash = 3;
  if (this->has_best_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::best_hash(this), target, stream);
  }

  // .sentry.Forks fork_data = 4;
  if (this->has_fork_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fork_data(this), target, stream);
  }

  // uint64 max_block = 5;
  if (this->max_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_max_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.StatusData)
  return target;
}

size_t StatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.StatusData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 total_difficulty = 2;
  if (this->has_total_difficulty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_difficulty_);
  }

  // .types.H256 best_hash = 3;
  if (this->has_best_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *best_hash_);
  }

  // .sentry.Forks fork_data = 4;
  if (this->has_fork_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fork_data_);
  }

  // uint64 network_id = 1;
  if (this->network_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_network_id());
  }

  // uint64 max_block = 5;
  if (this->max_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sentry.StatusData)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sentry.StatusData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sentry.StatusData)
    MergeFrom(*source);
  }
}

void StatusData::MergeFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.StatusData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total_difficulty()) {
    _internal_mutable_total_difficulty()->::types::H256::MergeFrom(from._internal_total_difficulty());
  }
  if (from.has_best_hash()) {
    _internal_mutable_best_hash()->::types::H256::MergeFrom(from._internal_best_hash());
  }
  if (from.has_fork_data()) {
    _internal_mutable_fork_data()->::sentry::Forks::MergeFrom(from._internal_fork_data());
  }
  if (from.network_id() != 0) {
    _internal_set_network_id(from._internal_network_id());
  }
  if (from.max_block() != 0) {
    _internal_set_max_block(from._internal_max_block());
  }
}

void StatusData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sentry.StatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusData::CopyFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.StatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusData::IsInitialized() const {
  return true;
}

void StatusData::InternalSwap(StatusData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusData, max_block_)
      + sizeof(StatusData::max_block_)
      - PROTOBUF_FIELD_OFFSET(StatusData, total_difficulty_)>(
          reinterpret_cast<char*>(&total_difficulty_),
          reinterpret_cast<char*>(&other->total_difficulty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sentry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sentry::OutboundMessageData* Arena::CreateMaybeMessage< ::sentry::OutboundMessageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::OutboundMessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByMinBlockRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageByMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByIdRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageToRandomPeersRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageToRandomPeersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageToRandomPeersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SentPeers* Arena::CreateMaybeMessage< ::sentry::SentPeers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SentPeers >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PenalizePeerRequest* Arena::CreateMaybeMessage< ::sentry::PenalizePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PenalizePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerMinBlockRequest* Arena::CreateMaybeMessage< ::sentry::PeerMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::InboundMessage* Arena::CreateMaybeMessage< ::sentry::InboundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::InboundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::Forks* Arena::CreateMaybeMessage< ::sentry::Forks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::Forks >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::StatusData* Arena::CreateMaybeMessage< ::sentry::StatusData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::StatusData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
