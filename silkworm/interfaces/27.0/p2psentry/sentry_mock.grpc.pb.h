// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: p2psentry/sentry.proto

#ifndef GRPC_MOCK_p2psentry_2fsentry_2eproto__INCLUDED
#define GRPC_MOCK_p2psentry_2fsentry_2eproto__INCLUDED

#include "p2psentry/sentry.pb.h"
#include "p2psentry/sentry.grpc.pb.h"

#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/sync_stream.h>
#include <gmock/gmock.h>
namespace sentry {

class MockSentryStub : public Sentry::StubInterface {
 public:
  MOCK_METHOD3(SetStatus, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::StatusData& request, ::sentry::SetStatusReply* response));
  MOCK_METHOD3(AsyncSetStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SetStatusReply>*(::grpc::ClientContext* context, const ::sentry::StatusData& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSetStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SetStatusReply>*(::grpc::ClientContext* context, const ::sentry::StatusData& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PenalizePeer, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncPenalizePeerRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPenalizePeerRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::sentry::PenalizePeerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PeerMinBlock, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncPeerMinBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPeerMinBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::sentry::PeerMinBlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(HandShake, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sentry::HandShakeReply* response));
  MOCK_METHOD3(AsyncHandShakeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::HandShakeReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHandShakeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::HandShakeReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SendMessageByMinBlock, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest& request, ::sentry::SentPeers* response));
  MOCK_METHOD3(AsyncSendMessageByMinBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendMessageByMinBlockRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::SendMessageByMinBlockRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SendMessageById, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest& request, ::sentry::SentPeers* response));
  MOCK_METHOD3(AsyncSendMessageByIdRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendMessageByIdRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::SendMessageByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SendMessageToRandomPeers, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest& request, ::sentry::SentPeers* response));
  MOCK_METHOD3(AsyncSendMessageToRandomPeersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendMessageToRandomPeersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::SendMessageToRandomPeersRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SendMessageToAll, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::OutboundMessageData& request, ::sentry::SentPeers* response));
  MOCK_METHOD3(AsyncSendMessageToAllRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::OutboundMessageData& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendMessageToAllRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::SentPeers>*(::grpc::ClientContext* context, const ::sentry::OutboundMessageData& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(MessagesRaw, ::grpc::ClientReaderInterface< ::sentry::InboundMessage>*(::grpc::ClientContext* context, const ::sentry::MessagesRequest& request));
  MOCK_METHOD4(AsyncMessagesRaw, ::grpc::ClientAsyncReaderInterface< ::sentry::InboundMessage>*(::grpc::ClientContext* context, const ::sentry::MessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncMessagesRaw, ::grpc::ClientAsyncReaderInterface< ::sentry::InboundMessage>*(::grpc::ClientContext* context, const ::sentry::MessagesRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Peers, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sentry::PeersReply* response));
  MOCK_METHOD3(AsyncPeersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::PeersReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPeersRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::PeersReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PeerCount, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::PeerCountRequest& request, ::sentry::PeerCountReply* response));
  MOCK_METHOD3(AsyncPeerCountRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::PeerCountReply>*(::grpc::ClientContext* context, const ::sentry::PeerCountRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPeerCountRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::PeerCountReply>*(::grpc::ClientContext* context, const ::sentry::PeerCountRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PeerById, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest& request, ::sentry::PeerByIdReply* response));
  MOCK_METHOD3(AsyncPeerByIdRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::PeerByIdReply>*(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPeerByIdRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::PeerByIdReply>*(::grpc::ClientContext* context, const ::sentry::PeerByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(PeerEventsRaw, ::grpc::ClientReaderInterface< ::sentry::PeerEvent>*(::grpc::ClientContext* context, const ::sentry::PeerEventsRequest& request));
  MOCK_METHOD4(AsyncPeerEventsRaw, ::grpc::ClientAsyncReaderInterface< ::sentry::PeerEvent>*(::grpc::ClientContext* context, const ::sentry::PeerEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncPeerEventsRaw, ::grpc::ClientAsyncReaderInterface< ::sentry::PeerEvent>*(::grpc::ClientContext* context, const ::sentry::PeerEventsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(AddPeer, ::grpc::Status(::grpc::ClientContext* context, const ::sentry::AddPeerRequest& request, ::sentry::AddPeerReply* response));
  MOCK_METHOD3(AsyncAddPeerRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::AddPeerReply>*(::grpc::ClientContext* context, const ::sentry::AddPeerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAddPeerRaw, ::grpc::ClientAsyncResponseReaderInterface< ::sentry::AddPeerReply>*(::grpc::ClientContext* context, const ::sentry::AddPeerRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(NodeInfo, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::NodeInfoReply* response));
  MOCK_METHOD3(AsyncNodeInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::NodeInfoReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncNodeInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::NodeInfoReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

}  // namespace sentry


#endif  // GRPC_MOCK_p2psentry_2fsentry_2eproto__INCLUDED
