// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types/types.proto

#include "types/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace types {
constexpr H128::H128(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hi_(uint64_t{0u})
  , lo_(uint64_t{0u}){}
struct H128DefaultTypeInternal {
  constexpr H128DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~H128DefaultTypeInternal() {}
  union {
    H128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT H128DefaultTypeInternal _H128_default_instance_;
constexpr H160::H160(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hi_(nullptr)
  , lo_(0u){}
struct H160DefaultTypeInternal {
  constexpr H160DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~H160DefaultTypeInternal() {}
  union {
    H160 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT H160DefaultTypeInternal _H160_default_instance_;
constexpr H256::H256(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hi_(nullptr)
  , lo_(nullptr){}
struct H256DefaultTypeInternal {
  constexpr H256DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~H256DefaultTypeInternal() {}
  union {
    H256 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT H256DefaultTypeInternal _H256_default_instance_;
constexpr H512::H512(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hi_(nullptr)
  , lo_(nullptr){}
struct H512DefaultTypeInternal {
  constexpr H512DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~H512DefaultTypeInternal() {}
  union {
    H512 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT H512DefaultTypeInternal _H512_default_instance_;
constexpr H1024::H1024(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hi_(nullptr)
  , lo_(nullptr){}
struct H1024DefaultTypeInternal {
  constexpr H1024DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~H1024DefaultTypeInternal() {}
  union {
    H1024 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT H1024DefaultTypeInternal _H1024_default_instance_;
constexpr H2048::H2048(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hi_(nullptr)
  , lo_(nullptr){}
struct H2048DefaultTypeInternal {
  constexpr H2048DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~H2048DefaultTypeInternal() {}
  union {
    H2048 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT H2048DefaultTypeInternal _H2048_default_instance_;
constexpr VersionReply::VersionReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : major_(0u)
  , minor_(0u)
  , patch_(0u){}
struct VersionReplyDefaultTypeInternal {
  constexpr VersionReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionReplyDefaultTypeInternal() {}
  union {
    VersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionReplyDefaultTypeInternal _VersionReply_default_instance_;
constexpr NodeInfoPorts::NodeInfoPorts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : discovery_(0u)
  , listener_(0u){}
struct NodeInfoPortsDefaultTypeInternal {
  constexpr NodeInfoPortsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfoPortsDefaultTypeInternal() {}
  union {
    NodeInfoPorts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoPortsDefaultTypeInternal _NodeInfoPorts_default_instance_;
constexpr NodeInfoReply::NodeInfoReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , listeneraddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocols_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ports_(nullptr){}
struct NodeInfoReplyDefaultTypeInternal {
  constexpr NodeInfoReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfoReplyDefaultTypeInternal() {}
  union {
    NodeInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoReplyDefaultTypeInternal _NodeInfoReply_default_instance_;
}  // namespace types
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_types_2ftypes_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_types_2ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_types_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_types_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H128, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H128, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H160, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H160, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H160, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H256, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H256, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H256, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H512, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H512, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H512, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H1024, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H1024, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H1024, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H2048, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H2048, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H2048, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, major_),
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, minor_),
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, discovery_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, listener_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, id_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, name_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, enode_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, enr_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, ports_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, listeneraddr_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, protocols_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::types::H128)},
  { 8, -1, -1, sizeof(::types::H160)},
  { 16, -1, -1, sizeof(::types::H256)},
  { 24, -1, -1, sizeof(::types::H512)},
  { 32, -1, -1, sizeof(::types::H1024)},
  { 40, -1, -1, sizeof(::types::H2048)},
  { 48, -1, -1, sizeof(::types::VersionReply)},
  { 57, -1, -1, sizeof(::types::NodeInfoPorts)},
  { 65, -1, -1, sizeof(::types::NodeInfoReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H128_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H160_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H256_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H512_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H1024_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H2048_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_VersionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_NodeInfoPorts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_NodeInfoReply_default_instance_),
};

const char descriptor_table_protodef_types_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021types/types.proto\022\005types\032 google/proto"
  "buf/descriptor.proto\"\036\n\004H128\022\n\n\002hi\030\001 \001(\004"
  "\022\n\n\002lo\030\002 \001(\004\"+\n\004H160\022\027\n\002hi\030\001 \001(\0132\013.types"
  ".H128\022\n\n\002lo\030\002 \001(\r\"8\n\004H256\022\027\n\002hi\030\001 \001(\0132\013."
  "types.H128\022\027\n\002lo\030\002 \001(\0132\013.types.H128\"8\n\004H"
  "512\022\027\n\002hi\030\001 \001(\0132\013.types.H256\022\027\n\002lo\030\002 \001(\013"
  "2\013.types.H256\"9\n\005H1024\022\027\n\002hi\030\001 \001(\0132\013.typ"
  "es.H512\022\027\n\002lo\030\002 \001(\0132\013.types.H512\";\n\005H204"
  "8\022\030\n\002hi\030\001 \001(\0132\014.types.H1024\022\030\n\002lo\030\002 \001(\0132"
  "\014.types.H1024\";\n\014VersionReply\022\r\n\005major\030\001"
  " \001(\r\022\r\n\005minor\030\002 \001(\r\022\r\n\005patch\030\003 \001(\r\"4\n\rNo"
  "deInfoPorts\022\021\n\tdiscovery\030\001 \001(\r\022\020\n\010listen"
  "er\030\002 \001(\r\"\223\001\n\rNodeInfoReply\022\n\n\002id\030\001 \001(\t\022\014"
  "\n\004name\030\002 \001(\t\022\r\n\005enode\030\003 \001(\t\022\013\n\003enr\030\004 \001(\t"
  "\022#\n\005ports\030\005 \001(\0132\024.types.NodeInfoPorts\022\024\n"
  "\014listenerAddr\030\006 \001(\t\022\021\n\tprotocols\030\007 \001(\014:="
  "\n\025service_major_version\022\034.google.protobu"
  "f.FileOptions\030\321\206\003 \001(\r:=\n\025service_minor_v"
  "ersion\022\034.google.protobuf.FileOptions\030\322\206\003"
  " \001(\r:=\n\025service_patch_version\022\034.google.p"
  "rotobuf.FileOptions\030\323\206\003 \001(\rB\017Z\r./types;t"
  "ypesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_types_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_types_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2ftypes_2eproto = {
  false, false, 852, descriptor_table_protodef_types_2ftypes_2eproto, "types/types.proto", 
  &descriptor_table_types_2ftypes_2eproto_once, descriptor_table_types_2ftypes_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_types_2ftypes_2eproto::offsets,
  file_level_metadata_types_2ftypes_2eproto, file_level_enum_descriptors_types_2ftypes_2eproto, file_level_service_descriptors_types_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_types_2ftypes_2eproto_getter() {
  return &descriptor_table_types_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_types_2ftypes_2eproto(&descriptor_table_types_2ftypes_2eproto);
namespace types {

// ===================================================================

class H128::_Internal {
 public:
};

H128::H128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.H128)
}
H128::H128(const H128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hi_, &from.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  // @@protoc_insertion_point(copy_constructor:types.H128)
}

inline void H128::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H128::~H128() {
  // @@protoc_insertion_point(destructor:types.H128)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void H128::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void H128::ArenaDtor(void* object) {
  H128* _this = reinterpret_cast< H128* >(object);
  (void)_this;
}
void H128::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void H128::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H128)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H128::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H128)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hi(), target);
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H128)
  return target;
}

size_t H128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H128)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_hi());
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_lo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H128::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    H128::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H128::GetClassData() const { return &_class_data_; }

void H128::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<H128 *>(to)->MergeFrom(
      static_cast<const H128 &>(from));
}


void H128::MergeFrom(const H128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H128)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hi() != 0) {
    _internal_set_hi(from._internal_hi());
  }
  if (from._internal_lo() != 0) {
    _internal_set_lo(from._internal_lo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H128::CopyFrom(const H128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H128::IsInitialized() const {
  return true;
}

void H128::InternalSwap(H128* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H128, lo_)
      + sizeof(H128::lo_)
      - PROTOBUF_FIELD_OFFSET(H128, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H128::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[0]);
}

// ===================================================================

class H160::_Internal {
 public:
  static const ::types::H128& hi(const H160* msg);
};

const ::types::H128&
H160::_Internal::hi(const H160* msg) {
  return *msg->hi_;
}
H160::H160(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.H160)
}
H160::H160(const H160& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H128(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  lo_ = from.lo_;
  // @@protoc_insertion_point(copy_constructor:types.H160)
}

inline void H160::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H160::~H160() {
  // @@protoc_insertion_point(destructor:types.H160)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void H160::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hi_;
}

void H160::ArenaDtor(void* object) {
  H160* _this = reinterpret_cast< H160* >(object);
  (void)_this;
}
void H160::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H160::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void H160::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H160)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  lo_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H160::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H128 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H160::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H160)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // uint32 lo = 2;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H160)
  return target;
}

size_t H160::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H160)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // uint32 lo = 2;
  if (this->_internal_lo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H160::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    H160::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H160::GetClassData() const { return &_class_data_; }

void H160::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<H160 *>(to)->MergeFrom(
      static_cast<const H160 &>(from));
}


void H160::MergeFrom(const H160& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H160)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _internal_mutable_hi()->::types::H128::MergeFrom(from._internal_hi());
  }
  if (from._internal_lo() != 0) {
    _internal_set_lo(from._internal_lo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H160::CopyFrom(const H160& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H160)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H160::IsInitialized() const {
  return true;
}

void H160::InternalSwap(H160* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H160, lo_)
      + sizeof(H160::lo_)
      - PROTOBUF_FIELD_OFFSET(H160, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H160::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[1]);
}

// ===================================================================

class H256::_Internal {
 public:
  static const ::types::H128& hi(const H256* msg);
  static const ::types::H128& lo(const H256* msg);
};

const ::types::H128&
H256::_Internal::hi(const H256* msg) {
  return *msg->hi_;
}
const ::types::H128&
H256::_Internal::lo(const H256* msg) {
  return *msg->lo_;
}
H256::H256(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.H256)
}
H256::H256(const H256& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H128(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H128(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H256)
}

inline void H256::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H256::~H256() {
  // @@protoc_insertion_point(destructor:types.H256)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void H256::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H256::ArenaDtor(void* object) {
  H256* _this = reinterpret_cast< H256* >(object);
  (void)_this;
}
void H256::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H256::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void H256::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H256)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H256::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H128 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H128 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H256::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H256)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H128 lo = 2;
  if (this->_internal_has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H256)
  return target;
}

size_t H256::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H256)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H128 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H256::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    H256::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H256::GetClassData() const { return &_class_data_; }

void H256::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<H256 *>(to)->MergeFrom(
      static_cast<const H256 &>(from));
}


void H256::MergeFrom(const H256& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H256)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _internal_mutable_hi()->::types::H128::MergeFrom(from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _internal_mutable_lo()->::types::H128::MergeFrom(from._internal_lo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H256::CopyFrom(const H256& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H256)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H256::IsInitialized() const {
  return true;
}

void H256::InternalSwap(H256* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H256, lo_)
      + sizeof(H256::lo_)
      - PROTOBUF_FIELD_OFFSET(H256, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H256::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[2]);
}

// ===================================================================

class H512::_Internal {
 public:
  static const ::types::H256& hi(const H512* msg);
  static const ::types::H256& lo(const H512* msg);
};

const ::types::H256&
H512::_Internal::hi(const H512* msg) {
  return *msg->hi_;
}
const ::types::H256&
H512::_Internal::lo(const H512* msg) {
  return *msg->lo_;
}
H512::H512(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.H512)
}
H512::H512(const H512& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H256(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H256(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H512)
}

inline void H512::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H512::~H512() {
  // @@protoc_insertion_point(destructor:types.H512)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void H512::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H512::ArenaDtor(void* object) {
  H512* _this = reinterpret_cast< H512* >(object);
  (void)_this;
}
void H512::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H512::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void H512::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H512)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H512::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H512::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H512)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 hi = 1;
  if (this->_internal_has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H256 lo = 2;
  if (this->_internal_has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H512)
  return target;
}

size_t H512::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H512)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H256 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H512::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    H512::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H512::GetClassData() const { return &_class_data_; }

void H512::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<H512 *>(to)->MergeFrom(
      static_cast<const H512 &>(from));
}


void H512::MergeFrom(const H512& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H512)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _internal_mutable_hi()->::types::H256::MergeFrom(from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _internal_mutable_lo()->::types::H256::MergeFrom(from._internal_lo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H512::CopyFrom(const H512& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H512::IsInitialized() const {
  return true;
}

void H512::InternalSwap(H512* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H512, lo_)
      + sizeof(H512::lo_)
      - PROTOBUF_FIELD_OFFSET(H512, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H512::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[3]);
}

// ===================================================================

class H1024::_Internal {
 public:
  static const ::types::H512& hi(const H1024* msg);
  static const ::types::H512& lo(const H1024* msg);
};

const ::types::H512&
H1024::_Internal::hi(const H1024* msg) {
  return *msg->hi_;
}
const ::types::H512&
H1024::_Internal::lo(const H1024* msg) {
  return *msg->lo_;
}
H1024::H1024(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.H1024)
}
H1024::H1024(const H1024& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H512(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H512(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H1024)
}

inline void H1024::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H1024::~H1024() {
  // @@protoc_insertion_point(destructor:types.H1024)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void H1024::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H1024::ArenaDtor(void* object) {
  H1024* _this = reinterpret_cast< H1024* >(object);
  (void)_this;
}
void H1024::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H1024::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void H1024::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H1024)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H1024::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H512 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H1024::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H1024)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 hi = 1;
  if (this->_internal_has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H512 lo = 2;
  if (this->_internal_has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H1024)
  return target;
}

size_t H1024::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H1024)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H512 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H1024::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    H1024::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H1024::GetClassData() const { return &_class_data_; }

void H1024::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<H1024 *>(to)->MergeFrom(
      static_cast<const H1024 &>(from));
}


void H1024::MergeFrom(const H1024& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H1024)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _internal_mutable_hi()->::types::H512::MergeFrom(from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _internal_mutable_lo()->::types::H512::MergeFrom(from._internal_lo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H1024::CopyFrom(const H1024& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H1024)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H1024::IsInitialized() const {
  return true;
}

void H1024::InternalSwap(H1024* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H1024, lo_)
      + sizeof(H1024::lo_)
      - PROTOBUF_FIELD_OFFSET(H1024, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H1024::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[4]);
}

// ===================================================================

class H2048::_Internal {
 public:
  static const ::types::H1024& hi(const H2048* msg);
  static const ::types::H1024& lo(const H2048* msg);
};

const ::types::H1024&
H2048::_Internal::hi(const H2048* msg) {
  return *msg->hi_;
}
const ::types::H1024&
H2048::_Internal::lo(const H2048* msg) {
  return *msg->lo_;
}
H2048::H2048(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.H2048)
}
H2048::H2048(const H2048& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H1024(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H1024(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H2048)
}

inline void H2048::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H2048::~H2048() {
  // @@protoc_insertion_point(destructor:types.H2048)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void H2048::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H2048::ArenaDtor(void* object) {
  H2048* _this = reinterpret_cast< H2048* >(object);
  (void)_this;
}
void H2048::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H2048::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void H2048::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H2048)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H2048::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H1024 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H1024 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H2048::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H2048)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H1024 hi = 1;
  if (this->_internal_has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H1024 lo = 2;
  if (this->_internal_has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H2048)
  return target;
}

size_t H2048::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H2048)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H1024 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H1024 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H2048::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    H2048::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H2048::GetClassData() const { return &_class_data_; }

void H2048::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<H2048 *>(to)->MergeFrom(
      static_cast<const H2048 &>(from));
}


void H2048::MergeFrom(const H2048& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H2048)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _internal_mutable_hi()->::types::H1024::MergeFrom(from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _internal_mutable_lo()->::types::H1024::MergeFrom(from._internal_lo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H2048::CopyFrom(const H2048& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H2048)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H2048::IsInitialized() const {
  return true;
}

void H2048::InternalSwap(H2048* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H2048, lo_)
      + sizeof(H2048::lo_)
      - PROTOBUF_FIELD_OFFSET(H2048, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H2048::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[5]);
}

// ===================================================================

class VersionReply::_Internal {
 public:
};

VersionReply::VersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.VersionReply)
}
VersionReply::VersionReply(const VersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:types.VersionReply)
}

inline void VersionReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

VersionReply::~VersionReply() {
  // @@protoc_insertion_point(destructor:types.VersionReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersionReply::ArenaDtor(void* object) {
  VersionReply* _this = reinterpret_cast< VersionReply* >(object);
  (void)_this;
}
void VersionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:types.VersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.VersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.VersionReply)
  return target;
}

size_t VersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.VersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionReply::GetClassData() const { return &_class_data_; }

void VersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VersionReply *>(to)->MergeFrom(
      static_cast<const VersionReply &>(from));
}


void VersionReply::MergeFrom(const VersionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.VersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionReply::CopyFrom(const VersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.VersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionReply::IsInitialized() const {
  return true;
}

void VersionReply::InternalSwap(VersionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionReply, patch_)
      + sizeof(VersionReply::patch_)
      - PROTOBUF_FIELD_OFFSET(VersionReply, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[6]);
}

// ===================================================================

class NodeInfoPorts::_Internal {
 public:
};

NodeInfoPorts::NodeInfoPorts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.NodeInfoPorts)
}
NodeInfoPorts::NodeInfoPorts(const NodeInfoPorts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&discovery_, &from.discovery_,
    static_cast<size_t>(reinterpret_cast<char*>(&listener_) -
    reinterpret_cast<char*>(&discovery_)) + sizeof(listener_));
  // @@protoc_insertion_point(copy_constructor:types.NodeInfoPorts)
}

inline void NodeInfoPorts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&discovery_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&listener_) -
    reinterpret_cast<char*>(&discovery_)) + sizeof(listener_));
}

NodeInfoPorts::~NodeInfoPorts() {
  // @@protoc_insertion_point(destructor:types.NodeInfoPorts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfoPorts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeInfoPorts::ArenaDtor(void* object) {
  NodeInfoPorts* _this = reinterpret_cast< NodeInfoPorts* >(object);
  (void)_this;
}
void NodeInfoPorts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfoPorts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfoPorts::Clear() {
// @@protoc_insertion_point(message_clear_start:types.NodeInfoPorts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&discovery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listener_) -
      reinterpret_cast<char*>(&discovery_)) + sizeof(listener_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfoPorts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 discovery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          discovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listener = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          listener_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInfoPorts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.NodeInfoPorts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 discovery = 1;
  if (this->_internal_discovery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_discovery(), target);
  }

  // uint32 listener = 2;
  if (this->_internal_listener() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_listener(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.NodeInfoPorts)
  return target;
}

size_t NodeInfoPorts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.NodeInfoPorts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 discovery = 1;
  if (this->_internal_discovery() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_discovery());
  }

  // uint32 listener = 2;
  if (this->_internal_listener() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_listener());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfoPorts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfoPorts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfoPorts::GetClassData() const { return &_class_data_; }

void NodeInfoPorts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeInfoPorts *>(to)->MergeFrom(
      static_cast<const NodeInfoPorts &>(from));
}


void NodeInfoPorts::MergeFrom(const NodeInfoPorts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.NodeInfoPorts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_discovery() != 0) {
    _internal_set_discovery(from._internal_discovery());
  }
  if (from._internal_listener() != 0) {
    _internal_set_listener(from._internal_listener());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfoPorts::CopyFrom(const NodeInfoPorts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.NodeInfoPorts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoPorts::IsInitialized() const {
  return true;
}

void NodeInfoPorts::InternalSwap(NodeInfoPorts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfoPorts, listener_)
      + sizeof(NodeInfoPorts::listener_)
      - PROTOBUF_FIELD_OFFSET(NodeInfoPorts, discovery_)>(
          reinterpret_cast<char*>(&discovery_),
          reinterpret_cast<char*>(&other->discovery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoPorts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[7]);
}

// ===================================================================

class NodeInfoReply::_Internal {
 public:
  static const ::types::NodeInfoPorts& ports(const NodeInfoReply* msg);
};

const ::types::NodeInfoPorts&
NodeInfoReply::_Internal::ports(const NodeInfoReply* msg) {
  return *msg->ports_;
}
NodeInfoReply::NodeInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:types.NodeInfoReply)
}
NodeInfoReply::NodeInfoReply(const NodeInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  enode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    enode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enode().empty()) {
    enode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enode(), 
      GetArenaForAllocation());
  }
  enr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    enr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enr().empty()) {
    enr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enr(), 
      GetArenaForAllocation());
  }
  listeneraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    listeneraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_listeneraddr().empty()) {
    listeneraddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_listeneraddr(), 
      GetArenaForAllocation());
  }
  protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocols().empty()) {
    protocols_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocols(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ports()) {
    ports_ = new ::types::NodeInfoPorts(*from.ports_);
  } else {
    ports_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.NodeInfoReply)
}

inline void NodeInfoReply::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  enode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  enr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
listeneraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  listeneraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ports_ = nullptr;
}

NodeInfoReply::~NodeInfoReply() {
  // @@protoc_insertion_point(destructor:types.NodeInfoReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listeneraddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ports_;
}

void NodeInfoReply::ArenaDtor(void* object) {
  NodeInfoReply* _this = reinterpret_cast< NodeInfoReply* >(object);
  (void)_this;
}
void NodeInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:types.NodeInfoReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  enode_.ClearToEmpty();
  enr_.ClearToEmpty();
  listeneraddr_.ClearToEmpty();
  protocols_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && ports_ != nullptr) {
    delete ports_;
  }
  ports_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_enode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.enode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_enr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.enr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.NodeInfoPorts ports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ports(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string listenerAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_listeneraddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.listenerAddr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes protocols = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_protocols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInfoReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.NodeInfoReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string enode = 3;
  if (!this->_internal_enode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enode().data(), static_cast<int>(this->_internal_enode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.enode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enode(), target);
  }

  // string enr = 4;
  if (!this->_internal_enr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enr().data(), static_cast<int>(this->_internal_enr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.enr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enr(), target);
  }

  // .types.NodeInfoPorts ports = 5;
  if (this->_internal_has_ports()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ports(this), target, stream);
  }

  // string listenerAddr = 6;
  if (!this->_internal_listeneraddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listeneraddr().data(), static_cast<int>(this->_internal_listeneraddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.listenerAddr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_listeneraddr(), target);
  }

  // bytes protocols = 7;
  if (!this->_internal_protocols().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_protocols(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.NodeInfoReply)
  return target;
}

size_t NodeInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.NodeInfoReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string enode = 3;
  if (!this->_internal_enode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enode());
  }

  // string enr = 4;
  if (!this->_internal_enr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enr());
  }

  // string listenerAddr = 6;
  if (!this->_internal_listeneraddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listeneraddr());
  }

  // bytes protocols = 7;
  if (!this->_internal_protocols().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_protocols());
  }

  // .types.NodeInfoPorts ports = 5;
  if (this->_internal_has_ports()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ports_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfoReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfoReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfoReply::GetClassData() const { return &_class_data_; }

void NodeInfoReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeInfoReply *>(to)->MergeFrom(
      static_cast<const NodeInfoReply &>(from));
}


void NodeInfoReply::MergeFrom(const NodeInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.NodeInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_enode().empty()) {
    _internal_set_enode(from._internal_enode());
  }
  if (!from._internal_enr().empty()) {
    _internal_set_enr(from._internal_enr());
  }
  if (!from._internal_listeneraddr().empty()) {
    _internal_set_listeneraddr(from._internal_listeneraddr());
  }
  if (!from._internal_protocols().empty()) {
    _internal_set_protocols(from._internal_protocols());
  }
  if (from._internal_has_ports()) {
    _internal_mutable_ports()->::types::NodeInfoPorts::MergeFrom(from._internal_ports());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfoReply::CopyFrom(const NodeInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.NodeInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoReply::IsInitialized() const {
  return true;
}

void NodeInfoReply::InternalSwap(NodeInfoReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enode_, lhs_arena,
      &other->enode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enr_, lhs_arena,
      &other->enr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &listeneraddr_, lhs_arena,
      &other->listeneraddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocols_, lhs_arena,
      &other->protocols_, rhs_arena
  );
  swap(ports_, other->ports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[8]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  service_major_version(kServiceMajorVersionFieldNumber, 0u);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  service_minor_version(kServiceMinorVersionFieldNumber, 0u);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  service_patch_version(kServicePatchVersionFieldNumber, 0u);

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::types::H128* Arena::CreateMaybeMessage< ::types::H128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H128 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H160* Arena::CreateMaybeMessage< ::types::H160 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H160 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H256* Arena::CreateMaybeMessage< ::types::H256 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H256 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H512* Arena::CreateMaybeMessage< ::types::H512 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H512 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H1024* Arena::CreateMaybeMessage< ::types::H1024 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H1024 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H2048* Arena::CreateMaybeMessage< ::types::H2048 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H2048 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::VersionReply* Arena::CreateMaybeMessage< ::types::VersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::VersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::types::NodeInfoPorts* Arena::CreateMaybeMessage< ::types::NodeInfoPorts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::NodeInfoPorts >(arena);
}
template<> PROTOBUF_NOINLINE ::types::NodeInfoReply* Arena::CreateMaybeMessage< ::types::NodeInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::NodeInfoReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
