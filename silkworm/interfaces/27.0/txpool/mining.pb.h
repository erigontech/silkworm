// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: txpool/mining.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_txpool_2fmining_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_txpool_2fmining_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_txpool_2fmining_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_txpool_2fmining_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_txpool_2fmining_2eproto;
namespace txpool {
class GetWorkReply;
struct GetWorkReplyDefaultTypeInternal;
extern GetWorkReplyDefaultTypeInternal _GetWorkReply_default_instance_;
class GetWorkRequest;
struct GetWorkRequestDefaultTypeInternal;
extern GetWorkRequestDefaultTypeInternal _GetWorkRequest_default_instance_;
class HashRateReply;
struct HashRateReplyDefaultTypeInternal;
extern HashRateReplyDefaultTypeInternal _HashRateReply_default_instance_;
class HashRateRequest;
struct HashRateRequestDefaultTypeInternal;
extern HashRateRequestDefaultTypeInternal _HashRateRequest_default_instance_;
class MiningReply;
struct MiningReplyDefaultTypeInternal;
extern MiningReplyDefaultTypeInternal _MiningReply_default_instance_;
class MiningRequest;
struct MiningRequestDefaultTypeInternal;
extern MiningRequestDefaultTypeInternal _MiningRequest_default_instance_;
class OnMinedBlockReply;
struct OnMinedBlockReplyDefaultTypeInternal;
extern OnMinedBlockReplyDefaultTypeInternal _OnMinedBlockReply_default_instance_;
class OnMinedBlockRequest;
struct OnMinedBlockRequestDefaultTypeInternal;
extern OnMinedBlockRequestDefaultTypeInternal _OnMinedBlockRequest_default_instance_;
class OnPendingBlockReply;
struct OnPendingBlockReplyDefaultTypeInternal;
extern OnPendingBlockReplyDefaultTypeInternal _OnPendingBlockReply_default_instance_;
class OnPendingBlockRequest;
struct OnPendingBlockRequestDefaultTypeInternal;
extern OnPendingBlockRequestDefaultTypeInternal _OnPendingBlockRequest_default_instance_;
class OnPendingLogsReply;
struct OnPendingLogsReplyDefaultTypeInternal;
extern OnPendingLogsReplyDefaultTypeInternal _OnPendingLogsReply_default_instance_;
class OnPendingLogsRequest;
struct OnPendingLogsRequestDefaultTypeInternal;
extern OnPendingLogsRequestDefaultTypeInternal _OnPendingLogsRequest_default_instance_;
class SubmitHashRateReply;
struct SubmitHashRateReplyDefaultTypeInternal;
extern SubmitHashRateReplyDefaultTypeInternal _SubmitHashRateReply_default_instance_;
class SubmitHashRateRequest;
struct SubmitHashRateRequestDefaultTypeInternal;
extern SubmitHashRateRequestDefaultTypeInternal _SubmitHashRateRequest_default_instance_;
class SubmitWorkReply;
struct SubmitWorkReplyDefaultTypeInternal;
extern SubmitWorkReplyDefaultTypeInternal _SubmitWorkReply_default_instance_;
class SubmitWorkRequest;
struct SubmitWorkRequestDefaultTypeInternal;
extern SubmitWorkRequestDefaultTypeInternal _SubmitWorkRequest_default_instance_;
}  // namespace txpool
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace txpool {

// ===================================================================


// -------------------------------------------------------------------

class SubmitWorkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.SubmitWorkRequest) */ {
 public:
  inline SubmitWorkRequest() : SubmitWorkRequest(nullptr) {}
  ~SubmitWorkRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitWorkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitWorkRequest(const SubmitWorkRequest& from) : SubmitWorkRequest(nullptr, from) {}
  inline SubmitWorkRequest(SubmitWorkRequest&& from) noexcept
      : SubmitWorkRequest(nullptr, std::move(from)) {}
  inline SubmitWorkRequest& operator=(const SubmitWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitWorkRequest& operator=(SubmitWorkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitWorkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitWorkRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitWorkRequest*>(
        &_SubmitWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SubmitWorkRequest& a, SubmitWorkRequest& b) { a.Swap(&b); }
  inline void Swap(SubmitWorkRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitWorkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitWorkRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SubmitWorkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitWorkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitWorkRequest& from) { SubmitWorkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubmitWorkRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.SubmitWorkRequest"; }

 protected:
  explicit SubmitWorkRequest(::google::protobuf::Arena* arena);
  SubmitWorkRequest(::google::protobuf::Arena* arena, const SubmitWorkRequest& from);
  SubmitWorkRequest(::google::protobuf::Arena* arena, SubmitWorkRequest&& from) noexcept
      : SubmitWorkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlockNonceFieldNumber = 1,
    kPowHashFieldNumber = 2,
    kDigestFieldNumber = 3,
  };
  // bytes block_nonce = 1;
  void clear_block_nonce() ;
  const std::string& block_nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_block_nonce();
  PROTOBUF_NODISCARD std::string* release_block_nonce();
  void set_allocated_block_nonce(std::string* value);

  private:
  const std::string& _internal_block_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_nonce(
      const std::string& value);
  std::string* _internal_mutable_block_nonce();

  public:
  // bytes pow_hash = 2;
  void clear_pow_hash() ;
  const std::string& pow_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pow_hash(Arg_&& arg, Args_... args);
  std::string* mutable_pow_hash();
  PROTOBUF_NODISCARD std::string* release_pow_hash();
  void set_allocated_pow_hash(std::string* value);

  private:
  const std::string& _internal_pow_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pow_hash(
      const std::string& value);
  std::string* _internal_mutable_pow_hash();

  public:
  // bytes digest = 3;
  void clear_digest() ;
  const std::string& digest() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_digest(Arg_&& arg, Args_... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* value);

  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(
      const std::string& value);
  std::string* _internal_mutable_digest();

  public:
  // @@protoc_insertion_point(class_scope:txpool.SubmitWorkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SubmitWorkRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitWorkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr block_nonce_;
    ::google::protobuf::internal::ArenaStringPtr pow_hash_;
    ::google::protobuf::internal::ArenaStringPtr digest_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class SubmitWorkReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.SubmitWorkReply) */ {
 public:
  inline SubmitWorkReply() : SubmitWorkReply(nullptr) {}
  ~SubmitWorkReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitWorkReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitWorkReply(const SubmitWorkReply& from) : SubmitWorkReply(nullptr, from) {}
  inline SubmitWorkReply(SubmitWorkReply&& from) noexcept
      : SubmitWorkReply(nullptr, std::move(from)) {}
  inline SubmitWorkReply& operator=(const SubmitWorkReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitWorkReply& operator=(SubmitWorkReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitWorkReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitWorkReply* internal_default_instance() {
    return reinterpret_cast<const SubmitWorkReply*>(
        &_SubmitWorkReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SubmitWorkReply& a, SubmitWorkReply& b) { a.Swap(&b); }
  inline void Swap(SubmitWorkReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitWorkReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitWorkReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SubmitWorkReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitWorkReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitWorkReply& from) { SubmitWorkReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubmitWorkReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.SubmitWorkReply"; }

 protected:
  explicit SubmitWorkReply(::google::protobuf::Arena* arena);
  SubmitWorkReply(::google::protobuf::Arena* arena, const SubmitWorkReply& from);
  SubmitWorkReply(::google::protobuf::Arena* arena, SubmitWorkReply&& from) noexcept
      : SubmitWorkReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.SubmitWorkReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SubmitWorkReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitWorkReply& from_msg);
    bool ok_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class SubmitHashRateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.SubmitHashRateRequest) */ {
 public:
  inline SubmitHashRateRequest() : SubmitHashRateRequest(nullptr) {}
  ~SubmitHashRateRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitHashRateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitHashRateRequest(const SubmitHashRateRequest& from) : SubmitHashRateRequest(nullptr, from) {}
  inline SubmitHashRateRequest(SubmitHashRateRequest&& from) noexcept
      : SubmitHashRateRequest(nullptr, std::move(from)) {}
  inline SubmitHashRateRequest& operator=(const SubmitHashRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitHashRateRequest& operator=(SubmitHashRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitHashRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitHashRateRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitHashRateRequest*>(
        &_SubmitHashRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SubmitHashRateRequest& a, SubmitHashRateRequest& b) { a.Swap(&b); }
  inline void Swap(SubmitHashRateRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitHashRateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitHashRateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SubmitHashRateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitHashRateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitHashRateRequest& from) { SubmitHashRateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubmitHashRateRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.SubmitHashRateRequest"; }

 protected:
  explicit SubmitHashRateRequest(::google::protobuf::Arena* arena);
  SubmitHashRateRequest(::google::protobuf::Arena* arena, const SubmitHashRateRequest& from);
  SubmitHashRateRequest(::google::protobuf::Arena* arena, SubmitHashRateRequest&& from) noexcept
      : SubmitHashRateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 2,
    kRateFieldNumber = 1,
  };
  // bytes id = 2;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // uint64 rate = 1;
  void clear_rate() ;
  ::uint64_t rate() const;
  void set_rate(::uint64_t value);

  private:
  ::uint64_t _internal_rate() const;
  void _internal_set_rate(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.SubmitHashRateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SubmitHashRateRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitHashRateRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::uint64_t rate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class SubmitHashRateReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.SubmitHashRateReply) */ {
 public:
  inline SubmitHashRateReply() : SubmitHashRateReply(nullptr) {}
  ~SubmitHashRateReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubmitHashRateReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubmitHashRateReply(const SubmitHashRateReply& from) : SubmitHashRateReply(nullptr, from) {}
  inline SubmitHashRateReply(SubmitHashRateReply&& from) noexcept
      : SubmitHashRateReply(nullptr, std::move(from)) {}
  inline SubmitHashRateReply& operator=(const SubmitHashRateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitHashRateReply& operator=(SubmitHashRateReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitHashRateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitHashRateReply* internal_default_instance() {
    return reinterpret_cast<const SubmitHashRateReply*>(
        &_SubmitHashRateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SubmitHashRateReply& a, SubmitHashRateReply& b) { a.Swap(&b); }
  inline void Swap(SubmitHashRateReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitHashRateReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitHashRateReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SubmitHashRateReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubmitHashRateReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubmitHashRateReply& from) { SubmitHashRateReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubmitHashRateReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.SubmitHashRateReply"; }

 protected:
  explicit SubmitHashRateReply(::google::protobuf::Arena* arena);
  SubmitHashRateReply(::google::protobuf::Arena* arena, const SubmitHashRateReply& from);
  SubmitHashRateReply(::google::protobuf::Arena* arena, SubmitHashRateReply&& from) noexcept
      : SubmitHashRateReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.SubmitHashRateReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SubmitHashRateReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubmitHashRateReply& from_msg);
    bool ok_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnPendingLogsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.OnPendingLogsRequest) */ {
 public:
  inline OnPendingLogsRequest() : OnPendingLogsRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnPendingLogsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnPendingLogsRequest(const OnPendingLogsRequest& from) : OnPendingLogsRequest(nullptr, from) {}
  inline OnPendingLogsRequest(OnPendingLogsRequest&& from) noexcept
      : OnPendingLogsRequest(nullptr, std::move(from)) {}
  inline OnPendingLogsRequest& operator=(const OnPendingLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingLogsRequest& operator=(OnPendingLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnPendingLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnPendingLogsRequest* internal_default_instance() {
    return reinterpret_cast<const OnPendingLogsRequest*>(
        &_OnPendingLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(OnPendingLogsRequest& a, OnPendingLogsRequest& b) { a.Swap(&b); }
  inline void Swap(OnPendingLogsRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingLogsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnPendingLogsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<OnPendingLogsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnPendingLogsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnPendingLogsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnPendingLogsRequest"; }

 protected:
  explicit OnPendingLogsRequest(::google::protobuf::Arena* arena);
  OnPendingLogsRequest(::google::protobuf::Arena* arena, const OnPendingLogsRequest& from);
  OnPendingLogsRequest(::google::protobuf::Arena* arena, OnPendingLogsRequest&& from) noexcept
      : OnPendingLogsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.OnPendingLogsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnPendingLogsRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnPendingLogsRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnPendingLogsReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.OnPendingLogsReply) */ {
 public:
  inline OnPendingLogsReply() : OnPendingLogsReply(nullptr) {}
  ~OnPendingLogsReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnPendingLogsReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnPendingLogsReply(const OnPendingLogsReply& from) : OnPendingLogsReply(nullptr, from) {}
  inline OnPendingLogsReply(OnPendingLogsReply&& from) noexcept
      : OnPendingLogsReply(nullptr, std::move(from)) {}
  inline OnPendingLogsReply& operator=(const OnPendingLogsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingLogsReply& operator=(OnPendingLogsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnPendingLogsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnPendingLogsReply* internal_default_instance() {
    return reinterpret_cast<const OnPendingLogsReply*>(
        &_OnPendingLogsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(OnPendingLogsReply& a, OnPendingLogsReply& b) { a.Swap(&b); }
  inline void Swap(OnPendingLogsReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingLogsReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnPendingLogsReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OnPendingLogsReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OnPendingLogsReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OnPendingLogsReply& from) { OnPendingLogsReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OnPendingLogsReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnPendingLogsReply"; }

 protected:
  explicit OnPendingLogsReply(::google::protobuf::Arena* arena);
  OnPendingLogsReply(::google::protobuf::Arena* arena, const OnPendingLogsReply& from);
  OnPendingLogsReply(::google::protobuf::Arena* arena, OnPendingLogsReply&& from) noexcept
      : OnPendingLogsReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRplLogsFieldNumber = 1,
  };
  // bytes rpl_logs = 1;
  void clear_rpl_logs() ;
  const std::string& rpl_logs() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpl_logs(Arg_&& arg, Args_... args);
  std::string* mutable_rpl_logs();
  PROTOBUF_NODISCARD std::string* release_rpl_logs();
  void set_allocated_rpl_logs(std::string* value);

  private:
  const std::string& _internal_rpl_logs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpl_logs(
      const std::string& value);
  std::string* _internal_mutable_rpl_logs();

  public:
  // @@protoc_insertion_point(class_scope:txpool.OnPendingLogsReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnPendingLogsReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnPendingLogsReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr rpl_logs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnPendingBlockRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.OnPendingBlockRequest) */ {
 public:
  inline OnPendingBlockRequest() : OnPendingBlockRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnPendingBlockRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnPendingBlockRequest(const OnPendingBlockRequest& from) : OnPendingBlockRequest(nullptr, from) {}
  inline OnPendingBlockRequest(OnPendingBlockRequest&& from) noexcept
      : OnPendingBlockRequest(nullptr, std::move(from)) {}
  inline OnPendingBlockRequest& operator=(const OnPendingBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingBlockRequest& operator=(OnPendingBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnPendingBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnPendingBlockRequest* internal_default_instance() {
    return reinterpret_cast<const OnPendingBlockRequest*>(
        &_OnPendingBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OnPendingBlockRequest& a, OnPendingBlockRequest& b) { a.Swap(&b); }
  inline void Swap(OnPendingBlockRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingBlockRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnPendingBlockRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<OnPendingBlockRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnPendingBlockRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnPendingBlockRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnPendingBlockRequest"; }

 protected:
  explicit OnPendingBlockRequest(::google::protobuf::Arena* arena);
  OnPendingBlockRequest(::google::protobuf::Arena* arena, const OnPendingBlockRequest& from);
  OnPendingBlockRequest(::google::protobuf::Arena* arena, OnPendingBlockRequest&& from) noexcept
      : OnPendingBlockRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.OnPendingBlockRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnPendingBlockRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnPendingBlockRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnPendingBlockReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.OnPendingBlockReply) */ {
 public:
  inline OnPendingBlockReply() : OnPendingBlockReply(nullptr) {}
  ~OnPendingBlockReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnPendingBlockReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnPendingBlockReply(const OnPendingBlockReply& from) : OnPendingBlockReply(nullptr, from) {}
  inline OnPendingBlockReply(OnPendingBlockReply&& from) noexcept
      : OnPendingBlockReply(nullptr, std::move(from)) {}
  inline OnPendingBlockReply& operator=(const OnPendingBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingBlockReply& operator=(OnPendingBlockReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnPendingBlockReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnPendingBlockReply* internal_default_instance() {
    return reinterpret_cast<const OnPendingBlockReply*>(
        &_OnPendingBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(OnPendingBlockReply& a, OnPendingBlockReply& b) { a.Swap(&b); }
  inline void Swap(OnPendingBlockReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingBlockReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnPendingBlockReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OnPendingBlockReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OnPendingBlockReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OnPendingBlockReply& from) { OnPendingBlockReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OnPendingBlockReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnPendingBlockReply"; }

 protected:
  explicit OnPendingBlockReply(::google::protobuf::Arena* arena);
  OnPendingBlockReply(::google::protobuf::Arena* arena, const OnPendingBlockReply& from);
  OnPendingBlockReply(::google::protobuf::Arena* arena, OnPendingBlockReply&& from) noexcept
      : OnPendingBlockReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRplBlockFieldNumber = 1,
  };
  // bytes rpl_block = 1;
  void clear_rpl_block() ;
  const std::string& rpl_block() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpl_block(Arg_&& arg, Args_... args);
  std::string* mutable_rpl_block();
  PROTOBUF_NODISCARD std::string* release_rpl_block();
  void set_allocated_rpl_block(std::string* value);

  private:
  const std::string& _internal_rpl_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpl_block(
      const std::string& value);
  std::string* _internal_mutable_rpl_block();

  public:
  // @@protoc_insertion_point(class_scope:txpool.OnPendingBlockReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnPendingBlockReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnPendingBlockReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr rpl_block_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnMinedBlockRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.OnMinedBlockRequest) */ {
 public:
  inline OnMinedBlockRequest() : OnMinedBlockRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnMinedBlockRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnMinedBlockRequest(const OnMinedBlockRequest& from) : OnMinedBlockRequest(nullptr, from) {}
  inline OnMinedBlockRequest(OnMinedBlockRequest&& from) noexcept
      : OnMinedBlockRequest(nullptr, std::move(from)) {}
  inline OnMinedBlockRequest& operator=(const OnMinedBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnMinedBlockRequest& operator=(OnMinedBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnMinedBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnMinedBlockRequest* internal_default_instance() {
    return reinterpret_cast<const OnMinedBlockRequest*>(
        &_OnMinedBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(OnMinedBlockRequest& a, OnMinedBlockRequest& b) { a.Swap(&b); }
  inline void Swap(OnMinedBlockRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnMinedBlockRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnMinedBlockRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<OnMinedBlockRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnMinedBlockRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnMinedBlockRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnMinedBlockRequest"; }

 protected:
  explicit OnMinedBlockRequest(::google::protobuf::Arena* arena);
  OnMinedBlockRequest(::google::protobuf::Arena* arena, const OnMinedBlockRequest& from);
  OnMinedBlockRequest(::google::protobuf::Arena* arena, OnMinedBlockRequest&& from) noexcept
      : OnMinedBlockRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.OnMinedBlockRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnMinedBlockRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnMinedBlockRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnMinedBlockReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.OnMinedBlockReply) */ {
 public:
  inline OnMinedBlockReply() : OnMinedBlockReply(nullptr) {}
  ~OnMinedBlockReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnMinedBlockReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnMinedBlockReply(const OnMinedBlockReply& from) : OnMinedBlockReply(nullptr, from) {}
  inline OnMinedBlockReply(OnMinedBlockReply&& from) noexcept
      : OnMinedBlockReply(nullptr, std::move(from)) {}
  inline OnMinedBlockReply& operator=(const OnMinedBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnMinedBlockReply& operator=(OnMinedBlockReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnMinedBlockReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnMinedBlockReply* internal_default_instance() {
    return reinterpret_cast<const OnMinedBlockReply*>(
        &_OnMinedBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(OnMinedBlockReply& a, OnMinedBlockReply& b) { a.Swap(&b); }
  inline void Swap(OnMinedBlockReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnMinedBlockReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnMinedBlockReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OnMinedBlockReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OnMinedBlockReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OnMinedBlockReply& from) { OnMinedBlockReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OnMinedBlockReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnMinedBlockReply"; }

 protected:
  explicit OnMinedBlockReply(::google::protobuf::Arena* arena);
  OnMinedBlockReply(::google::protobuf::Arena* arena, const OnMinedBlockReply& from);
  OnMinedBlockReply(::google::protobuf::Arena* arena, OnMinedBlockReply&& from) noexcept
      : OnMinedBlockReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRplBlockFieldNumber = 1,
  };
  // bytes rpl_block = 1;
  void clear_rpl_block() ;
  const std::string& rpl_block() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpl_block(Arg_&& arg, Args_... args);
  std::string* mutable_rpl_block();
  PROTOBUF_NODISCARD std::string* release_rpl_block();
  void set_allocated_rpl_block(std::string* value);

  private:
  const std::string& _internal_rpl_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpl_block(
      const std::string& value);
  std::string* _internal_mutable_rpl_block();

  public:
  // @@protoc_insertion_point(class_scope:txpool.OnMinedBlockReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnMinedBlockReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnMinedBlockReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr rpl_block_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class MiningRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.MiningRequest) */ {
 public:
  inline MiningRequest() : MiningRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MiningRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MiningRequest(const MiningRequest& from) : MiningRequest(nullptr, from) {}
  inline MiningRequest(MiningRequest&& from) noexcept
      : MiningRequest(nullptr, std::move(from)) {}
  inline MiningRequest& operator=(const MiningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiningRequest& operator=(MiningRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiningRequest* internal_default_instance() {
    return reinterpret_cast<const MiningRequest*>(
        &_MiningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(MiningRequest& a, MiningRequest& b) { a.Swap(&b); }
  inline void Swap(MiningRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiningRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiningRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MiningRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MiningRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MiningRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.MiningRequest"; }

 protected:
  explicit MiningRequest(::google::protobuf::Arena* arena);
  MiningRequest(::google::protobuf::Arena* arena, const MiningRequest& from);
  MiningRequest(::google::protobuf::Arena* arena, MiningRequest&& from) noexcept
      : MiningRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.MiningRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MiningRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MiningRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class MiningReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.MiningReply) */ {
 public:
  inline MiningReply() : MiningReply(nullptr) {}
  ~MiningReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MiningReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline MiningReply(const MiningReply& from) : MiningReply(nullptr, from) {}
  inline MiningReply(MiningReply&& from) noexcept
      : MiningReply(nullptr, std::move(from)) {}
  inline MiningReply& operator=(const MiningReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiningReply& operator=(MiningReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiningReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiningReply* internal_default_instance() {
    return reinterpret_cast<const MiningReply*>(
        &_MiningReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(MiningReply& a, MiningReply& b) { a.Swap(&b); }
  inline void Swap(MiningReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiningReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiningReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MiningReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MiningReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MiningReply& from) { MiningReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MiningReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.MiningReply"; }

 protected:
  explicit MiningReply(::google::protobuf::Arena* arena);
  MiningReply(::google::protobuf::Arena* arena, const MiningReply& from);
  MiningReply(::google::protobuf::Arena* arena, MiningReply&& from) noexcept
      : MiningReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnabledFieldNumber = 1,
    kRunningFieldNumber = 2,
  };
  // bool enabled = 1;
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // bool running = 2;
  void clear_running() ;
  bool running() const;
  void set_running(bool value);

  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.MiningReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MiningReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MiningReply& from_msg);
    bool enabled_;
    bool running_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class HashRateRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.HashRateRequest) */ {
 public:
  inline HashRateRequest() : HashRateRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HashRateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HashRateRequest(const HashRateRequest& from) : HashRateRequest(nullptr, from) {}
  inline HashRateRequest(HashRateRequest&& from) noexcept
      : HashRateRequest(nullptr, std::move(from)) {}
  inline HashRateRequest& operator=(const HashRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashRateRequest& operator=(HashRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashRateRequest* internal_default_instance() {
    return reinterpret_cast<const HashRateRequest*>(
        &_HashRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(HashRateRequest& a, HashRateRequest& b) { a.Swap(&b); }
  inline void Swap(HashRateRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashRateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashRateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<HashRateRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HashRateRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HashRateRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.HashRateRequest"; }

 protected:
  explicit HashRateRequest(::google::protobuf::Arena* arena);
  HashRateRequest(::google::protobuf::Arena* arena, const HashRateRequest& from);
  HashRateRequest(::google::protobuf::Arena* arena, HashRateRequest&& from) noexcept
      : HashRateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.HashRateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HashRateRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HashRateRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class HashRateReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.HashRateReply) */ {
 public:
  inline HashRateReply() : HashRateReply(nullptr) {}
  ~HashRateReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HashRateReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline HashRateReply(const HashRateReply& from) : HashRateReply(nullptr, from) {}
  inline HashRateReply(HashRateReply&& from) noexcept
      : HashRateReply(nullptr, std::move(from)) {}
  inline HashRateReply& operator=(const HashRateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashRateReply& operator=(HashRateReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashRateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashRateReply* internal_default_instance() {
    return reinterpret_cast<const HashRateReply*>(
        &_HashRateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(HashRateReply& a, HashRateReply& b) { a.Swap(&b); }
  inline void Swap(HashRateReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashRateReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashRateReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<HashRateReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HashRateReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HashRateReply& from) { HashRateReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HashRateReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.HashRateReply"; }

 protected:
  explicit HashRateReply(::google::protobuf::Arena* arena);
  HashRateReply(::google::protobuf::Arena* arena, const HashRateReply& from);
  HashRateReply(::google::protobuf::Arena* arena, HashRateReply&& from) noexcept
      : HashRateReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashRateFieldNumber = 1,
  };
  // uint64 hash_rate = 1;
  void clear_hash_rate() ;
  ::uint64_t hash_rate() const;
  void set_hash_rate(::uint64_t value);

  private:
  ::uint64_t _internal_hash_rate() const;
  void _internal_set_hash_rate(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.HashRateReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HashRateReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HashRateReply& from_msg);
    ::uint64_t hash_rate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class GetWorkRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.GetWorkRequest) */ {
 public:
  inline GetWorkRequest() : GetWorkRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetWorkRequest(const GetWorkRequest& from) : GetWorkRequest(nullptr, from) {}
  inline GetWorkRequest(GetWorkRequest&& from) noexcept
      : GetWorkRequest(nullptr, std::move(from)) {}
  inline GetWorkRequest& operator=(const GetWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkRequest& operator=(GetWorkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorkRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkRequest*>(
        &_GetWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetWorkRequest& a, GetWorkRequest& b) { a.Swap(&b); }
  inline void Swap(GetWorkRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorkRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetWorkRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetWorkRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetWorkRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.GetWorkRequest"; }

 protected:
  explicit GetWorkRequest(::google::protobuf::Arena* arena);
  GetWorkRequest(::google::protobuf::Arena* arena, const GetWorkRequest& from);
  GetWorkRequest(::google::protobuf::Arena* arena, GetWorkRequest&& from) noexcept
      : GetWorkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.GetWorkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetWorkRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetWorkRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class GetWorkReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.GetWorkReply) */ {
 public:
  inline GetWorkReply() : GetWorkReply(nullptr) {}
  ~GetWorkReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorkReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetWorkReply(const GetWorkReply& from) : GetWorkReply(nullptr, from) {}
  inline GetWorkReply(GetWorkReply&& from) noexcept
      : GetWorkReply(nullptr, std::move(from)) {}
  inline GetWorkReply& operator=(const GetWorkReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkReply& operator=(GetWorkReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorkReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorkReply* internal_default_instance() {
    return reinterpret_cast<const GetWorkReply*>(
        &_GetWorkReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GetWorkReply& a, GetWorkReply& b) { a.Swap(&b); }
  inline void Swap(GetWorkReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorkReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetWorkReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetWorkReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetWorkReply& from) { GetWorkReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetWorkReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.GetWorkReply"; }

 protected:
  explicit GetWorkReply(::google::protobuf::Arena* arena);
  GetWorkReply(::google::protobuf::Arena* arena, const GetWorkReply& from);
  GetWorkReply(::google::protobuf::Arena* arena, GetWorkReply&& from) noexcept
      : GetWorkReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderHashFieldNumber = 1,
    kSeedHashFieldNumber = 2,
    kTargetFieldNumber = 3,
    kBlockNumberFieldNumber = 4,
  };
  // string header_hash = 1;
  void clear_header_hash() ;
  const std::string& header_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header_hash(Arg_&& arg, Args_... args);
  std::string* mutable_header_hash();
  PROTOBUF_NODISCARD std::string* release_header_hash();
  void set_allocated_header_hash(std::string* value);

  private:
  const std::string& _internal_header_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_hash(
      const std::string& value);
  std::string* _internal_mutable_header_hash();

  public:
  // string seed_hash = 2;
  void clear_seed_hash() ;
  const std::string& seed_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_seed_hash(Arg_&& arg, Args_... args);
  std::string* mutable_seed_hash();
  PROTOBUF_NODISCARD std::string* release_seed_hash();
  void set_allocated_seed_hash(std::string* value);

  private:
  const std::string& _internal_seed_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seed_hash(
      const std::string& value);
  std::string* _internal_mutable_seed_hash();

  public:
  // string target = 3;
  void clear_target() ;
  const std::string& target() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target(Arg_&& arg, Args_... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* value);

  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(
      const std::string& value);
  std::string* _internal_mutable_target();

  public:
  // string block_number = 4;
  void clear_block_number() ;
  const std::string& block_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_number(Arg_&& arg, Args_... args);
  std::string* mutable_block_number();
  PROTOBUF_NODISCARD std::string* release_block_number();
  void set_allocated_block_number(std::string* value);

  private:
  const std::string& _internal_block_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_number(
      const std::string& value);
  std::string* _internal_mutable_block_number();

  public:
  // @@protoc_insertion_point(class_scope:txpool.GetWorkReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      66, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetWorkReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetWorkReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr header_hash_;
    ::google::protobuf::internal::ArenaStringPtr seed_hash_;
    ::google::protobuf::internal::ArenaStringPtr target_;
    ::google::protobuf::internal::ArenaStringPtr block_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OnPendingBlockRequest

// -------------------------------------------------------------------

// OnPendingBlockReply

// bytes rpl_block = 1;
inline void OnPendingBlockReply::clear_rpl_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.ClearToEmpty();
}
inline const std::string& OnPendingBlockReply::rpl_block() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.OnPendingBlockReply.rpl_block)
  return _internal_rpl_block();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OnPendingBlockReply::set_rpl_block(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.OnPendingBlockReply.rpl_block)
}
inline std::string* OnPendingBlockReply::mutable_rpl_block() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpl_block();
  // @@protoc_insertion_point(field_mutable:txpool.OnPendingBlockReply.rpl_block)
  return _s;
}
inline const std::string& OnPendingBlockReply::_internal_rpl_block() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpl_block_.Get();
}
inline void OnPendingBlockReply::_internal_set_rpl_block(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.Set(value, GetArena());
}
inline std::string* OnPendingBlockReply::_internal_mutable_rpl_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rpl_block_.Mutable( GetArena());
}
inline std::string* OnPendingBlockReply::release_rpl_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.OnPendingBlockReply.rpl_block)
  return _impl_.rpl_block_.Release();
}
inline void OnPendingBlockReply::set_allocated_rpl_block(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpl_block_.IsDefault()) {
          _impl_.rpl_block_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.OnPendingBlockReply.rpl_block)
}

// -------------------------------------------------------------------

// OnMinedBlockRequest

// -------------------------------------------------------------------

// OnMinedBlockReply

// bytes rpl_block = 1;
inline void OnMinedBlockReply::clear_rpl_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.ClearToEmpty();
}
inline const std::string& OnMinedBlockReply::rpl_block() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.OnMinedBlockReply.rpl_block)
  return _internal_rpl_block();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OnMinedBlockReply::set_rpl_block(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.OnMinedBlockReply.rpl_block)
}
inline std::string* OnMinedBlockReply::mutable_rpl_block() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpl_block();
  // @@protoc_insertion_point(field_mutable:txpool.OnMinedBlockReply.rpl_block)
  return _s;
}
inline const std::string& OnMinedBlockReply::_internal_rpl_block() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpl_block_.Get();
}
inline void OnMinedBlockReply::_internal_set_rpl_block(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.Set(value, GetArena());
}
inline std::string* OnMinedBlockReply::_internal_mutable_rpl_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rpl_block_.Mutable( GetArena());
}
inline std::string* OnMinedBlockReply::release_rpl_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.OnMinedBlockReply.rpl_block)
  return _impl_.rpl_block_.Release();
}
inline void OnMinedBlockReply::set_allocated_rpl_block(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_block_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpl_block_.IsDefault()) {
          _impl_.rpl_block_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.OnMinedBlockReply.rpl_block)
}

// -------------------------------------------------------------------

// OnPendingLogsRequest

// -------------------------------------------------------------------

// OnPendingLogsReply

// bytes rpl_logs = 1;
inline void OnPendingLogsReply::clear_rpl_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_logs_.ClearToEmpty();
}
inline const std::string& OnPendingLogsReply::rpl_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.OnPendingLogsReply.rpl_logs)
  return _internal_rpl_logs();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OnPendingLogsReply::set_rpl_logs(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_logs_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.OnPendingLogsReply.rpl_logs)
}
inline std::string* OnPendingLogsReply::mutable_rpl_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpl_logs();
  // @@protoc_insertion_point(field_mutable:txpool.OnPendingLogsReply.rpl_logs)
  return _s;
}
inline const std::string& OnPendingLogsReply::_internal_rpl_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpl_logs_.Get();
}
inline void OnPendingLogsReply::_internal_set_rpl_logs(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_logs_.Set(value, GetArena());
}
inline std::string* OnPendingLogsReply::_internal_mutable_rpl_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rpl_logs_.Mutable( GetArena());
}
inline std::string* OnPendingLogsReply::release_rpl_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.OnPendingLogsReply.rpl_logs)
  return _impl_.rpl_logs_.Release();
}
inline void OnPendingLogsReply::set_allocated_rpl_logs(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_logs_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpl_logs_.IsDefault()) {
          _impl_.rpl_logs_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.OnPendingLogsReply.rpl_logs)
}

// -------------------------------------------------------------------

// GetWorkRequest

// -------------------------------------------------------------------

// GetWorkReply

// string header_hash = 1;
inline void GetWorkReply::clear_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_hash_.ClearToEmpty();
}
inline const std::string& GetWorkReply::header_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.header_hash)
  return _internal_header_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetWorkReply::set_header_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.header_hash)
}
inline std::string* GetWorkReply::mutable_header_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_header_hash();
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.header_hash)
  return _s;
}
inline const std::string& GetWorkReply::_internal_header_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_hash_.Get();
}
inline void GetWorkReply::_internal_set_header_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_hash_.Set(value, GetArena());
}
inline std::string* GetWorkReply::_internal_mutable_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.header_hash_.Mutable( GetArena());
}
inline std::string* GetWorkReply::release_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.header_hash)
  return _impl_.header_hash_.Release();
}
inline void GetWorkReply::set_allocated_header_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_hash_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_hash_.IsDefault()) {
          _impl_.header_hash_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.header_hash)
}

// string seed_hash = 2;
inline void GetWorkReply::clear_seed_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seed_hash_.ClearToEmpty();
}
inline const std::string& GetWorkReply::seed_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.seed_hash)
  return _internal_seed_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetWorkReply::set_seed_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seed_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.seed_hash)
}
inline std::string* GetWorkReply::mutable_seed_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_seed_hash();
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.seed_hash)
  return _s;
}
inline const std::string& GetWorkReply::_internal_seed_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seed_hash_.Get();
}
inline void GetWorkReply::_internal_set_seed_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seed_hash_.Set(value, GetArena());
}
inline std::string* GetWorkReply::_internal_mutable_seed_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.seed_hash_.Mutable( GetArena());
}
inline std::string* GetWorkReply::release_seed_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.seed_hash)
  return _impl_.seed_hash_.Release();
}
inline void GetWorkReply::set_allocated_seed_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seed_hash_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.seed_hash_.IsDefault()) {
          _impl_.seed_hash_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.seed_hash)
}

// string target = 3;
inline void GetWorkReply::clear_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_.ClearToEmpty();
}
inline const std::string& GetWorkReply::target() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.target)
  return _internal_target();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetWorkReply::set_target(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.target)
}
inline std::string* GetWorkReply::mutable_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.target)
  return _s;
}
inline const std::string& GetWorkReply::_internal_target() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_.Get();
}
inline void GetWorkReply::_internal_set_target(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_.Set(value, GetArena());
}
inline std::string* GetWorkReply::_internal_mutable_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_.Mutable( GetArena());
}
inline std::string* GetWorkReply::release_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.target)
  return _impl_.target_.Release();
}
inline void GetWorkReply::set_allocated_target(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_.IsDefault()) {
          _impl_.target_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.target)
}

// string block_number = 4;
inline void GetWorkReply::clear_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.ClearToEmpty();
}
inline const std::string& GetWorkReply::block_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.block_number)
  return _internal_block_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetWorkReply::set_block_number(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.block_number)
}
inline std::string* GetWorkReply::mutable_block_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_number();
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.block_number)
  return _s;
}
inline const std::string& GetWorkReply::_internal_block_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_number_.Get();
}
inline void GetWorkReply::_internal_set_block_number(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.Set(value, GetArena());
}
inline std::string* GetWorkReply::_internal_mutable_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_number_.Mutable( GetArena());
}
inline std::string* GetWorkReply::release_block_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.block_number)
  return _impl_.block_number_.Release();
}
inline void GetWorkReply::set_allocated_block_number(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_number_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.block_number_.IsDefault()) {
          _impl_.block_number_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.block_number)
}

// -------------------------------------------------------------------

// SubmitWorkRequest

// bytes block_nonce = 1;
inline void SubmitWorkRequest::clear_block_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_nonce_.ClearToEmpty();
}
inline const std::string& SubmitWorkRequest::block_nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkRequest.block_nonce)
  return _internal_block_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitWorkRequest::set_block_nonce(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_nonce_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkRequest.block_nonce)
}
inline std::string* SubmitWorkRequest::mutable_block_nonce() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_nonce();
  // @@protoc_insertion_point(field_mutable:txpool.SubmitWorkRequest.block_nonce)
  return _s;
}
inline const std::string& SubmitWorkRequest::_internal_block_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_nonce_.Get();
}
inline void SubmitWorkRequest::_internal_set_block_nonce(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_nonce_.Set(value, GetArena());
}
inline std::string* SubmitWorkRequest::_internal_mutable_block_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_nonce_.Mutable( GetArena());
}
inline std::string* SubmitWorkRequest::release_block_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.SubmitWorkRequest.block_nonce)
  return _impl_.block_nonce_.Release();
}
inline void SubmitWorkRequest::set_allocated_block_nonce(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_nonce_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.block_nonce_.IsDefault()) {
          _impl_.block_nonce_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitWorkRequest.block_nonce)
}

// bytes pow_hash = 2;
inline void SubmitWorkRequest::clear_pow_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pow_hash_.ClearToEmpty();
}
inline const std::string& SubmitWorkRequest::pow_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkRequest.pow_hash)
  return _internal_pow_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitWorkRequest::set_pow_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pow_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkRequest.pow_hash)
}
inline std::string* SubmitWorkRequest::mutable_pow_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pow_hash();
  // @@protoc_insertion_point(field_mutable:txpool.SubmitWorkRequest.pow_hash)
  return _s;
}
inline const std::string& SubmitWorkRequest::_internal_pow_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pow_hash_.Get();
}
inline void SubmitWorkRequest::_internal_set_pow_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pow_hash_.Set(value, GetArena());
}
inline std::string* SubmitWorkRequest::_internal_mutable_pow_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.pow_hash_.Mutable( GetArena());
}
inline std::string* SubmitWorkRequest::release_pow_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.SubmitWorkRequest.pow_hash)
  return _impl_.pow_hash_.Release();
}
inline void SubmitWorkRequest::set_allocated_pow_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pow_hash_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pow_hash_.IsDefault()) {
          _impl_.pow_hash_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitWorkRequest.pow_hash)
}

// bytes digest = 3;
inline void SubmitWorkRequest::clear_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.ClearToEmpty();
}
inline const std::string& SubmitWorkRequest::digest() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkRequest.digest)
  return _internal_digest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitWorkRequest::set_digest(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkRequest.digest)
}
inline std::string* SubmitWorkRequest::mutable_digest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:txpool.SubmitWorkRequest.digest)
  return _s;
}
inline const std::string& SubmitWorkRequest::_internal_digest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.digest_.Get();
}
inline void SubmitWorkRequest::_internal_set_digest(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.Set(value, GetArena());
}
inline std::string* SubmitWorkRequest::_internal_mutable_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.digest_.Mutable( GetArena());
}
inline std::string* SubmitWorkRequest::release_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.SubmitWorkRequest.digest)
  return _impl_.digest_.Release();
}
inline void SubmitWorkRequest::set_allocated_digest(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.digest_.IsDefault()) {
          _impl_.digest_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitWorkRequest.digest)
}

// -------------------------------------------------------------------

// SubmitWorkReply

// bool ok = 1;
inline void SubmitWorkReply::clear_ok() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = false;
}
inline bool SubmitWorkReply::ok() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkReply.ok)
  return _internal_ok();
}
inline void SubmitWorkReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkReply.ok)
}
inline bool SubmitWorkReply::_internal_ok() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ok_;
}
inline void SubmitWorkReply::_internal_set_ok(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = value;
}

// -------------------------------------------------------------------

// SubmitHashRateRequest

// uint64 rate = 1;
inline void SubmitHashRateRequest::clear_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_ = ::uint64_t{0u};
}
inline ::uint64_t SubmitHashRateRequest::rate() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitHashRateRequest.rate)
  return _internal_rate();
}
inline void SubmitHashRateRequest::set_rate(::uint64_t value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitHashRateRequest.rate)
}
inline ::uint64_t SubmitHashRateRequest::_internal_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_;
}
inline void SubmitHashRateRequest::_internal_set_rate(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_ = value;
}

// bytes id = 2;
inline void SubmitHashRateRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SubmitHashRateRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.SubmitHashRateRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubmitHashRateRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.SubmitHashRateRequest.id)
}
inline std::string* SubmitHashRateRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:txpool.SubmitHashRateRequest.id)
  return _s;
}
inline const std::string& SubmitHashRateRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void SubmitHashRateRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* SubmitHashRateRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* SubmitHashRateRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.SubmitHashRateRequest.id)
  return _impl_.id_.Release();
}
inline void SubmitHashRateRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitHashRateRequest.id)
}

// -------------------------------------------------------------------

// SubmitHashRateReply

// bool ok = 1;
inline void SubmitHashRateReply::clear_ok() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = false;
}
inline bool SubmitHashRateReply::ok() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitHashRateReply.ok)
  return _internal_ok();
}
inline void SubmitHashRateReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitHashRateReply.ok)
}
inline bool SubmitHashRateReply::_internal_ok() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ok_;
}
inline void SubmitHashRateReply::_internal_set_ok(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = value;
}

// -------------------------------------------------------------------

// HashRateRequest

// -------------------------------------------------------------------

// HashRateReply

// uint64 hash_rate = 1;
inline void HashRateReply::clear_hash_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_rate_ = ::uint64_t{0u};
}
inline ::uint64_t HashRateReply::hash_rate() const {
  // @@protoc_insertion_point(field_get:txpool.HashRateReply.hash_rate)
  return _internal_hash_rate();
}
inline void HashRateReply::set_hash_rate(::uint64_t value) {
  _internal_set_hash_rate(value);
  // @@protoc_insertion_point(field_set:txpool.HashRateReply.hash_rate)
}
inline ::uint64_t HashRateReply::_internal_hash_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_rate_;
}
inline void HashRateReply::_internal_set_hash_rate(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_rate_ = value;
}

// -------------------------------------------------------------------

// MiningRequest

// -------------------------------------------------------------------

// MiningReply

// bool enabled = 1;
inline void MiningReply::clear_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = false;
}
inline bool MiningReply::enabled() const {
  // @@protoc_insertion_point(field_get:txpool.MiningReply.enabled)
  return _internal_enabled();
}
inline void MiningReply::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:txpool.MiningReply.enabled)
}
inline bool MiningReply::_internal_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_;
}
inline void MiningReply::_internal_set_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = value;
}

// bool running = 2;
inline void MiningReply::clear_running() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.running_ = false;
}
inline bool MiningReply::running() const {
  // @@protoc_insertion_point(field_get:txpool.MiningReply.running)
  return _internal_running();
}
inline void MiningReply::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:txpool.MiningReply.running)
}
inline bool MiningReply::_internal_running() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.running_;
}
inline void MiningReply::_internal_set_running(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.running_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace txpool


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_txpool_2fmining_2eproto_2epb_2eh
