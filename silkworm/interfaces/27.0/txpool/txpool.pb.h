// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: txpool/txpool.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_txpool_2ftxpool_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_txpool_2ftxpool_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_txpool_2ftxpool_2eproto;
namespace txpool {
class AddReply;
struct AddReplyDefaultTypeInternal;
extern AddReplyDefaultTypeInternal _AddReply_default_instance_;
class AddRequest;
struct AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class AllReply;
struct AllReplyDefaultTypeInternal;
extern AllReplyDefaultTypeInternal _AllReply_default_instance_;
class AllReply_Tx;
struct AllReply_TxDefaultTypeInternal;
extern AllReply_TxDefaultTypeInternal _AllReply_Tx_default_instance_;
class AllRequest;
struct AllRequestDefaultTypeInternal;
extern AllRequestDefaultTypeInternal _AllRequest_default_instance_;
class NonceReply;
struct NonceReplyDefaultTypeInternal;
extern NonceReplyDefaultTypeInternal _NonceReply_default_instance_;
class NonceRequest;
struct NonceRequestDefaultTypeInternal;
extern NonceRequestDefaultTypeInternal _NonceRequest_default_instance_;
class OnAddReply;
struct OnAddReplyDefaultTypeInternal;
extern OnAddReplyDefaultTypeInternal _OnAddReply_default_instance_;
class OnAddRequest;
struct OnAddRequestDefaultTypeInternal;
extern OnAddRequestDefaultTypeInternal _OnAddRequest_default_instance_;
class PendingReply;
struct PendingReplyDefaultTypeInternal;
extern PendingReplyDefaultTypeInternal _PendingReply_default_instance_;
class PendingReply_Tx;
struct PendingReply_TxDefaultTypeInternal;
extern PendingReply_TxDefaultTypeInternal _PendingReply_Tx_default_instance_;
class StatusReply;
struct StatusReplyDefaultTypeInternal;
extern StatusReplyDefaultTypeInternal _StatusReply_default_instance_;
class StatusRequest;
struct StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class TransactionsReply;
struct TransactionsReplyDefaultTypeInternal;
extern TransactionsReplyDefaultTypeInternal _TransactionsReply_default_instance_;
class TransactionsRequest;
struct TransactionsRequestDefaultTypeInternal;
extern TransactionsRequestDefaultTypeInternal _TransactionsRequest_default_instance_;
class TxHashes;
struct TxHashesDefaultTypeInternal;
extern TxHashesDefaultTypeInternal _TxHashes_default_instance_;
}  // namespace txpool
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace txpool {
enum AllReply_TxnType : int {
  AllReply_TxnType_PENDING = 0,
  AllReply_TxnType_QUEUED = 1,
  AllReply_TxnType_BASE_FEE = 2,
  AllReply_TxnType_AllReply_TxnType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AllReply_TxnType_AllReply_TxnType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AllReply_TxnType_IsValid(int value);
extern const uint32_t AllReply_TxnType_internal_data_[];
constexpr AllReply_TxnType AllReply_TxnType_TxnType_MIN = static_cast<AllReply_TxnType>(0);
constexpr AllReply_TxnType AllReply_TxnType_TxnType_MAX = static_cast<AllReply_TxnType>(2);
constexpr int AllReply_TxnType_TxnType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AllReply_TxnType_descriptor();
template <typename T>
const std::string& AllReply_TxnType_Name(T value) {
  static_assert(std::is_same<T, AllReply_TxnType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TxnType_Name().");
  return AllReply_TxnType_Name(static_cast<AllReply_TxnType>(value));
}
template <>
inline const std::string& AllReply_TxnType_Name(AllReply_TxnType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AllReply_TxnType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AllReply_TxnType_Parse(absl::string_view name, AllReply_TxnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AllReply_TxnType>(
      AllReply_TxnType_descriptor(), name, value);
}
enum ImportResult : int {
  SUCCESS = 0,
  ALREADY_EXISTS = 1,
  FEE_TOO_LOW = 2,
  STALE = 3,
  INVALID = 4,
  INTERNAL_ERROR = 5,
  ImportResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ImportResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ImportResult_IsValid(int value);
extern const uint32_t ImportResult_internal_data_[];
constexpr ImportResult ImportResult_MIN = static_cast<ImportResult>(0);
constexpr ImportResult ImportResult_MAX = static_cast<ImportResult>(5);
constexpr int ImportResult_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ImportResult_descriptor();
template <typename T>
const std::string& ImportResult_Name(T value) {
  static_assert(std::is_same<T, ImportResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImportResult_Name().");
  return ImportResult_Name(static_cast<ImportResult>(value));
}
template <>
inline const std::string& ImportResult_Name(ImportResult value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ImportResult_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ImportResult_Parse(absl::string_view name, ImportResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImportResult>(
      ImportResult_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TransactionsReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.TransactionsReply) */ {
 public:
  inline TransactionsReply() : TransactionsReply(nullptr) {}
  ~TransactionsReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionsReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransactionsReply(const TransactionsReply& from) : TransactionsReply(nullptr, from) {}
  inline TransactionsReply(TransactionsReply&& from) noexcept
      : TransactionsReply(nullptr, std::move(from)) {}
  inline TransactionsReply& operator=(const TransactionsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsReply& operator=(TransactionsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionsReply* internal_default_instance() {
    return reinterpret_cast<const TransactionsReply*>(
        &_TransactionsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TransactionsReply& a, TransactionsReply& b) { a.Swap(&b); }
  inline void Swap(TransactionsReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionsReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TransactionsReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransactionsReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransactionsReply& from) { TransactionsReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransactionsReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.TransactionsReply"; }

 protected:
  explicit TransactionsReply(::google::protobuf::Arena* arena);
  TransactionsReply(::google::protobuf::Arena* arena, const TransactionsReply& from);
  TransactionsReply(::google::protobuf::Arena* arena, TransactionsReply&& from) noexcept
      : TransactionsReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRlpTxsFieldNumber = 1,
  };
  // repeated bytes rlp_txs = 1;
  int rlp_txs_size() const;
  private:
  int _internal_rlp_txs_size() const;

  public:
  void clear_rlp_txs() ;
  const std::string& rlp_txs(int index) const;
  std::string* mutable_rlp_txs(int index);
  void set_rlp_txs(int index, const std::string& value);
  void set_rlp_txs(int index, std::string&& value);
  void set_rlp_txs(int index, const char* value);
  void set_rlp_txs(int index, const void* value, std::size_t size);
  void set_rlp_txs(int index, absl::string_view value);
  std::string* add_rlp_txs();
  void add_rlp_txs(const std::string& value);
  void add_rlp_txs(std::string&& value);
  void add_rlp_txs(const char* value);
  void add_rlp_txs(const void* value, std::size_t size);
  void add_rlp_txs(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& rlp_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_rlp_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_rlp_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_rlp_txs();

  public:
  // @@protoc_insertion_point(class_scope:txpool.TransactionsReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TransactionsReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransactionsReply& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> rlp_txs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StatusRequest(const StatusRequest& from) : StatusRequest(nullptr, from) {}
  inline StatusRequest(StatusRequest&& from) noexcept
      : StatusRequest(nullptr, std::move(from)) {}
  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
        &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(StatusRequest& a, StatusRequest& b) { a.Swap(&b); }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<StatusRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.StatusRequest"; }

 protected:
  explicit StatusRequest(::google::protobuf::Arena* arena);
  StatusRequest(::google::protobuf::Arena* arena, const StatusRequest& from);
  StatusRequest(::google::protobuf::Arena* arena, StatusRequest&& from) noexcept
      : StatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.StatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StatusRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StatusRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class StatusReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.StatusReply) */ {
 public:
  inline StatusReply() : StatusReply(nullptr) {}
  ~StatusReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StatusReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline StatusReply(const StatusReply& from) : StatusReply(nullptr, from) {}
  inline StatusReply(StatusReply&& from) noexcept
      : StatusReply(nullptr, std::move(from)) {}
  inline StatusReply& operator=(const StatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusReply& operator=(StatusReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusReply* internal_default_instance() {
    return reinterpret_cast<const StatusReply*>(
        &_StatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(StatusReply& a, StatusReply& b) { a.Swap(&b); }
  inline void Swap(StatusReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StatusReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StatusReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StatusReply& from) { StatusReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StatusReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.StatusReply"; }

 protected:
  explicit StatusReply(::google::protobuf::Arena* arena);
  StatusReply(::google::protobuf::Arena* arena, const StatusReply& from);
  StatusReply(::google::protobuf::Arena* arena, StatusReply&& from) noexcept
      : StatusReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPendingCountFieldNumber = 1,
    kQueuedCountFieldNumber = 2,
    kBaseFeeCountFieldNumber = 3,
  };
  // uint32 pending_count = 1;
  void clear_pending_count() ;
  ::uint32_t pending_count() const;
  void set_pending_count(::uint32_t value);

  private:
  ::uint32_t _internal_pending_count() const;
  void _internal_set_pending_count(::uint32_t value);

  public:
  // uint32 queued_count = 2;
  void clear_queued_count() ;
  ::uint32_t queued_count() const;
  void set_queued_count(::uint32_t value);

  private:
  ::uint32_t _internal_queued_count() const;
  void _internal_set_queued_count(::uint32_t value);

  public:
  // uint32 base_fee_count = 3;
  void clear_base_fee_count() ;
  ::uint32_t base_fee_count() const;
  void set_base_fee_count(::uint32_t value);

  private:
  ::uint32_t _internal_base_fee_count() const;
  void _internal_set_base_fee_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.StatusReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StatusReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StatusReply& from_msg);
    ::uint32_t pending_count_;
    ::uint32_t queued_count_;
    ::uint32_t base_fee_count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class OnAddRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.OnAddRequest) */ {
 public:
  inline OnAddRequest() : OnAddRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnAddRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnAddRequest(const OnAddRequest& from) : OnAddRequest(nullptr, from) {}
  inline OnAddRequest(OnAddRequest&& from) noexcept
      : OnAddRequest(nullptr, std::move(from)) {}
  inline OnAddRequest& operator=(const OnAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnAddRequest& operator=(OnAddRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnAddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnAddRequest* internal_default_instance() {
    return reinterpret_cast<const OnAddRequest*>(
        &_OnAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(OnAddRequest& a, OnAddRequest& b) { a.Swap(&b); }
  inline void Swap(OnAddRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnAddRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnAddRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<OnAddRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OnAddRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OnAddRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnAddRequest"; }

 protected:
  explicit OnAddRequest(::google::protobuf::Arena* arena);
  OnAddRequest(::google::protobuf::Arena* arena, const OnAddRequest& from);
  OnAddRequest(::google::protobuf::Arena* arena, OnAddRequest&& from) noexcept
      : OnAddRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.OnAddRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnAddRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnAddRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class OnAddReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.OnAddReply) */ {
 public:
  inline OnAddReply() : OnAddReply(nullptr) {}
  ~OnAddReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OnAddReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline OnAddReply(const OnAddReply& from) : OnAddReply(nullptr, from) {}
  inline OnAddReply(OnAddReply&& from) noexcept
      : OnAddReply(nullptr, std::move(from)) {}
  inline OnAddReply& operator=(const OnAddReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnAddReply& operator=(OnAddReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnAddReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnAddReply* internal_default_instance() {
    return reinterpret_cast<const OnAddReply*>(
        &_OnAddReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(OnAddReply& a, OnAddReply& b) { a.Swap(&b); }
  inline void Swap(OnAddReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnAddReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnAddReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OnAddReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OnAddReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OnAddReply& from) { OnAddReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OnAddReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.OnAddReply"; }

 protected:
  explicit OnAddReply(::google::protobuf::Arena* arena);
  OnAddReply(::google::protobuf::Arena* arena, const OnAddReply& from);
  OnAddReply(::google::protobuf::Arena* arena, OnAddReply&& from) noexcept
      : OnAddReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRplTxsFieldNumber = 1,
  };
  // repeated bytes rpl_txs = 1;
  int rpl_txs_size() const;
  private:
  int _internal_rpl_txs_size() const;

  public:
  void clear_rpl_txs() ;
  const std::string& rpl_txs(int index) const;
  std::string* mutable_rpl_txs(int index);
  void set_rpl_txs(int index, const std::string& value);
  void set_rpl_txs(int index, std::string&& value);
  void set_rpl_txs(int index, const char* value);
  void set_rpl_txs(int index, const void* value, std::size_t size);
  void set_rpl_txs(int index, absl::string_view value);
  std::string* add_rpl_txs();
  void add_rpl_txs(const std::string& value);
  void add_rpl_txs(std::string&& value);
  void add_rpl_txs(const char* value);
  void add_rpl_txs(const void* value, std::size_t size);
  void add_rpl_txs(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& rpl_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_rpl_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_rpl_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_rpl_txs();

  public:
  // @@protoc_insertion_point(class_scope:txpool.OnAddReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OnAddReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OnAddReply& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> rpl_txs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class NonceReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.NonceReply) */ {
 public:
  inline NonceReply() : NonceReply(nullptr) {}
  ~NonceReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NonceReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline NonceReply(const NonceReply& from) : NonceReply(nullptr, from) {}
  inline NonceReply(NonceReply&& from) noexcept
      : NonceReply(nullptr, std::move(from)) {}
  inline NonceReply& operator=(const NonceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonceReply& operator=(NonceReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonceReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonceReply* internal_default_instance() {
    return reinterpret_cast<const NonceReply*>(
        &_NonceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NonceReply& a, NonceReply& b) { a.Swap(&b); }
  inline void Swap(NonceReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonceReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonceReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NonceReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NonceReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NonceReply& from) { NonceReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NonceReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.NonceReply"; }

 protected:
  explicit NonceReply(::google::protobuf::Arena* arena);
  NonceReply(::google::protobuf::Arena* arena, const NonceReply& from);
  NonceReply(::google::protobuf::Arena* arena, NonceReply&& from) noexcept
      : NonceReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNonceFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // uint64 nonce = 2;
  void clear_nonce() ;
  ::uint64_t nonce() const;
  void set_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_nonce() const;
  void _internal_set_nonce(::uint64_t value);

  public:
  // bool found = 1;
  void clear_found() ;
  bool found() const;
  void set_found(bool value);

  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.NonceReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NonceReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NonceReply& from_msg);
    ::uint64_t nonce_;
    bool found_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AllRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:txpool.AllRequest) */ {
 public:
  inline AllRequest() : AllRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllRequest(const AllRequest& from) : AllRequest(nullptr, from) {}
  inline AllRequest(AllRequest&& from) noexcept
      : AllRequest(nullptr, std::move(from)) {}
  inline AllRequest& operator=(const AllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllRequest& operator=(AllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllRequest* internal_default_instance() {
    return reinterpret_cast<const AllRequest*>(
        &_AllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(AllRequest& a, AllRequest& b) { a.Swap(&b); }
  inline void Swap(AllRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<AllRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AllRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AllRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.AllRequest"; }

 protected:
  explicit AllRequest(::google::protobuf::Arena* arena);
  AllRequest(::google::protobuf::Arena* arena, const AllRequest& from);
  AllRequest(::google::protobuf::Arena* arena, AllRequest&& from) noexcept
      : AllRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:txpool.AllRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AllRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AllRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AddRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.AddRequest) */ {
 public:
  inline AddRequest() : AddRequest(nullptr) {}
  ~AddRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddRequest(const AddRequest& from) : AddRequest(nullptr, from) {}
  inline AddRequest(AddRequest&& from) noexcept
      : AddRequest(nullptr, std::move(from)) {}
  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
        &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AddRequest& a, AddRequest& b) { a.Swap(&b); }
  inline void Swap(AddRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AddRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddRequest& from) { AddRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.AddRequest"; }

 protected:
  explicit AddRequest(::google::protobuf::Arena* arena);
  AddRequest(::google::protobuf::Arena* arena, const AddRequest& from);
  AddRequest(::google::protobuf::Arena* arena, AddRequest&& from) noexcept
      : AddRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRlpTxsFieldNumber = 1,
  };
  // repeated bytes rlp_txs = 1;
  int rlp_txs_size() const;
  private:
  int _internal_rlp_txs_size() const;

  public:
  void clear_rlp_txs() ;
  const std::string& rlp_txs(int index) const;
  std::string* mutable_rlp_txs(int index);
  void set_rlp_txs(int index, const std::string& value);
  void set_rlp_txs(int index, std::string&& value);
  void set_rlp_txs(int index, const char* value);
  void set_rlp_txs(int index, const void* value, std::size_t size);
  void set_rlp_txs(int index, absl::string_view value);
  std::string* add_rlp_txs();
  void add_rlp_txs(const std::string& value);
  void add_rlp_txs(std::string&& value);
  void add_rlp_txs(const char* value);
  void add_rlp_txs(const void* value, std::size_t size);
  void add_rlp_txs(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& rlp_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_rlp_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_rlp_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_rlp_txs();

  public:
  // @@protoc_insertion_point(class_scope:txpool.AddRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AddRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> rlp_txs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AddReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.AddReply) */ {
 public:
  inline AddReply() : AddReply(nullptr) {}
  ~AddReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddReply(const AddReply& from) : AddReply(nullptr, from) {}
  inline AddReply(AddReply&& from) noexcept
      : AddReply(nullptr, std::move(from)) {}
  inline AddReply& operator=(const AddReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReply& operator=(AddReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddReply* internal_default_instance() {
    return reinterpret_cast<const AddReply*>(
        &_AddReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AddReply& a, AddReply& b) { a.Swap(&b); }
  inline void Swap(AddReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AddReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddReply& from) { AddReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.AddReply"; }

 protected:
  explicit AddReply(::google::protobuf::Arena* arena);
  AddReply(::google::protobuf::Arena* arena, const AddReply& from);
  AddReply(::google::protobuf::Arena* arena, AddReply&& from) noexcept
      : AddReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImportedFieldNumber = 1,
    kErrorsFieldNumber = 2,
  };
  // repeated .txpool.ImportResult imported = 1;
  int imported_size() const;
  private:
  int _internal_imported_size() const;

  public:
  void clear_imported() ;
  public:
  ::txpool::ImportResult imported(int index) const;
  void set_imported(int index, ::txpool::ImportResult value);
  void add_imported(::txpool::ImportResult value);
  const ::google::protobuf::RepeatedField<int>& imported() const;
  ::google::protobuf::RepeatedField<int>* mutable_imported();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_imported() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_imported();

  public:
  // repeated string errors = 2;
  int errors_size() const;
  private:
  int _internal_errors_size() const;

  public:
  void clear_errors() ;
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, std::size_t size);
  void set_errors(int index, absl::string_view value);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, std::size_t size);
  void add_errors(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_errors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_errors();

  public:
  // @@protoc_insertion_point(class_scope:txpool.AddReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      30, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AddReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddReply& from_msg);
    ::google::protobuf::RepeatedField<int> imported_;
    mutable ::google::protobuf::internal::CachedSize _imported_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> errors_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class TxHashes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.TxHashes) */ {
 public:
  inline TxHashes() : TxHashes(nullptr) {}
  ~TxHashes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TxHashes(
      ::google::protobuf::internal::ConstantInitialized);

  inline TxHashes(const TxHashes& from) : TxHashes(nullptr, from) {}
  inline TxHashes(TxHashes&& from) noexcept
      : TxHashes(nullptr, std::move(from)) {}
  inline TxHashes& operator=(const TxHashes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxHashes& operator=(TxHashes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxHashes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxHashes* internal_default_instance() {
    return reinterpret_cast<const TxHashes*>(
        &_TxHashes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TxHashes& a, TxHashes& b) { a.Swap(&b); }
  inline void Swap(TxHashes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxHashes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxHashes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TxHashes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TxHashes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TxHashes& from) { TxHashes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TxHashes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.TxHashes"; }

 protected:
  explicit TxHashes(::google::protobuf::Arena* arena);
  TxHashes(::google::protobuf::Arena* arena, const TxHashes& from);
  TxHashes(::google::protobuf::Arena* arena, TxHashes&& from) noexcept
      : TxHashes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .types.H256 hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;

  public:
  void clear_hashes() ;
  ::types::H256* mutable_hashes(int index);
  ::google::protobuf::RepeatedPtrField<::types::H256>* mutable_hashes();

  private:
  const ::google::protobuf::RepeatedPtrField<::types::H256>& _internal_hashes() const;
  ::google::protobuf::RepeatedPtrField<::types::H256>* _internal_mutable_hashes();
  public:
  const ::types::H256& hashes(int index) const;
  ::types::H256* add_hashes();
  const ::google::protobuf::RepeatedPtrField<::types::H256>& hashes() const;
  // @@protoc_insertion_point(class_scope:txpool.TxHashes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TxHashes_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TxHashes& from_msg);
    ::google::protobuf::RepeatedPtrField< ::types::H256 > hashes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class TransactionsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.TransactionsRequest) */ {
 public:
  inline TransactionsRequest() : TransactionsRequest(nullptr) {}
  ~TransactionsRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransactionsRequest(const TransactionsRequest& from) : TransactionsRequest(nullptr, from) {}
  inline TransactionsRequest(TransactionsRequest&& from) noexcept
      : TransactionsRequest(nullptr, std::move(from)) {}
  inline TransactionsRequest& operator=(const TransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsRequest& operator=(TransactionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionsRequest*>(
        &_TransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TransactionsRequest& a, TransactionsRequest& b) { a.Swap(&b); }
  inline void Swap(TransactionsRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TransactionsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransactionsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransactionsRequest& from) { TransactionsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransactionsRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.TransactionsRequest"; }

 protected:
  explicit TransactionsRequest(::google::protobuf::Arena* arena);
  TransactionsRequest(::google::protobuf::Arena* arena, const TransactionsRequest& from);
  TransactionsRequest(::google::protobuf::Arena* arena, TransactionsRequest&& from) noexcept
      : TransactionsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .types.H256 hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;

  public:
  void clear_hashes() ;
  ::types::H256* mutable_hashes(int index);
  ::google::protobuf::RepeatedPtrField<::types::H256>* mutable_hashes();

  private:
  const ::google::protobuf::RepeatedPtrField<::types::H256>& _internal_hashes() const;
  ::google::protobuf::RepeatedPtrField<::types::H256>* _internal_mutable_hashes();
  public:
  const ::types::H256& hashes(int index) const;
  ::types::H256* add_hashes();
  const ::google::protobuf::RepeatedPtrField<::types::H256>& hashes() const;
  // @@protoc_insertion_point(class_scope:txpool.TransactionsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TransactionsRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransactionsRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::types::H256 > hashes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class PendingReply_Tx final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.PendingReply.Tx) */ {
 public:
  inline PendingReply_Tx() : PendingReply_Tx(nullptr) {}
  ~PendingReply_Tx() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PendingReply_Tx(
      ::google::protobuf::internal::ConstantInitialized);

  inline PendingReply_Tx(const PendingReply_Tx& from) : PendingReply_Tx(nullptr, from) {}
  inline PendingReply_Tx(PendingReply_Tx&& from) noexcept
      : PendingReply_Tx(nullptr, std::move(from)) {}
  inline PendingReply_Tx& operator=(const PendingReply_Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingReply_Tx& operator=(PendingReply_Tx&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PendingReply_Tx& default_instance() {
    return *internal_default_instance();
  }
  static inline const PendingReply_Tx* internal_default_instance() {
    return reinterpret_cast<const PendingReply_Tx*>(
        &_PendingReply_Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(PendingReply_Tx& a, PendingReply_Tx& b) { a.Swap(&b); }
  inline void Swap(PendingReply_Tx* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingReply_Tx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PendingReply_Tx* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PendingReply_Tx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PendingReply_Tx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PendingReply_Tx& from) { PendingReply_Tx::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PendingReply_Tx* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.PendingReply.Tx"; }

 protected:
  explicit PendingReply_Tx(::google::protobuf::Arena* arena);
  PendingReply_Tx(::google::protobuf::Arena* arena, const PendingReply_Tx& from);
  PendingReply_Tx(::google::protobuf::Arena* arena, PendingReply_Tx&& from) noexcept
      : PendingReply_Tx(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRlpTxFieldNumber = 2,
    kSenderFieldNumber = 1,
    kIsLocalFieldNumber = 3,
  };
  // bytes rlp_tx = 2;
  void clear_rlp_tx() ;
  const std::string& rlp_tx() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rlp_tx(Arg_&& arg, Args_... args);
  std::string* mutable_rlp_tx();
  PROTOBUF_NODISCARD std::string* release_rlp_tx();
  void set_allocated_rlp_tx(std::string* value);

  private:
  const std::string& _internal_rlp_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rlp_tx(
      const std::string& value);
  std::string* _internal_mutable_rlp_tx();

  public:
  // .types.H160 sender = 1;
  bool has_sender() const;
  void clear_sender() ;
  const ::types::H160& sender() const;
  PROTOBUF_NODISCARD ::types::H160* release_sender();
  ::types::H160* mutable_sender();
  void set_allocated_sender(::types::H160* value);
  void unsafe_arena_set_allocated_sender(::types::H160* value);
  ::types::H160* unsafe_arena_release_sender();

  private:
  const ::types::H160& _internal_sender() const;
  ::types::H160* _internal_mutable_sender();

  public:
  // bool is_local = 3;
  void clear_is_local() ;
  bool is_local() const;
  void set_is_local(bool value);

  private:
  bool _internal_is_local() const;
  void _internal_set_is_local(bool value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.PendingReply.Tx)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PendingReply_Tx_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PendingReply_Tx& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr rlp_tx_;
    ::types::H160* sender_;
    bool is_local_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class NonceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.NonceRequest) */ {
 public:
  inline NonceRequest() : NonceRequest(nullptr) {}
  ~NonceRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NonceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NonceRequest(const NonceRequest& from) : NonceRequest(nullptr, from) {}
  inline NonceRequest(NonceRequest&& from) noexcept
      : NonceRequest(nullptr, std::move(from)) {}
  inline NonceRequest& operator=(const NonceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonceRequest& operator=(NonceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonceRequest* internal_default_instance() {
    return reinterpret_cast<const NonceRequest*>(
        &_NonceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(NonceRequest& a, NonceRequest& b) { a.Swap(&b); }
  inline void Swap(NonceRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonceRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NonceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NonceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NonceRequest& from) { NonceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NonceRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.NonceRequest"; }

 protected:
  explicit NonceRequest(::google::protobuf::Arena* arena);
  NonceRequest(::google::protobuf::Arena* arena, const NonceRequest& from);
  NonceRequest(::google::protobuf::Arena* arena, NonceRequest&& from) noexcept
      : NonceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
  };
  // .types.H160 address = 1;
  bool has_address() const;
  void clear_address() ;
  const ::types::H160& address() const;
  PROTOBUF_NODISCARD ::types::H160* release_address();
  ::types::H160* mutable_address();
  void set_allocated_address(::types::H160* value);
  void unsafe_arena_set_allocated_address(::types::H160* value);
  ::types::H160* unsafe_arena_release_address();

  private:
  const ::types::H160& _internal_address() const;
  ::types::H160* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:txpool.NonceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NonceRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NonceRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::types::H160* address_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AllReply_Tx final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.AllReply.Tx) */ {
 public:
  inline AllReply_Tx() : AllReply_Tx(nullptr) {}
  ~AllReply_Tx() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllReply_Tx(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllReply_Tx(const AllReply_Tx& from) : AllReply_Tx(nullptr, from) {}
  inline AllReply_Tx(AllReply_Tx&& from) noexcept
      : AllReply_Tx(nullptr, std::move(from)) {}
  inline AllReply_Tx& operator=(const AllReply_Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllReply_Tx& operator=(AllReply_Tx&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllReply_Tx& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllReply_Tx* internal_default_instance() {
    return reinterpret_cast<const AllReply_Tx*>(
        &_AllReply_Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(AllReply_Tx& a, AllReply_Tx& b) { a.Swap(&b); }
  inline void Swap(AllReply_Tx* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllReply_Tx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllReply_Tx* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AllReply_Tx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllReply_Tx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllReply_Tx& from) { AllReply_Tx::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AllReply_Tx* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.AllReply.Tx"; }

 protected:
  explicit AllReply_Tx(::google::protobuf::Arena* arena);
  AllReply_Tx(::google::protobuf::Arena* arena, const AllReply_Tx& from);
  AllReply_Tx(::google::protobuf::Arena* arena, AllReply_Tx&& from) noexcept
      : AllReply_Tx(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRlpTxFieldNumber = 3,
    kSenderFieldNumber = 2,
    kTxnTypeFieldNumber = 1,
  };
  // bytes rlp_tx = 3;
  void clear_rlp_tx() ;
  const std::string& rlp_tx() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rlp_tx(Arg_&& arg, Args_... args);
  std::string* mutable_rlp_tx();
  PROTOBUF_NODISCARD std::string* release_rlp_tx();
  void set_allocated_rlp_tx(std::string* value);

  private:
  const std::string& _internal_rlp_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rlp_tx(
      const std::string& value);
  std::string* _internal_mutable_rlp_tx();

  public:
  // .types.H160 sender = 2;
  bool has_sender() const;
  void clear_sender() ;
  const ::types::H160& sender() const;
  PROTOBUF_NODISCARD ::types::H160* release_sender();
  ::types::H160* mutable_sender();
  void set_allocated_sender(::types::H160* value);
  void unsafe_arena_set_allocated_sender(::types::H160* value);
  ::types::H160* unsafe_arena_release_sender();

  private:
  const ::types::H160& _internal_sender() const;
  ::types::H160* _internal_mutable_sender();

  public:
  // .txpool.AllReply.TxnType txn_type = 1;
  void clear_txn_type() ;
  ::txpool::AllReply_TxnType txn_type() const;
  void set_txn_type(::txpool::AllReply_TxnType value);

  private:
  ::txpool::AllReply_TxnType _internal_txn_type() const;
  void _internal_set_txn_type(::txpool::AllReply_TxnType value);

  public:
  // @@protoc_insertion_point(class_scope:txpool.AllReply.Tx)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AllReply_Tx_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AllReply_Tx& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr rlp_tx_;
    ::types::H160* sender_;
    int txn_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class PendingReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.PendingReply) */ {
 public:
  inline PendingReply() : PendingReply(nullptr) {}
  ~PendingReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PendingReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline PendingReply(const PendingReply& from) : PendingReply(nullptr, from) {}
  inline PendingReply(PendingReply&& from) noexcept
      : PendingReply(nullptr, std::move(from)) {}
  inline PendingReply& operator=(const PendingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingReply& operator=(PendingReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PendingReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PendingReply* internal_default_instance() {
    return reinterpret_cast<const PendingReply*>(
        &_PendingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(PendingReply& a, PendingReply& b) { a.Swap(&b); }
  inline void Swap(PendingReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PendingReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PendingReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PendingReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PendingReply& from) { PendingReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PendingReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.PendingReply"; }

 protected:
  explicit PendingReply(::google::protobuf::Arena* arena);
  PendingReply(::google::protobuf::Arena* arena, const PendingReply& from);
  PendingReply(::google::protobuf::Arena* arena, PendingReply&& from) noexcept
      : PendingReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Tx = PendingReply_Tx;

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 1,
  };
  // repeated .txpool.PendingReply.Tx txs = 1;
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  ::txpool::PendingReply_Tx* mutable_txs(int index);
  ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>* _internal_mutable_txs();
  public:
  const ::txpool::PendingReply_Tx& txs(int index) const;
  ::txpool::PendingReply_Tx* add_txs();
  const ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>& txs() const;
  // @@protoc_insertion_point(class_scope:txpool.PendingReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PendingReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PendingReply& from_msg);
    ::google::protobuf::RepeatedPtrField< ::txpool::PendingReply_Tx > txs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AllReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:txpool.AllReply) */ {
 public:
  inline AllReply() : AllReply(nullptr) {}
  ~AllReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllReply(const AllReply& from) : AllReply(nullptr, from) {}
  inline AllReply(AllReply&& from) noexcept
      : AllReply(nullptr, std::move(from)) {}
  inline AllReply& operator=(const AllReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllReply& operator=(AllReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllReply* internal_default_instance() {
    return reinterpret_cast<const AllReply*>(
        &_AllReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(AllReply& a, AllReply& b) { a.Swap(&b); }
  inline void Swap(AllReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AllReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllReply& from) { AllReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AllReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "txpool.AllReply"; }

 protected:
  explicit AllReply(::google::protobuf::Arena* arena);
  AllReply(::google::protobuf::Arena* arena, const AllReply& from);
  AllReply(::google::protobuf::Arena* arena, AllReply&& from) noexcept
      : AllReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Tx = AllReply_Tx;
  using TxnType = AllReply_TxnType;
  static constexpr TxnType PENDING = AllReply_TxnType_PENDING;
  static constexpr TxnType QUEUED = AllReply_TxnType_QUEUED;
  static constexpr TxnType BASE_FEE = AllReply_TxnType_BASE_FEE;
  static inline bool TxnType_IsValid(int value) {
    return AllReply_TxnType_IsValid(value);
  }
  static constexpr TxnType TxnType_MIN = AllReply_TxnType_TxnType_MIN;
  static constexpr TxnType TxnType_MAX = AllReply_TxnType_TxnType_MAX;
  static constexpr int TxnType_ARRAYSIZE = AllReply_TxnType_TxnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TxnType_descriptor() {
    return AllReply_TxnType_descriptor();
  }
  template <typename T>
  static inline const std::string& TxnType_Name(T value) {
    return AllReply_TxnType_Name(value);
  }
  static inline bool TxnType_Parse(absl::string_view name, TxnType* value) {
    return AllReply_TxnType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 1,
  };
  // repeated .txpool.AllReply.Tx txs = 1;
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  ::txpool::AllReply_Tx* mutable_txs(int index);
  ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>* _internal_mutable_txs();
  public:
  const ::txpool::AllReply_Tx& txs(int index) const;
  ::txpool::AllReply_Tx* add_txs();
  const ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>& txs() const;
  // @@protoc_insertion_point(class_scope:txpool.AllReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AllReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AllReply& from_msg);
    ::google::protobuf::RepeatedPtrField< ::txpool::AllReply_Tx > txs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TxHashes

// repeated .types.H256 hashes = 1;
inline int TxHashes::_internal_hashes_size() const {
  return _internal_hashes().size();
}
inline int TxHashes::hashes_size() const {
  return _internal_hashes_size();
}
inline ::types::H256* TxHashes::mutable_hashes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.TxHashes.hashes)
  return _internal_mutable_hashes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::types::H256>* TxHashes::mutable_hashes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.TxHashes.hashes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hashes();
}
inline const ::types::H256& TxHashes::hashes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.TxHashes.hashes)
  return _internal_hashes().Get(index);
}
inline ::types::H256* TxHashes::add_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::types::H256* _add = _internal_mutable_hashes()->Add();
  // @@protoc_insertion_point(field_add:txpool.TxHashes.hashes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::types::H256>& TxHashes::hashes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.TxHashes.hashes)
  return _internal_hashes();
}
inline const ::google::protobuf::RepeatedPtrField<::types::H256>&
TxHashes::_internal_hashes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hashes_;
}
inline ::google::protobuf::RepeatedPtrField<::types::H256>*
TxHashes::_internal_mutable_hashes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hashes_;
}

// -------------------------------------------------------------------

// AddRequest

// repeated bytes rlp_txs = 1;
inline int AddRequest::_internal_rlp_txs_size() const {
  return _internal_rlp_txs().size();
}
inline int AddRequest::rlp_txs_size() const {
  return _internal_rlp_txs_size();
}
inline void AddRequest::clear_rlp_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_txs_.Clear();
}
inline std::string* AddRequest::add_rlp_txs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_rlp_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:txpool.AddRequest.rlp_txs)
  return _s;
}
inline const std::string& AddRequest::rlp_txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.AddRequest.rlp_txs)
  return _internal_rlp_txs().Get(index);
}
inline std::string* AddRequest::mutable_rlp_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.AddRequest.rlp_txs)
  return _internal_mutable_rlp_txs()->Mutable(index);
}
inline void AddRequest::set_rlp_txs(int index, const std::string& value) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::set_rlp_txs(int index, std::string&& value) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::set_rlp_txs(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_rlp_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::set_rlp_txs(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::set_rlp_txs(int index, absl::string_view value) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.AddRequest.rlp_txs)
}
inline void AddRequest::add_rlp_txs(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:txpool.AddRequest.rlp_txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AddRequest::rlp_txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.AddRequest.rlp_txs)
  return _internal_rlp_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AddRequest::mutable_rlp_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddRequest.rlp_txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rlp_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AddRequest::_internal_rlp_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rlp_txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AddRequest::_internal_mutable_rlp_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rlp_txs_;
}

// -------------------------------------------------------------------

// AddReply

// repeated .txpool.ImportResult imported = 1;
inline int AddReply::_internal_imported_size() const {
  return _internal_imported().size();
}
inline int AddReply::imported_size() const {
  return _internal_imported_size();
}
inline void AddReply::clear_imported() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imported_.Clear();
}
inline ::txpool::ImportResult AddReply::imported(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AddReply.imported)
  return static_cast<::txpool::ImportResult>(_internal_imported().Get(index));
}
inline void AddReply::set_imported(int index, ::txpool::ImportResult value) {
  _internal_mutable_imported()->Set(index, value);
  // @@protoc_insertion_point(field_set:txpool.AddReply.imported)
}
inline void AddReply::add_imported(::txpool::ImportResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_imported()->Add(value);
  // @@protoc_insertion_point(field_add:txpool.AddReply.imported)
}
inline const ::google::protobuf::RepeatedField<int>& AddReply::imported() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.AddReply.imported)
  return _internal_imported();
}
inline ::google::protobuf::RepeatedField<int>* AddReply::mutable_imported()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddReply.imported)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_imported();
}
inline const ::google::protobuf::RepeatedField<int>& AddReply::_internal_imported()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.imported_;
}
inline ::google::protobuf::RepeatedField<int>* AddReply::_internal_mutable_imported() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.imported_;
}

// repeated string errors = 2;
inline int AddReply::_internal_errors_size() const {
  return _internal_errors().size();
}
inline int AddReply::errors_size() const {
  return _internal_errors_size();
}
inline void AddReply::clear_errors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errors_.Clear();
}
inline std::string* AddReply::add_errors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_errors()->Add();
  // @@protoc_insertion_point(field_add_mutable:txpool.AddReply.errors)
  return _s;
}
inline const std::string& AddReply::errors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.AddReply.errors)
  return _internal_errors().Get(index);
}
inline std::string* AddReply::mutable_errors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.AddReply.errors)
  return _internal_mutable_errors()->Mutable(index);
}
inline void AddReply::set_errors(int index, const std::string& value) {
  _internal_mutable_errors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:txpool.AddReply.errors)
}
inline void AddReply::set_errors(int index, std::string&& value) {
  _internal_mutable_errors()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:txpool.AddReply.errors)
}
inline void AddReply::set_errors(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_errors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.AddReply.errors)
}
inline void AddReply::set_errors(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_errors()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.AddReply.errors)
}
inline void AddReply::set_errors(int index, absl::string_view value) {
  _internal_mutable_errors()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:txpool.AddReply.errors)
}
inline void AddReply::add_errors(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_errors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.AddReply.errors)
}
inline void AddReply::add_errors(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_errors()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.AddReply.errors)
}
inline void AddReply::add_errors(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_errors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.AddReply.errors)
}
inline void AddReply::add_errors(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_errors()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.AddReply.errors)
}
inline void AddReply::add_errors(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_errors()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:txpool.AddReply.errors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AddReply::errors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.AddReply.errors)
  return _internal_errors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AddReply::mutable_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddReply.errors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_errors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AddReply::_internal_errors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AddReply::_internal_mutable_errors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.errors_;
}

// -------------------------------------------------------------------

// TransactionsRequest

// repeated .types.H256 hashes = 1;
inline int TransactionsRequest::_internal_hashes_size() const {
  return _internal_hashes().size();
}
inline int TransactionsRequest::hashes_size() const {
  return _internal_hashes_size();
}
inline ::types::H256* TransactionsRequest::mutable_hashes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.TransactionsRequest.hashes)
  return _internal_mutable_hashes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::types::H256>* TransactionsRequest::mutable_hashes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.TransactionsRequest.hashes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hashes();
}
inline const ::types::H256& TransactionsRequest::hashes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.TransactionsRequest.hashes)
  return _internal_hashes().Get(index);
}
inline ::types::H256* TransactionsRequest::add_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::types::H256* _add = _internal_mutable_hashes()->Add();
  // @@protoc_insertion_point(field_add:txpool.TransactionsRequest.hashes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::types::H256>& TransactionsRequest::hashes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.TransactionsRequest.hashes)
  return _internal_hashes();
}
inline const ::google::protobuf::RepeatedPtrField<::types::H256>&
TransactionsRequest::_internal_hashes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hashes_;
}
inline ::google::protobuf::RepeatedPtrField<::types::H256>*
TransactionsRequest::_internal_mutable_hashes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hashes_;
}

// -------------------------------------------------------------------

// TransactionsReply

// repeated bytes rlp_txs = 1;
inline int TransactionsReply::_internal_rlp_txs_size() const {
  return _internal_rlp_txs().size();
}
inline int TransactionsReply::rlp_txs_size() const {
  return _internal_rlp_txs_size();
}
inline void TransactionsReply::clear_rlp_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_txs_.Clear();
}
inline std::string* TransactionsReply::add_rlp_txs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_rlp_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:txpool.TransactionsReply.rlp_txs)
  return _s;
}
inline const std::string& TransactionsReply::rlp_txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.TransactionsReply.rlp_txs)
  return _internal_rlp_txs().Get(index);
}
inline std::string* TransactionsReply::mutable_rlp_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.TransactionsReply.rlp_txs)
  return _internal_mutable_rlp_txs()->Mutable(index);
}
inline void TransactionsReply::set_rlp_txs(int index, const std::string& value) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::set_rlp_txs(int index, std::string&& value) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::set_rlp_txs(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_rlp_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::set_rlp_txs(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::set_rlp_txs(int index, absl::string_view value) {
  _internal_mutable_rlp_txs()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.TransactionsReply.rlp_txs)
}
inline void TransactionsReply::add_rlp_txs(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rlp_txs()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:txpool.TransactionsReply.rlp_txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TransactionsReply::rlp_txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.TransactionsReply.rlp_txs)
  return _internal_rlp_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TransactionsReply::mutable_rlp_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.TransactionsReply.rlp_txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rlp_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TransactionsReply::_internal_rlp_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rlp_txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TransactionsReply::_internal_mutable_rlp_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rlp_txs_;
}

// -------------------------------------------------------------------

// OnAddRequest

// -------------------------------------------------------------------

// OnAddReply

// repeated bytes rpl_txs = 1;
inline int OnAddReply::_internal_rpl_txs_size() const {
  return _internal_rpl_txs().size();
}
inline int OnAddReply::rpl_txs_size() const {
  return _internal_rpl_txs_size();
}
inline void OnAddReply::clear_rpl_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_txs_.Clear();
}
inline std::string* OnAddReply::add_rpl_txs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_rpl_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:txpool.OnAddReply.rpl_txs)
  return _s;
}
inline const std::string& OnAddReply::rpl_txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.OnAddReply.rpl_txs)
  return _internal_rpl_txs().Get(index);
}
inline std::string* OnAddReply::mutable_rpl_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.OnAddReply.rpl_txs)
  return _internal_mutable_rpl_txs()->Mutable(index);
}
inline void OnAddReply::set_rpl_txs(int index, const std::string& value) {
  _internal_mutable_rpl_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::set_rpl_txs(int index, std::string&& value) {
  _internal_mutable_rpl_txs()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::set_rpl_txs(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_rpl_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::set_rpl_txs(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_rpl_txs()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::set_rpl_txs(int index, absl::string_view value) {
  _internal_mutable_rpl_txs()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rpl_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rpl_txs()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rpl_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rpl_txs()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.OnAddReply.rpl_txs)
}
inline void OnAddReply::add_rpl_txs(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rpl_txs()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:txpool.OnAddReply.rpl_txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OnAddReply::rpl_txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.OnAddReply.rpl_txs)
  return _internal_rpl_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OnAddReply::mutable_rpl_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.OnAddReply.rpl_txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rpl_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OnAddReply::_internal_rpl_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpl_txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OnAddReply::_internal_mutable_rpl_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rpl_txs_;
}

// -------------------------------------------------------------------

// AllRequest

// -------------------------------------------------------------------

// AllReply_Tx

// .txpool.AllReply.TxnType txn_type = 1;
inline void AllReply_Tx::clear_txn_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txn_type_ = 0;
}
inline ::txpool::AllReply_TxnType AllReply_Tx::txn_type() const {
  // @@protoc_insertion_point(field_get:txpool.AllReply.Tx.txn_type)
  return _internal_txn_type();
}
inline void AllReply_Tx::set_txn_type(::txpool::AllReply_TxnType value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:txpool.AllReply.Tx.txn_type)
}
inline ::txpool::AllReply_TxnType AllReply_Tx::_internal_txn_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::txpool::AllReply_TxnType>(_impl_.txn_type_);
}
inline void AllReply_Tx::_internal_set_txn_type(::txpool::AllReply_TxnType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txn_type_ = value;
}

// .types.H160 sender = 2;
inline bool AllReply_Tx::has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sender_ != nullptr);
  return value;
}
inline const ::types::H160& AllReply_Tx::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::types::H160* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(::types::_H160_default_instance_);
}
inline const ::types::H160& AllReply_Tx::sender() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.AllReply.Tx.sender)
  return _internal_sender();
}
inline void AllReply_Tx::unsafe_arena_set_allocated_sender(::types::H160* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = reinterpret_cast<::types::H160*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txpool.AllReply.Tx.sender)
}
inline ::types::H160* AllReply_Tx::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H160* released = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::types::H160* AllReply_Tx::unsafe_arena_release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.AllReply.Tx.sender)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H160* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::types::H160* AllReply_Tx::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sender_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::types::H160>(GetArena());
    _impl_.sender_ = reinterpret_cast<::types::H160*>(p);
  }
  return _impl_.sender_;
}
inline ::types::H160* AllReply_Tx::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::types::H160* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:txpool.AllReply.Tx.sender)
  return _msg;
}
inline void AllReply_Tx::set_allocated_sender(::types::H160* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sender_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sender_ = reinterpret_cast<::types::H160*>(value);
  // @@protoc_insertion_point(field_set_allocated:txpool.AllReply.Tx.sender)
}

// bytes rlp_tx = 3;
inline void AllReply_Tx::clear_rlp_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.ClearToEmpty();
}
inline const std::string& AllReply_Tx::rlp_tx() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.AllReply.Tx.rlp_tx)
  return _internal_rlp_tx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AllReply_Tx::set_rlp_tx(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.AllReply.Tx.rlp_tx)
}
inline std::string* AllReply_Tx::mutable_rlp_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rlp_tx();
  // @@protoc_insertion_point(field_mutable:txpool.AllReply.Tx.rlp_tx)
  return _s;
}
inline const std::string& AllReply_Tx::_internal_rlp_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rlp_tx_.Get();
}
inline void AllReply_Tx::_internal_set_rlp_tx(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.Set(value, GetArena());
}
inline std::string* AllReply_Tx::_internal_mutable_rlp_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rlp_tx_.Mutable( GetArena());
}
inline std::string* AllReply_Tx::release_rlp_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.AllReply.Tx.rlp_tx)
  return _impl_.rlp_tx_.Release();
}
inline void AllReply_Tx::set_allocated_rlp_tx(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rlp_tx_.IsDefault()) {
          _impl_.rlp_tx_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.AllReply.Tx.rlp_tx)
}

// -------------------------------------------------------------------

// AllReply

// repeated .txpool.AllReply.Tx txs = 1;
inline int AllReply::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int AllReply::txs_size() const {
  return _internal_txs_size();
}
inline void AllReply::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline ::txpool::AllReply_Tx* AllReply::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.AllReply.txs)
  return _internal_mutable_txs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>* AllReply::mutable_txs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.AllReply.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::txpool::AllReply_Tx& AllReply::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.AllReply.txs)
  return _internal_txs().Get(index);
}
inline ::txpool::AllReply_Tx* AllReply::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::txpool::AllReply_Tx* _add = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add:txpool.AllReply.txs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>& AllReply::txs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.AllReply.txs)
  return _internal_txs();
}
inline const ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>&
AllReply::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<::txpool::AllReply_Tx>*
AllReply::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// -------------------------------------------------------------------

// PendingReply_Tx

// .types.H160 sender = 1;
inline bool PendingReply_Tx::has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sender_ != nullptr);
  return value;
}
inline const ::types::H160& PendingReply_Tx::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::types::H160* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(::types::_H160_default_instance_);
}
inline const ::types::H160& PendingReply_Tx::sender() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.Tx.sender)
  return _internal_sender();
}
inline void PendingReply_Tx::unsafe_arena_set_allocated_sender(::types::H160* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = reinterpret_cast<::types::H160*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txpool.PendingReply.Tx.sender)
}
inline ::types::H160* PendingReply_Tx::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H160* released = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::types::H160* PendingReply_Tx::unsafe_arena_release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.PendingReply.Tx.sender)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H160* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::types::H160* PendingReply_Tx::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sender_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::types::H160>(GetArena());
    _impl_.sender_ = reinterpret_cast<::types::H160*>(p);
  }
  return _impl_.sender_;
}
inline ::types::H160* PendingReply_Tx::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::types::H160* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:txpool.PendingReply.Tx.sender)
  return _msg;
}
inline void PendingReply_Tx::set_allocated_sender(::types::H160* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sender_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sender_ = reinterpret_cast<::types::H160*>(value);
  // @@protoc_insertion_point(field_set_allocated:txpool.PendingReply.Tx.sender)
}

// bytes rlp_tx = 2;
inline void PendingReply_Tx::clear_rlp_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.ClearToEmpty();
}
inline const std::string& PendingReply_Tx::rlp_tx() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.Tx.rlp_tx)
  return _internal_rlp_tx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PendingReply_Tx::set_rlp_tx(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:txpool.PendingReply.Tx.rlp_tx)
}
inline std::string* PendingReply_Tx::mutable_rlp_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rlp_tx();
  // @@protoc_insertion_point(field_mutable:txpool.PendingReply.Tx.rlp_tx)
  return _s;
}
inline const std::string& PendingReply_Tx::_internal_rlp_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rlp_tx_.Get();
}
inline void PendingReply_Tx::_internal_set_rlp_tx(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.Set(value, GetArena());
}
inline std::string* PendingReply_Tx::_internal_mutable_rlp_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rlp_tx_.Mutable( GetArena());
}
inline std::string* PendingReply_Tx::release_rlp_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.PendingReply.Tx.rlp_tx)
  return _impl_.rlp_tx_.Release();
}
inline void PendingReply_Tx::set_allocated_rlp_tx(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rlp_tx_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rlp_tx_.IsDefault()) {
          _impl_.rlp_tx_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:txpool.PendingReply.Tx.rlp_tx)
}

// bool is_local = 3;
inline void PendingReply_Tx::clear_is_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_local_ = false;
}
inline bool PendingReply_Tx::is_local() const {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.Tx.is_local)
  return _internal_is_local();
}
inline void PendingReply_Tx::set_is_local(bool value) {
  _internal_set_is_local(value);
  // @@protoc_insertion_point(field_set:txpool.PendingReply.Tx.is_local)
}
inline bool PendingReply_Tx::_internal_is_local() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_local_;
}
inline void PendingReply_Tx::_internal_set_is_local(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_local_ = value;
}

// -------------------------------------------------------------------

// PendingReply

// repeated .txpool.PendingReply.Tx txs = 1;
inline int PendingReply::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int PendingReply::txs_size() const {
  return _internal_txs_size();
}
inline void PendingReply::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline ::txpool::PendingReply_Tx* PendingReply::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:txpool.PendingReply.txs)
  return _internal_mutable_txs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>* PendingReply::mutable_txs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:txpool.PendingReply.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::txpool::PendingReply_Tx& PendingReply::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.PendingReply.txs)
  return _internal_txs().Get(index);
}
inline ::txpool::PendingReply_Tx* PendingReply::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::txpool::PendingReply_Tx* _add = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add:txpool.PendingReply.txs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>& PendingReply::txs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:txpool.PendingReply.txs)
  return _internal_txs();
}
inline const ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>&
PendingReply::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<::txpool::PendingReply_Tx>*
PendingReply::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// -------------------------------------------------------------------

// StatusRequest

// -------------------------------------------------------------------

// StatusReply

// uint32 pending_count = 1;
inline void StatusReply::clear_pending_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pending_count_ = 0u;
}
inline ::uint32_t StatusReply::pending_count() const {
  // @@protoc_insertion_point(field_get:txpool.StatusReply.pending_count)
  return _internal_pending_count();
}
inline void StatusReply::set_pending_count(::uint32_t value) {
  _internal_set_pending_count(value);
  // @@protoc_insertion_point(field_set:txpool.StatusReply.pending_count)
}
inline ::uint32_t StatusReply::_internal_pending_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pending_count_;
}
inline void StatusReply::_internal_set_pending_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pending_count_ = value;
}

// uint32 queued_count = 2;
inline void StatusReply::clear_queued_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queued_count_ = 0u;
}
inline ::uint32_t StatusReply::queued_count() const {
  // @@protoc_insertion_point(field_get:txpool.StatusReply.queued_count)
  return _internal_queued_count();
}
inline void StatusReply::set_queued_count(::uint32_t value) {
  _internal_set_queued_count(value);
  // @@protoc_insertion_point(field_set:txpool.StatusReply.queued_count)
}
inline ::uint32_t StatusReply::_internal_queued_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queued_count_;
}
inline void StatusReply::_internal_set_queued_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queued_count_ = value;
}

// uint32 base_fee_count = 3;
inline void StatusReply::clear_base_fee_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_fee_count_ = 0u;
}
inline ::uint32_t StatusReply::base_fee_count() const {
  // @@protoc_insertion_point(field_get:txpool.StatusReply.base_fee_count)
  return _internal_base_fee_count();
}
inline void StatusReply::set_base_fee_count(::uint32_t value) {
  _internal_set_base_fee_count(value);
  // @@protoc_insertion_point(field_set:txpool.StatusReply.base_fee_count)
}
inline ::uint32_t StatusReply::_internal_base_fee_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_fee_count_;
}
inline void StatusReply::_internal_set_base_fee_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_fee_count_ = value;
}

// -------------------------------------------------------------------

// NonceRequest

// .types.H160 address = 1;
inline bool NonceRequest::has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.address_ != nullptr);
  return value;
}
inline const ::types::H160& NonceRequest::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::types::H160* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(::types::_H160_default_instance_);
}
inline const ::types::H160& NonceRequest::address() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:txpool.NonceRequest.address)
  return _internal_address();
}
inline void NonceRequest::unsafe_arena_set_allocated_address(::types::H160* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = reinterpret_cast<::types::H160*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txpool.NonceRequest.address)
}
inline ::types::H160* NonceRequest::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H160* released = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::types::H160* NonceRequest::unsafe_arena_release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:txpool.NonceRequest.address)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H160* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::types::H160* NonceRequest::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.address_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::types::H160>(GetArena());
    _impl_.address_ = reinterpret_cast<::types::H160*>(p);
  }
  return _impl_.address_;
}
inline ::types::H160* NonceRequest::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::types::H160* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:txpool.NonceRequest.address)
  return _msg;
}
inline void NonceRequest::set_allocated_address(::types::H160* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.address_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.address_ = reinterpret_cast<::types::H160*>(value);
  // @@protoc_insertion_point(field_set_allocated:txpool.NonceRequest.address)
}

// -------------------------------------------------------------------

// NonceReply

// bool found = 1;
inline void NonceReply::clear_found() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.found_ = false;
}
inline bool NonceReply::found() const {
  // @@protoc_insertion_point(field_get:txpool.NonceReply.found)
  return _internal_found();
}
inline void NonceReply::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:txpool.NonceReply.found)
}
inline bool NonceReply::_internal_found() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.found_;
}
inline void NonceReply::_internal_set_found(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.found_ = value;
}

// uint64 nonce = 2;
inline void NonceReply::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_ = ::uint64_t{0u};
}
inline ::uint64_t NonceReply::nonce() const {
  // @@protoc_insertion_point(field_get:txpool.NonceReply.nonce)
  return _internal_nonce();
}
inline void NonceReply::set_nonce(::uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:txpool.NonceReply.nonce)
}
inline ::uint64_t NonceReply::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_;
}
inline void NonceReply::_internal_set_nonce(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace txpool


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::txpool::AllReply_TxnType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::txpool::AllReply_TxnType>() {
  return ::txpool::AllReply_TxnType_descriptor();
}
template <>
struct is_proto_enum<::txpool::ImportResult> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::txpool::ImportResult>() {
  return ::txpool::ImportResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto_2epb_2eh
