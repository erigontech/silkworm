// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/kv.proto

#include "remote/kv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace remote {
PROTOBUF_CONSTEXPR Cursor::Cursor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.v_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_)*/0
  , /*decltype(_impl_.cursor_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CursorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CursorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CursorDefaultTypeInternal() {}
  union {
    Cursor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CursorDefaultTypeInternal _Cursor_default_instance_;
PROTOBUF_CONSTEXPR Pair::Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.k_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.v_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.view_id_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.cursor_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PairDefaultTypeInternal() {}
  union {
    Pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PairDefaultTypeInternal _Pair_default_instance_;
PROTOBUF_CONSTEXPR StorageChange::StorageChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StorageChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageChangeDefaultTypeInternal() {}
  union {
    StorageChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageChangeDefaultTypeInternal _StorageChange_default_instance_;
PROTOBUF_CONSTEXPR AccountChange::AccountChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.storage_changes_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_.incarnation_)*/uint64_t{0u}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountChangeDefaultTypeInternal() {}
  union {
    AccountChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountChangeDefaultTypeInternal _AccountChange_default_instance_;
PROTOBUF_CONSTEXPR StateChangeBatch::StateChangeBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.change_batch_)*/{}
  , /*decltype(_impl_.state_version_id_)*/uint64_t{0u}
  , /*decltype(_impl_.pending_block_base_fee_)*/uint64_t{0u}
  , /*decltype(_impl_.block_gas_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.finalized_block_)*/uint64_t{0u}
  , /*decltype(_impl_.pending_blob_fee_per_gas_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StateChangeBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateChangeBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateChangeBatchDefaultTypeInternal() {}
  union {
    StateChangeBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateChangeBatchDefaultTypeInternal _StateChangeBatch_default_instance_;
PROTOBUF_CONSTEXPR StateChange::StateChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.changes_)*/{}
  , /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.block_height_)*/uint64_t{0u}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StateChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateChangeDefaultTypeInternal() {}
  union {
    StateChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateChangeDefaultTypeInternal _StateChange_default_instance_;
PROTOBUF_CONSTEXPR StateChangeRequest::StateChangeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.with_storage_)*/false
  , /*decltype(_impl_.with_transactions_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StateChangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateChangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateChangeRequestDefaultTypeInternal() {}
  union {
    StateChangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateChangeRequestDefaultTypeInternal _StateChangeRequest_default_instance_;
PROTOBUF_CONSTEXPR SnapshotsRequest::SnapshotsRequest(
    ::_pbi::ConstantInitialized) {}
struct SnapshotsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotsRequestDefaultTypeInternal() {}
  union {
    SnapshotsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotsRequestDefaultTypeInternal _SnapshotsRequest_default_instance_;
PROTOBUF_CONSTEXPR SnapshotsReply::SnapshotsReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_files_)*/{}
  , /*decltype(_impl_.history_files_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotsReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotsReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotsReplyDefaultTypeInternal() {}
  union {
    SnapshotsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotsReplyDefaultTypeInternal _SnapshotsReply_default_instance_;
PROTOBUF_CONSTEXPR RangeReq::RangeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_.order_ascend_)*/false
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeReqDefaultTypeInternal() {}
  union {
    RangeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeReqDefaultTypeInternal _RangeReq_default_instance_;
PROTOBUF_CONSTEXPR DomainGetReq::DomainGetReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.ts_)*/uint64_t{0u}
  , /*decltype(_impl_.latest_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DomainGetReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomainGetReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomainGetReqDefaultTypeInternal() {}
  union {
    DomainGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomainGetReqDefaultTypeInternal _DomainGetReq_default_instance_;
PROTOBUF_CONSTEXPR DomainGetReply::DomainGetReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DomainGetReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomainGetReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomainGetReplyDefaultTypeInternal() {}
  union {
    DomainGetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomainGetReplyDefaultTypeInternal _DomainGetReply_default_instance_;
PROTOBUF_CONSTEXPR HistoryGetReq::HistoryGetReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.ts_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistoryGetReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryGetReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryGetReqDefaultTypeInternal() {}
  union {
    HistoryGetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryGetReqDefaultTypeInternal _HistoryGetReq_default_instance_;
PROTOBUF_CONSTEXPR HistoryGetReply::HistoryGetReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistoryGetReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryGetReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryGetReplyDefaultTypeInternal() {}
  union {
    HistoryGetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryGetReplyDefaultTypeInternal _HistoryGetReply_default_instance_;
PROTOBUF_CONSTEXPR IndexRangeReq::IndexRangeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.k_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.from_ts_)*/int64_t{0}
  , /*decltype(_impl_.to_ts_)*/int64_t{0}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_.order_ascend_)*/false
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexRangeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexRangeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexRangeReqDefaultTypeInternal() {}
  union {
    IndexRangeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexRangeReqDefaultTypeInternal _IndexRangeReq_default_instance_;
PROTOBUF_CONSTEXPR IndexRangeReply::IndexRangeReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamps_)*/{}
  , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexRangeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexRangeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexRangeReplyDefaultTypeInternal() {}
  union {
    IndexRangeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexRangeReplyDefaultTypeInternal _IndexRangeReply_default_instance_;
PROTOBUF_CONSTEXPR HistoryRangeReq::HistoryRangeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.from_ts_)*/int64_t{0}
  , /*decltype(_impl_.to_ts_)*/int64_t{0}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_.order_ascend_)*/false
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistoryRangeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryRangeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryRangeReqDefaultTypeInternal() {}
  union {
    HistoryRangeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryRangeReqDefaultTypeInternal _HistoryRangeReq_default_instance_;
PROTOBUF_CONSTEXPR DomainRangeReq::DomainRangeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.ts_)*/uint64_t{0u}
  , /*decltype(_impl_.latest_)*/false
  , /*decltype(_impl_.order_ascend_)*/false
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DomainRangeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomainRangeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomainRangeReqDefaultTypeInternal() {}
  union {
    DomainRangeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomainRangeReqDefaultTypeInternal _DomainRangeReq_default_instance_;
PROTOBUF_CONSTEXPR Pairs::Pairs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PairsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PairsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PairsDefaultTypeInternal() {}
  union {
    Pairs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PairsDefaultTypeInternal _Pairs_default_instance_;
PROTOBUF_CONSTEXPR ParisPagination::ParisPagination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParisPaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParisPaginationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParisPaginationDefaultTypeInternal() {}
  union {
    ParisPagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParisPaginationDefaultTypeInternal _ParisPagination_default_instance_;
PROTOBUF_CONSTEXPR IndexPagination::IndexPagination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_time_stamp_)*/int64_t{0}
  , /*decltype(_impl_.limit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexPaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexPaginationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexPaginationDefaultTypeInternal() {}
  union {
    IndexPagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexPaginationDefaultTypeInternal _IndexPagination_default_instance_;
}  // namespace remote
static ::_pb::Metadata file_level_metadata_remote_2fkv_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_remote_2fkv_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_remote_2fkv_2eproto = nullptr;

const uint32_t TableStruct_remote_2fkv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, _impl_.bucket_name_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, _impl_.cursor_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::remote::Cursor, _impl_.v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::Pair, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, _impl_.cursor_id_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, _impl_.view_id_),
  PROTOBUF_FIELD_OFFSET(::remote::Pair, _impl_.tx_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StorageChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::StorageChange, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::remote::StorageChange, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _impl_.incarnation_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::remote::AccountChange, _impl_.storage_changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _impl_.state_version_id_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _impl_.change_batch_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _impl_.pending_block_base_fee_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _impl_.block_gas_limit_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _impl_.finalized_block_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeBatch, _impl_.pending_blob_fee_per_gas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, _impl_.block_height_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, _impl_.changes_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChange, _impl_.txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeRequest, _impl_.with_storage_),
  PROTOBUF_FIELD_OFFSET(::remote::StateChangeRequest, _impl_.with_transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsReply, _impl_.blocks_files_),
  PROTOBUF_FIELD_OFFSET(::remote::SnapshotsReply, _impl_.history_files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.from_prefix_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.to_prefix_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::RangeReq, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _impl_.k2_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReq, _impl_.latest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReply, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainGetReply, _impl_.ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReq, _impl_.ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReply, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryGetReply, _impl_.ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.from_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.to_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReq, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReply, _impl_.timestamps_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexRangeReply, _impl_.next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.from_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.to_ts_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::HistoryRangeReq, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.from_key_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.to_key_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.latest_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.order_ascend_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::remote::DomainRangeReq, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::remote::Pairs, _impl_.next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ParisPagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::ParisPagination, _impl_.next_key_),
  PROTOBUF_FIELD_OFFSET(::remote::ParisPagination, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::IndexPagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::IndexPagination, _impl_.next_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::remote::IndexPagination, _impl_.limit_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::remote::Cursor)},
  { 11, -1, -1, sizeof(::remote::Pair)},
  { 22, -1, -1, sizeof(::remote::StorageChange)},
  { 30, -1, -1, sizeof(::remote::AccountChange)},
  { 42, -1, -1, sizeof(::remote::StateChangeBatch)},
  { 54, -1, -1, sizeof(::remote::StateChange)},
  { 65, -1, -1, sizeof(::remote::StateChangeRequest)},
  { 73, -1, -1, sizeof(::remote::SnapshotsRequest)},
  { 79, -1, -1, sizeof(::remote::SnapshotsReply)},
  { 87, -1, -1, sizeof(::remote::RangeReq)},
  { 101, -1, -1, sizeof(::remote::DomainGetReq)},
  { 113, -1, -1, sizeof(::remote::DomainGetReply)},
  { 121, -1, -1, sizeof(::remote::HistoryGetReq)},
  { 131, -1, -1, sizeof(::remote::HistoryGetReply)},
  { 139, -1, -1, sizeof(::remote::IndexRangeReq)},
  { 154, -1, -1, sizeof(::remote::IndexRangeReply)},
  { 162, -1, -1, sizeof(::remote::HistoryRangeReq)},
  { 176, -1, -1, sizeof(::remote::DomainRangeReq)},
  { 192, -1, -1, sizeof(::remote::Pairs)},
  { 201, -1, -1, sizeof(::remote::ParisPagination)},
  { 209, -1, -1, sizeof(::remote::IndexPagination)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::remote::_Cursor_default_instance_._instance,
  &::remote::_Pair_default_instance_._instance,
  &::remote::_StorageChange_default_instance_._instance,
  &::remote::_AccountChange_default_instance_._instance,
  &::remote::_StateChangeBatch_default_instance_._instance,
  &::remote::_StateChange_default_instance_._instance,
  &::remote::_StateChangeRequest_default_instance_._instance,
  &::remote::_SnapshotsRequest_default_instance_._instance,
  &::remote::_SnapshotsReply_default_instance_._instance,
  &::remote::_RangeReq_default_instance_._instance,
  &::remote::_DomainGetReq_default_instance_._instance,
  &::remote::_DomainGetReply_default_instance_._instance,
  &::remote::_HistoryGetReq_default_instance_._instance,
  &::remote::_HistoryGetReply_default_instance_._instance,
  &::remote::_IndexRangeReq_default_instance_._instance,
  &::remote::_IndexRangeReply_default_instance_._instance,
  &::remote::_HistoryRangeReq_default_instance_._instance,
  &::remote::_DomainRangeReq_default_instance_._instance,
  &::remote::_Pairs_default_instance_._instance,
  &::remote::_ParisPagination_default_instance_._instance,
  &::remote::_IndexPagination_default_instance_._instance,
};

const char descriptor_table_protodef_remote_2fkv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017remote/kv.proto\022\006remote\032\033google/protob"
  "uf/empty.proto\032\021types/types.proto\"[\n\006Cur"
  "sor\022\026\n\002op\030\001 \001(\0162\n.remote.Op\022\023\n\013bucket_na"
  "me\030\002 \001(\t\022\016\n\006cursor\030\003 \001(\r\022\t\n\001k\030\004 \001(\014\022\t\n\001v"
  "\030\005 \001(\014\"O\n\004Pair\022\t\n\001k\030\001 \001(\014\022\t\n\001v\030\002 \001(\014\022\021\n\t"
  "cursor_id\030\003 \001(\r\022\017\n\007view_id\030\004 \001(\004\022\r\n\005tx_i"
  "d\030\005 \001(\004\"<\n\rStorageChange\022\035\n\010location\030\001 \001"
  "(\0132\013.types.H256\022\014\n\004data\030\002 \001(\014\"\256\001\n\rAccoun"
  "tChange\022\034\n\007address\030\001 \001(\0132\013.types.H160\022\023\n"
  "\013incarnation\030\002 \001(\004\022\036\n\006action\030\003 \001(\0162\016.rem"
  "ote.Action\022\014\n\004data\030\004 \001(\014\022\014\n\004code\030\005 \001(\014\022."
  "\n\017storage_changes\030\006 \003(\0132\025.remote.Storage"
  "Change\"\313\001\n\020StateChangeBatch\022\030\n\020state_ver"
  "sion_id\030\001 \001(\004\022)\n\014change_batch\030\002 \003(\0132\023.re"
  "mote.StateChange\022\036\n\026pending_block_base_f"
  "ee\030\003 \001(\004\022\027\n\017block_gas_limit\030\004 \001(\004\022\027\n\017fin"
  "alized_block\030\005 \001(\004\022 \n\030pending_blob_fee_p"
  "er_gas\030\006 \001(\004\"\237\001\n\013StateChange\022$\n\tdirectio"
  "n\030\001 \001(\0162\021.remote.Direction\022\024\n\014block_heig"
  "ht\030\002 \001(\004\022\037\n\nblock_hash\030\003 \001(\0132\013.types.H25"
  "6\022&\n\007changes\030\004 \003(\0132\025.remote.AccountChang"
  "e\022\013\n\003txs\030\005 \003(\014\"E\n\022StateChangeRequest\022\024\n\014"
  "with_storage\030\001 \001(\010\022\031\n\021with_transactions\030"
  "\002 \001(\010\"\022\n\020SnapshotsRequest\"=\n\016SnapshotsRe"
  "ply\022\024\n\014blocks_files\030\001 \003(\t\022\025\n\rhistory_fil"
  "es\030\002 \003(\t\"\234\001\n\010RangeReq\022\r\n\005tx_id\030\001 \001(\004\022\r\n\005"
  "table\030\002 \001(\t\022\023\n\013from_prefix\030\003 \001(\014\022\021\n\tto_p"
  "refix\030\004 \001(\014\022\024\n\014order_ascend\030\005 \001(\010\022\r\n\005lim"
  "it\030\006 \001(\022\022\021\n\tpage_size\030\007 \001(\005\022\022\n\npage_toke"
  "n\030\010 \001(\t\"_\n\014DomainGetReq\022\r\n\005tx_id\030\001 \001(\004\022\r"
  "\n\005table\030\002 \001(\t\022\t\n\001k\030\003 \001(\014\022\n\n\002ts\030\004 \001(\004\022\n\n\002"
  "k2\030\005 \001(\014\022\016\n\006latest\030\006 \001(\010\"\'\n\016DomainGetRep"
  "ly\022\t\n\001v\030\001 \001(\014\022\n\n\002ok\030\002 \001(\010\"D\n\rHistoryGetR"
  "eq\022\r\n\005tx_id\030\001 \001(\004\022\r\n\005table\030\002 \001(\t\022\t\n\001k\030\003 "
  "\001(\014\022\n\n\002ts\030\004 \001(\004\"(\n\017HistoryGetReply\022\t\n\001v\030"
  "\001 \001(\014\022\n\n\002ok\030\002 \001(\010\"\244\001\n\rIndexRangeReq\022\r\n\005t"
  "x_id\030\001 \001(\004\022\r\n\005table\030\002 \001(\t\022\t\n\001k\030\003 \001(\014\022\017\n\007"
  "from_ts\030\004 \001(\022\022\r\n\005to_ts\030\005 \001(\022\022\024\n\014order_as"
  "cend\030\006 \001(\010\022\r\n\005limit\030\007 \001(\022\022\021\n\tpage_size\030\010"
  " \001(\005\022\022\n\npage_token\030\t \001(\t\">\n\017IndexRangeRe"
  "ply\022\022\n\ntimestamps\030\001 \003(\004\022\027\n\017next_page_tok"
  "en\030\002 \001(\t\"\233\001\n\017HistoryRangeReq\022\r\n\005tx_id\030\001 "
  "\001(\004\022\r\n\005table\030\002 \001(\t\022\017\n\007from_ts\030\004 \001(\022\022\r\n\005t"
  "o_ts\030\005 \001(\022\022\024\n\014order_ascend\030\006 \001(\010\022\r\n\005limi"
  "t\030\007 \001(\022\022\021\n\tpage_size\030\010 \001(\005\022\022\n\npage_token"
  "\030\t \001(\t\"\270\001\n\016DomainRangeReq\022\r\n\005tx_id\030\001 \001(\004"
  "\022\r\n\005table\030\002 \001(\t\022\020\n\010from_key\030\003 \001(\014\022\016\n\006to_"
  "key\030\004 \001(\014\022\n\n\002ts\030\005 \001(\004\022\016\n\006latest\030\006 \001(\010\022\024\n"
  "\014order_ascend\030\007 \001(\010\022\r\n\005limit\030\010 \001(\022\022\021\n\tpa"
  "ge_size\030\t \001(\005\022\022\n\npage_token\030\n \001(\t\">\n\005Pai"
  "rs\022\014\n\004keys\030\001 \003(\014\022\016\n\006values\030\002 \003(\014\022\027\n\017next"
  "_page_token\030\003 \001(\t\"2\n\017ParisPagination\022\020\n\010"
  "next_key\030\001 \001(\014\022\r\n\005limit\030\002 \001(\022\"9\n\017IndexPa"
  "gination\022\027\n\017next_time_stamp\030\001 \001(\022\022\r\n\005lim"
  "it\030\002 \001(\022*\206\002\n\002Op\022\t\n\005FIRST\020\000\022\r\n\tFIRST_DUP\020"
  "\001\022\010\n\004SEEK\020\002\022\r\n\tSEEK_BOTH\020\003\022\013\n\007CURRENT\020\004\022"
  "\010\n\004LAST\020\006\022\014\n\010LAST_DUP\020\007\022\010\n\004NEXT\020\010\022\014\n\010NEX"
  "T_DUP\020\t\022\017\n\013NEXT_NO_DUP\020\013\022\010\n\004PREV\020\014\022\014\n\010PR"
  "EV_DUP\020\r\022\017\n\013PREV_NO_DUP\020\016\022\016\n\nSEEK_EXACT\020"
  "\017\022\023\n\017SEEK_BOTH_EXACT\020\020\022\010\n\004OPEN\020\036\022\t\n\005CLOS"
  "E\020\037\022\021\n\rOPEN_DUP_SORT\020 \022\t\n\005COUNT\020!*H\n\006Act"
  "ion\022\013\n\007STORAGE\020\000\022\n\n\006UPSERT\020\001\022\010\n\004CODE\020\002\022\017"
  "\n\013UPSERT_CODE\020\003\022\n\n\006REMOVE\020\004*$\n\tDirection"
  "\022\013\n\007FORWARD\020\000\022\n\n\006UNWIND\020\0012\272\004\n\002KV\0226\n\007Vers"
  "ion\022\026.google.protobuf.Empty\032\023.types.Vers"
  "ionReply\022&\n\002Tx\022\016.remote.Cursor\032\014.remote."
  "Pair(\0010\001\022F\n\014StateChanges\022\032.remote.StateC"
  "hangeRequest\032\030.remote.StateChangeBatch0\001"
  "\022=\n\tSnapshots\022\030.remote.SnapshotsRequest\032"
  "\026.remote.SnapshotsReply\022(\n\005Range\022\020.remot"
  "e.RangeReq\032\r.remote.Pairs\0229\n\tDomainGet\022\024"
  ".remote.DomainGetReq\032\026.remote.DomainGetR"
  "eply\022<\n\nHistoryGet\022\025.remote.HistoryGetRe"
  "q\032\027.remote.HistoryGetReply\022<\n\nIndexRange"
  "\022\025.remote.IndexRangeReq\032\027.remote.IndexRa"
  "ngeReply\0226\n\014HistoryRange\022\027.remote.Histor"
  "yRangeReq\032\r.remote.Pairs\0224\n\013DomainRange\022"
  "\026.remote.DomainRangeReq\032\r.remote.PairsB\021"
  "Z\017./remote;remoteb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_remote_2fkv_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_remote_2fkv_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_remote_2fkv_2eproto = {
    false, false, 3145, descriptor_table_protodef_remote_2fkv_2eproto,
    "remote/kv.proto",
    &descriptor_table_remote_2fkv_2eproto_once, descriptor_table_remote_2fkv_2eproto_deps, 2, 21,
    schemas, file_default_instances, TableStruct_remote_2fkv_2eproto::offsets,
    file_level_metadata_remote_2fkv_2eproto, file_level_enum_descriptors_remote_2fkv_2eproto,
    file_level_service_descriptors_remote_2fkv_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_remote_2fkv_2eproto_getter() {
  return &descriptor_table_remote_2fkv_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_remote_2fkv_2eproto(&descriptor_table_remote_2fkv_2eproto);
namespace remote {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fkv_2eproto);
  return file_level_enum_descriptors_remote_2fkv_2eproto[0];
}
bool Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fkv_2eproto);
  return file_level_enum_descriptors_remote_2fkv_2eproto[1];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fkv_2eproto);
  return file_level_enum_descriptors_remote_2fkv_2eproto[2];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Cursor::_Internal {
 public:
};

Cursor::Cursor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.Cursor)
}
Cursor::Cursor(const Cursor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cursor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_name_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.cursor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_name().empty()) {
    _this->_impl_.bucket_name_.Set(from._internal_bucket_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k().empty()) {
    _this->_impl_.k_.Set(from._internal_k(), 
      _this->GetArenaForAllocation());
  }
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    _this->_impl_.v_.Set(from._internal_v(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.op_, &from._impl_.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cursor_) -
    reinterpret_cast<char*>(&_impl_.op_)) + sizeof(_impl_.cursor_));
  // @@protoc_insertion_point(copy_constructor:remote.Cursor)
}

inline void Cursor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_name_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.op_){0}
    , decltype(_impl_.cursor_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cursor::~Cursor() {
  // @@protoc_insertion_point(destructor:remote.Cursor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cursor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_name_.Destroy();
  _impl_.k_.Destroy();
  _impl_.v_.Destroy();
}

void Cursor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cursor::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.Cursor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_name_.ClearToEmpty();
  _impl_.k_.ClearToEmpty();
  _impl_.v_.ClearToEmpty();
  ::memset(&_impl_.op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cursor_) -
      reinterpret_cast<char*>(&_impl_.op_)) + sizeof(_impl_.cursor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cursor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.Op op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::remote::Op>(val));
        } else
          goto handle_unusual;
        continue;
      // string bucket_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.Cursor.bucket_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_k();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cursor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.Cursor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Op op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // string bucket_name = 2;
  if (!this->_internal_bucket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_name().data(), static_cast<int>(this->_internal_bucket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.Cursor.bucket_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket_name(), target);
  }

  // uint32 cursor = 3;
  if (this->_internal_cursor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cursor(), target);
  }

  // bytes k = 4;
  if (!this->_internal_k().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_k(), target);
  }

  // bytes v = 5;
  if (!this->_internal_v().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.Cursor)
  return target;
}

size_t Cursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.Cursor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket_name = 2;
  if (!this->_internal_bucket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_name());
  }

  // bytes k = 4;
  if (!this->_internal_k().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // bytes v = 5;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // .remote.Op op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  // uint32 cursor = 3;
  if (this->_internal_cursor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cursor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cursor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cursor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cursor::GetClassData() const { return &_class_data_; }


void Cursor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cursor*>(&to_msg);
  auto& from = static_cast<const Cursor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.Cursor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket_name().empty()) {
    _this->_internal_set_bucket_name(from._internal_bucket_name());
  }
  if (!from._internal_k().empty()) {
    _this->_internal_set_k(from._internal_k());
  }
  if (!from._internal_v().empty()) {
    _this->_internal_set_v(from._internal_v());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_cursor() != 0) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cursor::CopyFrom(const Cursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.Cursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cursor::IsInitialized() const {
  return true;
}

void Cursor::InternalSwap(Cursor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_name_, lhs_arena,
      &other->_impl_.bucket_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k_, lhs_arena,
      &other->_impl_.k_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v_, lhs_arena,
      &other->_impl_.v_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cursor, _impl_.cursor_)
      + sizeof(Cursor::_impl_.cursor_)
      - PROTOBUF_FIELD_OFFSET(Cursor, _impl_.op_)>(
          reinterpret_cast<char*>(&_impl_.op_),
          reinterpret_cast<char*>(&other->_impl_.op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cursor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[0]);
}

// ===================================================================

class Pair::_Internal {
 public:
};

Pair::Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.Pair)
}
Pair::Pair(const Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.k_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.view_id_){}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.cursor_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k().empty()) {
    _this->_impl_.k_.Set(from._internal_k(), 
      _this->GetArenaForAllocation());
  }
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    _this->_impl_.v_.Set(from._internal_v(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.view_id_, &from._impl_.view_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cursor_id_) -
    reinterpret_cast<char*>(&_impl_.view_id_)) + sizeof(_impl_.cursor_id_));
  // @@protoc_insertion_point(copy_constructor:remote.Pair)
}

inline void Pair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.k_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.view_id_){uint64_t{0u}}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.cursor_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:remote.Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.k_.Destroy();
  _impl_.v_.Destroy();
}

void Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.Pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.k_.ClearToEmpty();
  _impl_.v_.ClearToEmpty();
  ::memset(&_impl_.view_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cursor_id_) -
      reinterpret_cast<char*>(&_impl_.view_id_)) + sizeof(_impl_.cursor_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_k();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cursor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cursor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 view_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.Pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes k = 1;
  if (!this->_internal_k().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_k(), target);
  }

  // bytes v = 2;
  if (!this->_internal_v().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_v(), target);
  }

  // uint32 cursor_id = 3;
  if (this->_internal_cursor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cursor_id(), target);
  }

  // uint64 view_id = 4;
  if (this->_internal_view_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_view_id(), target);
  }

  // uint64 tx_id = 5;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tx_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.Pair)
  return target;
}

size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.Pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes k = 1;
  if (!this->_internal_k().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // bytes v = 2;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // uint64 view_id = 4;
  if (this->_internal_view_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_view_id());
  }

  // uint64 tx_id = 5;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // uint32 cursor_id = 3;
  if (this->_internal_cursor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cursor_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pair::GetClassData() const { return &_class_data_; }


void Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pair*>(&to_msg);
  auto& from = static_cast<const Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.Pair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_k().empty()) {
    _this->_internal_set_k(from._internal_k());
  }
  if (!from._internal_v().empty()) {
    _this->_internal_set_v(from._internal_v());
  }
  if (from._internal_view_id() != 0) {
    _this->_internal_set_view_id(from._internal_view_id());
  }
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_cursor_id() != 0) {
    _this->_internal_set_cursor_id(from._internal_cursor_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  return true;
}

void Pair::InternalSwap(Pair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k_, lhs_arena,
      &other->_impl_.k_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v_, lhs_arena,
      &other->_impl_.v_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pair, _impl_.cursor_id_)
      + sizeof(Pair::_impl_.cursor_id_)
      - PROTOBUF_FIELD_OFFSET(Pair, _impl_.view_id_)>(
          reinterpret_cast<char*>(&_impl_.view_id_),
          reinterpret_cast<char*>(&other->_impl_.view_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[1]);
}

// ===================================================================

class StorageChange::_Internal {
 public:
  static const ::types::H256& location(const StorageChange* msg);
};

const ::types::H256&
StorageChange::_Internal::location(const StorageChange* msg) {
  return *msg->_impl_.location_;
}
void StorageChange::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
StorageChange::StorageChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.StorageChange)
}
StorageChange::StorageChange(const StorageChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StorageChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::types::H256(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.StorageChange)
}

inline void StorageChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StorageChange::~StorageChange() {
  // @@protoc_insertion_point(destructor:remote.StorageChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void StorageChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StorageChange::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StorageChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StorageChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 location = 1;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StorageChange)
  return target;
}

size_t StorageChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StorageChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H256 location = 1;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StorageChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StorageChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StorageChange::GetClassData() const { return &_class_data_; }


void StorageChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StorageChange*>(&to_msg);
  auto& from = static_cast<const StorageChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.StorageChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::types::H256::MergeFrom(
        from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StorageChange::CopyFrom(const StorageChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StorageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageChange::IsInitialized() const {
  return true;
}

void StorageChange::InternalSwap(StorageChange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.location_, other->_impl_.location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[2]);
}

// ===================================================================

class AccountChange::_Internal {
 public:
  static const ::types::H160& address(const AccountChange* msg);
};

const ::types::H160&
AccountChange::_Internal::address(const AccountChange* msg) {
  return *msg->_impl_.address_;
}
void AccountChange::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
AccountChange::AccountChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.AccountChange)
}
AccountChange::AccountChange(const AccountChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.storage_changes_){from._impl_.storage_changes_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.incarnation_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::types::H160(*from._impl_.address_);
  }
  ::memcpy(&_impl_.incarnation_, &from._impl_.incarnation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.incarnation_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:remote.AccountChange)
}

inline void AccountChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.storage_changes_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.incarnation_){uint64_t{0u}}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountChange::~AccountChange() {
  // @@protoc_insertion_point(destructor:remote.AccountChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.storage_changes_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.address_;
}

void AccountChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountChange::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.AccountChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.storage_changes_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  ::memset(&_impl_.incarnation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_) -
      reinterpret_cast<char*>(&_impl_.incarnation_)) + sizeof(_impl_.action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 incarnation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .remote.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::remote::Action>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .remote.StorageChange storage_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_storage_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.AccountChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // uint64 incarnation = 2;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_incarnation(), target);
  }

  // .remote.Action action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // bytes code = 5;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_code(), target);
  }

  // repeated .remote.StorageChange storage_changes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_storage_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_storage_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.AccountChange)
  return target;
}

size_t AccountChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.AccountChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remote.StorageChange storage_changes = 6;
  total_size += 1UL * this->_internal_storage_changes_size();
  for (const auto& msg : this->_impl_.storage_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes code = 5;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  // uint64 incarnation = 2;
  if (this->_internal_incarnation() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_incarnation());
  }

  // .remote.Action action = 3;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountChange::GetClassData() const { return &_class_data_; }


void AccountChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountChange*>(&to_msg);
  auto& from = static_cast<const AccountChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.AccountChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.storage_changes_.MergeFrom(from._impl_.storage_changes_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::types::H160::MergeFrom(
        from._internal_address());
  }
  if (from._internal_incarnation() != 0) {
    _this->_internal_set_incarnation(from._internal_incarnation());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountChange::CopyFrom(const AccountChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.AccountChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountChange::IsInitialized() const {
  return true;
}

void AccountChange::InternalSwap(AccountChange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.storage_changes_.InternalSwap(&other->_impl_.storage_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountChange, _impl_.action_)
      + sizeof(AccountChange::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(AccountChange, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[3]);
}

// ===================================================================

class StateChangeBatch::_Internal {
 public:
};

StateChangeBatch::StateChangeBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.StateChangeBatch)
}
StateChangeBatch::StateChangeBatch(const StateChangeBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StateChangeBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.change_batch_){from._impl_.change_batch_}
    , decltype(_impl_.state_version_id_){}
    , decltype(_impl_.pending_block_base_fee_){}
    , decltype(_impl_.block_gas_limit_){}
    , decltype(_impl_.finalized_block_){}
    , decltype(_impl_.pending_blob_fee_per_gas_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.state_version_id_, &from._impl_.state_version_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pending_blob_fee_per_gas_) -
    reinterpret_cast<char*>(&_impl_.state_version_id_)) + sizeof(_impl_.pending_blob_fee_per_gas_));
  // @@protoc_insertion_point(copy_constructor:remote.StateChangeBatch)
}

inline void StateChangeBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.change_batch_){arena}
    , decltype(_impl_.state_version_id_){uint64_t{0u}}
    , decltype(_impl_.pending_block_base_fee_){uint64_t{0u}}
    , decltype(_impl_.block_gas_limit_){uint64_t{0u}}
    , decltype(_impl_.finalized_block_){uint64_t{0u}}
    , decltype(_impl_.pending_blob_fee_per_gas_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StateChangeBatch::~StateChangeBatch() {
  // @@protoc_insertion_point(destructor:remote.StateChangeBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StateChangeBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.change_batch_.~RepeatedPtrField();
}

void StateChangeBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StateChangeBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StateChangeBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.change_batch_.Clear();
  ::memset(&_impl_.state_version_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pending_blob_fee_per_gas_) -
      reinterpret_cast<char*>(&_impl_.state_version_id_)) + sizeof(_impl_.pending_blob_fee_per_gas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChangeBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 state_version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.state_version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .remote.StateChange change_batch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change_batch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_block_base_fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pending_block_base_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_gas_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.block_gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 finalized_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.finalized_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_blob_fee_per_gas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.pending_blob_fee_per_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateChangeBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StateChangeBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 state_version_id = 1;
  if (this->_internal_state_version_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_state_version_id(), target);
  }

  // repeated .remote.StateChange change_batch = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_change_batch_size()); i < n; i++) {
    const auto& repfield = this->_internal_change_batch(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 pending_block_base_fee = 3;
  if (this->_internal_pending_block_base_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pending_block_base_fee(), target);
  }

  // uint64 block_gas_limit = 4;
  if (this->_internal_block_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_block_gas_limit(), target);
  }

  // uint64 finalized_block = 5;
  if (this->_internal_finalized_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_finalized_block(), target);
  }

  // uint64 pending_blob_fee_per_gas = 6;
  if (this->_internal_pending_blob_fee_per_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_pending_blob_fee_per_gas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StateChangeBatch)
  return target;
}

size_t StateChangeBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StateChangeBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remote.StateChange change_batch = 2;
  total_size += 1UL * this->_internal_change_batch_size();
  for (const auto& msg : this->_impl_.change_batch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 state_version_id = 1;
  if (this->_internal_state_version_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_state_version_id());
  }

  // uint64 pending_block_base_fee = 3;
  if (this->_internal_pending_block_base_fee() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_block_base_fee());
  }

  // uint64 block_gas_limit = 4;
  if (this->_internal_block_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_gas_limit());
  }

  // uint64 finalized_block = 5;
  if (this->_internal_finalized_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_finalized_block());
  }

  // uint64 pending_blob_fee_per_gas = 6;
  if (this->_internal_pending_blob_fee_per_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_blob_fee_per_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateChangeBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StateChangeBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateChangeBatch::GetClassData() const { return &_class_data_; }


void StateChangeBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StateChangeBatch*>(&to_msg);
  auto& from = static_cast<const StateChangeBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.StateChangeBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.change_batch_.MergeFrom(from._impl_.change_batch_);
  if (from._internal_state_version_id() != 0) {
    _this->_internal_set_state_version_id(from._internal_state_version_id());
  }
  if (from._internal_pending_block_base_fee() != 0) {
    _this->_internal_set_pending_block_base_fee(from._internal_pending_block_base_fee());
  }
  if (from._internal_block_gas_limit() != 0) {
    _this->_internal_set_block_gas_limit(from._internal_block_gas_limit());
  }
  if (from._internal_finalized_block() != 0) {
    _this->_internal_set_finalized_block(from._internal_finalized_block());
  }
  if (from._internal_pending_blob_fee_per_gas() != 0) {
    _this->_internal_set_pending_blob_fee_per_gas(from._internal_pending_blob_fee_per_gas());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateChangeBatch::CopyFrom(const StateChangeBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StateChangeBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChangeBatch::IsInitialized() const {
  return true;
}

void StateChangeBatch::InternalSwap(StateChangeBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.change_batch_.InternalSwap(&other->_impl_.change_batch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChangeBatch, _impl_.pending_blob_fee_per_gas_)
      + sizeof(StateChangeBatch::_impl_.pending_blob_fee_per_gas_)
      - PROTOBUF_FIELD_OFFSET(StateChangeBatch, _impl_.state_version_id_)>(
          reinterpret_cast<char*>(&_impl_.state_version_id_),
          reinterpret_cast<char*>(&other->_impl_.state_version_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChangeBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[4]);
}

// ===================================================================

class StateChange::_Internal {
 public:
  static const ::types::H256& block_hash(const StateChange* msg);
};

const ::types::H256&
StateChange::_Internal::block_hash(const StateChange* msg) {
  return *msg->_impl_.block_hash_;
}
void StateChange::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
StateChange::StateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.StateChange)
}
StateChange::StateChange(const StateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StateChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.changes_){from._impl_.changes_}
    , decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_height_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  ::memcpy(&_impl_.block_height_, &from._impl_.block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.block_height_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:remote.StateChange)
}

inline void StateChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.changes_){arena}
    , decltype(_impl_.txs_){arena}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_height_){uint64_t{0u}}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:remote.StateChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StateChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.changes_.~RepeatedPtrField();
  _impl_.txs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.block_hash_;
}

void StateChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StateChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changes_.Clear();
  _impl_.txs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
  ::memset(&_impl_.block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.block_height_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.Direction direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::remote::Direction>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .remote.AccountChange changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes txs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StateChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Direction direction = 1;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_direction(), target);
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // .types.H256 block_hash = 3;
  if (this->_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  // repeated .remote.AccountChange changes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated bytes txs = 5;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StateChange)
  return target;
}

size_t StateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StateChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remote.AccountChange changes = 4;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->_impl_.changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes txs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.txs_.size());
  for (int i = 0, n = _impl_.txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.txs_.Get(i));
  }

  // .types.H256 block_hash = 3;
  if (this->_internal_has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_hash_);
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_height());
  }

  // .remote.Direction direction = 1;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StateChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateChange::GetClassData() const { return &_class_data_; }


void StateChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StateChange*>(&to_msg);
  auto& from = static_cast<const StateChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.StateChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changes_.MergeFrom(from._impl_.changes_);
  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  if (from._internal_has_block_hash()) {
    _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
        from._internal_block_hash());
  }
  if (from._internal_block_height() != 0) {
    _this->_internal_set_block_height(from._internal_block_height());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  return true;
}

void StateChange::InternalSwap(StateChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changes_.InternalSwap(&other->_impl_.changes_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChange, _impl_.direction_)
      + sizeof(StateChange::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(StateChange, _impl_.block_hash_)>(
          reinterpret_cast<char*>(&_impl_.block_hash_),
          reinterpret_cast<char*>(&other->_impl_.block_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[5]);
}

// ===================================================================

class StateChangeRequest::_Internal {
 public:
};

StateChangeRequest::StateChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.StateChangeRequest)
}
StateChangeRequest::StateChangeRequest(const StateChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StateChangeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.with_storage_){}
    , decltype(_impl_.with_transactions_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.with_storage_, &from._impl_.with_storage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.with_transactions_) -
    reinterpret_cast<char*>(&_impl_.with_storage_)) + sizeof(_impl_.with_transactions_));
  // @@protoc_insertion_point(copy_constructor:remote.StateChangeRequest)
}

inline void StateChangeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.with_storage_){false}
    , decltype(_impl_.with_transactions_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StateChangeRequest::~StateChangeRequest() {
  // @@protoc_insertion_point(destructor:remote.StateChangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StateChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StateChangeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StateChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.StateChangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.with_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.with_transactions_) -
      reinterpret_cast<char*>(&_impl_.with_storage_)) + sizeof(_impl_.with_transactions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateChangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool with_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.with_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool with_transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.with_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateChangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.StateChangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool with_storage = 1;
  if (this->_internal_with_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_with_storage(), target);
  }

  // bool with_transactions = 2;
  if (this->_internal_with_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_with_transactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.StateChangeRequest)
  return target;
}

size_t StateChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.StateChangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool with_storage = 1;
  if (this->_internal_with_storage() != 0) {
    total_size += 1 + 1;
  }

  // bool with_transactions = 2;
  if (this->_internal_with_transactions() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateChangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StateChangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateChangeRequest::GetClassData() const { return &_class_data_; }


void StateChangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StateChangeRequest*>(&to_msg);
  auto& from = static_cast<const StateChangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.StateChangeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_with_storage() != 0) {
    _this->_internal_set_with_storage(from._internal_with_storage());
  }
  if (from._internal_with_transactions() != 0) {
    _this->_internal_set_with_transactions(from._internal_with_transactions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateChangeRequest::CopyFrom(const StateChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.StateChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChangeRequest::IsInitialized() const {
  return true;
}

void StateChangeRequest::InternalSwap(StateChangeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChangeRequest, _impl_.with_transactions_)
      + sizeof(StateChangeRequest::_impl_.with_transactions_)
      - PROTOBUF_FIELD_OFFSET(StateChangeRequest, _impl_.with_storage_)>(
          reinterpret_cast<char*>(&_impl_.with_storage_),
          reinterpret_cast<char*>(&other->_impl_.with_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateChangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[6]);
}

// ===================================================================

class SnapshotsRequest::_Internal {
 public:
};

SnapshotsRequest::SnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.SnapshotsRequest)
}
SnapshotsRequest::SnapshotsRequest(const SnapshotsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SnapshotsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.SnapshotsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SnapshotsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[7]);
}

// ===================================================================

class SnapshotsReply::_Internal {
 public:
};

SnapshotsReply::SnapshotsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.SnapshotsReply)
}
SnapshotsReply::SnapshotsReply(const SnapshotsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotsReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_files_){from._impl_.blocks_files_}
    , decltype(_impl_.history_files_){from._impl_.history_files_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.SnapshotsReply)
}

inline void SnapshotsReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_files_){arena}
    , decltype(_impl_.history_files_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotsReply::~SnapshotsReply() {
  // @@protoc_insertion_point(destructor:remote.SnapshotsReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_files_.~RepeatedPtrField();
  _impl_.history_files_.~RepeatedPtrField();
}

void SnapshotsReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SnapshotsReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_files_.Clear();
  _impl_.history_files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotsReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string blocks_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blocks_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "remote.SnapshotsReply.blocks_files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string history_files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_history_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "remote.SnapshotsReply.history_files"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotsReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SnapshotsReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string blocks_files = 1;
  for (int i = 0, n = this->_internal_blocks_files_size(); i < n; i++) {
    const auto& s = this->_internal_blocks_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.SnapshotsReply.blocks_files");
    target = stream->WriteString(1, s, target);
  }

  // repeated string history_files = 2;
  for (int i = 0, n = this->_internal_history_files_size(); i < n; i++) {
    const auto& s = this->_internal_history_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.SnapshotsReply.history_files");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SnapshotsReply)
  return target;
}

size_t SnapshotsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SnapshotsReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blocks_files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blocks_files_.size());
  for (int i = 0, n = _impl_.blocks_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blocks_files_.Get(i));
  }

  // repeated string history_files = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.history_files_.size());
  for (int i = 0, n = _impl_.history_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.history_files_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotsReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotsReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotsReply::GetClassData() const { return &_class_data_; }


void SnapshotsReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotsReply*>(&to_msg);
  auto& from = static_cast<const SnapshotsReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.SnapshotsReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_files_.MergeFrom(from._impl_.blocks_files_);
  _this->_impl_.history_files_.MergeFrom(from._impl_.history_files_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotsReply::CopyFrom(const SnapshotsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SnapshotsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotsReply::IsInitialized() const {
  return true;
}

void SnapshotsReply::InternalSwap(SnapshotsReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_files_.InternalSwap(&other->_impl_.blocks_files_);
  _impl_.history_files_.InternalSwap(&other->_impl_.history_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotsReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[8]);
}

// ===================================================================

class RangeReq::_Internal {
 public:
};

RangeReq::RangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.RangeReq)
}
RangeReq::RangeReq(const RangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.from_prefix_){}
    , decltype(_impl_.to_prefix_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.order_ascend_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table().empty()) {
    _this->_impl_.table_.Set(from._internal_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_prefix().empty()) {
    _this->_impl_.from_prefix_.Set(from._internal_from_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_prefix().empty()) {
    _this->_impl_.to_prefix_.Set(from._internal_to_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_size_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.page_size_));
  // @@protoc_insertion_point(copy_constructor:remote.RangeReq)
}

inline void RangeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.from_prefix_){}
    , decltype(_impl_.to_prefix_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.limit_){int64_t{0}}
    , decltype(_impl_.order_ascend_){false}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RangeReq::~RangeReq() {
  // @@protoc_insertion_point(destructor:remote.RangeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_.Destroy();
  _impl_.from_prefix_.Destroy();
  _impl_.to_prefix_.Destroy();
  _impl_.page_token_.Destroy();
}

void RangeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.RangeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_.ClearToEmpty();
  _impl_.from_prefix_.ClearToEmpty();
  _impl_.to_prefix_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_size_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.RangeReq.table"));
        } else
          goto handle_unusual;
        continue;
      // bytes from_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_from_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes to_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_to_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool order_ascend = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.RangeReq.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.RangeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.RangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes from_prefix = 3;
  if (!this->_internal_from_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_from_prefix(), target);
  }

  // bytes to_prefix = 4;
  if (!this->_internal_to_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_to_prefix(), target);
  }

  // bool order_ascend = 5;
  if (this->_internal_order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 6;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(6, this->_internal_limit(), target);
  }

  // int32 page_size = 7;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_page_size(), target);
  }

  // string page_token = 8;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.RangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.RangeReq)
  return target;
}

size_t RangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.RangeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes from_prefix = 3;
  if (!this->_internal_from_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_prefix());
  }

  // bytes to_prefix = 4;
  if (!this->_internal_to_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_prefix());
  }

  // string page_token = 8;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // sint64 limit = 6;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_limit());
  }

  // bool order_ascend = 5;
  if (this->_internal_order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 7;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeReq::GetClassData() const { return &_class_data_; }


void RangeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeReq*>(&to_msg);
  auto& from = static_cast<const RangeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.RangeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table().empty()) {
    _this->_internal_set_table(from._internal_table());
  }
  if (!from._internal_from_prefix().empty()) {
    _this->_internal_set_from_prefix(from._internal_from_prefix());
  }
  if (!from._internal_to_prefix().empty()) {
    _this->_internal_set_to_prefix(from._internal_to_prefix());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_order_ascend() != 0) {
    _this->_internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeReq::CopyFrom(const RangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.RangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeReq::IsInitialized() const {
  return true;
}

void RangeReq::InternalSwap(RangeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_, lhs_arena,
      &other->_impl_.table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_prefix_, lhs_arena,
      &other->_impl_.from_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_prefix_, lhs_arena,
      &other->_impl_.to_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeReq, _impl_.page_size_)
      + sizeof(RangeReq::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(RangeReq, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[9]);
}

// ===================================================================

class DomainGetReq::_Internal {
 public:
};

DomainGetReq::DomainGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.DomainGetReq)
}
DomainGetReq::DomainGetReq(const DomainGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DomainGetReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.k2_){}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.latest_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table().empty()) {
    _this->_impl_.table_.Set(from._internal_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k().empty()) {
    _this->_impl_.k_.Set(from._internal_k(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k2().empty()) {
    _this->_impl_.k2_.Set(from._internal_k2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latest_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.latest_));
  // @@protoc_insertion_point(copy_constructor:remote.DomainGetReq)
}

inline void DomainGetReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.k2_){}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.ts_){uint64_t{0u}}
    , decltype(_impl_.latest_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DomainGetReq::~DomainGetReq() {
  // @@protoc_insertion_point(destructor:remote.DomainGetReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DomainGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_.Destroy();
  _impl_.k_.Destroy();
  _impl_.k2_.Destroy();
}

void DomainGetReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DomainGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.DomainGetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_.ClearToEmpty();
  _impl_.k_.ClearToEmpty();
  _impl_.k2_.ClearToEmpty();
  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.latest_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.latest_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DomainGetReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.DomainGetReq.table"));
        } else
          goto handle_unusual;
        continue;
      // bytes k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes k2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_k2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool latest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.latest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DomainGetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.DomainGetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.DomainGetReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes k = 3;
  if (!this->_internal_k().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_k(), target);
  }

  // uint64 ts = 4;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ts(), target);
  }

  // bytes k2 = 5;
  if (!this->_internal_k2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_k2(), target);
  }

  // bool latest = 6;
  if (this->_internal_latest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_latest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.DomainGetReq)
  return target;
}

size_t DomainGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.DomainGetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes k = 3;
  if (!this->_internal_k().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // bytes k2 = 5;
  if (!this->_internal_k2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k2());
  }

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // uint64 ts = 4;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ts());
  }

  // bool latest = 6;
  if (this->_internal_latest() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DomainGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DomainGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DomainGetReq::GetClassData() const { return &_class_data_; }


void DomainGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DomainGetReq*>(&to_msg);
  auto& from = static_cast<const DomainGetReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.DomainGetReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table().empty()) {
    _this->_internal_set_table(from._internal_table());
  }
  if (!from._internal_k().empty()) {
    _this->_internal_set_k(from._internal_k());
  }
  if (!from._internal_k2().empty()) {
    _this->_internal_set_k2(from._internal_k2());
  }
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  if (from._internal_latest() != 0) {
    _this->_internal_set_latest(from._internal_latest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DomainGetReq::CopyFrom(const DomainGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.DomainGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainGetReq::IsInitialized() const {
  return true;
}

void DomainGetReq::InternalSwap(DomainGetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_, lhs_arena,
      &other->_impl_.table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k_, lhs_arena,
      &other->_impl_.k_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k2_, lhs_arena,
      &other->_impl_.k2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DomainGetReq, _impl_.latest_)
      + sizeof(DomainGetReq::_impl_.latest_)
      - PROTOBUF_FIELD_OFFSET(DomainGetReq, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DomainGetReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[10]);
}

// ===================================================================

class DomainGetReply::_Internal {
 public:
};

DomainGetReply::DomainGetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.DomainGetReply)
}
DomainGetReply::DomainGetReply(const DomainGetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DomainGetReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v_){}
    , decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    _this->_impl_.v_.Set(from._internal_v(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:remote.DomainGetReply)
}

inline void DomainGetReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v_){}
    , decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DomainGetReply::~DomainGetReply() {
  // @@protoc_insertion_point(destructor:remote.DomainGetReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DomainGetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v_.Destroy();
}

void DomainGetReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DomainGetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.DomainGetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.v_.ClearToEmpty();
  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DomainGetReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DomainGetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.DomainGetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes v = 1;
  if (!this->_internal_v().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_v(), target);
  }

  // bool ok = 2;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.DomainGetReply)
  return target;
}

size_t DomainGetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.DomainGetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes v = 1;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // bool ok = 2;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DomainGetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DomainGetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DomainGetReply::GetClassData() const { return &_class_data_; }


void DomainGetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DomainGetReply*>(&to_msg);
  auto& from = static_cast<const DomainGetReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.DomainGetReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_v().empty()) {
    _this->_internal_set_v(from._internal_v());
  }
  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DomainGetReply::CopyFrom(const DomainGetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.DomainGetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainGetReply::IsInitialized() const {
  return true;
}

void DomainGetReply::InternalSwap(DomainGetReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v_, lhs_arena,
      &other->_impl_.v_, rhs_arena
  );
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DomainGetReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[11]);
}

// ===================================================================

class HistoryGetReq::_Internal {
 public:
};

HistoryGetReq::HistoryGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.HistoryGetReq)
}
HistoryGetReq::HistoryGetReq(const HistoryGetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistoryGetReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.ts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table().empty()) {
    _this->_impl_.table_.Set(from._internal_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k().empty()) {
    _this->_impl_.k_.Set(from._internal_k(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ts_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.ts_));
  // @@protoc_insertion_point(copy_constructor:remote.HistoryGetReq)
}

inline void HistoryGetReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.ts_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HistoryGetReq::~HistoryGetReq() {
  // @@protoc_insertion_point(destructor:remote.HistoryGetReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryGetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_.Destroy();
  _impl_.k_.Destroy();
}

void HistoryGetReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistoryGetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.HistoryGetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_.ClearToEmpty();
  _impl_.k_.ClearToEmpty();
  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ts_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryGetReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.HistoryGetReq.table"));
        } else
          goto handle_unusual;
        continue;
      // bytes k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryGetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.HistoryGetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.HistoryGetReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes k = 3;
  if (!this->_internal_k().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_k(), target);
  }

  // uint64 ts = 4;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.HistoryGetReq)
  return target;
}

size_t HistoryGetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.HistoryGetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes k = 3;
  if (!this->_internal_k().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // uint64 ts = 4;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistoryGetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistoryGetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistoryGetReq::GetClassData() const { return &_class_data_; }


void HistoryGetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistoryGetReq*>(&to_msg);
  auto& from = static_cast<const HistoryGetReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.HistoryGetReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table().empty()) {
    _this->_internal_set_table(from._internal_table());
  }
  if (!from._internal_k().empty()) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistoryGetReq::CopyFrom(const HistoryGetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.HistoryGetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryGetReq::IsInitialized() const {
  return true;
}

void HistoryGetReq::InternalSwap(HistoryGetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_, lhs_arena,
      &other->_impl_.table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k_, lhs_arena,
      &other->_impl_.k_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryGetReq, _impl_.ts_)
      + sizeof(HistoryGetReq::_impl_.ts_)
      - PROTOBUF_FIELD_OFFSET(HistoryGetReq, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryGetReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[12]);
}

// ===================================================================

class HistoryGetReply::_Internal {
 public:
};

HistoryGetReply::HistoryGetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.HistoryGetReply)
}
HistoryGetReply::HistoryGetReply(const HistoryGetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistoryGetReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v_){}
    , decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    _this->_impl_.v_.Set(from._internal_v(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:remote.HistoryGetReply)
}

inline void HistoryGetReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v_){}
    , decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HistoryGetReply::~HistoryGetReply() {
  // @@protoc_insertion_point(destructor:remote.HistoryGetReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryGetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v_.Destroy();
}

void HistoryGetReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistoryGetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.HistoryGetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.v_.ClearToEmpty();
  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryGetReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryGetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.HistoryGetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes v = 1;
  if (!this->_internal_v().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_v(), target);
  }

  // bool ok = 2;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.HistoryGetReply)
  return target;
}

size_t HistoryGetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.HistoryGetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes v = 1;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  // bool ok = 2;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistoryGetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistoryGetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistoryGetReply::GetClassData() const { return &_class_data_; }


void HistoryGetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistoryGetReply*>(&to_msg);
  auto& from = static_cast<const HistoryGetReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.HistoryGetReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_v().empty()) {
    _this->_internal_set_v(from._internal_v());
  }
  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistoryGetReply::CopyFrom(const HistoryGetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.HistoryGetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryGetReply::IsInitialized() const {
  return true;
}

void HistoryGetReply::InternalSwap(HistoryGetReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v_, lhs_arena,
      &other->_impl_.v_, rhs_arena
  );
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryGetReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[13]);
}

// ===================================================================

class IndexRangeReq::_Internal {
 public:
};

IndexRangeReq::IndexRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.IndexRangeReq)
}
IndexRangeReq::IndexRangeReq(const IndexRangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexRangeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.from_ts_){}
    , decltype(_impl_.to_ts_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.order_ascend_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table().empty()) {
    _this->_impl_.table_.Set(from._internal_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k().empty()) {
    _this->_impl_.k_.Set(from._internal_k(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_size_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.page_size_));
  // @@protoc_insertion_point(copy_constructor:remote.IndexRangeReq)
}

inline void IndexRangeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.from_ts_){int64_t{0}}
    , decltype(_impl_.to_ts_){int64_t{0}}
    , decltype(_impl_.limit_){int64_t{0}}
    , decltype(_impl_.order_ascend_){false}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.k_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.k_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexRangeReq::~IndexRangeReq() {
  // @@protoc_insertion_point(destructor:remote.IndexRangeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexRangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_.Destroy();
  _impl_.k_.Destroy();
  _impl_.page_token_.Destroy();
}

void IndexRangeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexRangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.IndexRangeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_.ClearToEmpty();
  _impl_.k_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_size_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRangeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.IndexRangeReq.table"));
        } else
          goto handle_unusual;
        continue;
      // bytes k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_k();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 from_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.from_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 to_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.to_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool order_ascend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.IndexRangeReq.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexRangeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.IndexRangeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.IndexRangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes k = 3;
  if (!this->_internal_k().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_k(), target);
  }

  // sint64 from_ts = 4;
  if (this->_internal_from_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(4, this->_internal_from_ts(), target);
  }

  // sint64 to_ts = 5;
  if (this->_internal_to_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(5, this->_internal_to_ts(), target);
  }

  // bool order_ascend = 6;
  if (this->_internal_order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 7;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(7, this->_internal_limit(), target);
  }

  // int32 page_size = 8;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_page_size(), target);
  }

  // string page_token = 9;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.IndexRangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.IndexRangeReq)
  return target;
}

size_t IndexRangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.IndexRangeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes k = 3;
  if (!this->_internal_k().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_k());
  }

  // string page_token = 9;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // sint64 from_ts = 4;
  if (this->_internal_from_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_from_ts());
  }

  // sint64 to_ts = 5;
  if (this->_internal_to_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_to_ts());
  }

  // sint64 limit = 7;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_limit());
  }

  // bool order_ascend = 6;
  if (this->_internal_order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 8;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexRangeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexRangeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexRangeReq::GetClassData() const { return &_class_data_; }


void IndexRangeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexRangeReq*>(&to_msg);
  auto& from = static_cast<const IndexRangeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.IndexRangeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table().empty()) {
    _this->_internal_set_table(from._internal_table());
  }
  if (!from._internal_k().empty()) {
    _this->_internal_set_k(from._internal_k());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_from_ts() != 0) {
    _this->_internal_set_from_ts(from._internal_from_ts());
  }
  if (from._internal_to_ts() != 0) {
    _this->_internal_set_to_ts(from._internal_to_ts());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_order_ascend() != 0) {
    _this->_internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexRangeReq::CopyFrom(const IndexRangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.IndexRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRangeReq::IsInitialized() const {
  return true;
}

void IndexRangeReq::InternalSwap(IndexRangeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_, lhs_arena,
      &other->_impl_.table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.k_, lhs_arena,
      &other->_impl_.k_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexRangeReq, _impl_.page_size_)
      + sizeof(IndexRangeReq::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(IndexRangeReq, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRangeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[14]);
}

// ===================================================================

class IndexRangeReply::_Internal {
 public:
};

IndexRangeReply::IndexRangeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.IndexRangeReply)
}
IndexRangeReply::IndexRangeReply(const IndexRangeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexRangeReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){from._impl_.timestamps_}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.IndexRangeReply)
}

inline void IndexRangeReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){arena}
    , /*decltype(_impl_._timestamps_cached_byte_size_)*/{0}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexRangeReply::~IndexRangeReply() {
  // @@protoc_insertion_point(destructor:remote.IndexRangeReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexRangeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamps_.~RepeatedField();
  _impl_.next_page_token_.Destroy();
}

void IndexRangeReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexRangeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.IndexRangeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamps_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRangeReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 timestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.IndexRangeReply.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexRangeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.IndexRangeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 timestamps = 1;
  {
    int byte_size = _impl_._timestamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_timestamps(), byte_size, target);
    }
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.IndexRangeReply.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.IndexRangeReply)
  return target;
}

size_t IndexRangeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.IndexRangeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 timestamps = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexRangeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexRangeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexRangeReply::GetClassData() const { return &_class_data_; }


void IndexRangeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexRangeReply*>(&to_msg);
  auto& from = static_cast<const IndexRangeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.IndexRangeReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timestamps_.MergeFrom(from._impl_.timestamps_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexRangeReply::CopyFrom(const IndexRangeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.IndexRangeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRangeReply::IsInitialized() const {
  return true;
}

void IndexRangeReply::InternalSwap(IndexRangeReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.timestamps_.InternalSwap(&other->_impl_.timestamps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRangeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[15]);
}

// ===================================================================

class HistoryRangeReq::_Internal {
 public:
};

HistoryRangeReq::HistoryRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.HistoryRangeReq)
}
HistoryRangeReq::HistoryRangeReq(const HistoryRangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistoryRangeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.from_ts_){}
    , decltype(_impl_.to_ts_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.order_ascend_){}
    , decltype(_impl_.page_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table().empty()) {
    _this->_impl_.table_.Set(from._internal_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_size_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.page_size_));
  // @@protoc_insertion_point(copy_constructor:remote.HistoryRangeReq)
}

inline void HistoryRangeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.from_ts_){int64_t{0}}
    , decltype(_impl_.to_ts_){int64_t{0}}
    , decltype(_impl_.limit_){int64_t{0}}
    , decltype(_impl_.order_ascend_){false}
    , decltype(_impl_.page_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HistoryRangeReq::~HistoryRangeReq() {
  // @@protoc_insertion_point(destructor:remote.HistoryRangeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryRangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_.Destroy();
  _impl_.page_token_.Destroy();
}

void HistoryRangeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistoryRangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.HistoryRangeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.page_size_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryRangeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.HistoryRangeReq.table"));
        } else
          goto handle_unusual;
        continue;
      // sint64 from_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.from_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 to_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.to_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool order_ascend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.HistoryRangeReq.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryRangeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.HistoryRangeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.HistoryRangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // sint64 from_ts = 4;
  if (this->_internal_from_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(4, this->_internal_from_ts(), target);
  }

  // sint64 to_ts = 5;
  if (this->_internal_to_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(5, this->_internal_to_ts(), target);
  }

  // bool order_ascend = 6;
  if (this->_internal_order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 7;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(7, this->_internal_limit(), target);
  }

  // int32 page_size = 8;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_page_size(), target);
  }

  // string page_token = 9;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.HistoryRangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.HistoryRangeReq)
  return target;
}

size_t HistoryRangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.HistoryRangeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // string page_token = 9;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // sint64 from_ts = 4;
  if (this->_internal_from_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_from_ts());
  }

  // sint64 to_ts = 5;
  if (this->_internal_to_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_to_ts());
  }

  // sint64 limit = 7;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_limit());
  }

  // bool order_ascend = 6;
  if (this->_internal_order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 8;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistoryRangeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistoryRangeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistoryRangeReq::GetClassData() const { return &_class_data_; }


void HistoryRangeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistoryRangeReq*>(&to_msg);
  auto& from = static_cast<const HistoryRangeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.HistoryRangeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table().empty()) {
    _this->_internal_set_table(from._internal_table());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_from_ts() != 0) {
    _this->_internal_set_from_ts(from._internal_from_ts());
  }
  if (from._internal_to_ts() != 0) {
    _this->_internal_set_to_ts(from._internal_to_ts());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_order_ascend() != 0) {
    _this->_internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistoryRangeReq::CopyFrom(const HistoryRangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.HistoryRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRangeReq::IsInitialized() const {
  return true;
}

void HistoryRangeReq::InternalSwap(HistoryRangeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_, lhs_arena,
      &other->_impl_.table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryRangeReq, _impl_.page_size_)
      + sizeof(HistoryRangeReq::_impl_.page_size_)
      - PROTOBUF_FIELD_OFFSET(HistoryRangeReq, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryRangeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[16]);
}

// ===================================================================

class DomainRangeReq::_Internal {
 public:
};

DomainRangeReq::DomainRangeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.DomainRangeReq)
}
DomainRangeReq::DomainRangeReq(const DomainRangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DomainRangeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.from_key_){}
    , decltype(_impl_.to_key_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.latest_){}
    , decltype(_impl_.order_ascend_){}
    , decltype(_impl_.page_size_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table().empty()) {
    _this->_impl_.table_.Set(from._internal_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_key().empty()) {
    _this->_impl_.from_key_.Set(from._internal_from_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_key().empty()) {
    _this->_impl_.to_key_.Set(from._internal_to_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:remote.DomainRangeReq)
}

inline void DomainRangeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , decltype(_impl_.from_key_){}
    , decltype(_impl_.to_key_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.ts_){uint64_t{0u}}
    , decltype(_impl_.latest_){false}
    , decltype(_impl_.order_ascend_){false}
    , decltype(_impl_.page_size_){0}
    , decltype(_impl_.limit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DomainRangeReq::~DomainRangeReq() {
  // @@protoc_insertion_point(destructor:remote.DomainRangeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DomainRangeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_.Destroy();
  _impl_.from_key_.Destroy();
  _impl_.to_key_.Destroy();
  _impl_.page_token_.Destroy();
}

void DomainRangeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DomainRangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.DomainRangeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_.ClearToEmpty();
  _impl_.from_key_.ClearToEmpty();
  _impl_.to_key_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DomainRangeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.DomainRangeReq.table"));
        } else
          goto handle_unusual;
        continue;
      // bytes from_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_from_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes to_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_to_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool latest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.latest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool order_ascend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.order_ascend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.DomainRangeReq.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DomainRangeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.DomainRangeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.DomainRangeReq.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // bytes from_key = 3;
  if (!this->_internal_from_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_from_key(), target);
  }

  // bytes to_key = 4;
  if (!this->_internal_to_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_to_key(), target);
  }

  // uint64 ts = 5;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ts(), target);
  }

  // bool latest = 6;
  if (this->_internal_latest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_latest(), target);
  }

  // bool order_ascend = 7;
  if (this->_internal_order_ascend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_order_ascend(), target);
  }

  // sint64 limit = 8;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(8, this->_internal_limit(), target);
  }

  // int32 page_size = 9;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_page_size(), target);
  }

  // string page_token = 10;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.DomainRangeReq.page_token");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.DomainRangeReq)
  return target;
}

size_t DomainRangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.DomainRangeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table = 2;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // bytes from_key = 3;
  if (!this->_internal_from_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_key());
  }

  // bytes to_key = 4;
  if (!this->_internal_to_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_key());
  }

  // string page_token = 10;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // uint64 ts = 5;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ts());
  }

  // bool latest = 6;
  if (this->_internal_latest() != 0) {
    total_size += 1 + 1;
  }

  // bool order_ascend = 7;
  if (this->_internal_order_ascend() != 0) {
    total_size += 1 + 1;
  }

  // int32 page_size = 9;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  // sint64 limit = 8;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DomainRangeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DomainRangeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DomainRangeReq::GetClassData() const { return &_class_data_; }


void DomainRangeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DomainRangeReq*>(&to_msg);
  auto& from = static_cast<const DomainRangeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.DomainRangeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table().empty()) {
    _this->_internal_set_table(from._internal_table());
  }
  if (!from._internal_from_key().empty()) {
    _this->_internal_set_from_key(from._internal_from_key());
  }
  if (!from._internal_to_key().empty()) {
    _this->_internal_set_to_key(from._internal_to_key());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  if (from._internal_latest() != 0) {
    _this->_internal_set_latest(from._internal_latest());
  }
  if (from._internal_order_ascend() != 0) {
    _this->_internal_set_order_ascend(from._internal_order_ascend());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DomainRangeReq::CopyFrom(const DomainRangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.DomainRangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainRangeReq::IsInitialized() const {
  return true;
}

void DomainRangeReq::InternalSwap(DomainRangeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_, lhs_arena,
      &other->_impl_.table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_key_, lhs_arena,
      &other->_impl_.from_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_key_, lhs_arena,
      &other->_impl_.to_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DomainRangeReq, _impl_.limit_)
      + sizeof(DomainRangeReq::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(DomainRangeReq, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DomainRangeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[17]);
}

// ===================================================================

class Pairs::_Internal {
 public:
};

Pairs::Pairs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.Pairs)
}
Pairs::Pairs(const Pairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pairs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.Pairs)
}

inline void Pairs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pairs::~Pairs() {
  // @@protoc_insertion_point(destructor:remote.Pairs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pairs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.values_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void Pairs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pairs::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.Pairs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pairs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.Pairs.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pairs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.Pairs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(2, s, target);
  }

  // string next_page_token = 3;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.Pairs.next_page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.Pairs)
  return target;
}

size_t Pairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.Pairs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.keys_.Get(i));
  }

  // repeated bytes values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.values_.Get(i));
  }

  // string next_page_token = 3;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pairs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pairs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pairs::GetClassData() const { return &_class_data_; }


void Pairs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pairs*>(&to_msg);
  auto& from = static_cast<const Pairs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.Pairs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pairs::CopyFrom(const Pairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.Pairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pairs::IsInitialized() const {
  return true;
}

void Pairs::InternalSwap(Pairs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Pairs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[18]);
}

// ===================================================================

class ParisPagination::_Internal {
 public:
};

ParisPagination::ParisPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.ParisPagination)
}
ParisPagination::ParisPagination(const ParisPagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParisPagination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_key_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_key().empty()) {
    _this->_impl_.next_key_.Set(from._internal_next_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:remote.ParisPagination)
}

inline void ParisPagination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_key_){}
    , decltype(_impl_.limit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParisPagination::~ParisPagination() {
  // @@protoc_insertion_point(destructor:remote.ParisPagination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParisPagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_key_.Destroy();
}

void ParisPagination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParisPagination::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ParisPagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_key_.ClearToEmpty();
  _impl_.limit_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParisPagination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes next_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_next_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParisPagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ParisPagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes next_key = 1;
  if (!this->_internal_next_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_next_key(), target);
  }

  // sint64 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ParisPagination)
  return target;
}

size_t ParisPagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ParisPagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes next_key = 1;
  if (!this->_internal_next_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_key());
  }

  // sint64 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParisPagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParisPagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParisPagination::GetClassData() const { return &_class_data_; }


void ParisPagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParisPagination*>(&to_msg);
  auto& from = static_cast<const ParisPagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.ParisPagination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_next_key().empty()) {
    _this->_internal_set_next_key(from._internal_next_key());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParisPagination::CopyFrom(const ParisPagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ParisPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParisPagination::IsInitialized() const {
  return true;
}

void ParisPagination::InternalSwap(ParisPagination* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_key_, lhs_arena,
      &other->_impl_.next_key_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParisPagination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[19]);
}

// ===================================================================

class IndexPagination::_Internal {
 public:
};

IndexPagination::IndexPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.IndexPagination)
}
IndexPagination::IndexPagination(const IndexPagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexPagination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_time_stamp_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_time_stamp_, &from._impl_.next_time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.next_time_stamp_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:remote.IndexPagination)
}

inline void IndexPagination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_time_stamp_){int64_t{0}}
    , decltype(_impl_.limit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexPagination::~IndexPagination() {
  // @@protoc_insertion_point(destructor:remote.IndexPagination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexPagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexPagination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexPagination::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.IndexPagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.next_time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.next_time_stamp_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexPagination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 next_time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexPagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.IndexPagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 next_time_stamp = 1;
  if (this->_internal_next_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_next_time_stamp(), target);
  }

  // sint64 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.IndexPagination)
  return target;
}

size_t IndexPagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.IndexPagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 next_time_stamp = 1;
  if (this->_internal_next_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_next_time_stamp());
  }

  // sint64 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexPagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexPagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexPagination::GetClassData() const { return &_class_data_; }


void IndexPagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexPagination*>(&to_msg);
  auto& from = static_cast<const IndexPagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.IndexPagination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_next_time_stamp() != 0) {
    _this->_internal_set_next_time_stamp(from._internal_next_time_stamp());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexPagination::CopyFrom(const IndexPagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.IndexPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexPagination::IsInitialized() const {
  return true;
}

void IndexPagination::InternalSwap(IndexPagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexPagination, _impl_.limit_)
      + sizeof(IndexPagination::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(IndexPagination, _impl_.next_time_stamp_)>(
          reinterpret_cast<char*>(&_impl_.next_time_stamp_),
          reinterpret_cast<char*>(&other->_impl_.next_time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexPagination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fkv_2eproto_getter, &descriptor_table_remote_2fkv_2eproto_once,
      file_level_metadata_remote_2fkv_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::remote::Cursor*
Arena::CreateMaybeMessage< ::remote::Cursor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::Cursor >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::Pair*
Arena::CreateMaybeMessage< ::remote::Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StorageChange*
Arena::CreateMaybeMessage< ::remote::StorageChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StorageChange >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::AccountChange*
Arena::CreateMaybeMessage< ::remote::AccountChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::AccountChange >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StateChangeBatch*
Arena::CreateMaybeMessage< ::remote::StateChangeBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StateChangeBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StateChange*
Arena::CreateMaybeMessage< ::remote::StateChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::StateChangeRequest*
Arena::CreateMaybeMessage< ::remote::StateChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::StateChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SnapshotsRequest*
Arena::CreateMaybeMessage< ::remote::SnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SnapshotsReply*
Arena::CreateMaybeMessage< ::remote::SnapshotsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SnapshotsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::RangeReq*
Arena::CreateMaybeMessage< ::remote::RangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::RangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::DomainGetReq*
Arena::CreateMaybeMessage< ::remote::DomainGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::DomainGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::DomainGetReply*
Arena::CreateMaybeMessage< ::remote::DomainGetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::DomainGetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::HistoryGetReq*
Arena::CreateMaybeMessage< ::remote::HistoryGetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::HistoryGetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::HistoryGetReply*
Arena::CreateMaybeMessage< ::remote::HistoryGetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::HistoryGetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::IndexRangeReq*
Arena::CreateMaybeMessage< ::remote::IndexRangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::IndexRangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::IndexRangeReply*
Arena::CreateMaybeMessage< ::remote::IndexRangeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::IndexRangeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::HistoryRangeReq*
Arena::CreateMaybeMessage< ::remote::HistoryRangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::HistoryRangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::DomainRangeReq*
Arena::CreateMaybeMessage< ::remote::DomainRangeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::DomainRangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::Pairs*
Arena::CreateMaybeMessage< ::remote::Pairs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::Pairs >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ParisPagination*
Arena::CreateMaybeMessage< ::remote::ParisPagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ParisPagination >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::IndexPagination*
Arena::CreateMaybeMessage< ::remote::IndexPagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::IndexPagination >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
