// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2psentry/sentry.proto

#include "p2psentry/sentry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sentry {
PROTOBUF_CONSTEXPR OutboundMessageData::OutboundMessageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutboundMessageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutboundMessageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutboundMessageDataDefaultTypeInternal() {}
  union {
    OutboundMessageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutboundMessageDataDefaultTypeInternal _OutboundMessageData_default_instance_;
PROTOBUF_CONSTEXPR SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.min_block_)*/uint64_t{0u}
  , /*decltype(_impl_.max_peers_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageByMinBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageByMinBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageByMinBlockRequestDefaultTypeInternal() {}
  union {
    SendMessageByMinBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageByMinBlockRequestDefaultTypeInternal _SendMessageByMinBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR SendMessageByIdRequest::SendMessageByIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.peer_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageByIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageByIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageByIdRequestDefaultTypeInternal() {}
  union {
    SendMessageByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageByIdRequestDefaultTypeInternal _SendMessageByIdRequest_default_instance_;
PROTOBUF_CONSTEXPR SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.max_peers_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendMessageToRandomPeersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageToRandomPeersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageToRandomPeersRequestDefaultTypeInternal() {}
  union {
    SendMessageToRandomPeersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageToRandomPeersRequestDefaultTypeInternal _SendMessageToRandomPeersRequest_default_instance_;
PROTOBUF_CONSTEXPR SentPeers::SentPeers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SentPeersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SentPeersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SentPeersDefaultTypeInternal() {}
  union {
    SentPeers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SentPeersDefaultTypeInternal _SentPeers_default_instance_;
PROTOBUF_CONSTEXPR PenalizePeerRequest::PenalizePeerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peer_id_)*/nullptr
  , /*decltype(_impl_.penalty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PenalizePeerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PenalizePeerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PenalizePeerRequestDefaultTypeInternal() {}
  union {
    PenalizePeerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PenalizePeerRequestDefaultTypeInternal _PenalizePeerRequest_default_instance_;
PROTOBUF_CONSTEXPR PeerMinBlockRequest::PeerMinBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peer_id_)*/nullptr
  , /*decltype(_impl_.min_block_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerMinBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerMinBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerMinBlockRequestDefaultTypeInternal() {}
  union {
    PeerMinBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerMinBlockRequestDefaultTypeInternal _PeerMinBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR AddPeerRequest::AddPeerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPeerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPeerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPeerRequestDefaultTypeInternal() {}
  union {
    AddPeerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPeerRequestDefaultTypeInternal _AddPeerRequest_default_instance_;
PROTOBUF_CONSTEXPR InboundMessage::InboundMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peer_id_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InboundMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InboundMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InboundMessageDefaultTypeInternal() {}
  union {
    InboundMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InboundMessageDefaultTypeInternal _InboundMessage_default_instance_;
PROTOBUF_CONSTEXPR Forks::Forks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_forks_)*/{}
  , /*decltype(_impl_._height_forks_cached_byte_size_)*/{0}
  , /*decltype(_impl_.time_forks_)*/{}
  , /*decltype(_impl_._time_forks_cached_byte_size_)*/{0}
  , /*decltype(_impl_.genesis_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForksDefaultTypeInternal() {}
  union {
    Forks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForksDefaultTypeInternal _Forks_default_instance_;
PROTOBUF_CONSTEXPR StatusData::StatusData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_difficulty_)*/nullptr
  , /*decltype(_impl_.best_hash_)*/nullptr
  , /*decltype(_impl_.fork_data_)*/nullptr
  , /*decltype(_impl_.network_id_)*/uint64_t{0u}
  , /*decltype(_impl_.max_block_height_)*/uint64_t{0u}
  , /*decltype(_impl_.max_block_time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDataDefaultTypeInternal() {}
  union {
    StatusData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDataDefaultTypeInternal _StatusData_default_instance_;
PROTOBUF_CONSTEXPR SetStatusReply::SetStatusReply(
    ::_pbi::ConstantInitialized) {}
struct SetStatusReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetStatusReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetStatusReplyDefaultTypeInternal() {}
  union {
    SetStatusReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetStatusReplyDefaultTypeInternal _SetStatusReply_default_instance_;
PROTOBUF_CONSTEXPR HandShakeReply::HandShakeReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HandShakeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandShakeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandShakeReplyDefaultTypeInternal() {}
  union {
    HandShakeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandShakeReplyDefaultTypeInternal _HandShakeReply_default_instance_;
PROTOBUF_CONSTEXPR MessagesRequest::MessagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagesRequestDefaultTypeInternal() {}
  union {
    MessagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagesRequestDefaultTypeInternal _MessagesRequest_default_instance_;
PROTOBUF_CONSTEXPR PeersReply::PeersReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeersReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeersReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeersReplyDefaultTypeInternal() {}
  union {
    PeersReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeersReplyDefaultTypeInternal _PeersReply_default_instance_;
PROTOBUF_CONSTEXPR PeerCountRequest::PeerCountRequest(
    ::_pbi::ConstantInitialized) {}
struct PeerCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerCountRequestDefaultTypeInternal() {}
  union {
    PeerCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerCountRequestDefaultTypeInternal _PeerCountRequest_default_instance_;
PROTOBUF_CONSTEXPR PeerCountPerProtocol::PeerCountPerProtocol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerCountPerProtocolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerCountPerProtocolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerCountPerProtocolDefaultTypeInternal() {}
  union {
    PeerCountPerProtocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerCountPerProtocolDefaultTypeInternal _PeerCountPerProtocol_default_instance_;
PROTOBUF_CONSTEXPR PeerCountReply::PeerCountReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.counts_per_protocol_)*/{}
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerCountReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerCountReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerCountReplyDefaultTypeInternal() {}
  union {
    PeerCountReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerCountReplyDefaultTypeInternal _PeerCountReply_default_instance_;
PROTOBUF_CONSTEXPR PeerByIdRequest::PeerByIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peer_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerByIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerByIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerByIdRequestDefaultTypeInternal() {}
  union {
    PeerByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerByIdRequestDefaultTypeInternal _PeerByIdRequest_default_instance_;
PROTOBUF_CONSTEXPR PeerByIdReply::PeerByIdReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.peer_)*/nullptr} {}
struct PeerByIdReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerByIdReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerByIdReplyDefaultTypeInternal() {}
  union {
    PeerByIdReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerByIdReplyDefaultTypeInternal _PeerByIdReply_default_instance_;
PROTOBUF_CONSTEXPR PeerEventsRequest::PeerEventsRequest(
    ::_pbi::ConstantInitialized) {}
struct PeerEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerEventsRequestDefaultTypeInternal() {}
  union {
    PeerEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerEventsRequestDefaultTypeInternal _PeerEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR PeerEvent::PeerEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peer_id_)*/nullptr
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerEventDefaultTypeInternal() {}
  union {
    PeerEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerEventDefaultTypeInternal _PeerEvent_default_instance_;
PROTOBUF_CONSTEXPR AddPeerReply::AddPeerReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPeerReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPeerReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPeerReplyDefaultTypeInternal() {}
  union {
    AddPeerReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPeerReplyDefaultTypeInternal _AddPeerReply_default_instance_;
}  // namespace sentry
static ::_pb::Metadata file_level_metadata_p2psentry_2fsentry_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_p2psentry_2fsentry_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_p2psentry_2fsentry_2eproto = nullptr;

const uint32_t TableStruct_p2psentry_2fsentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, _impl_.min_block_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, _impl_.max_peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, _impl_.peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, _impl_.max_peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, _impl_.peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, _impl_.peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, _impl_.penalty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, _impl_.peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, _impl_.min_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::AddPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::AddPeerRequest, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, _impl_.peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, _impl_.genesis_),
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, _impl_.height_forks_),
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, _impl_.time_forks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _impl_.network_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _impl_.total_difficulty_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _impl_.best_hash_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _impl_.fork_data_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _impl_.max_block_height_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _impl_.max_block_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SetStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::HandShakeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::HandShakeReply, _impl_.protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::MessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::MessagesRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeersReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeersReply, _impl_.peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountPerProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountPerProtocol, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountPerProtocol, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountReply, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountReply, _impl_.counts_per_protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdRequest, _impl_.peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerByIdReply, _impl_.peer_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEvent, _impl_.peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerEvent, _impl_.event_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::AddPeerReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::AddPeerReply, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sentry::OutboundMessageData)},
  { 8, -1, -1, sizeof(::sentry::SendMessageByMinBlockRequest)},
  { 17, -1, -1, sizeof(::sentry::SendMessageByIdRequest)},
  { 25, -1, -1, sizeof(::sentry::SendMessageToRandomPeersRequest)},
  { 33, -1, -1, sizeof(::sentry::SentPeers)},
  { 40, -1, -1, sizeof(::sentry::PenalizePeerRequest)},
  { 48, -1, -1, sizeof(::sentry::PeerMinBlockRequest)},
  { 56, -1, -1, sizeof(::sentry::AddPeerRequest)},
  { 63, -1, -1, sizeof(::sentry::InboundMessage)},
  { 72, -1, -1, sizeof(::sentry::Forks)},
  { 81, -1, -1, sizeof(::sentry::StatusData)},
  { 93, -1, -1, sizeof(::sentry::SetStatusReply)},
  { 99, -1, -1, sizeof(::sentry::HandShakeReply)},
  { 106, -1, -1, sizeof(::sentry::MessagesRequest)},
  { 113, -1, -1, sizeof(::sentry::PeersReply)},
  { 120, -1, -1, sizeof(::sentry::PeerCountRequest)},
  { 126, -1, -1, sizeof(::sentry::PeerCountPerProtocol)},
  { 134, -1, -1, sizeof(::sentry::PeerCountReply)},
  { 142, -1, -1, sizeof(::sentry::PeerByIdRequest)},
  { 149, 156, -1, sizeof(::sentry::PeerByIdReply)},
  { 157, -1, -1, sizeof(::sentry::PeerEventsRequest)},
  { 163, -1, -1, sizeof(::sentry::PeerEvent)},
  { 171, -1, -1, sizeof(::sentry::AddPeerReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sentry::_OutboundMessageData_default_instance_._instance,
  &::sentry::_SendMessageByMinBlockRequest_default_instance_._instance,
  &::sentry::_SendMessageByIdRequest_default_instance_._instance,
  &::sentry::_SendMessageToRandomPeersRequest_default_instance_._instance,
  &::sentry::_SentPeers_default_instance_._instance,
  &::sentry::_PenalizePeerRequest_default_instance_._instance,
  &::sentry::_PeerMinBlockRequest_default_instance_._instance,
  &::sentry::_AddPeerRequest_default_instance_._instance,
  &::sentry::_InboundMessage_default_instance_._instance,
  &::sentry::_Forks_default_instance_._instance,
  &::sentry::_StatusData_default_instance_._instance,
  &::sentry::_SetStatusReply_default_instance_._instance,
  &::sentry::_HandShakeReply_default_instance_._instance,
  &::sentry::_MessagesRequest_default_instance_._instance,
  &::sentry::_PeersReply_default_instance_._instance,
  &::sentry::_PeerCountRequest_default_instance_._instance,
  &::sentry::_PeerCountPerProtocol_default_instance_._instance,
  &::sentry::_PeerCountReply_default_instance_._instance,
  &::sentry::_PeerByIdRequest_default_instance_._instance,
  &::sentry::_PeerByIdReply_default_instance_._instance,
  &::sentry::_PeerEventsRequest_default_instance_._instance,
  &::sentry::_PeerEvent_default_instance_._instance,
  &::sentry::_AddPeerReply_default_instance_._instance,
};

const char descriptor_table_protodef_p2psentry_2fsentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026p2psentry/sentry.proto\022\006sentry\032\033google"
  "/protobuf/empty.proto\032\021types/types.proto"
  "\"B\n\023OutboundMessageData\022\035\n\002id\030\001 \001(\0162\021.se"
  "ntry.MessageId\022\014\n\004data\030\002 \001(\014\"o\n\034SendMess"
  "ageByMinBlockRequest\022)\n\004data\030\001 \001(\0132\033.sen"
  "try.OutboundMessageData\022\021\n\tmin_block\030\002 \001"
  "(\004\022\021\n\tmax_peers\030\003 \001(\004\"a\n\026SendMessageById"
  "Request\022)\n\004data\030\001 \001(\0132\033.sentry.OutboundM"
  "essageData\022\034\n\007peer_id\030\002 \001(\0132\013.types.H512"
  "\"_\n\037SendMessageToRandomPeersRequest\022)\n\004d"
  "ata\030\001 \001(\0132\033.sentry.OutboundMessageData\022\021"
  "\n\tmax_peers\030\002 \001(\004\"\'\n\tSentPeers\022\032\n\005peers\030"
  "\001 \003(\0132\013.types.H512\"Y\n\023PenalizePeerReques"
  "t\022\034\n\007peer_id\030\001 \001(\0132\013.types.H512\022$\n\007penal"
  "ty\030\002 \001(\0162\023.sentry.PenaltyKind\"F\n\023PeerMin"
  "BlockRequest\022\034\n\007peer_id\030\001 \001(\0132\013.types.H5"
  "12\022\021\n\tmin_block\030\002 \001(\004\"\035\n\016AddPeerRequest\022"
  "\013\n\003url\030\001 \001(\t\"[\n\016InboundMessage\022\035\n\002id\030\001 \001"
  "(\0162\021.sentry.MessageId\022\014\n\004data\030\002 \001(\014\022\034\n\007p"
  "eer_id\030\003 \001(\0132\013.types.H512\"O\n\005Forks\022\034\n\007ge"
  "nesis\030\001 \001(\0132\013.types.H256\022\024\n\014height_forks"
  "\030\002 \003(\004\022\022\n\ntime_forks\030\003 \003(\004\"\273\001\n\nStatusDat"
  "a\022\022\n\nnetwork_id\030\001 \001(\004\022%\n\020total_difficult"
  "y\030\002 \001(\0132\013.types.H256\022\036\n\tbest_hash\030\003 \001(\0132"
  "\013.types.H256\022 \n\tfork_data\030\004 \001(\0132\r.sentry"
  ".Forks\022\030\n\020max_block_height\030\005 \001(\004\022\026\n\016max_"
  "block_time\030\006 \001(\004\"\020\n\016SetStatusReply\"4\n\016Ha"
  "ndShakeReply\022\"\n\010protocol\030\001 \001(\0162\020.sentry."
  "Protocol\"1\n\017MessagesRequest\022\036\n\003ids\030\001 \003(\016"
  "2\021.sentry.MessageId\",\n\nPeersReply\022\036\n\005pee"
  "rs\030\001 \003(\0132\017.types.PeerInfo\"\022\n\020PeerCountRe"
  "quest\"I\n\024PeerCountPerProtocol\022\"\n\010protoco"
  "l\030\001 \001(\0162\020.sentry.Protocol\022\r\n\005count\030\002 \001(\004"
  "\"Z\n\016PeerCountReply\022\r\n\005count\030\001 \001(\004\0229\n\023cou"
  "nts_per_protocol\030\002 \003(\0132\034.sentry.PeerCoun"
  "tPerProtocol\"/\n\017PeerByIdRequest\022\034\n\007peer_"
  "id\030\001 \001(\0132\013.types.H512\"<\n\rPeerByIdReply\022\""
  "\n\004peer\030\001 \001(\0132\017.types.PeerInfoH\000\210\001\001B\007\n\005_p"
  "eer\"\023\n\021PeerEventsRequest\"\206\001\n\tPeerEvent\022\034"
  "\n\007peer_id\030\001 \001(\0132\013.types.H512\022/\n\010event_id"
  "\030\002 \001(\0162\035.sentry.PeerEvent.PeerEventId\"*\n"
  "\013PeerEventId\022\013\n\007Connect\020\000\022\016\n\nDisconnect\020"
  "\001\"\037\n\014AddPeerReply\022\017\n\007success\030\001 \001(\010*\200\006\n\tM"
  "essageId\022\r\n\tSTATUS_65\020\000\022\030\n\024GET_BLOCK_HEA"
  "DERS_65\020\001\022\024\n\020BLOCK_HEADERS_65\020\002\022\023\n\017BLOCK"
  "_HASHES_65\020\003\022\027\n\023GET_BLOCK_BODIES_65\020\004\022\023\n"
  "\017BLOCK_BODIES_65\020\005\022\024\n\020GET_NODE_DATA_65\020\006"
  "\022\020\n\014NODE_DATA_65\020\007\022\023\n\017GET_RECEIPTS_65\020\010\022"
  "\017\n\013RECEIPTS_65\020\t\022\027\n\023NEW_BLOCK_HASHES_65\020"
  "\n\022\020\n\014NEW_BLOCK_65\020\013\022\023\n\017TRANSACTIONS_65\020\014"
  "\022$\n NEW_POOLED_TRANSACTION_HASHES_65\020\r\022\036"
  "\n\032GET_POOLED_TRANSACTIONS_65\020\016\022\032\n\026POOLED"
  "_TRANSACTIONS_65\020\017\022\r\n\tSTATUS_66\020\021\022\027\n\023NEW"
  "_BLOCK_HASHES_66\020\022\022\020\n\014NEW_BLOCK_66\020\023\022\023\n\017"
  "TRANSACTIONS_66\020\024\022$\n NEW_POOLED_TRANSACT"
  "ION_HASHES_66\020\025\022\030\n\024GET_BLOCK_HEADERS_66\020"
  "\026\022\027\n\023GET_BLOCK_BODIES_66\020\027\022\024\n\020GET_NODE_D"
  "ATA_66\020\030\022\023\n\017GET_RECEIPTS_66\020\031\022\036\n\032GET_POO"
  "LED_TRANSACTIONS_66\020\032\022\024\n\020BLOCK_HEADERS_6"
  "6\020\033\022\023\n\017BLOCK_BODIES_66\020\034\022\020\n\014NODE_DATA_66"
  "\020\035\022\017\n\013RECEIPTS_66\020\036\022\032\n\026POOLED_TRANSACTIO"
  "NS_66\020\037\022$\n NEW_POOLED_TRANSACTION_HASHES"
  "_68\020 *\027\n\013PenaltyKind\022\010\n\004Kick\020\000*6\n\010Protoc"
  "ol\022\t\n\005ETH65\020\000\022\t\n\005ETH66\020\001\022\t\n\005ETH67\020\002\022\t\n\005E"
  "TH68\020\0032\334\007\n\006Sentry\0227\n\tSetStatus\022\022.sentry."
  "StatusData\032\026.sentry.SetStatusReply\022C\n\014Pe"
  "nalizePeer\022\033.sentry.PenalizePeerRequest\032"
  "\026.google.protobuf.Empty\022C\n\014PeerMinBlock\022"
  "\033.sentry.PeerMinBlockRequest\032\026.google.pr"
  "otobuf.Empty\022;\n\tHandShake\022\026.google.proto"
  "buf.Empty\032\026.sentry.HandShakeReply\022P\n\025Sen"
  "dMessageByMinBlock\022$.sentry.SendMessageB"
  "yMinBlockRequest\032\021.sentry.SentPeers\022D\n\017S"
  "endMessageById\022\036.sentry.SendMessageByIdR"
  "equest\032\021.sentry.SentPeers\022V\n\030SendMessage"
  "ToRandomPeers\022\'.sentry.SendMessageToRand"
  "omPeersRequest\032\021.sentry.SentPeers\022B\n\020Sen"
  "dMessageToAll\022\033.sentry.OutboundMessageDa"
  "ta\032\021.sentry.SentPeers\022=\n\010Messages\022\027.sent"
  "ry.MessagesRequest\032\026.sentry.InboundMessa"
  "ge0\001\0223\n\005Peers\022\026.google.protobuf.Empty\032\022."
  "sentry.PeersReply\022=\n\tPeerCount\022\030.sentry."
  "PeerCountRequest\032\026.sentry.PeerCountReply"
  "\022:\n\010PeerById\022\027.sentry.PeerByIdRequest\032\025."
  "sentry.PeerByIdReply\022<\n\nPeerEvents\022\031.sen"
  "try.PeerEventsRequest\032\021.sentry.PeerEvent"
  "0\001\0227\n\007AddPeer\022\026.sentry.AddPeerRequest\032\024."
  "sentry.AddPeerReply\0228\n\010NodeInfo\022\026.google"
  ".protobuf.Empty\032\024.types.NodeInfoReplyB\021Z"
  "\017./sentry;sentryb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_p2psentry_2fsentry_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_p2psentry_2fsentry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_p2psentry_2fsentry_2eproto = {
    false, false, 3584, descriptor_table_protodef_p2psentry_2fsentry_2eproto,
    "p2psentry/sentry.proto",
    &descriptor_table_p2psentry_2fsentry_2eproto_once, descriptor_table_p2psentry_2fsentry_2eproto_deps, 2, 23,
    schemas, file_default_instances, TableStruct_p2psentry_2fsentry_2eproto::offsets,
    file_level_metadata_p2psentry_2fsentry_2eproto, file_level_enum_descriptors_p2psentry_2fsentry_2eproto,
    file_level_service_descriptors_p2psentry_2fsentry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_p2psentry_2fsentry_2eproto_getter() {
  return &descriptor_table_p2psentry_2fsentry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_p2psentry_2fsentry_2eproto(&descriptor_table_p2psentry_2fsentry_2eproto);
namespace sentry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerEvent_PeerEventId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[0];
}
bool PeerEvent_PeerEventId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PeerEvent_PeerEventId PeerEvent::Connect;
constexpr PeerEvent_PeerEventId PeerEvent::Disconnect;
constexpr PeerEvent_PeerEventId PeerEvent::PeerEventId_MIN;
constexpr PeerEvent_PeerEventId PeerEvent::PeerEventId_MAX;
constexpr int PeerEvent::PeerEventId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[1];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PenaltyKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[2];
}
bool PenaltyKind_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[3];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OutboundMessageData::_Internal {
 public:
};

OutboundMessageData::OutboundMessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.OutboundMessageData)
}
OutboundMessageData::OutboundMessageData(const OutboundMessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutboundMessageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.OutboundMessageData)
}

inline void OutboundMessageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutboundMessageData::~OutboundMessageData() {
  // @@protoc_insertion_point(destructor:sentry.OutboundMessageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutboundMessageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void OutboundMessageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutboundMessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.OutboundMessageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutboundMessageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutboundMessageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.OutboundMessageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.OutboundMessageData)
  return target;
}

size_t OutboundMessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.OutboundMessageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutboundMessageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutboundMessageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutboundMessageData::GetClassData() const { return &_class_data_; }


void OutboundMessageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutboundMessageData*>(&to_msg);
  auto& from = static_cast<const OutboundMessageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.OutboundMessageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutboundMessageData::CopyFrom(const OutboundMessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.OutboundMessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundMessageData::IsInitialized() const {
  return true;
}

void OutboundMessageData::InternalSwap(OutboundMessageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutboundMessageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[0]);
}

// ===================================================================

class SendMessageByMinBlockRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByMinBlockRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByMinBlockRequest::_Internal::data(const SendMessageByMinBlockRequest* msg) {
  return *msg->_impl_.data_;
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByMinBlockRequest)
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(const SendMessageByMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageByMinBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.min_block_){}
    , decltype(_impl_.max_peers_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::sentry::OutboundMessageData(*from._impl_.data_);
  }
  ::memcpy(&_impl_.min_block_, &from._impl_.min_block_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_peers_) -
    reinterpret_cast<char*>(&_impl_.min_block_)) + sizeof(_impl_.max_peers_));
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByMinBlockRequest)
}

inline void SendMessageByMinBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.min_block_){uint64_t{0u}}
    , decltype(_impl_.max_peers_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendMessageByMinBlockRequest::~SendMessageByMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByMinBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageByMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void SendMessageByMinBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageByMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByMinBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  ::memset(&_impl_.min_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_peers_) -
      reinterpret_cast<char*>(&_impl_.min_block_)) + sizeof(_impl_.max_peers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByMinBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_peers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageByMinBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByMinBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  // uint64 max_peers = 3;
  if (this->_internal_max_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_peers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByMinBlockRequest)
  return target;
}

size_t SendMessageByMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByMinBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min_block());
  }

  // uint64 max_peers = 3;
  if (this->_internal_max_peers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_peers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageByMinBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageByMinBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageByMinBlockRequest::GetClassData() const { return &_class_data_; }


void SendMessageByMinBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageByMinBlockRequest*>(&to_msg);
  auto& from = static_cast<const SendMessageByMinBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_min_block() != 0) {
    _this->_internal_set_min_block(from._internal_min_block());
  }
  if (from._internal_max_peers() != 0) {
    _this->_internal_set_max_peers(from._internal_max_peers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageByMinBlockRequest::CopyFrom(const SendMessageByMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByMinBlockRequest::IsInitialized() const {
  return true;
}

void SendMessageByMinBlockRequest::InternalSwap(SendMessageByMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, _impl_.max_peers_)
      + sizeof(SendMessageByMinBlockRequest::_impl_.max_peers_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByMinBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[1]);
}

// ===================================================================

class SendMessageByIdRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByIdRequest* msg);
  static const ::types::H512& peer_id(const SendMessageByIdRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByIdRequest::_Internal::data(const SendMessageByIdRequest* msg) {
  return *msg->_impl_.data_;
}
const ::types::H512&
SendMessageByIdRequest::_Internal::peer_id(const SendMessageByIdRequest* msg) {
  return *msg->_impl_.peer_id_;
}
void SendMessageByIdRequest::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
}
SendMessageByIdRequest::SendMessageByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByIdRequest)
}
SendMessageByIdRequest::SendMessageByIdRequest(const SendMessageByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageByIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.peer_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::sentry::OutboundMessageData(*from._impl_.data_);
  }
  if (from._internal_has_peer_id()) {
    _this->_impl_.peer_id_ = new ::types::H512(*from._impl_.peer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByIdRequest)
}

inline void SendMessageByIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.peer_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendMessageByIdRequest::~SendMessageByIdRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.peer_id_;
}

void SendMessageByIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H512 peer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .types.H512 peer_id = 2;
  if (this->_internal_has_peer_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::peer_id(this),
        _Internal::peer_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByIdRequest)
  return target;
}

size_t SendMessageByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .types.H512 peer_id = 2;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageByIdRequest::GetClassData() const { return &_class_data_; }


void SendMessageByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageByIdRequest*>(&to_msg);
  auto& from = static_cast<const SendMessageByIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_peer_id()) {
    _this->_internal_mutable_peer_id()->::types::H512::MergeFrom(
        from._internal_peer_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageByIdRequest::CopyFrom(const SendMessageByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByIdRequest::IsInitialized() const {
  return true;
}

void SendMessageByIdRequest::InternalSwap(SendMessageByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, _impl_.peer_id_)
      + sizeof(SendMessageByIdRequest::_impl_.peer_id_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[2]);
}

// ===================================================================

class SendMessageToRandomPeersRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageToRandomPeersRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageToRandomPeersRequest::_Internal::data(const SendMessageToRandomPeersRequest* msg) {
  return *msg->_impl_.data_;
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageToRandomPeersRequest)
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(const SendMessageToRandomPeersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMessageToRandomPeersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.max_peers_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::sentry::OutboundMessageData(*from._impl_.data_);
  }
  _this->_impl_.max_peers_ = from._impl_.max_peers_;
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageToRandomPeersRequest)
}

inline void SendMessageToRandomPeersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.max_peers_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendMessageToRandomPeersRequest::~SendMessageToRandomPeersRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageToRandomPeersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageToRandomPeersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void SendMessageToRandomPeersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMessageToRandomPeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageToRandomPeersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.max_peers_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageToRandomPeersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_peers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageToRandomPeersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageToRandomPeersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint64 max_peers = 2;
  if (this->_internal_max_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_peers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageToRandomPeersRequest)
  return target;
}

size_t SendMessageToRandomPeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageToRandomPeersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint64 max_peers = 2;
  if (this->_internal_max_peers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_peers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageToRandomPeersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMessageToRandomPeersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageToRandomPeersRequest::GetClassData() const { return &_class_data_; }


void SendMessageToRandomPeersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMessageToRandomPeersRequest*>(&to_msg);
  auto& from = static_cast<const SendMessageToRandomPeersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageToRandomPeersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_max_peers() != 0) {
    _this->_internal_set_max_peers(from._internal_max_peers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageToRandomPeersRequest::CopyFrom(const SendMessageToRandomPeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageToRandomPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageToRandomPeersRequest::IsInitialized() const {
  return true;
}

void SendMessageToRandomPeersRequest::InternalSwap(SendMessageToRandomPeersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, _impl_.max_peers_)
      + sizeof(SendMessageToRandomPeersRequest::_impl_.max_peers_)
      - PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageToRandomPeersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[3]);
}

// ===================================================================

class SentPeers::_Internal {
 public:
};

void SentPeers::clear_peers() {
  _impl_.peers_.Clear();
}
SentPeers::SentPeers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.SentPeers)
}
SentPeers::SentPeers(const SentPeers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SentPeers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){from._impl_.peers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.SentPeers)
}

inline void SentPeers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SentPeers::~SentPeers() {
  // @@protoc_insertion_point(destructor:sentry.SentPeers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SentPeers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.~RepeatedPtrField();
}

void SentPeers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SentPeers::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SentPeers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentPeers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.H512 peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SentPeers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SentPeers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SentPeers)
  return target;
}

size_t SentPeers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SentPeers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_impl_.peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SentPeers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SentPeers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SentPeers::GetClassData() const { return &_class_data_; }


void SentPeers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SentPeers*>(&to_msg);
  auto& from = static_cast<const SentPeers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.SentPeers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peers_.MergeFrom(from._impl_.peers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SentPeers::CopyFrom(const SentPeers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SentPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentPeers::IsInitialized() const {
  return true;
}

void SentPeers::InternalSwap(SentPeers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SentPeers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[4]);
}

// ===================================================================

class PenalizePeerRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PenalizePeerRequest* msg);
};

const ::types::H512&
PenalizePeerRequest::_Internal::peer_id(const PenalizePeerRequest* msg) {
  return *msg->_impl_.peer_id_;
}
void PenalizePeerRequest::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
}
PenalizePeerRequest::PenalizePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PenalizePeerRequest)
}
PenalizePeerRequest::PenalizePeerRequest(const PenalizePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PenalizePeerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.penalty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    _this->_impl_.peer_id_ = new ::types::H512(*from._impl_.peer_id_);
  }
  _this->_impl_.penalty_ = from._impl_.penalty_;
  // @@protoc_insertion_point(copy_constructor:sentry.PenalizePeerRequest)
}

inline void PenalizePeerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.penalty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PenalizePeerRequest::~PenalizePeerRequest() {
  // @@protoc_insertion_point(destructor:sentry.PenalizePeerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PenalizePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.peer_id_;
}

void PenalizePeerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PenalizePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PenalizePeerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
  _impl_.penalty_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PenalizePeerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sentry.PenaltyKind penalty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_penalty(static_cast<::sentry::PenaltyKind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PenalizePeerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PenalizePeerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::peer_id(this),
        _Internal::peer_id(this).GetCachedSize(), target, stream);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->_internal_penalty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PenalizePeerRequest)
  return target;
}

size_t PenalizePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PenalizePeerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_id_);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->_internal_penalty() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_penalty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PenalizePeerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PenalizePeerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PenalizePeerRequest::GetClassData() const { return &_class_data_; }


void PenalizePeerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PenalizePeerRequest*>(&to_msg);
  auto& from = static_cast<const PenalizePeerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PenalizePeerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_id()) {
    _this->_internal_mutable_peer_id()->::types::H512::MergeFrom(
        from._internal_peer_id());
  }
  if (from._internal_penalty() != 0) {
    _this->_internal_set_penalty(from._internal_penalty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PenalizePeerRequest::CopyFrom(const PenalizePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PenalizePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PenalizePeerRequest::IsInitialized() const {
  return true;
}

void PenalizePeerRequest::InternalSwap(PenalizePeerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, _impl_.penalty_)
      + sizeof(PenalizePeerRequest::_impl_.penalty_)
      - PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, _impl_.peer_id_)>(
          reinterpret_cast<char*>(&_impl_.peer_id_),
          reinterpret_cast<char*>(&other->_impl_.peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PenalizePeerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[5]);
}

// ===================================================================

class PeerMinBlockRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerMinBlockRequest* msg);
};

const ::types::H512&
PeerMinBlockRequest::_Internal::peer_id(const PeerMinBlockRequest* msg) {
  return *msg->_impl_.peer_id_;
}
void PeerMinBlockRequest::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
}
PeerMinBlockRequest::PeerMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerMinBlockRequest)
}
PeerMinBlockRequest::PeerMinBlockRequest(const PeerMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerMinBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.min_block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    _this->_impl_.peer_id_ = new ::types::H512(*from._impl_.peer_id_);
  }
  _this->_impl_.min_block_ = from._impl_.min_block_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerMinBlockRequest)
}

inline void PeerMinBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.min_block_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeerMinBlockRequest::~PeerMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerMinBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.peer_id_;
}

void PeerMinBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerMinBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
  _impl_.min_block_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerMinBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerMinBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerMinBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::peer_id(this),
        _Internal::peer_id(this).GetCachedSize(), target, stream);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerMinBlockRequest)
  return target;
}

size_t PeerMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerMinBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_id_);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerMinBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerMinBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerMinBlockRequest::GetClassData() const { return &_class_data_; }


void PeerMinBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerMinBlockRequest*>(&to_msg);
  auto& from = static_cast<const PeerMinBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_id()) {
    _this->_internal_mutable_peer_id()->::types::H512::MergeFrom(
        from._internal_peer_id());
  }
  if (from._internal_min_block() != 0) {
    _this->_internal_set_min_block(from._internal_min_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerMinBlockRequest::CopyFrom(const PeerMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerMinBlockRequest::IsInitialized() const {
  return true;
}

void PeerMinBlockRequest::InternalSwap(PeerMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, _impl_.min_block_)
      + sizeof(PeerMinBlockRequest::_impl_.min_block_)
      - PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, _impl_.peer_id_)>(
          reinterpret_cast<char*>(&_impl_.peer_id_),
          reinterpret_cast<char*>(&other->_impl_.peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerMinBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[6]);
}

// ===================================================================

class AddPeerRequest::_Internal {
 public:
};

AddPeerRequest::AddPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.AddPeerRequest)
}
AddPeerRequest::AddPeerRequest(const AddPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddPeerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sentry.AddPeerRequest)
}

inline void AddPeerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddPeerRequest::~AddPeerRequest() {
  // @@protoc_insertion_point(destructor:sentry.AddPeerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void AddPeerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.AddPeerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sentry.AddPeerRequest.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPeerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.AddPeerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sentry.AddPeerRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.AddPeerRequest)
  return target;
}

size_t AddPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.AddPeerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPeerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddPeerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPeerRequest::GetClassData() const { return &_class_data_; }


void AddPeerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddPeerRequest*>(&to_msg);
  auto& from = static_cast<const AddPeerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPeerRequest::CopyFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerRequest::IsInitialized() const {
  return true;
}

void AddPeerRequest::InternalSwap(AddPeerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[7]);
}

// ===================================================================

class InboundMessage::_Internal {
 public:
  static const ::types::H512& peer_id(const InboundMessage* msg);
};

const ::types::H512&
InboundMessage::_Internal::peer_id(const InboundMessage* msg) {
  return *msg->_impl_.peer_id_;
}
void InboundMessage::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
}
InboundMessage::InboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.InboundMessage)
}
InboundMessage::InboundMessage(const InboundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InboundMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_peer_id()) {
    _this->_impl_.peer_id_ = new ::types::H512(*from._impl_.peer_id_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.InboundMessage)
}

inline void InboundMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InboundMessage::~InboundMessage() {
  // @@protoc_insertion_point(destructor:sentry.InboundMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InboundMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.peer_id_;
}

void InboundMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InboundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.InboundMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InboundMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H512 peer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InboundMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.InboundMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .types.H512 peer_id = 3;
  if (this->_internal_has_peer_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::peer_id(this),
        _Internal::peer_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.InboundMessage)
  return target;
}

size_t InboundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.InboundMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H512 peer_id = 3;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_id_);
  }

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InboundMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InboundMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InboundMessage::GetClassData() const { return &_class_data_; }


void InboundMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InboundMessage*>(&to_msg);
  auto& from = static_cast<const InboundMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.InboundMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_peer_id()) {
    _this->_internal_mutable_peer_id()->::types::H512::MergeFrom(
        from._internal_peer_id());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InboundMessage::CopyFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundMessage::IsInitialized() const {
  return true;
}

void InboundMessage::InternalSwap(InboundMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundMessage, _impl_.id_)
      + sizeof(InboundMessage::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(InboundMessage, _impl_.peer_id_)>(
          reinterpret_cast<char*>(&_impl_.peer_id_),
          reinterpret_cast<char*>(&other->_impl_.peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InboundMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[8]);
}

// ===================================================================

class Forks::_Internal {
 public:
  static const ::types::H256& genesis(const Forks* msg);
};

const ::types::H256&
Forks::_Internal::genesis(const Forks* msg) {
  return *msg->_impl_.genesis_;
}
void Forks::clear_genesis() {
  if (GetArenaForAllocation() == nullptr && _impl_.genesis_ != nullptr) {
    delete _impl_.genesis_;
  }
  _impl_.genesis_ = nullptr;
}
Forks::Forks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.Forks)
}
Forks::Forks(const Forks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Forks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.height_forks_){from._impl_.height_forks_}
    , /*decltype(_impl_._height_forks_cached_byte_size_)*/{0}
    , decltype(_impl_.time_forks_){from._impl_.time_forks_}
    , /*decltype(_impl_._time_forks_cached_byte_size_)*/{0}
    , decltype(_impl_.genesis_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_genesis()) {
    _this->_impl_.genesis_ = new ::types::H256(*from._impl_.genesis_);
  }
  // @@protoc_insertion_point(copy_constructor:sentry.Forks)
}

inline void Forks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.height_forks_){arena}
    , /*decltype(_impl_._height_forks_cached_byte_size_)*/{0}
    , decltype(_impl_.time_forks_){arena}
    , /*decltype(_impl_._time_forks_cached_byte_size_)*/{0}
    , decltype(_impl_.genesis_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Forks::~Forks() {
  // @@protoc_insertion_point(destructor:sentry.Forks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Forks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.height_forks_.~RepeatedField();
  _impl_.time_forks_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.genesis_;
}

void Forks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Forks::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.Forks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.height_forks_.Clear();
  _impl_.time_forks_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.genesis_ != nullptr) {
    delete _impl_.genesis_;
  }
  _impl_.genesis_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Forks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 genesis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_genesis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 height_forks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_height_forks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_height_forks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 time_forks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_time_forks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_time_forks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Forks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.Forks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 genesis = 1;
  if (this->_internal_has_genesis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::genesis(this),
        _Internal::genesis(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 height_forks = 2;
  {
    int byte_size = _impl_._height_forks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_height_forks(), byte_size, target);
    }
  }

  // repeated uint64 time_forks = 3;
  {
    int byte_size = _impl_._time_forks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_time_forks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.Forks)
  return target;
}

size_t Forks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.Forks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 height_forks = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.height_forks_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._height_forks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 time_forks = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.time_forks_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._time_forks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .types.H256 genesis = 1;
  if (this->_internal_has_genesis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.genesis_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Forks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Forks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Forks::GetClassData() const { return &_class_data_; }


void Forks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Forks*>(&to_msg);
  auto& from = static_cast<const Forks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.Forks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.height_forks_.MergeFrom(from._impl_.height_forks_);
  _this->_impl_.time_forks_.MergeFrom(from._impl_.time_forks_);
  if (from._internal_has_genesis()) {
    _this->_internal_mutable_genesis()->::types::H256::MergeFrom(
        from._internal_genesis());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Forks::CopyFrom(const Forks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.Forks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Forks::IsInitialized() const {
  return true;
}

void Forks::InternalSwap(Forks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.height_forks_.InternalSwap(&other->_impl_.height_forks_);
  _impl_.time_forks_.InternalSwap(&other->_impl_.time_forks_);
  swap(_impl_.genesis_, other->_impl_.genesis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Forks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[9]);
}

// ===================================================================

class StatusData::_Internal {
 public:
  static const ::types::H256& total_difficulty(const StatusData* msg);
  static const ::types::H256& best_hash(const StatusData* msg);
  static const ::sentry::Forks& fork_data(const StatusData* msg);
};

const ::types::H256&
StatusData::_Internal::total_difficulty(const StatusData* msg) {
  return *msg->_impl_.total_difficulty_;
}
const ::types::H256&
StatusData::_Internal::best_hash(const StatusData* msg) {
  return *msg->_impl_.best_hash_;
}
const ::sentry::Forks&
StatusData::_Internal::fork_data(const StatusData* msg) {
  return *msg->_impl_.fork_data_;
}
void StatusData::clear_total_difficulty() {
  if (GetArenaForAllocation() == nullptr && _impl_.total_difficulty_ != nullptr) {
    delete _impl_.total_difficulty_;
  }
  _impl_.total_difficulty_ = nullptr;
}
void StatusData::clear_best_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.best_hash_ != nullptr) {
    delete _impl_.best_hash_;
  }
  _impl_.best_hash_ = nullptr;
}
StatusData::StatusData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.StatusData)
}
StatusData::StatusData(const StatusData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_difficulty_){nullptr}
    , decltype(_impl_.best_hash_){nullptr}
    , decltype(_impl_.fork_data_){nullptr}
    , decltype(_impl_.network_id_){}
    , decltype(_impl_.max_block_height_){}
    , decltype(_impl_.max_block_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_difficulty()) {
    _this->_impl_.total_difficulty_ = new ::types::H256(*from._impl_.total_difficulty_);
  }
  if (from._internal_has_best_hash()) {
    _this->_impl_.best_hash_ = new ::types::H256(*from._impl_.best_hash_);
  }
  if (from._internal_has_fork_data()) {
    _this->_impl_.fork_data_ = new ::sentry::Forks(*from._impl_.fork_data_);
  }
  ::memcpy(&_impl_.network_id_, &from._impl_.network_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_block_time_) -
    reinterpret_cast<char*>(&_impl_.network_id_)) + sizeof(_impl_.max_block_time_));
  // @@protoc_insertion_point(copy_constructor:sentry.StatusData)
}

inline void StatusData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_difficulty_){nullptr}
    , decltype(_impl_.best_hash_){nullptr}
    , decltype(_impl_.fork_data_){nullptr}
    , decltype(_impl_.network_id_){uint64_t{0u}}
    , decltype(_impl_.max_block_height_){uint64_t{0u}}
    , decltype(_impl_.max_block_time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatusData::~StatusData() {
  // @@protoc_insertion_point(destructor:sentry.StatusData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.total_difficulty_;
  if (this != internal_default_instance()) delete _impl_.best_hash_;
  if (this != internal_default_instance()) delete _impl_.fork_data_;
}

void StatusData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.StatusData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.total_difficulty_ != nullptr) {
    delete _impl_.total_difficulty_;
  }
  _impl_.total_difficulty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.best_hash_ != nullptr) {
    delete _impl_.best_hash_;
  }
  _impl_.best_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fork_data_ != nullptr) {
    delete _impl_.fork_data_;
  }
  _impl_.fork_data_ = nullptr;
  ::memset(&_impl_.network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_block_time_) -
      reinterpret_cast<char*>(&_impl_.network_id_)) + sizeof(_impl_.max_block_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 network_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 total_difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_difficulty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 best_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sentry.Forks fork_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fork_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_block_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.max_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_block_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.max_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.StatusData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 network_id = 1;
  if (this->_internal_network_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_network_id(), target);
  }

  // .types.H256 total_difficulty = 2;
  if (this->_internal_has_total_difficulty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::total_difficulty(this),
        _Internal::total_difficulty(this).GetCachedSize(), target, stream);
  }

  // .types.H256 best_hash = 3;
  if (this->_internal_has_best_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::best_hash(this),
        _Internal::best_hash(this).GetCachedSize(), target, stream);
  }

  // .sentry.Forks fork_data = 4;
  if (this->_internal_has_fork_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fork_data(this),
        _Internal::fork_data(this).GetCachedSize(), target, stream);
  }

  // uint64 max_block_height = 5;
  if (this->_internal_max_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_max_block_height(), target);
  }

  // uint64 max_block_time = 6;
  if (this->_internal_max_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_max_block_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.StatusData)
  return target;
}

size_t StatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.StatusData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 total_difficulty = 2;
  if (this->_internal_has_total_difficulty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_difficulty_);
  }

  // .types.H256 best_hash = 3;
  if (this->_internal_has_best_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.best_hash_);
  }

  // .sentry.Forks fork_data = 4;
  if (this->_internal_has_fork_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fork_data_);
  }

  // uint64 network_id = 1;
  if (this->_internal_network_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_network_id());
  }

  // uint64 max_block_height = 5;
  if (this->_internal_max_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_block_height());
  }

  // uint64 max_block_time = 6;
  if (this->_internal_max_block_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_block_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusData::GetClassData() const { return &_class_data_; }


void StatusData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusData*>(&to_msg);
  auto& from = static_cast<const StatusData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.StatusData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_total_difficulty()) {
    _this->_internal_mutable_total_difficulty()->::types::H256::MergeFrom(
        from._internal_total_difficulty());
  }
  if (from._internal_has_best_hash()) {
    _this->_internal_mutable_best_hash()->::types::H256::MergeFrom(
        from._internal_best_hash());
  }
  if (from._internal_has_fork_data()) {
    _this->_internal_mutable_fork_data()->::sentry::Forks::MergeFrom(
        from._internal_fork_data());
  }
  if (from._internal_network_id() != 0) {
    _this->_internal_set_network_id(from._internal_network_id());
  }
  if (from._internal_max_block_height() != 0) {
    _this->_internal_set_max_block_height(from._internal_max_block_height());
  }
  if (from._internal_max_block_time() != 0) {
    _this->_internal_set_max_block_time(from._internal_max_block_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusData::CopyFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.StatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusData::IsInitialized() const {
  return true;
}

void StatusData::InternalSwap(StatusData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusData, _impl_.max_block_time_)
      + sizeof(StatusData::_impl_.max_block_time_)
      - PROTOBUF_FIELD_OFFSET(StatusData, _impl_.total_difficulty_)>(
          reinterpret_cast<char*>(&_impl_.total_difficulty_),
          reinterpret_cast<char*>(&other->_impl_.total_difficulty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[10]);
}

// ===================================================================

class SetStatusReply::_Internal {
 public:
};

SetStatusReply::SetStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sentry.SetStatusReply)
}
SetStatusReply::SetStatusReply(const SetStatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetStatusReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.SetStatusReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetStatusReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetStatusReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetStatusReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[11]);
}

// ===================================================================

class HandShakeReply::_Internal {
 public:
};

HandShakeReply::HandShakeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.HandShakeReply)
}
HandShakeReply::HandShakeReply(const HandShakeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandShakeReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.protocol_ = from._impl_.protocol_;
  // @@protoc_insertion_point(copy_constructor:sentry.HandShakeReply)
}

inline void HandShakeReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HandShakeReply::~HandShakeReply() {
  // @@protoc_insertion_point(destructor:sentry.HandShakeReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandShakeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandShakeReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandShakeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.HandShakeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandShakeReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.Protocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::sentry::Protocol>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandShakeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.HandShakeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.HandShakeReply)
  return target;
}

size_t HandShakeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.HandShakeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandShakeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandShakeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandShakeReply::GetClassData() const { return &_class_data_; }


void HandShakeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandShakeReply*>(&to_msg);
  auto& from = static_cast<const HandShakeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.HandShakeReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandShakeReply::CopyFrom(const HandShakeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.HandShakeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandShakeReply::IsInitialized() const {
  return true;
}

void HandShakeReply::InternalSwap(HandShakeReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.protocol_, other->_impl_.protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandShakeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[12]);
}

// ===================================================================

class MessagesRequest::_Internal {
 public:
};

MessagesRequest::MessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.MessagesRequest)
}
MessagesRequest::MessagesRequest(const MessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.MessagesRequest)
}

inline void MessagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MessagesRequest::~MessagesRequest() {
  // @@protoc_insertion_point(destructor:sentry.MessagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
}

void MessagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.MessagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sentry.MessageId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ids(static_cast<::sentry::MessageId>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.MessagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sentry.MessageId ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.ids_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.MessagesRequest)
  return target;
}

size_t MessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.MessagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sentry.MessageId ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_ids(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessagesRequest::GetClassData() const { return &_class_data_; }


void MessagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessagesRequest*>(&to_msg);
  auto& from = static_cast<const MessagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.MessagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessagesRequest::CopyFrom(const MessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.MessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesRequest::IsInitialized() const {
  return true;
}

void MessagesRequest::InternalSwap(MessagesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[13]);
}

// ===================================================================

class PeersReply::_Internal {
 public:
};

void PeersReply::clear_peers() {
  _impl_.peers_.Clear();
}
PeersReply::PeersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PeersReply)
}
PeersReply::PeersReply(const PeersReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeersReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){from._impl_.peers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeersReply)
}

inline void PeersReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeersReply::~PeersReply() {
  // @@protoc_insertion_point(destructor:sentry.PeersReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeersReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.~RepeatedPtrField();
}

void PeersReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeersReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeersReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeersReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.PeerInfo peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeersReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeersReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeersReply)
  return target;
}

size_t PeersReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeersReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_impl_.peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeersReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeersReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeersReply::GetClassData() const { return &_class_data_; }


void PeersReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeersReply*>(&to_msg);
  auto& from = static_cast<const PeersReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeersReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peers_.MergeFrom(from._impl_.peers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeersReply::CopyFrom(const PeersReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeersReply::IsInitialized() const {
  return true;
}

void PeersReply::InternalSwap(PeersReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeersReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[14]);
}

// ===================================================================

class PeerCountRequest::_Internal {
 public:
};

PeerCountRequest::PeerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sentry.PeerCountRequest)
}
PeerCountRequest::PeerCountRequest(const PeerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PeerCountRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeerCountRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerCountRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PeerCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[15]);
}

// ===================================================================

class PeerCountPerProtocol::_Internal {
 public:
};

PeerCountPerProtocol::PeerCountPerProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerCountPerProtocol)
}
PeerCountPerProtocol::PeerCountPerProtocol(const PeerCountPerProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerCountPerProtocol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.protocol_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.protocol_));
  // @@protoc_insertion_point(copy_constructor:sentry.PeerCountPerProtocol)
}

inline void PeerCountPerProtocol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){uint64_t{0u}}
    , decltype(_impl_.protocol_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeerCountPerProtocol::~PeerCountPerProtocol() {
  // @@protoc_insertion_point(destructor:sentry.PeerCountPerProtocol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerCountPerProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PeerCountPerProtocol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerCountPerProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerCountPerProtocol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.protocol_) -
      reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.protocol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerCountPerProtocol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.Protocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::sentry::Protocol>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerCountPerProtocol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerCountPerProtocol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerCountPerProtocol)
  return target;
}

size_t PeerCountPerProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerCountPerProtocol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  // .sentry.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerCountPerProtocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerCountPerProtocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerCountPerProtocol::GetClassData() const { return &_class_data_; }


void PeerCountPerProtocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerCountPerProtocol*>(&to_msg);
  auto& from = static_cast<const PeerCountPerProtocol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerCountPerProtocol)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerCountPerProtocol::CopyFrom(const PeerCountPerProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerCountPerProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCountPerProtocol::IsInitialized() const {
  return true;
}

void PeerCountPerProtocol::InternalSwap(PeerCountPerProtocol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerCountPerProtocol, _impl_.protocol_)
      + sizeof(PeerCountPerProtocol::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(PeerCountPerProtocol, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerCountPerProtocol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[16]);
}

// ===================================================================

class PeerCountReply::_Internal {
 public:
};

PeerCountReply::PeerCountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerCountReply)
}
PeerCountReply::PeerCountReply(const PeerCountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerCountReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.counts_per_protocol_){from._impl_.counts_per_protocol_}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerCountReply)
}

inline void PeerCountReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.counts_per_protocol_){arena}
    , decltype(_impl_.count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeerCountReply::~PeerCountReply() {
  // @@protoc_insertion_point(destructor:sentry.PeerCountReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerCountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counts_per_protocol_.~RepeatedPtrField();
}

void PeerCountReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerCountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerCountReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counts_per_protocol_.Clear();
  _impl_.count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerCountReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sentry.PeerCountPerProtocol counts_per_protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts_per_protocol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerCountReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerCountReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  // repeated .sentry.PeerCountPerProtocol counts_per_protocol = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counts_per_protocol_size()); i < n; i++) {
    const auto& repfield = this->_internal_counts_per_protocol(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerCountReply)
  return target;
}

size_t PeerCountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerCountReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sentry.PeerCountPerProtocol counts_per_protocol = 2;
  total_size += 1UL * this->_internal_counts_per_protocol_size();
  for (const auto& msg : this->_impl_.counts_per_protocol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerCountReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerCountReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerCountReply::GetClassData() const { return &_class_data_; }


void PeerCountReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerCountReply*>(&to_msg);
  auto& from = static_cast<const PeerCountReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerCountReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.counts_per_protocol_.MergeFrom(from._impl_.counts_per_protocol_);
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerCountReply::CopyFrom(const PeerCountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCountReply::IsInitialized() const {
  return true;
}

void PeerCountReply::InternalSwap(PeerCountReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.counts_per_protocol_.InternalSwap(&other->_impl_.counts_per_protocol_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerCountReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[17]);
}

// ===================================================================

class PeerByIdRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerByIdRequest* msg);
};

const ::types::H512&
PeerByIdRequest::_Internal::peer_id(const PeerByIdRequest* msg) {
  return *msg->_impl_.peer_id_;
}
void PeerByIdRequest::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
}
PeerByIdRequest::PeerByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerByIdRequest)
}
PeerByIdRequest::PeerByIdRequest(const PeerByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerByIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    _this->_impl_.peer_id_ = new ::types::H512(*from._impl_.peer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:sentry.PeerByIdRequest)
}

inline void PeerByIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeerByIdRequest::~PeerByIdRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerByIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.peer_id_;
}

void PeerByIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerByIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::peer_id(this),
        _Internal::peer_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerByIdRequest)
  return target;
}

size_t PeerByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerByIdRequest::GetClassData() const { return &_class_data_; }


void PeerByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerByIdRequest*>(&to_msg);
  auto& from = static_cast<const PeerByIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerByIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_id()) {
    _this->_internal_mutable_peer_id()->::types::H512::MergeFrom(
        from._internal_peer_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerByIdRequest::CopyFrom(const PeerByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerByIdRequest::IsInitialized() const {
  return true;
}

void PeerByIdRequest::InternalSwap(PeerByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.peer_id_, other->_impl_.peer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerByIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[18]);
}

// ===================================================================

class PeerByIdReply::_Internal {
 public:
  using HasBits = decltype(std::declval<PeerByIdReply>()._impl_._has_bits_);
  static const ::types::PeerInfo& peer(const PeerByIdReply* msg);
  static void set_has_peer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::PeerInfo&
PeerByIdReply::_Internal::peer(const PeerByIdReply* msg) {
  return *msg->_impl_.peer_;
}
void PeerByIdReply::clear_peer() {
  if (_impl_.peer_ != nullptr) _impl_.peer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PeerByIdReply::PeerByIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerByIdReply)
}
PeerByIdReply::PeerByIdReply(const PeerByIdReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerByIdReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peer_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    _this->_impl_.peer_ = new ::types::PeerInfo(*from._impl_.peer_);
  }
  // @@protoc_insertion_point(copy_constructor:sentry.PeerByIdReply)
}

inline void PeerByIdReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peer_){nullptr}
  };
}

PeerByIdReply::~PeerByIdReply() {
  // @@protoc_insertion_point(destructor:sentry.PeerByIdReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerByIdReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.peer_;
}

void PeerByIdReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerByIdReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerByIdReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.peer_ != nullptr);
    _impl_.peer_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerByIdReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .types.PeerInfo peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerByIdReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerByIdReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .types.PeerInfo peer = 1;
  if (_internal_has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::peer(this),
        _Internal::peer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerByIdReply)
  return target;
}

size_t PeerByIdReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerByIdReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .types.PeerInfo peer = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerByIdReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerByIdReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerByIdReply::GetClassData() const { return &_class_data_; }


void PeerByIdReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerByIdReply*>(&to_msg);
  auto& from = static_cast<const PeerByIdReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerByIdReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer()) {
    _this->_internal_mutable_peer()->::types::PeerInfo::MergeFrom(
        from._internal_peer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerByIdReply::CopyFrom(const PeerByIdReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerByIdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerByIdReply::IsInitialized() const {
  return true;
}

void PeerByIdReply::InternalSwap(PeerByIdReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.peer_, other->_impl_.peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerByIdReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[19]);
}

// ===================================================================

class PeerEventsRequest::_Internal {
 public:
};

PeerEventsRequest::PeerEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sentry.PeerEventsRequest)
}
PeerEventsRequest::PeerEventsRequest(const PeerEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PeerEventsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeerEventsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerEventsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PeerEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[20]);
}

// ===================================================================

class PeerEvent::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerEvent* msg);
};

const ::types::H512&
PeerEvent::_Internal::peer_id(const PeerEvent* msg) {
  return *msg->_impl_.peer_id_;
}
void PeerEvent::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
}
PeerEvent::PeerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.PeerEvent)
}
PeerEvent::PeerEvent(const PeerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.event_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    _this->_impl_.peer_id_ = new ::types::H512(*from._impl_.peer_id_);
  }
  _this->_impl_.event_id_ = from._impl_.event_id_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerEvent)
}

inline void PeerEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_id_){nullptr}
    , decltype(_impl_.event_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeerEvent::~PeerEvent() {
  // @@protoc_insertion_point(destructor:sentry.PeerEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.peer_id_;
}

void PeerEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.peer_id_ != nullptr) {
    delete _impl_.peer_id_;
  }
  _impl_.peer_id_ = nullptr;
  _impl_.event_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sentry.PeerEvent.PeerEventId event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_id(static_cast<::sentry::PeerEvent_PeerEventId>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::peer_id(this),
        _Internal::peer_id(this).GetCachedSize(), target, stream);
  }

  // .sentry.PeerEvent.PeerEventId event_id = 2;
  if (this->_internal_event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerEvent)
  return target;
}

size_t PeerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_id_);
  }

  // .sentry.PeerEvent.PeerEventId event_id = 2;
  if (this->_internal_event_id() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerEvent::GetClassData() const { return &_class_data_; }


void PeerEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerEvent*>(&to_msg);
  auto& from = static_cast<const PeerEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_id()) {
    _this->_internal_mutable_peer_id()->::types::H512::MergeFrom(
        from._internal_peer_id());
  }
  if (from._internal_event_id() != 0) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerEvent::CopyFrom(const PeerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerEvent::IsInitialized() const {
  return true;
}

void PeerEvent::InternalSwap(PeerEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerEvent, _impl_.event_id_)
      + sizeof(PeerEvent::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(PeerEvent, _impl_.peer_id_)>(
          reinterpret_cast<char*>(&_impl_.peer_id_),
          reinterpret_cast<char*>(&other->_impl_.peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[21]);
}

// ===================================================================

class AddPeerReply::_Internal {
 public:
};

AddPeerReply::AddPeerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sentry.AddPeerReply)
}
AddPeerReply::AddPeerReply(const AddPeerReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddPeerReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:sentry.AddPeerReply)
}

inline void AddPeerReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddPeerReply::~AddPeerReply() {
  // @@protoc_insertion_point(destructor:sentry.AddPeerReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPeerReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddPeerReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPeerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.AddPeerReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPeerReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.AddPeerReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.AddPeerReply)
  return target;
}

size_t AddPeerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.AddPeerReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPeerReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddPeerReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPeerReply::GetClassData() const { return &_class_data_; }


void AddPeerReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddPeerReply*>(&to_msg);
  auto& from = static_cast<const AddPeerReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sentry.AddPeerReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPeerReply::CopyFrom(const AddPeerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.AddPeerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerReply::IsInitialized() const {
  return true;
}

void AddPeerReply::InternalSwap(AddPeerReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sentry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sentry::OutboundMessageData*
Arena::CreateMaybeMessage< ::sentry::OutboundMessageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::OutboundMessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByMinBlockRequest*
Arena::CreateMaybeMessage< ::sentry::SendMessageByMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByIdRequest*
Arena::CreateMaybeMessage< ::sentry::SendMessageByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageToRandomPeersRequest*
Arena::CreateMaybeMessage< ::sentry::SendMessageToRandomPeersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageToRandomPeersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SentPeers*
Arena::CreateMaybeMessage< ::sentry::SentPeers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SentPeers >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PenalizePeerRequest*
Arena::CreateMaybeMessage< ::sentry::PenalizePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PenalizePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerMinBlockRequest*
Arena::CreateMaybeMessage< ::sentry::PeerMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::AddPeerRequest*
Arena::CreateMaybeMessage< ::sentry::AddPeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::AddPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::InboundMessage*
Arena::CreateMaybeMessage< ::sentry::InboundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::InboundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::Forks*
Arena::CreateMaybeMessage< ::sentry::Forks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::Forks >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::StatusData*
Arena::CreateMaybeMessage< ::sentry::StatusData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::StatusData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SetStatusReply*
Arena::CreateMaybeMessage< ::sentry::SetStatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SetStatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::HandShakeReply*
Arena::CreateMaybeMessage< ::sentry::HandShakeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::HandShakeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::MessagesRequest*
Arena::CreateMaybeMessage< ::sentry::MessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::MessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeersReply*
Arena::CreateMaybeMessage< ::sentry::PeersReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeersReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerCountRequest*
Arena::CreateMaybeMessage< ::sentry::PeerCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerCountPerProtocol*
Arena::CreateMaybeMessage< ::sentry::PeerCountPerProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerCountPerProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerCountReply*
Arena::CreateMaybeMessage< ::sentry::PeerCountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerCountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerByIdRequest*
Arena::CreateMaybeMessage< ::sentry::PeerByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerByIdReply*
Arena::CreateMaybeMessage< ::sentry::PeerByIdReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerByIdReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerEventsRequest*
Arena::CreateMaybeMessage< ::sentry::PeerEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerEvent*
Arena::CreateMaybeMessage< ::sentry::PeerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::AddPeerReply*
Arena::CreateMaybeMessage< ::sentry::AddPeerReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::AddPeerReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
