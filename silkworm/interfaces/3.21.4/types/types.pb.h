// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2ftypes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2ftypes_2eproto;
namespace types {
class BlobsBundleV1;
struct BlobsBundleV1DefaultTypeInternal;
extern BlobsBundleV1DefaultTypeInternal _BlobsBundleV1_default_instance_;
class ExecutionPayload;
struct ExecutionPayloadDefaultTypeInternal;
extern ExecutionPayloadDefaultTypeInternal _ExecutionPayload_default_instance_;
class ExecutionPayloadBodyV1;
struct ExecutionPayloadBodyV1DefaultTypeInternal;
extern ExecutionPayloadBodyV1DefaultTypeInternal _ExecutionPayloadBodyV1_default_instance_;
class H1024;
struct H1024DefaultTypeInternal;
extern H1024DefaultTypeInternal _H1024_default_instance_;
class H128;
struct H128DefaultTypeInternal;
extern H128DefaultTypeInternal _H128_default_instance_;
class H160;
struct H160DefaultTypeInternal;
extern H160DefaultTypeInternal _H160_default_instance_;
class H2048;
struct H2048DefaultTypeInternal;
extern H2048DefaultTypeInternal _H2048_default_instance_;
class H256;
struct H256DefaultTypeInternal;
extern H256DefaultTypeInternal _H256_default_instance_;
class H512;
struct H512DefaultTypeInternal;
extern H512DefaultTypeInternal _H512_default_instance_;
class NodeInfoPorts;
struct NodeInfoPortsDefaultTypeInternal;
extern NodeInfoPortsDefaultTypeInternal _NodeInfoPorts_default_instance_;
class NodeInfoReply;
struct NodeInfoReplyDefaultTypeInternal;
extern NodeInfoReplyDefaultTypeInternal _NodeInfoReply_default_instance_;
class PeerInfo;
struct PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
class VersionReply;
struct VersionReplyDefaultTypeInternal;
extern VersionReplyDefaultTypeInternal _VersionReply_default_instance_;
class Withdrawal;
struct WithdrawalDefaultTypeInternal;
extern WithdrawalDefaultTypeInternal _Withdrawal_default_instance_;
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
template<> ::types::BlobsBundleV1* Arena::CreateMaybeMessage<::types::BlobsBundleV1>(Arena*);
template<> ::types::ExecutionPayload* Arena::CreateMaybeMessage<::types::ExecutionPayload>(Arena*);
template<> ::types::ExecutionPayloadBodyV1* Arena::CreateMaybeMessage<::types::ExecutionPayloadBodyV1>(Arena*);
template<> ::types::H1024* Arena::CreateMaybeMessage<::types::H1024>(Arena*);
template<> ::types::H128* Arena::CreateMaybeMessage<::types::H128>(Arena*);
template<> ::types::H160* Arena::CreateMaybeMessage<::types::H160>(Arena*);
template<> ::types::H2048* Arena::CreateMaybeMessage<::types::H2048>(Arena*);
template<> ::types::H256* Arena::CreateMaybeMessage<::types::H256>(Arena*);
template<> ::types::H512* Arena::CreateMaybeMessage<::types::H512>(Arena*);
template<> ::types::NodeInfoPorts* Arena::CreateMaybeMessage<::types::NodeInfoPorts>(Arena*);
template<> ::types::NodeInfoReply* Arena::CreateMaybeMessage<::types::NodeInfoReply>(Arena*);
template<> ::types::PeerInfo* Arena::CreateMaybeMessage<::types::PeerInfo>(Arena*);
template<> ::types::VersionReply* Arena::CreateMaybeMessage<::types::VersionReply>(Arena*);
template<> ::types::Withdrawal* Arena::CreateMaybeMessage<::types::Withdrawal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace types {

// ===================================================================

class H128 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.H128) */ {
 public:
  inline H128() : H128(nullptr) {}
  ~H128() override;
  explicit PROTOBUF_CONSTEXPR H128(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  H128(const H128& from);
  H128(H128&& from) noexcept
    : H128() {
    *this = ::std::move(from);
  }

  inline H128& operator=(const H128& from) {
    CopyFrom(from);
    return *this;
  }
  inline H128& operator=(H128&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const H128& default_instance() {
    return *internal_default_instance();
  }
  static inline const H128* internal_default_instance() {
    return reinterpret_cast<const H128*>(
               &_H128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(H128& a, H128& b) {
    a.Swap(&b);
  }
  inline void Swap(H128* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(H128* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  H128* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<H128>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const H128& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const H128& from) {
    H128::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H128* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.H128";
  }
  protected:
  explicit H128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // uint64 hi = 1;
  void clear_hi();
  uint64_t hi() const;
  void set_hi(uint64_t value);
  private:
  uint64_t _internal_hi() const;
  void _internal_set_hi(uint64_t value);
  public:

  // uint64 lo = 2;
  void clear_lo();
  uint64_t lo() const;
  void set_lo(uint64_t value);
  private:
  uint64_t _internal_lo() const;
  void _internal_set_lo(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.H128)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t hi_;
    uint64_t lo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class H160 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.H160) */ {
 public:
  inline H160() : H160(nullptr) {}
  ~H160() override;
  explicit PROTOBUF_CONSTEXPR H160(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  H160(const H160& from);
  H160(H160&& from) noexcept
    : H160() {
    *this = ::std::move(from);
  }

  inline H160& operator=(const H160& from) {
    CopyFrom(from);
    return *this;
  }
  inline H160& operator=(H160&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const H160& default_instance() {
    return *internal_default_instance();
  }
  static inline const H160* internal_default_instance() {
    return reinterpret_cast<const H160*>(
               &_H160_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(H160& a, H160& b) {
    a.Swap(&b);
  }
  inline void Swap(H160* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(H160* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  H160* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<H160>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const H160& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const H160& from) {
    H160::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H160* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.H160";
  }
  protected:
  explicit H160(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // .types.H128 hi = 1;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::types::H128& hi() const;
  PROTOBUF_NODISCARD ::types::H128* release_hi();
  ::types::H128* mutable_hi();
  void set_allocated_hi(::types::H128* hi);
  private:
  const ::types::H128& _internal_hi() const;
  ::types::H128* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::types::H128* hi);
  ::types::H128* unsafe_arena_release_hi();

  // uint32 lo = 2;
  void clear_lo();
  uint32_t lo() const;
  void set_lo(uint32_t value);
  private:
  uint32_t _internal_lo() const;
  void _internal_set_lo(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.H160)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H128* hi_;
    uint32_t lo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class H256 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.H256) */ {
 public:
  inline H256() : H256(nullptr) {}
  ~H256() override;
  explicit PROTOBUF_CONSTEXPR H256(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  H256(const H256& from);
  H256(H256&& from) noexcept
    : H256() {
    *this = ::std::move(from);
  }

  inline H256& operator=(const H256& from) {
    CopyFrom(from);
    return *this;
  }
  inline H256& operator=(H256&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const H256& default_instance() {
    return *internal_default_instance();
  }
  static inline const H256* internal_default_instance() {
    return reinterpret_cast<const H256*>(
               &_H256_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(H256& a, H256& b) {
    a.Swap(&b);
  }
  inline void Swap(H256* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(H256* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  H256* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<H256>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const H256& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const H256& from) {
    H256::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H256* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.H256";
  }
  protected:
  explicit H256(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // .types.H128 hi = 1;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::types::H128& hi() const;
  PROTOBUF_NODISCARD ::types::H128* release_hi();
  ::types::H128* mutable_hi();
  void set_allocated_hi(::types::H128* hi);
  private:
  const ::types::H128& _internal_hi() const;
  ::types::H128* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::types::H128* hi);
  ::types::H128* unsafe_arena_release_hi();

  // .types.H128 lo = 2;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::types::H128& lo() const;
  PROTOBUF_NODISCARD ::types::H128* release_lo();
  ::types::H128* mutable_lo();
  void set_allocated_lo(::types::H128* lo);
  private:
  const ::types::H128& _internal_lo() const;
  ::types::H128* _internal_mutable_lo();
  public:
  void unsafe_arena_set_allocated_lo(
      ::types::H128* lo);
  ::types::H128* unsafe_arena_release_lo();

  // @@protoc_insertion_point(class_scope:types.H256)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H128* hi_;
    ::types::H128* lo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class H512 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.H512) */ {
 public:
  inline H512() : H512(nullptr) {}
  ~H512() override;
  explicit PROTOBUF_CONSTEXPR H512(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  H512(const H512& from);
  H512(H512&& from) noexcept
    : H512() {
    *this = ::std::move(from);
  }

  inline H512& operator=(const H512& from) {
    CopyFrom(from);
    return *this;
  }
  inline H512& operator=(H512&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const H512& default_instance() {
    return *internal_default_instance();
  }
  static inline const H512* internal_default_instance() {
    return reinterpret_cast<const H512*>(
               &_H512_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(H512& a, H512& b) {
    a.Swap(&b);
  }
  inline void Swap(H512* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(H512* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  H512* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<H512>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const H512& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const H512& from) {
    H512::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H512* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.H512";
  }
  protected:
  explicit H512(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // .types.H256 hi = 1;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::types::H256& hi() const;
  PROTOBUF_NODISCARD ::types::H256* release_hi();
  ::types::H256* mutable_hi();
  void set_allocated_hi(::types::H256* hi);
  private:
  const ::types::H256& _internal_hi() const;
  ::types::H256* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::types::H256* hi);
  ::types::H256* unsafe_arena_release_hi();

  // .types.H256 lo = 2;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::types::H256& lo() const;
  PROTOBUF_NODISCARD ::types::H256* release_lo();
  ::types::H256* mutable_lo();
  void set_allocated_lo(::types::H256* lo);
  private:
  const ::types::H256& _internal_lo() const;
  ::types::H256* _internal_mutable_lo();
  public:
  void unsafe_arena_set_allocated_lo(
      ::types::H256* lo);
  ::types::H256* unsafe_arena_release_lo();

  // @@protoc_insertion_point(class_scope:types.H512)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H256* hi_;
    ::types::H256* lo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class H1024 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.H1024) */ {
 public:
  inline H1024() : H1024(nullptr) {}
  ~H1024() override;
  explicit PROTOBUF_CONSTEXPR H1024(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  H1024(const H1024& from);
  H1024(H1024&& from) noexcept
    : H1024() {
    *this = ::std::move(from);
  }

  inline H1024& operator=(const H1024& from) {
    CopyFrom(from);
    return *this;
  }
  inline H1024& operator=(H1024&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const H1024& default_instance() {
    return *internal_default_instance();
  }
  static inline const H1024* internal_default_instance() {
    return reinterpret_cast<const H1024*>(
               &_H1024_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(H1024& a, H1024& b) {
    a.Swap(&b);
  }
  inline void Swap(H1024* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(H1024* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  H1024* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<H1024>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const H1024& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const H1024& from) {
    H1024::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H1024* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.H1024";
  }
  protected:
  explicit H1024(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // .types.H512 hi = 1;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::types::H512& hi() const;
  PROTOBUF_NODISCARD ::types::H512* release_hi();
  ::types::H512* mutable_hi();
  void set_allocated_hi(::types::H512* hi);
  private:
  const ::types::H512& _internal_hi() const;
  ::types::H512* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::types::H512* hi);
  ::types::H512* unsafe_arena_release_hi();

  // .types.H512 lo = 2;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::types::H512& lo() const;
  PROTOBUF_NODISCARD ::types::H512* release_lo();
  ::types::H512* mutable_lo();
  void set_allocated_lo(::types::H512* lo);
  private:
  const ::types::H512& _internal_lo() const;
  ::types::H512* _internal_mutable_lo();
  public:
  void unsafe_arena_set_allocated_lo(
      ::types::H512* lo);
  ::types::H512* unsafe_arena_release_lo();

  // @@protoc_insertion_point(class_scope:types.H1024)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H512* hi_;
    ::types::H512* lo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class H2048 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.H2048) */ {
 public:
  inline H2048() : H2048(nullptr) {}
  ~H2048() override;
  explicit PROTOBUF_CONSTEXPR H2048(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  H2048(const H2048& from);
  H2048(H2048&& from) noexcept
    : H2048() {
    *this = ::std::move(from);
  }

  inline H2048& operator=(const H2048& from) {
    CopyFrom(from);
    return *this;
  }
  inline H2048& operator=(H2048&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const H2048& default_instance() {
    return *internal_default_instance();
  }
  static inline const H2048* internal_default_instance() {
    return reinterpret_cast<const H2048*>(
               &_H2048_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(H2048& a, H2048& b) {
    a.Swap(&b);
  }
  inline void Swap(H2048* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(H2048* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  H2048* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<H2048>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const H2048& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const H2048& from) {
    H2048::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H2048* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.H2048";
  }
  protected:
  explicit H2048(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // .types.H1024 hi = 1;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  const ::types::H1024& hi() const;
  PROTOBUF_NODISCARD ::types::H1024* release_hi();
  ::types::H1024* mutable_hi();
  void set_allocated_hi(::types::H1024* hi);
  private:
  const ::types::H1024& _internal_hi() const;
  ::types::H1024* _internal_mutable_hi();
  public:
  void unsafe_arena_set_allocated_hi(
      ::types::H1024* hi);
  ::types::H1024* unsafe_arena_release_hi();

  // .types.H1024 lo = 2;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  const ::types::H1024& lo() const;
  PROTOBUF_NODISCARD ::types::H1024* release_lo();
  ::types::H1024* mutable_lo();
  void set_allocated_lo(::types::H1024* lo);
  private:
  const ::types::H1024& _internal_lo() const;
  ::types::H1024* _internal_mutable_lo();
  public:
  void unsafe_arena_set_allocated_lo(
      ::types::H1024* lo);
  ::types::H1024* unsafe_arena_release_lo();

  // @@protoc_insertion_point(class_scope:types.H2048)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H1024* hi_;
    ::types::H1024* lo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class VersionReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.VersionReply) */ {
 public:
  inline VersionReply() : VersionReply(nullptr) {}
  ~VersionReply() override;
  explicit PROTOBUF_CONSTEXPR VersionReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionReply(const VersionReply& from);
  VersionReply(VersionReply&& from) noexcept
    : VersionReply() {
    *this = ::std::move(from);
  }

  inline VersionReply& operator=(const VersionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionReply& operator=(VersionReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionReply* internal_default_instance() {
    return reinterpret_cast<const VersionReply*>(
               &_VersionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VersionReply& a, VersionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionReply& from) {
    VersionReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.VersionReply";
  }
  protected:
  explicit VersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // uint32 major = 1;
  void clear_major();
  uint32_t major() const;
  void set_major(uint32_t value);
  private:
  uint32_t _internal_major() const;
  void _internal_set_major(uint32_t value);
  public:

  // uint32 minor = 2;
  void clear_minor();
  uint32_t minor() const;
  void set_minor(uint32_t value);
  private:
  uint32_t _internal_minor() const;
  void _internal_set_minor(uint32_t value);
  public:

  // uint32 patch = 3;
  void clear_patch();
  uint32_t patch() const;
  void set_patch(uint32_t value);
  private:
  uint32_t _internal_patch() const;
  void _internal_set_patch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.VersionReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t major_;
    uint32_t minor_;
    uint32_t patch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ExecutionPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ExecutionPayload) */ {
 public:
  inline ExecutionPayload() : ExecutionPayload(nullptr) {}
  ~ExecutionPayload() override;
  explicit PROTOBUF_CONSTEXPR ExecutionPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionPayload(const ExecutionPayload& from);
  ExecutionPayload(ExecutionPayload&& from) noexcept
    : ExecutionPayload() {
    *this = ::std::move(from);
  }

  inline ExecutionPayload& operator=(const ExecutionPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionPayload& operator=(ExecutionPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionPayload* internal_default_instance() {
    return reinterpret_cast<const ExecutionPayload*>(
               &_ExecutionPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExecutionPayload& a, ExecutionPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutionPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutionPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecutionPayload& from) {
    ExecutionPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ExecutionPayload";
  }
  protected:
  explicit ExecutionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 15,
    kWithdrawalsFieldNumber = 16,
    kExtraDataFieldNumber = 12,
    kParentHashFieldNumber = 2,
    kCoinbaseFieldNumber = 3,
    kStateRootFieldNumber = 4,
    kReceiptRootFieldNumber = 5,
    kLogsBloomFieldNumber = 6,
    kPrevRandaoFieldNumber = 7,
    kBaseFeePerGasFieldNumber = 13,
    kBlockHashFieldNumber = 14,
    kBlockNumberFieldNumber = 8,
    kGasLimitFieldNumber = 9,
    kGasUsedFieldNumber = 10,
    kTimestampFieldNumber = 11,
    kBlobGasUsedFieldNumber = 17,
    kExcessBlobGasFieldNumber = 18,
    kVersionFieldNumber = 1,
  };
  // repeated bytes transactions = 15;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  const std::string& transactions(int index) const;
  std::string* mutable_transactions(int index);
  void set_transactions(int index, const std::string& value);
  void set_transactions(int index, std::string&& value);
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const void* value, size_t size);
  std::string* add_transactions();
  void add_transactions(const std::string& value);
  void add_transactions(std::string&& value);
  void add_transactions(const char* value);
  void add_transactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactions();
  private:
  const std::string& _internal_transactions(int index) const;
  std::string* _internal_add_transactions();
  public:

  // repeated .types.Withdrawal withdrawals = 16;
  int withdrawals_size() const;
  private:
  int _internal_withdrawals_size() const;
  public:
  void clear_withdrawals();
  ::types::Withdrawal* mutable_withdrawals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
      mutable_withdrawals();
  private:
  const ::types::Withdrawal& _internal_withdrawals(int index) const;
  ::types::Withdrawal* _internal_add_withdrawals();
  public:
  const ::types::Withdrawal& withdrawals(int index) const;
  ::types::Withdrawal* add_withdrawals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
      withdrawals() const;

  // bytes extra_data = 12;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_NODISCARD std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // .types.H256 parent_hash = 2;
  bool has_parent_hash() const;
  private:
  bool _internal_has_parent_hash() const;
  public:
  void clear_parent_hash();
  const ::types::H256& parent_hash() const;
  PROTOBUF_NODISCARD ::types::H256* release_parent_hash();
  ::types::H256* mutable_parent_hash();
  void set_allocated_parent_hash(::types::H256* parent_hash);
  private:
  const ::types::H256& _internal_parent_hash() const;
  ::types::H256* _internal_mutable_parent_hash();
  public:
  void unsafe_arena_set_allocated_parent_hash(
      ::types::H256* parent_hash);
  ::types::H256* unsafe_arena_release_parent_hash();

  // .types.H160 coinbase = 3;
  bool has_coinbase() const;
  private:
  bool _internal_has_coinbase() const;
  public:
  void clear_coinbase();
  const ::types::H160& coinbase() const;
  PROTOBUF_NODISCARD ::types::H160* release_coinbase();
  ::types::H160* mutable_coinbase();
  void set_allocated_coinbase(::types::H160* coinbase);
  private:
  const ::types::H160& _internal_coinbase() const;
  ::types::H160* _internal_mutable_coinbase();
  public:
  void unsafe_arena_set_allocated_coinbase(
      ::types::H160* coinbase);
  ::types::H160* unsafe_arena_release_coinbase();

  // .types.H256 state_root = 4;
  bool has_state_root() const;
  private:
  bool _internal_has_state_root() const;
  public:
  void clear_state_root();
  const ::types::H256& state_root() const;
  PROTOBUF_NODISCARD ::types::H256* release_state_root();
  ::types::H256* mutable_state_root();
  void set_allocated_state_root(::types::H256* state_root);
  private:
  const ::types::H256& _internal_state_root() const;
  ::types::H256* _internal_mutable_state_root();
  public:
  void unsafe_arena_set_allocated_state_root(
      ::types::H256* state_root);
  ::types::H256* unsafe_arena_release_state_root();

  // .types.H256 receipt_root = 5;
  bool has_receipt_root() const;
  private:
  bool _internal_has_receipt_root() const;
  public:
  void clear_receipt_root();
  const ::types::H256& receipt_root() const;
  PROTOBUF_NODISCARD ::types::H256* release_receipt_root();
  ::types::H256* mutable_receipt_root();
  void set_allocated_receipt_root(::types::H256* receipt_root);
  private:
  const ::types::H256& _internal_receipt_root() const;
  ::types::H256* _internal_mutable_receipt_root();
  public:
  void unsafe_arena_set_allocated_receipt_root(
      ::types::H256* receipt_root);
  ::types::H256* unsafe_arena_release_receipt_root();

  // .types.H2048 logs_bloom = 6;
  bool has_logs_bloom() const;
  private:
  bool _internal_has_logs_bloom() const;
  public:
  void clear_logs_bloom();
  const ::types::H2048& logs_bloom() const;
  PROTOBUF_NODISCARD ::types::H2048* release_logs_bloom();
  ::types::H2048* mutable_logs_bloom();
  void set_allocated_logs_bloom(::types::H2048* logs_bloom);
  private:
  const ::types::H2048& _internal_logs_bloom() const;
  ::types::H2048* _internal_mutable_logs_bloom();
  public:
  void unsafe_arena_set_allocated_logs_bloom(
      ::types::H2048* logs_bloom);
  ::types::H2048* unsafe_arena_release_logs_bloom();

  // .types.H256 prev_randao = 7;
  bool has_prev_randao() const;
  private:
  bool _internal_has_prev_randao() const;
  public:
  void clear_prev_randao();
  const ::types::H256& prev_randao() const;
  PROTOBUF_NODISCARD ::types::H256* release_prev_randao();
  ::types::H256* mutable_prev_randao();
  void set_allocated_prev_randao(::types::H256* prev_randao);
  private:
  const ::types::H256& _internal_prev_randao() const;
  ::types::H256* _internal_mutable_prev_randao();
  public:
  void unsafe_arena_set_allocated_prev_randao(
      ::types::H256* prev_randao);
  ::types::H256* unsafe_arena_release_prev_randao();

  // .types.H256 base_fee_per_gas = 13;
  bool has_base_fee_per_gas() const;
  private:
  bool _internal_has_base_fee_per_gas() const;
  public:
  void clear_base_fee_per_gas();
  const ::types::H256& base_fee_per_gas() const;
  PROTOBUF_NODISCARD ::types::H256* release_base_fee_per_gas();
  ::types::H256* mutable_base_fee_per_gas();
  void set_allocated_base_fee_per_gas(::types::H256* base_fee_per_gas);
  private:
  const ::types::H256& _internal_base_fee_per_gas() const;
  ::types::H256* _internal_mutable_base_fee_per_gas();
  public:
  void unsafe_arena_set_allocated_base_fee_per_gas(
      ::types::H256* base_fee_per_gas);
  ::types::H256* unsafe_arena_release_base_fee_per_gas();

  // .types.H256 block_hash = 14;
  bool has_block_hash() const;
  private:
  bool _internal_has_block_hash() const;
  public:
  void clear_block_hash();
  const ::types::H256& block_hash() const;
  PROTOBUF_NODISCARD ::types::H256* release_block_hash();
  ::types::H256* mutable_block_hash();
  void set_allocated_block_hash(::types::H256* block_hash);
  private:
  const ::types::H256& _internal_block_hash() const;
  ::types::H256* _internal_mutable_block_hash();
  public:
  void unsafe_arena_set_allocated_block_hash(
      ::types::H256* block_hash);
  ::types::H256* unsafe_arena_release_block_hash();

  // uint64 block_number = 8;
  void clear_block_number();
  uint64_t block_number() const;
  void set_block_number(uint64_t value);
  private:
  uint64_t _internal_block_number() const;
  void _internal_set_block_number(uint64_t value);
  public:

  // uint64 gas_limit = 9;
  void clear_gas_limit();
  uint64_t gas_limit() const;
  void set_gas_limit(uint64_t value);
  private:
  uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(uint64_t value);
  public:

  // uint64 gas_used = 10;
  void clear_gas_used();
  uint64_t gas_used() const;
  void set_gas_used(uint64_t value);
  private:
  uint64_t _internal_gas_used() const;
  void _internal_set_gas_used(uint64_t value);
  public:

  // uint64 timestamp = 11;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint64 blob_gas_used = 17;
  bool has_blob_gas_used() const;
  private:
  bool _internal_has_blob_gas_used() const;
  public:
  void clear_blob_gas_used();
  uint64_t blob_gas_used() const;
  void set_blob_gas_used(uint64_t value);
  private:
  uint64_t _internal_blob_gas_used() const;
  void _internal_set_blob_gas_used(uint64_t value);
  public:

  // optional uint64 excess_blob_gas = 18;
  bool has_excess_blob_gas() const;
  private:
  bool _internal_has_excess_blob_gas() const;
  public:
  void clear_excess_blob_gas();
  uint64_t excess_blob_gas() const;
  void set_excess_blob_gas(uint64_t value);
  private:
  uint64_t _internal_excess_blob_gas() const;
  void _internal_set_excess_blob_gas(uint64_t value);
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.ExecutionPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal > withdrawals_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
    ::types::H256* parent_hash_;
    ::types::H160* coinbase_;
    ::types::H256* state_root_;
    ::types::H256* receipt_root_;
    ::types::H2048* logs_bloom_;
    ::types::H256* prev_randao_;
    ::types::H256* base_fee_per_gas_;
    ::types::H256* block_hash_;
    uint64_t block_number_;
    uint64_t gas_limit_;
    uint64_t gas_used_;
    uint64_t timestamp_;
    uint64_t blob_gas_used_;
    uint64_t excess_blob_gas_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Withdrawal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Withdrawal) */ {
 public:
  inline Withdrawal() : Withdrawal(nullptr) {}
  ~Withdrawal() override;
  explicit PROTOBUF_CONSTEXPR Withdrawal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Withdrawal(const Withdrawal& from);
  Withdrawal(Withdrawal&& from) noexcept
    : Withdrawal() {
    *this = ::std::move(from);
  }

  inline Withdrawal& operator=(const Withdrawal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Withdrawal& operator=(Withdrawal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Withdrawal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Withdrawal* internal_default_instance() {
    return reinterpret_cast<const Withdrawal*>(
               &_Withdrawal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Withdrawal& a, Withdrawal& b) {
    a.Swap(&b);
  }
  inline void Swap(Withdrawal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Withdrawal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Withdrawal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Withdrawal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Withdrawal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Withdrawal& from) {
    Withdrawal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdrawal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Withdrawal";
  }
  protected:
  explicit Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kIndexFieldNumber = 1,
    kValidatorIndexFieldNumber = 2,
    kAmountFieldNumber = 4,
  };
  // .types.H160 address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::types::H160& address() const;
  PROTOBUF_NODISCARD ::types::H160* release_address();
  ::types::H160* mutable_address();
  void set_allocated_address(::types::H160* address);
  private:
  const ::types::H160& _internal_address() const;
  ::types::H160* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::types::H160* address);
  ::types::H160* unsafe_arena_release_address();

  // uint64 index = 1;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint64 validator_index = 2;
  void clear_validator_index();
  uint64_t validator_index() const;
  void set_validator_index(uint64_t value);
  private:
  uint64_t _internal_validator_index() const;
  void _internal_set_validator_index(uint64_t value);
  public:

  // uint64 amount = 4;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.Withdrawal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H160* address_;
    uint64_t index_;
    uint64_t validator_index_;
    uint64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class BlobsBundleV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.BlobsBundleV1) */ {
 public:
  inline BlobsBundleV1() : BlobsBundleV1(nullptr) {}
  ~BlobsBundleV1() override;
  explicit PROTOBUF_CONSTEXPR BlobsBundleV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlobsBundleV1(const BlobsBundleV1& from);
  BlobsBundleV1(BlobsBundleV1&& from) noexcept
    : BlobsBundleV1() {
    *this = ::std::move(from);
  }

  inline BlobsBundleV1& operator=(const BlobsBundleV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobsBundleV1& operator=(BlobsBundleV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobsBundleV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobsBundleV1* internal_default_instance() {
    return reinterpret_cast<const BlobsBundleV1*>(
               &_BlobsBundleV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BlobsBundleV1& a, BlobsBundleV1& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobsBundleV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobsBundleV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobsBundleV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlobsBundleV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlobsBundleV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlobsBundleV1& from) {
    BlobsBundleV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobsBundleV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.BlobsBundleV1";
  }
  protected:
  explicit BlobsBundleV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitmentsFieldNumber = 1,
    kBlobsFieldNumber = 2,
    kProofsFieldNumber = 3,
  };
  // repeated bytes commitments = 1;
  int commitments_size() const;
  private:
  int _internal_commitments_size() const;
  public:
  void clear_commitments();
  const std::string& commitments(int index) const;
  std::string* mutable_commitments(int index);
  void set_commitments(int index, const std::string& value);
  void set_commitments(int index, std::string&& value);
  void set_commitments(int index, const char* value);
  void set_commitments(int index, const void* value, size_t size);
  std::string* add_commitments();
  void add_commitments(const std::string& value);
  void add_commitments(std::string&& value);
  void add_commitments(const char* value);
  void add_commitments(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& commitments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_commitments();
  private:
  const std::string& _internal_commitments(int index) const;
  std::string* _internal_add_commitments();
  public:

  // repeated bytes blobs = 2;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  const std::string& blobs(int index) const;
  std::string* mutable_blobs(int index);
  void set_blobs(int index, const std::string& value);
  void set_blobs(int index, std::string&& value);
  void set_blobs(int index, const char* value);
  void set_blobs(int index, const void* value, size_t size);
  std::string* add_blobs();
  void add_blobs(const std::string& value);
  void add_blobs(std::string&& value);
  void add_blobs(const char* value);
  void add_blobs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blobs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blobs();
  private:
  const std::string& _internal_blobs(int index) const;
  std::string* _internal_add_blobs();
  public:

  // repeated bytes proofs = 3;
  int proofs_size() const;
  private:
  int _internal_proofs_size() const;
  public:
  void clear_proofs();
  const std::string& proofs(int index) const;
  std::string* mutable_proofs(int index);
  void set_proofs(int index, const std::string& value);
  void set_proofs(int index, std::string&& value);
  void set_proofs(int index, const char* value);
  void set_proofs(int index, const void* value, size_t size);
  std::string* add_proofs();
  void add_proofs(const std::string& value);
  void add_proofs(std::string&& value);
  void add_proofs(const char* value);
  void add_proofs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proofs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proofs();
  private:
  const std::string& _internal_proofs(int index) const;
  std::string* _internal_add_proofs();
  public:

  // @@protoc_insertion_point(class_scope:types.BlobsBundleV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> commitments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blobs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proofs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class NodeInfoPorts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.NodeInfoPorts) */ {
 public:
  inline NodeInfoPorts() : NodeInfoPorts(nullptr) {}
  ~NodeInfoPorts() override;
  explicit PROTOBUF_CONSTEXPR NodeInfoPorts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfoPorts(const NodeInfoPorts& from);
  NodeInfoPorts(NodeInfoPorts&& from) noexcept
    : NodeInfoPorts() {
    *this = ::std::move(from);
  }

  inline NodeInfoPorts& operator=(const NodeInfoPorts& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfoPorts& operator=(NodeInfoPorts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfoPorts& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfoPorts* internal_default_instance() {
    return reinterpret_cast<const NodeInfoPorts*>(
               &_NodeInfoPorts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NodeInfoPorts& a, NodeInfoPorts& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfoPorts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfoPorts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfoPorts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeInfoPorts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfoPorts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeInfoPorts& from) {
    NodeInfoPorts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfoPorts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.NodeInfoPorts";
  }
  protected:
  explicit NodeInfoPorts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveryFieldNumber = 1,
    kListenerFieldNumber = 2,
  };
  // uint32 discovery = 1;
  void clear_discovery();
  uint32_t discovery() const;
  void set_discovery(uint32_t value);
  private:
  uint32_t _internal_discovery() const;
  void _internal_set_discovery(uint32_t value);
  public:

  // uint32 listener = 2;
  void clear_listener();
  uint32_t listener() const;
  void set_listener(uint32_t value);
  private:
  uint32_t _internal_listener() const;
  void _internal_set_listener(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.NodeInfoPorts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t discovery_;
    uint32_t listener_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class NodeInfoReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.NodeInfoReply) */ {
 public:
  inline NodeInfoReply() : NodeInfoReply(nullptr) {}
  ~NodeInfoReply() override;
  explicit PROTOBUF_CONSTEXPR NodeInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfoReply(const NodeInfoReply& from);
  NodeInfoReply(NodeInfoReply&& from) noexcept
    : NodeInfoReply() {
    *this = ::std::move(from);
  }

  inline NodeInfoReply& operator=(const NodeInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfoReply& operator=(NodeInfoReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfoReply* internal_default_instance() {
    return reinterpret_cast<const NodeInfoReply*>(
               &_NodeInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NodeInfoReply& a, NodeInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfoReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeInfoReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfoReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeInfoReply& from) {
    NodeInfoReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfoReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.NodeInfoReply";
  }
  protected:
  explicit NodeInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEnodeFieldNumber = 3,
    kEnrFieldNumber = 4,
    kListenerAddrFieldNumber = 6,
    kProtocolsFieldNumber = 7,
    kPortsFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string enode = 3;
  void clear_enode();
  const std::string& enode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enode();
  PROTOBUF_NODISCARD std::string* release_enode();
  void set_allocated_enode(std::string* enode);
  private:
  const std::string& _internal_enode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enode(const std::string& value);
  std::string* _internal_mutable_enode();
  public:

  // string enr = 4;
  void clear_enr();
  const std::string& enr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enr();
  PROTOBUF_NODISCARD std::string* release_enr();
  void set_allocated_enr(std::string* enr);
  private:
  const std::string& _internal_enr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enr(const std::string& value);
  std::string* _internal_mutable_enr();
  public:

  // string listener_addr = 6;
  void clear_listener_addr();
  const std::string& listener_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listener_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listener_addr();
  PROTOBUF_NODISCARD std::string* release_listener_addr();
  void set_allocated_listener_addr(std::string* listener_addr);
  private:
  const std::string& _internal_listener_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listener_addr(const std::string& value);
  std::string* _internal_mutable_listener_addr();
  public:

  // bytes protocols = 7;
  void clear_protocols();
  const std::string& protocols() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocols(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocols();
  PROTOBUF_NODISCARD std::string* release_protocols();
  void set_allocated_protocols(std::string* protocols);
  private:
  const std::string& _internal_protocols() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocols(const std::string& value);
  std::string* _internal_mutable_protocols();
  public:

  // .types.NodeInfoPorts ports = 5;
  bool has_ports() const;
  private:
  bool _internal_has_ports() const;
  public:
  void clear_ports();
  const ::types::NodeInfoPorts& ports() const;
  PROTOBUF_NODISCARD ::types::NodeInfoPorts* release_ports();
  ::types::NodeInfoPorts* mutable_ports();
  void set_allocated_ports(::types::NodeInfoPorts* ports);
  private:
  const ::types::NodeInfoPorts& _internal_ports() const;
  ::types::NodeInfoPorts* _internal_mutable_ports();
  public:
  void unsafe_arena_set_allocated_ports(
      ::types::NodeInfoPorts* ports);
  ::types::NodeInfoPorts* unsafe_arena_release_ports();

  // @@protoc_insertion_point(class_scope:types.NodeInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listener_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocols_;
    ::types::NodeInfoPorts* ports_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class PeerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.PeerInfo) */ {
 public:
  inline PeerInfo() : PeerInfo(nullptr) {}
  ~PeerInfo() override;
  explicit PROTOBUF_CONSTEXPR PeerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerInfo(const PeerInfo& from);
  PeerInfo(PeerInfo&& from) noexcept
    : PeerInfo() {
    *this = ::std::move(from);
  }

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerInfo& operator=(PeerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PeerInfo& a, PeerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeerInfo& from) {
    PeerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.PeerInfo";
  }
  protected:
  explicit PeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapsFieldNumber = 5,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEnodeFieldNumber = 3,
    kEnrFieldNumber = 4,
    kConnLocalAddrFieldNumber = 6,
    kConnRemoteAddrFieldNumber = 7,
    kConnIsInboundFieldNumber = 8,
    kConnIsTrustedFieldNumber = 9,
    kConnIsStaticFieldNumber = 10,
  };
  // repeated string caps = 5;
  int caps_size() const;
  private:
  int _internal_caps_size() const;
  public:
  void clear_caps();
  const std::string& caps(int index) const;
  std::string* mutable_caps(int index);
  void set_caps(int index, const std::string& value);
  void set_caps(int index, std::string&& value);
  void set_caps(int index, const char* value);
  void set_caps(int index, const char* value, size_t size);
  std::string* add_caps();
  void add_caps(const std::string& value);
  void add_caps(std::string&& value);
  void add_caps(const char* value);
  void add_caps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& caps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_caps();
  private:
  const std::string& _internal_caps(int index) const;
  std::string* _internal_add_caps();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string enode = 3;
  void clear_enode();
  const std::string& enode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enode();
  PROTOBUF_NODISCARD std::string* release_enode();
  void set_allocated_enode(std::string* enode);
  private:
  const std::string& _internal_enode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enode(const std::string& value);
  std::string* _internal_mutable_enode();
  public:

  // string enr = 4;
  void clear_enr();
  const std::string& enr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enr();
  PROTOBUF_NODISCARD std::string* release_enr();
  void set_allocated_enr(std::string* enr);
  private:
  const std::string& _internal_enr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enr(const std::string& value);
  std::string* _internal_mutable_enr();
  public:

  // string conn_local_addr = 6;
  void clear_conn_local_addr();
  const std::string& conn_local_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conn_local_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conn_local_addr();
  PROTOBUF_NODISCARD std::string* release_conn_local_addr();
  void set_allocated_conn_local_addr(std::string* conn_local_addr);
  private:
  const std::string& _internal_conn_local_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conn_local_addr(const std::string& value);
  std::string* _internal_mutable_conn_local_addr();
  public:

  // string conn_remote_addr = 7;
  void clear_conn_remote_addr();
  const std::string& conn_remote_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conn_remote_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conn_remote_addr();
  PROTOBUF_NODISCARD std::string* release_conn_remote_addr();
  void set_allocated_conn_remote_addr(std::string* conn_remote_addr);
  private:
  const std::string& _internal_conn_remote_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conn_remote_addr(const std::string& value);
  std::string* _internal_mutable_conn_remote_addr();
  public:

  // bool conn_is_inbound = 8;
  void clear_conn_is_inbound();
  bool conn_is_inbound() const;
  void set_conn_is_inbound(bool value);
  private:
  bool _internal_conn_is_inbound() const;
  void _internal_set_conn_is_inbound(bool value);
  public:

  // bool conn_is_trusted = 9;
  void clear_conn_is_trusted();
  bool conn_is_trusted() const;
  void set_conn_is_trusted(bool value);
  private:
  bool _internal_conn_is_trusted() const;
  void _internal_set_conn_is_trusted(bool value);
  public:

  // bool conn_is_static = 10;
  void clear_conn_is_static();
  bool conn_is_static() const;
  void set_conn_is_static(bool value);
  private:
  bool _internal_conn_is_static() const;
  void _internal_set_conn_is_static(bool value);
  public:

  // @@protoc_insertion_point(class_scope:types.PeerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> caps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conn_local_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conn_remote_addr_;
    bool conn_is_inbound_;
    bool conn_is_trusted_;
    bool conn_is_static_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ExecutionPayloadBodyV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ExecutionPayloadBodyV1) */ {
 public:
  inline ExecutionPayloadBodyV1() : ExecutionPayloadBodyV1(nullptr) {}
  ~ExecutionPayloadBodyV1() override;
  explicit PROTOBUF_CONSTEXPR ExecutionPayloadBodyV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionPayloadBodyV1(const ExecutionPayloadBodyV1& from);
  ExecutionPayloadBodyV1(ExecutionPayloadBodyV1&& from) noexcept
    : ExecutionPayloadBodyV1() {
    *this = ::std::move(from);
  }

  inline ExecutionPayloadBodyV1& operator=(const ExecutionPayloadBodyV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionPayloadBodyV1& operator=(ExecutionPayloadBodyV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionPayloadBodyV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionPayloadBodyV1* internal_default_instance() {
    return reinterpret_cast<const ExecutionPayloadBodyV1*>(
               &_ExecutionPayloadBodyV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ExecutionPayloadBodyV1& a, ExecutionPayloadBodyV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionPayloadBodyV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionPayloadBodyV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionPayloadBodyV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutionPayloadBodyV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutionPayloadBodyV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecutionPayloadBodyV1& from) {
    ExecutionPayloadBodyV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionPayloadBodyV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ExecutionPayloadBodyV1";
  }
  protected:
  explicit ExecutionPayloadBodyV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
    kWithdrawalsFieldNumber = 2,
  };
  // repeated bytes transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  const std::string& transactions(int index) const;
  std::string* mutable_transactions(int index);
  void set_transactions(int index, const std::string& value);
  void set_transactions(int index, std::string&& value);
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const void* value, size_t size);
  std::string* add_transactions();
  void add_transactions(const std::string& value);
  void add_transactions(std::string&& value);
  void add_transactions(const char* value);
  void add_transactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactions();
  private:
  const std::string& _internal_transactions(int index) const;
  std::string* _internal_add_transactions();
  public:

  // repeated .types.Withdrawal withdrawals = 2;
  int withdrawals_size() const;
  private:
  int _internal_withdrawals_size() const;
  public:
  void clear_withdrawals();
  ::types::Withdrawal* mutable_withdrawals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
      mutable_withdrawals();
  private:
  const ::types::Withdrawal& _internal_withdrawals(int index) const;
  ::types::Withdrawal* _internal_add_withdrawals();
  public:
  const ::types::Withdrawal& withdrawals(int index) const;
  ::types::Withdrawal* add_withdrawals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
      withdrawals() const;

  // @@protoc_insertion_point(class_scope:types.ExecutionPayloadBodyV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal > withdrawals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2ftypes_2eproto;
};
// ===================================================================

static const int kServiceMajorVersionFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  service_major_version;
static const int kServiceMinorVersionFieldNumber = 50002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  service_minor_version;
static const int kServicePatchVersionFieldNumber = 50003;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  service_patch_version;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// H128

// uint64 hi = 1;
inline void H128::clear_hi() {
  _impl_.hi_ = uint64_t{0u};
}
inline uint64_t H128::_internal_hi() const {
  return _impl_.hi_;
}
inline uint64_t H128::hi() const {
  // @@protoc_insertion_point(field_get:types.H128.hi)
  return _internal_hi();
}
inline void H128::_internal_set_hi(uint64_t value) {
  
  _impl_.hi_ = value;
}
inline void H128::set_hi(uint64_t value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:types.H128.hi)
}

// uint64 lo = 2;
inline void H128::clear_lo() {
  _impl_.lo_ = uint64_t{0u};
}
inline uint64_t H128::_internal_lo() const {
  return _impl_.lo_;
}
inline uint64_t H128::lo() const {
  // @@protoc_insertion_point(field_get:types.H128.lo)
  return _internal_lo();
}
inline void H128::_internal_set_lo(uint64_t value) {
  
  _impl_.lo_ = value;
}
inline void H128::set_lo(uint64_t value) {
  _internal_set_lo(value);
  // @@protoc_insertion_point(field_set:types.H128.lo)
}

// -------------------------------------------------------------------

// H160

// .types.H128 hi = 1;
inline bool H160::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool H160::has_hi() const {
  return _internal_has_hi();
}
inline void H160::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::types::H128& H160::_internal_hi() const {
  const ::types::H128* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H128&>(
      ::types::_H128_default_instance_);
}
inline const ::types::H128& H160::hi() const {
  // @@protoc_insertion_point(field_get:types.H160.hi)
  return _internal_hi();
}
inline void H160::unsafe_arena_set_allocated_hi(
    ::types::H128* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H160.hi)
}
inline ::types::H128* H160::release_hi() {
  
  ::types::H128* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H128* H160::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:types.H160.hi)
  
  ::types::H128* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::types::H128* H160::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H128>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::types::H128* H160::mutable_hi() {
  ::types::H128* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:types.H160.hi)
  return _msg;
}
inline void H160::set_allocated_hi(::types::H128* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:types.H160.hi)
}

// uint32 lo = 2;
inline void H160::clear_lo() {
  _impl_.lo_ = 0u;
}
inline uint32_t H160::_internal_lo() const {
  return _impl_.lo_;
}
inline uint32_t H160::lo() const {
  // @@protoc_insertion_point(field_get:types.H160.lo)
  return _internal_lo();
}
inline void H160::_internal_set_lo(uint32_t value) {
  
  _impl_.lo_ = value;
}
inline void H160::set_lo(uint32_t value) {
  _internal_set_lo(value);
  // @@protoc_insertion_point(field_set:types.H160.lo)
}

// -------------------------------------------------------------------

// H256

// .types.H128 hi = 1;
inline bool H256::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool H256::has_hi() const {
  return _internal_has_hi();
}
inline void H256::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::types::H128& H256::_internal_hi() const {
  const ::types::H128* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H128&>(
      ::types::_H128_default_instance_);
}
inline const ::types::H128& H256::hi() const {
  // @@protoc_insertion_point(field_get:types.H256.hi)
  return _internal_hi();
}
inline void H256::unsafe_arena_set_allocated_hi(
    ::types::H128* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H256.hi)
}
inline ::types::H128* H256::release_hi() {
  
  ::types::H128* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H128* H256::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:types.H256.hi)
  
  ::types::H128* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::types::H128* H256::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H128>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::types::H128* H256::mutable_hi() {
  ::types::H128* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:types.H256.hi)
  return _msg;
}
inline void H256::set_allocated_hi(::types::H128* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:types.H256.hi)
}

// .types.H128 lo = 2;
inline bool H256::_internal_has_lo() const {
  return this != internal_default_instance() && _impl_.lo_ != nullptr;
}
inline bool H256::has_lo() const {
  return _internal_has_lo();
}
inline void H256::clear_lo() {
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
}
inline const ::types::H128& H256::_internal_lo() const {
  const ::types::H128* p = _impl_.lo_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H128&>(
      ::types::_H128_default_instance_);
}
inline const ::types::H128& H256::lo() const {
  // @@protoc_insertion_point(field_get:types.H256.lo)
  return _internal_lo();
}
inline void H256::unsafe_arena_set_allocated_lo(
    ::types::H128* lo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lo_);
  }
  _impl_.lo_ = lo;
  if (lo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H256.lo)
}
inline ::types::H128* H256::release_lo() {
  
  ::types::H128* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H128* H256::unsafe_arena_release_lo() {
  // @@protoc_insertion_point(field_release:types.H256.lo)
  
  ::types::H128* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
  return temp;
}
inline ::types::H128* H256::_internal_mutable_lo() {
  
  if (_impl_.lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H128>(GetArenaForAllocation());
    _impl_.lo_ = p;
  }
  return _impl_.lo_;
}
inline ::types::H128* H256::mutable_lo() {
  ::types::H128* _msg = _internal_mutable_lo();
  // @@protoc_insertion_point(field_mutable:types.H256.lo)
  return _msg;
}
inline void H256::set_allocated_lo(::types::H128* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lo);
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:types.H256.lo)
}

// -------------------------------------------------------------------

// H512

// .types.H256 hi = 1;
inline bool H512::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool H512::has_hi() const {
  return _internal_has_hi();
}
inline void H512::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::types::H256& H512::_internal_hi() const {
  const ::types::H256* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& H512::hi() const {
  // @@protoc_insertion_point(field_get:types.H512.hi)
  return _internal_hi();
}
inline void H512::unsafe_arena_set_allocated_hi(
    ::types::H256* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H512.hi)
}
inline ::types::H256* H512::release_hi() {
  
  ::types::H256* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* H512::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:types.H512.hi)
  
  ::types::H256* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::types::H256* H512::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::types::H256* H512::mutable_hi() {
  ::types::H256* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:types.H512.hi)
  return _msg;
}
inline void H512::set_allocated_hi(::types::H256* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:types.H512.hi)
}

// .types.H256 lo = 2;
inline bool H512::_internal_has_lo() const {
  return this != internal_default_instance() && _impl_.lo_ != nullptr;
}
inline bool H512::has_lo() const {
  return _internal_has_lo();
}
inline void H512::clear_lo() {
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
}
inline const ::types::H256& H512::_internal_lo() const {
  const ::types::H256* p = _impl_.lo_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& H512::lo() const {
  // @@protoc_insertion_point(field_get:types.H512.lo)
  return _internal_lo();
}
inline void H512::unsafe_arena_set_allocated_lo(
    ::types::H256* lo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lo_);
  }
  _impl_.lo_ = lo;
  if (lo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H512.lo)
}
inline ::types::H256* H512::release_lo() {
  
  ::types::H256* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* H512::unsafe_arena_release_lo() {
  // @@protoc_insertion_point(field_release:types.H512.lo)
  
  ::types::H256* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
  return temp;
}
inline ::types::H256* H512::_internal_mutable_lo() {
  
  if (_impl_.lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.lo_ = p;
  }
  return _impl_.lo_;
}
inline ::types::H256* H512::mutable_lo() {
  ::types::H256* _msg = _internal_mutable_lo();
  // @@protoc_insertion_point(field_mutable:types.H512.lo)
  return _msg;
}
inline void H512::set_allocated_lo(::types::H256* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lo);
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:types.H512.lo)
}

// -------------------------------------------------------------------

// H1024

// .types.H512 hi = 1;
inline bool H1024::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool H1024::has_hi() const {
  return _internal_has_hi();
}
inline void H1024::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::types::H512& H1024::_internal_hi() const {
  const ::types::H512* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H512&>(
      ::types::_H512_default_instance_);
}
inline const ::types::H512& H1024::hi() const {
  // @@protoc_insertion_point(field_get:types.H1024.hi)
  return _internal_hi();
}
inline void H1024::unsafe_arena_set_allocated_hi(
    ::types::H512* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H1024.hi)
}
inline ::types::H512* H1024::release_hi() {
  
  ::types::H512* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H512* H1024::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:types.H1024.hi)
  
  ::types::H512* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::types::H512* H1024::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H512>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::types::H512* H1024::mutable_hi() {
  ::types::H512* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:types.H1024.hi)
  return _msg;
}
inline void H1024::set_allocated_hi(::types::H512* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:types.H1024.hi)
}

// .types.H512 lo = 2;
inline bool H1024::_internal_has_lo() const {
  return this != internal_default_instance() && _impl_.lo_ != nullptr;
}
inline bool H1024::has_lo() const {
  return _internal_has_lo();
}
inline void H1024::clear_lo() {
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
}
inline const ::types::H512& H1024::_internal_lo() const {
  const ::types::H512* p = _impl_.lo_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H512&>(
      ::types::_H512_default_instance_);
}
inline const ::types::H512& H1024::lo() const {
  // @@protoc_insertion_point(field_get:types.H1024.lo)
  return _internal_lo();
}
inline void H1024::unsafe_arena_set_allocated_lo(
    ::types::H512* lo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lo_);
  }
  _impl_.lo_ = lo;
  if (lo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H1024.lo)
}
inline ::types::H512* H1024::release_lo() {
  
  ::types::H512* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H512* H1024::unsafe_arena_release_lo() {
  // @@protoc_insertion_point(field_release:types.H1024.lo)
  
  ::types::H512* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
  return temp;
}
inline ::types::H512* H1024::_internal_mutable_lo() {
  
  if (_impl_.lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H512>(GetArenaForAllocation());
    _impl_.lo_ = p;
  }
  return _impl_.lo_;
}
inline ::types::H512* H1024::mutable_lo() {
  ::types::H512* _msg = _internal_mutable_lo();
  // @@protoc_insertion_point(field_mutable:types.H1024.lo)
  return _msg;
}
inline void H1024::set_allocated_lo(::types::H512* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lo);
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:types.H1024.lo)
}

// -------------------------------------------------------------------

// H2048

// .types.H1024 hi = 1;
inline bool H2048::_internal_has_hi() const {
  return this != internal_default_instance() && _impl_.hi_ != nullptr;
}
inline bool H2048::has_hi() const {
  return _internal_has_hi();
}
inline void H2048::clear_hi() {
  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
}
inline const ::types::H1024& H2048::_internal_hi() const {
  const ::types::H1024* p = _impl_.hi_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H1024&>(
      ::types::_H1024_default_instance_);
}
inline const ::types::H1024& H2048::hi() const {
  // @@protoc_insertion_point(field_get:types.H2048.hi)
  return _internal_hi();
}
inline void H2048::unsafe_arena_set_allocated_hi(
    ::types::H1024* hi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hi_);
  }
  _impl_.hi_ = hi;
  if (hi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H2048.hi)
}
inline ::types::H1024* H2048::release_hi() {
  
  ::types::H1024* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H1024* H2048::unsafe_arena_release_hi() {
  // @@protoc_insertion_point(field_release:types.H2048.hi)
  
  ::types::H1024* temp = _impl_.hi_;
  _impl_.hi_ = nullptr;
  return temp;
}
inline ::types::H1024* H2048::_internal_mutable_hi() {
  
  if (_impl_.hi_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H1024>(GetArenaForAllocation());
    _impl_.hi_ = p;
  }
  return _impl_.hi_;
}
inline ::types::H1024* H2048::mutable_hi() {
  ::types::H1024* _msg = _internal_mutable_hi();
  // @@protoc_insertion_point(field_mutable:types.H2048.hi)
  return _msg;
}
inline void H2048::set_allocated_hi(::types::H1024* hi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hi_;
  }
  if (hi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hi);
    if (message_arena != submessage_arena) {
      hi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hi_ = hi;
  // @@protoc_insertion_point(field_set_allocated:types.H2048.hi)
}

// .types.H1024 lo = 2;
inline bool H2048::_internal_has_lo() const {
  return this != internal_default_instance() && _impl_.lo_ != nullptr;
}
inline bool H2048::has_lo() const {
  return _internal_has_lo();
}
inline void H2048::clear_lo() {
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
}
inline const ::types::H1024& H2048::_internal_lo() const {
  const ::types::H1024* p = _impl_.lo_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H1024&>(
      ::types::_H1024_default_instance_);
}
inline const ::types::H1024& H2048::lo() const {
  // @@protoc_insertion_point(field_get:types.H2048.lo)
  return _internal_lo();
}
inline void H2048::unsafe_arena_set_allocated_lo(
    ::types::H1024* lo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lo_);
  }
  _impl_.lo_ = lo;
  if (lo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.H2048.lo)
}
inline ::types::H1024* H2048::release_lo() {
  
  ::types::H1024* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H1024* H2048::unsafe_arena_release_lo() {
  // @@protoc_insertion_point(field_release:types.H2048.lo)
  
  ::types::H1024* temp = _impl_.lo_;
  _impl_.lo_ = nullptr;
  return temp;
}
inline ::types::H1024* H2048::_internal_mutable_lo() {
  
  if (_impl_.lo_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H1024>(GetArenaForAllocation());
    _impl_.lo_ = p;
  }
  return _impl_.lo_;
}
inline ::types::H1024* H2048::mutable_lo() {
  ::types::H1024* _msg = _internal_mutable_lo();
  // @@protoc_insertion_point(field_mutable:types.H2048.lo)
  return _msg;
}
inline void H2048::set_allocated_lo(::types::H1024* lo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lo_;
  }
  if (lo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lo);
    if (message_arena != submessage_arena) {
      lo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lo_ = lo;
  // @@protoc_insertion_point(field_set_allocated:types.H2048.lo)
}

// -------------------------------------------------------------------

// VersionReply

// uint32 major = 1;
inline void VersionReply::clear_major() {
  _impl_.major_ = 0u;
}
inline uint32_t VersionReply::_internal_major() const {
  return _impl_.major_;
}
inline uint32_t VersionReply::major() const {
  // @@protoc_insertion_point(field_get:types.VersionReply.major)
  return _internal_major();
}
inline void VersionReply::_internal_set_major(uint32_t value) {
  
  _impl_.major_ = value;
}
inline void VersionReply::set_major(uint32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:types.VersionReply.major)
}

// uint32 minor = 2;
inline void VersionReply::clear_minor() {
  _impl_.minor_ = 0u;
}
inline uint32_t VersionReply::_internal_minor() const {
  return _impl_.minor_;
}
inline uint32_t VersionReply::minor() const {
  // @@protoc_insertion_point(field_get:types.VersionReply.minor)
  return _internal_minor();
}
inline void VersionReply::_internal_set_minor(uint32_t value) {
  
  _impl_.minor_ = value;
}
inline void VersionReply::set_minor(uint32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:types.VersionReply.minor)
}

// uint32 patch = 3;
inline void VersionReply::clear_patch() {
  _impl_.patch_ = 0u;
}
inline uint32_t VersionReply::_internal_patch() const {
  return _impl_.patch_;
}
inline uint32_t VersionReply::patch() const {
  // @@protoc_insertion_point(field_get:types.VersionReply.patch)
  return _internal_patch();
}
inline void VersionReply::_internal_set_patch(uint32_t value) {
  
  _impl_.patch_ = value;
}
inline void VersionReply::set_patch(uint32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:types.VersionReply.patch)
}

// -------------------------------------------------------------------

// ExecutionPayload

// uint32 version = 1;
inline void ExecutionPayload::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t ExecutionPayload::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t ExecutionPayload::version() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.version)
  return _internal_version();
}
inline void ExecutionPayload::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void ExecutionPayload::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.version)
}

// .types.H256 parent_hash = 2;
inline bool ExecutionPayload::_internal_has_parent_hash() const {
  return this != internal_default_instance() && _impl_.parent_hash_ != nullptr;
}
inline bool ExecutionPayload::has_parent_hash() const {
  return _internal_has_parent_hash();
}
inline void ExecutionPayload::clear_parent_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.parent_hash_ != nullptr) {
    delete _impl_.parent_hash_;
  }
  _impl_.parent_hash_ = nullptr;
}
inline const ::types::H256& ExecutionPayload::_internal_parent_hash() const {
  const ::types::H256* p = _impl_.parent_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ExecutionPayload::parent_hash() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.parent_hash)
  return _internal_parent_hash();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_parent_hash(
    ::types::H256* parent_hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parent_hash_);
  }
  _impl_.parent_hash_ = parent_hash;
  if (parent_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.parent_hash)
}
inline ::types::H256* ExecutionPayload::release_parent_hash() {
  
  ::types::H256* temp = _impl_.parent_hash_;
  _impl_.parent_hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ExecutionPayload::unsafe_arena_release_parent_hash() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.parent_hash)
  
  ::types::H256* temp = _impl_.parent_hash_;
  _impl_.parent_hash_ = nullptr;
  return temp;
}
inline ::types::H256* ExecutionPayload::_internal_mutable_parent_hash() {
  
  if (_impl_.parent_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.parent_hash_ = p;
  }
  return _impl_.parent_hash_;
}
inline ::types::H256* ExecutionPayload::mutable_parent_hash() {
  ::types::H256* _msg = _internal_mutable_parent_hash();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.parent_hash)
  return _msg;
}
inline void ExecutionPayload::set_allocated_parent_hash(::types::H256* parent_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parent_hash_;
  }
  if (parent_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parent_hash);
    if (message_arena != submessage_arena) {
      parent_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_hash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parent_hash_ = parent_hash;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.parent_hash)
}

// .types.H160 coinbase = 3;
inline bool ExecutionPayload::_internal_has_coinbase() const {
  return this != internal_default_instance() && _impl_.coinbase_ != nullptr;
}
inline bool ExecutionPayload::has_coinbase() const {
  return _internal_has_coinbase();
}
inline void ExecutionPayload::clear_coinbase() {
  if (GetArenaForAllocation() == nullptr && _impl_.coinbase_ != nullptr) {
    delete _impl_.coinbase_;
  }
  _impl_.coinbase_ = nullptr;
}
inline const ::types::H160& ExecutionPayload::_internal_coinbase() const {
  const ::types::H160* p = _impl_.coinbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& ExecutionPayload::coinbase() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.coinbase)
  return _internal_coinbase();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_coinbase(
    ::types::H160* coinbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coinbase_);
  }
  _impl_.coinbase_ = coinbase;
  if (coinbase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.coinbase)
}
inline ::types::H160* ExecutionPayload::release_coinbase() {
  
  ::types::H160* temp = _impl_.coinbase_;
  _impl_.coinbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H160* ExecutionPayload::unsafe_arena_release_coinbase() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.coinbase)
  
  ::types::H160* temp = _impl_.coinbase_;
  _impl_.coinbase_ = nullptr;
  return temp;
}
inline ::types::H160* ExecutionPayload::_internal_mutable_coinbase() {
  
  if (_impl_.coinbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArenaForAllocation());
    _impl_.coinbase_ = p;
  }
  return _impl_.coinbase_;
}
inline ::types::H160* ExecutionPayload::mutable_coinbase() {
  ::types::H160* _msg = _internal_mutable_coinbase();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.coinbase)
  return _msg;
}
inline void ExecutionPayload::set_allocated_coinbase(::types::H160* coinbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coinbase_;
  }
  if (coinbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coinbase);
    if (message_arena != submessage_arena) {
      coinbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coinbase, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coinbase_ = coinbase;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.coinbase)
}

// .types.H256 state_root = 4;
inline bool ExecutionPayload::_internal_has_state_root() const {
  return this != internal_default_instance() && _impl_.state_root_ != nullptr;
}
inline bool ExecutionPayload::has_state_root() const {
  return _internal_has_state_root();
}
inline void ExecutionPayload::clear_state_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_root_ != nullptr) {
    delete _impl_.state_root_;
  }
  _impl_.state_root_ = nullptr;
}
inline const ::types::H256& ExecutionPayload::_internal_state_root() const {
  const ::types::H256* p = _impl_.state_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ExecutionPayload::state_root() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.state_root)
  return _internal_state_root();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_state_root(
    ::types::H256* state_root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_root_);
  }
  _impl_.state_root_ = state_root;
  if (state_root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.state_root)
}
inline ::types::H256* ExecutionPayload::release_state_root() {
  
  ::types::H256* temp = _impl_.state_root_;
  _impl_.state_root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ExecutionPayload::unsafe_arena_release_state_root() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.state_root)
  
  ::types::H256* temp = _impl_.state_root_;
  _impl_.state_root_ = nullptr;
  return temp;
}
inline ::types::H256* ExecutionPayload::_internal_mutable_state_root() {
  
  if (_impl_.state_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.state_root_ = p;
  }
  return _impl_.state_root_;
}
inline ::types::H256* ExecutionPayload::mutable_state_root() {
  ::types::H256* _msg = _internal_mutable_state_root();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.state_root)
  return _msg;
}
inline void ExecutionPayload::set_allocated_state_root(::types::H256* state_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_root_;
  }
  if (state_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state_root);
    if (message_arena != submessage_arena) {
      state_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_root, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_root_ = state_root;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.state_root)
}

// .types.H256 receipt_root = 5;
inline bool ExecutionPayload::_internal_has_receipt_root() const {
  return this != internal_default_instance() && _impl_.receipt_root_ != nullptr;
}
inline bool ExecutionPayload::has_receipt_root() const {
  return _internal_has_receipt_root();
}
inline void ExecutionPayload::clear_receipt_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.receipt_root_ != nullptr) {
    delete _impl_.receipt_root_;
  }
  _impl_.receipt_root_ = nullptr;
}
inline const ::types::H256& ExecutionPayload::_internal_receipt_root() const {
  const ::types::H256* p = _impl_.receipt_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ExecutionPayload::receipt_root() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.receipt_root)
  return _internal_receipt_root();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_receipt_root(
    ::types::H256* receipt_root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receipt_root_);
  }
  _impl_.receipt_root_ = receipt_root;
  if (receipt_root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.receipt_root)
}
inline ::types::H256* ExecutionPayload::release_receipt_root() {
  
  ::types::H256* temp = _impl_.receipt_root_;
  _impl_.receipt_root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ExecutionPayload::unsafe_arena_release_receipt_root() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.receipt_root)
  
  ::types::H256* temp = _impl_.receipt_root_;
  _impl_.receipt_root_ = nullptr;
  return temp;
}
inline ::types::H256* ExecutionPayload::_internal_mutable_receipt_root() {
  
  if (_impl_.receipt_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.receipt_root_ = p;
  }
  return _impl_.receipt_root_;
}
inline ::types::H256* ExecutionPayload::mutable_receipt_root() {
  ::types::H256* _msg = _internal_mutable_receipt_root();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.receipt_root)
  return _msg;
}
inline void ExecutionPayload::set_allocated_receipt_root(::types::H256* receipt_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.receipt_root_;
  }
  if (receipt_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(receipt_root);
    if (message_arena != submessage_arena) {
      receipt_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt_root, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.receipt_root_ = receipt_root;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.receipt_root)
}

// .types.H2048 logs_bloom = 6;
inline bool ExecutionPayload::_internal_has_logs_bloom() const {
  return this != internal_default_instance() && _impl_.logs_bloom_ != nullptr;
}
inline bool ExecutionPayload::has_logs_bloom() const {
  return _internal_has_logs_bloom();
}
inline void ExecutionPayload::clear_logs_bloom() {
  if (GetArenaForAllocation() == nullptr && _impl_.logs_bloom_ != nullptr) {
    delete _impl_.logs_bloom_;
  }
  _impl_.logs_bloom_ = nullptr;
}
inline const ::types::H2048& ExecutionPayload::_internal_logs_bloom() const {
  const ::types::H2048* p = _impl_.logs_bloom_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H2048&>(
      ::types::_H2048_default_instance_);
}
inline const ::types::H2048& ExecutionPayload::logs_bloom() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.logs_bloom)
  return _internal_logs_bloom();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_logs_bloom(
    ::types::H2048* logs_bloom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logs_bloom_);
  }
  _impl_.logs_bloom_ = logs_bloom;
  if (logs_bloom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.logs_bloom)
}
inline ::types::H2048* ExecutionPayload::release_logs_bloom() {
  
  ::types::H2048* temp = _impl_.logs_bloom_;
  _impl_.logs_bloom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H2048* ExecutionPayload::unsafe_arena_release_logs_bloom() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.logs_bloom)
  
  ::types::H2048* temp = _impl_.logs_bloom_;
  _impl_.logs_bloom_ = nullptr;
  return temp;
}
inline ::types::H2048* ExecutionPayload::_internal_mutable_logs_bloom() {
  
  if (_impl_.logs_bloom_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H2048>(GetArenaForAllocation());
    _impl_.logs_bloom_ = p;
  }
  return _impl_.logs_bloom_;
}
inline ::types::H2048* ExecutionPayload::mutable_logs_bloom() {
  ::types::H2048* _msg = _internal_mutable_logs_bloom();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.logs_bloom)
  return _msg;
}
inline void ExecutionPayload::set_allocated_logs_bloom(::types::H2048* logs_bloom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logs_bloom_;
  }
  if (logs_bloom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logs_bloom);
    if (message_arena != submessage_arena) {
      logs_bloom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logs_bloom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logs_bloom_ = logs_bloom;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.logs_bloom)
}

// .types.H256 prev_randao = 7;
inline bool ExecutionPayload::_internal_has_prev_randao() const {
  return this != internal_default_instance() && _impl_.prev_randao_ != nullptr;
}
inline bool ExecutionPayload::has_prev_randao() const {
  return _internal_has_prev_randao();
}
inline void ExecutionPayload::clear_prev_randao() {
  if (GetArenaForAllocation() == nullptr && _impl_.prev_randao_ != nullptr) {
    delete _impl_.prev_randao_;
  }
  _impl_.prev_randao_ = nullptr;
}
inline const ::types::H256& ExecutionPayload::_internal_prev_randao() const {
  const ::types::H256* p = _impl_.prev_randao_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ExecutionPayload::prev_randao() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.prev_randao)
  return _internal_prev_randao();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_prev_randao(
    ::types::H256* prev_randao) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_randao_);
  }
  _impl_.prev_randao_ = prev_randao;
  if (prev_randao) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.prev_randao)
}
inline ::types::H256* ExecutionPayload::release_prev_randao() {
  
  ::types::H256* temp = _impl_.prev_randao_;
  _impl_.prev_randao_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ExecutionPayload::unsafe_arena_release_prev_randao() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.prev_randao)
  
  ::types::H256* temp = _impl_.prev_randao_;
  _impl_.prev_randao_ = nullptr;
  return temp;
}
inline ::types::H256* ExecutionPayload::_internal_mutable_prev_randao() {
  
  if (_impl_.prev_randao_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.prev_randao_ = p;
  }
  return _impl_.prev_randao_;
}
inline ::types::H256* ExecutionPayload::mutable_prev_randao() {
  ::types::H256* _msg = _internal_mutable_prev_randao();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.prev_randao)
  return _msg;
}
inline void ExecutionPayload::set_allocated_prev_randao(::types::H256* prev_randao) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prev_randao_;
  }
  if (prev_randao) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prev_randao);
    if (message_arena != submessage_arena) {
      prev_randao = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_randao, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.prev_randao_ = prev_randao;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.prev_randao)
}

// uint64 block_number = 8;
inline void ExecutionPayload::clear_block_number() {
  _impl_.block_number_ = uint64_t{0u};
}
inline uint64_t ExecutionPayload::_internal_block_number() const {
  return _impl_.block_number_;
}
inline uint64_t ExecutionPayload::block_number() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.block_number)
  return _internal_block_number();
}
inline void ExecutionPayload::_internal_set_block_number(uint64_t value) {
  
  _impl_.block_number_ = value;
}
inline void ExecutionPayload::set_block_number(uint64_t value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.block_number)
}

// uint64 gas_limit = 9;
inline void ExecutionPayload::clear_gas_limit() {
  _impl_.gas_limit_ = uint64_t{0u};
}
inline uint64_t ExecutionPayload::_internal_gas_limit() const {
  return _impl_.gas_limit_;
}
inline uint64_t ExecutionPayload::gas_limit() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.gas_limit)
  return _internal_gas_limit();
}
inline void ExecutionPayload::_internal_set_gas_limit(uint64_t value) {
  
  _impl_.gas_limit_ = value;
}
inline void ExecutionPayload::set_gas_limit(uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.gas_limit)
}

// uint64 gas_used = 10;
inline void ExecutionPayload::clear_gas_used() {
  _impl_.gas_used_ = uint64_t{0u};
}
inline uint64_t ExecutionPayload::_internal_gas_used() const {
  return _impl_.gas_used_;
}
inline uint64_t ExecutionPayload::gas_used() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.gas_used)
  return _internal_gas_used();
}
inline void ExecutionPayload::_internal_set_gas_used(uint64_t value) {
  
  _impl_.gas_used_ = value;
}
inline void ExecutionPayload::set_gas_used(uint64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.gas_used)
}

// uint64 timestamp = 11;
inline void ExecutionPayload::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t ExecutionPayload::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t ExecutionPayload::timestamp() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.timestamp)
  return _internal_timestamp();
}
inline void ExecutionPayload::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ExecutionPayload::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.timestamp)
}

// bytes extra_data = 12;
inline void ExecutionPayload::clear_extra_data() {
  _impl_.extra_data_.ClearToEmpty();
}
inline const std::string& ExecutionPayload::extra_data() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionPayload::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extra_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.extra_data)
}
inline std::string* ExecutionPayload::mutable_extra_data() {
  std::string* _s = _internal_mutable_extra_data();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.extra_data)
  return _s;
}
inline const std::string& ExecutionPayload::_internal_extra_data() const {
  return _impl_.extra_data_.Get();
}
inline void ExecutionPayload::_internal_set_extra_data(const std::string& value) {
  
  _impl_.extra_data_.Set(value, GetArenaForAllocation());
}
inline std::string* ExecutionPayload::_internal_mutable_extra_data() {
  
  return _impl_.extra_data_.Mutable(GetArenaForAllocation());
}
inline std::string* ExecutionPayload::release_extra_data() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.extra_data)
  return _impl_.extra_data_.Release();
}
inline void ExecutionPayload::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  _impl_.extra_data_.SetAllocated(extra_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extra_data_.IsDefault()) {
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.extra_data)
}

// .types.H256 base_fee_per_gas = 13;
inline bool ExecutionPayload::_internal_has_base_fee_per_gas() const {
  return this != internal_default_instance() && _impl_.base_fee_per_gas_ != nullptr;
}
inline bool ExecutionPayload::has_base_fee_per_gas() const {
  return _internal_has_base_fee_per_gas();
}
inline void ExecutionPayload::clear_base_fee_per_gas() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_fee_per_gas_ != nullptr) {
    delete _impl_.base_fee_per_gas_;
  }
  _impl_.base_fee_per_gas_ = nullptr;
}
inline const ::types::H256& ExecutionPayload::_internal_base_fee_per_gas() const {
  const ::types::H256* p = _impl_.base_fee_per_gas_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ExecutionPayload::base_fee_per_gas() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.base_fee_per_gas)
  return _internal_base_fee_per_gas();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_base_fee_per_gas(
    ::types::H256* base_fee_per_gas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_fee_per_gas_);
  }
  _impl_.base_fee_per_gas_ = base_fee_per_gas;
  if (base_fee_per_gas) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.base_fee_per_gas)
}
inline ::types::H256* ExecutionPayload::release_base_fee_per_gas() {
  
  ::types::H256* temp = _impl_.base_fee_per_gas_;
  _impl_.base_fee_per_gas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ExecutionPayload::unsafe_arena_release_base_fee_per_gas() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.base_fee_per_gas)
  
  ::types::H256* temp = _impl_.base_fee_per_gas_;
  _impl_.base_fee_per_gas_ = nullptr;
  return temp;
}
inline ::types::H256* ExecutionPayload::_internal_mutable_base_fee_per_gas() {
  
  if (_impl_.base_fee_per_gas_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.base_fee_per_gas_ = p;
  }
  return _impl_.base_fee_per_gas_;
}
inline ::types::H256* ExecutionPayload::mutable_base_fee_per_gas() {
  ::types::H256* _msg = _internal_mutable_base_fee_per_gas();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.base_fee_per_gas)
  return _msg;
}
inline void ExecutionPayload::set_allocated_base_fee_per_gas(::types::H256* base_fee_per_gas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_fee_per_gas_;
  }
  if (base_fee_per_gas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_fee_per_gas);
    if (message_arena != submessage_arena) {
      base_fee_per_gas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_fee_per_gas, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_fee_per_gas_ = base_fee_per_gas;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.base_fee_per_gas)
}

// .types.H256 block_hash = 14;
inline bool ExecutionPayload::_internal_has_block_hash() const {
  return this != internal_default_instance() && _impl_.block_hash_ != nullptr;
}
inline bool ExecutionPayload::has_block_hash() const {
  return _internal_has_block_hash();
}
inline void ExecutionPayload::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
inline const ::types::H256& ExecutionPayload::_internal_block_hash() const {
  const ::types::H256* p = _impl_.block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ExecutionPayload::block_hash() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.block_hash)
  return _internal_block_hash();
}
inline void ExecutionPayload::unsafe_arena_set_allocated_block_hash(
    ::types::H256* block_hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_hash_);
  }
  _impl_.block_hash_ = block_hash;
  if (block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ExecutionPayload.block_hash)
}
inline ::types::H256* ExecutionPayload::release_block_hash() {
  
  ::types::H256* temp = _impl_.block_hash_;
  _impl_.block_hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ExecutionPayload::unsafe_arena_release_block_hash() {
  // @@protoc_insertion_point(field_release:types.ExecutionPayload.block_hash)
  
  ::types::H256* temp = _impl_.block_hash_;
  _impl_.block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* ExecutionPayload::_internal_mutable_block_hash() {
  
  if (_impl_.block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.block_hash_ = p;
  }
  return _impl_.block_hash_;
}
inline ::types::H256* ExecutionPayload::mutable_block_hash() {
  ::types::H256* _msg = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.block_hash)
  return _msg;
}
inline void ExecutionPayload::set_allocated_block_hash(::types::H256* block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_hash_;
  }
  if (block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_hash);
    if (message_arena != submessage_arena) {
      block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_hash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.block_hash_ = block_hash;
  // @@protoc_insertion_point(field_set_allocated:types.ExecutionPayload.block_hash)
}

// repeated bytes transactions = 15;
inline int ExecutionPayload::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int ExecutionPayload::transactions_size() const {
  return _internal_transactions_size();
}
inline void ExecutionPayload::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline std::string* ExecutionPayload::add_transactions() {
  std::string* _s = _internal_add_transactions();
  // @@protoc_insertion_point(field_add_mutable:types.ExecutionPayload.transactions)
  return _s;
}
inline const std::string& ExecutionPayload::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const std::string& ExecutionPayload::transactions(int index) const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.transactions)
  return _internal_transactions(index);
}
inline std::string* ExecutionPayload::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline void ExecutionPayload::set_transactions(int index, const std::string& value) {
  _impl_.transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.transactions)
}
inline void ExecutionPayload::set_transactions(int index, std::string&& value) {
  _impl_.transactions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.transactions)
}
inline void ExecutionPayload::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:types.ExecutionPayload.transactions)
}
inline void ExecutionPayload::set_transactions(int index, const void* value, size_t size) {
  _impl_.transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:types.ExecutionPayload.transactions)
}
inline std::string* ExecutionPayload::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline void ExecutionPayload::add_transactions(const std::string& value) {
  _impl_.transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:types.ExecutionPayload.transactions)
}
inline void ExecutionPayload::add_transactions(std::string&& value) {
  _impl_.transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:types.ExecutionPayload.transactions)
}
inline void ExecutionPayload::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:types.ExecutionPayload.transactions)
}
inline void ExecutionPayload::add_transactions(const void* value, size_t size) {
  _impl_.transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:types.ExecutionPayload.transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecutionPayload::transactions() const {
  // @@protoc_insertion_point(field_list:types.ExecutionPayload.transactions)
  return _impl_.transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecutionPayload::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:types.ExecutionPayload.transactions)
  return &_impl_.transactions_;
}

// repeated .types.Withdrawal withdrawals = 16;
inline int ExecutionPayload::_internal_withdrawals_size() const {
  return _impl_.withdrawals_.size();
}
inline int ExecutionPayload::withdrawals_size() const {
  return _internal_withdrawals_size();
}
inline void ExecutionPayload::clear_withdrawals() {
  _impl_.withdrawals_.Clear();
}
inline ::types::Withdrawal* ExecutionPayload::mutable_withdrawals(int index) {
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayload.withdrawals)
  return _impl_.withdrawals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
ExecutionPayload::mutable_withdrawals() {
  // @@protoc_insertion_point(field_mutable_list:types.ExecutionPayload.withdrawals)
  return &_impl_.withdrawals_;
}
inline const ::types::Withdrawal& ExecutionPayload::_internal_withdrawals(int index) const {
  return _impl_.withdrawals_.Get(index);
}
inline const ::types::Withdrawal& ExecutionPayload::withdrawals(int index) const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.withdrawals)
  return _internal_withdrawals(index);
}
inline ::types::Withdrawal* ExecutionPayload::_internal_add_withdrawals() {
  return _impl_.withdrawals_.Add();
}
inline ::types::Withdrawal* ExecutionPayload::add_withdrawals() {
  ::types::Withdrawal* _add = _internal_add_withdrawals();
  // @@protoc_insertion_point(field_add:types.ExecutionPayload.withdrawals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
ExecutionPayload::withdrawals() const {
  // @@protoc_insertion_point(field_list:types.ExecutionPayload.withdrawals)
  return _impl_.withdrawals_;
}

// optional uint64 blob_gas_used = 17;
inline bool ExecutionPayload::_internal_has_blob_gas_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExecutionPayload::has_blob_gas_used() const {
  return _internal_has_blob_gas_used();
}
inline void ExecutionPayload::clear_blob_gas_used() {
  _impl_.blob_gas_used_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ExecutionPayload::_internal_blob_gas_used() const {
  return _impl_.blob_gas_used_;
}
inline uint64_t ExecutionPayload::blob_gas_used() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.blob_gas_used)
  return _internal_blob_gas_used();
}
inline void ExecutionPayload::_internal_set_blob_gas_used(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.blob_gas_used_ = value;
}
inline void ExecutionPayload::set_blob_gas_used(uint64_t value) {
  _internal_set_blob_gas_used(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.blob_gas_used)
}

// optional uint64 excess_blob_gas = 18;
inline bool ExecutionPayload::_internal_has_excess_blob_gas() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExecutionPayload::has_excess_blob_gas() const {
  return _internal_has_excess_blob_gas();
}
inline void ExecutionPayload::clear_excess_blob_gas() {
  _impl_.excess_blob_gas_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ExecutionPayload::_internal_excess_blob_gas() const {
  return _impl_.excess_blob_gas_;
}
inline uint64_t ExecutionPayload::excess_blob_gas() const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayload.excess_blob_gas)
  return _internal_excess_blob_gas();
}
inline void ExecutionPayload::_internal_set_excess_blob_gas(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.excess_blob_gas_ = value;
}
inline void ExecutionPayload::set_excess_blob_gas(uint64_t value) {
  _internal_set_excess_blob_gas(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayload.excess_blob_gas)
}

// -------------------------------------------------------------------

// Withdrawal

// uint64 index = 1;
inline void Withdrawal::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t Withdrawal::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t Withdrawal::index() const {
  // @@protoc_insertion_point(field_get:types.Withdrawal.index)
  return _internal_index();
}
inline void Withdrawal::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void Withdrawal::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:types.Withdrawal.index)
}

// uint64 validator_index = 2;
inline void Withdrawal::clear_validator_index() {
  _impl_.validator_index_ = uint64_t{0u};
}
inline uint64_t Withdrawal::_internal_validator_index() const {
  return _impl_.validator_index_;
}
inline uint64_t Withdrawal::validator_index() const {
  // @@protoc_insertion_point(field_get:types.Withdrawal.validator_index)
  return _internal_validator_index();
}
inline void Withdrawal::_internal_set_validator_index(uint64_t value) {
  
  _impl_.validator_index_ = value;
}
inline void Withdrawal::set_validator_index(uint64_t value) {
  _internal_set_validator_index(value);
  // @@protoc_insertion_point(field_set:types.Withdrawal.validator_index)
}

// .types.H160 address = 3;
inline bool Withdrawal::_internal_has_address() const {
  return this != internal_default_instance() && _impl_.address_ != nullptr;
}
inline bool Withdrawal::has_address() const {
  return _internal_has_address();
}
inline void Withdrawal::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
inline const ::types::H160& Withdrawal::_internal_address() const {
  const ::types::H160* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& Withdrawal::address() const {
  // @@protoc_insertion_point(field_get:types.Withdrawal.address)
  return _internal_address();
}
inline void Withdrawal::unsafe_arena_set_allocated_address(
    ::types::H160* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Withdrawal.address)
}
inline ::types::H160* Withdrawal::release_address() {
  
  ::types::H160* temp = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H160* Withdrawal::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:types.Withdrawal.address)
  
  ::types::H160* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::types::H160* Withdrawal::_internal_mutable_address() {
  
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArenaForAllocation());
    _impl_.address_ = p;
  }
  return _impl_.address_;
}
inline ::types::H160* Withdrawal::mutable_address() {
  ::types::H160* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:types.Withdrawal.address)
  return _msg;
}
inline void Withdrawal::set_allocated_address(::types::H160* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.address_ = address;
  // @@protoc_insertion_point(field_set_allocated:types.Withdrawal.address)
}

// uint64 amount = 4;
inline void Withdrawal::clear_amount() {
  _impl_.amount_ = uint64_t{0u};
}
inline uint64_t Withdrawal::_internal_amount() const {
  return _impl_.amount_;
}
inline uint64_t Withdrawal::amount() const {
  // @@protoc_insertion_point(field_get:types.Withdrawal.amount)
  return _internal_amount();
}
inline void Withdrawal::_internal_set_amount(uint64_t value) {
  
  _impl_.amount_ = value;
}
inline void Withdrawal::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:types.Withdrawal.amount)
}

// -------------------------------------------------------------------

// BlobsBundleV1

// repeated bytes commitments = 1;
inline int BlobsBundleV1::_internal_commitments_size() const {
  return _impl_.commitments_.size();
}
inline int BlobsBundleV1::commitments_size() const {
  return _internal_commitments_size();
}
inline void BlobsBundleV1::clear_commitments() {
  _impl_.commitments_.Clear();
}
inline std::string* BlobsBundleV1::add_commitments() {
  std::string* _s = _internal_add_commitments();
  // @@protoc_insertion_point(field_add_mutable:types.BlobsBundleV1.commitments)
  return _s;
}
inline const std::string& BlobsBundleV1::_internal_commitments(int index) const {
  return _impl_.commitments_.Get(index);
}
inline const std::string& BlobsBundleV1::commitments(int index) const {
  // @@protoc_insertion_point(field_get:types.BlobsBundleV1.commitments)
  return _internal_commitments(index);
}
inline std::string* BlobsBundleV1::mutable_commitments(int index) {
  // @@protoc_insertion_point(field_mutable:types.BlobsBundleV1.commitments)
  return _impl_.commitments_.Mutable(index);
}
inline void BlobsBundleV1::set_commitments(int index, const std::string& value) {
  _impl_.commitments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:types.BlobsBundleV1.commitments)
}
inline void BlobsBundleV1::set_commitments(int index, std::string&& value) {
  _impl_.commitments_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:types.BlobsBundleV1.commitments)
}
inline void BlobsBundleV1::set_commitments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.commitments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:types.BlobsBundleV1.commitments)
}
inline void BlobsBundleV1::set_commitments(int index, const void* value, size_t size) {
  _impl_.commitments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:types.BlobsBundleV1.commitments)
}
inline std::string* BlobsBundleV1::_internal_add_commitments() {
  return _impl_.commitments_.Add();
}
inline void BlobsBundleV1::add_commitments(const std::string& value) {
  _impl_.commitments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:types.BlobsBundleV1.commitments)
}
inline void BlobsBundleV1::add_commitments(std::string&& value) {
  _impl_.commitments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:types.BlobsBundleV1.commitments)
}
inline void BlobsBundleV1::add_commitments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.commitments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:types.BlobsBundleV1.commitments)
}
inline void BlobsBundleV1::add_commitments(const void* value, size_t size) {
  _impl_.commitments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:types.BlobsBundleV1.commitments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlobsBundleV1::commitments() const {
  // @@protoc_insertion_point(field_list:types.BlobsBundleV1.commitments)
  return _impl_.commitments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlobsBundleV1::mutable_commitments() {
  // @@protoc_insertion_point(field_mutable_list:types.BlobsBundleV1.commitments)
  return &_impl_.commitments_;
}

// repeated bytes blobs = 2;
inline int BlobsBundleV1::_internal_blobs_size() const {
  return _impl_.blobs_.size();
}
inline int BlobsBundleV1::blobs_size() const {
  return _internal_blobs_size();
}
inline void BlobsBundleV1::clear_blobs() {
  _impl_.blobs_.Clear();
}
inline std::string* BlobsBundleV1::add_blobs() {
  std::string* _s = _internal_add_blobs();
  // @@protoc_insertion_point(field_add_mutable:types.BlobsBundleV1.blobs)
  return _s;
}
inline const std::string& BlobsBundleV1::_internal_blobs(int index) const {
  return _impl_.blobs_.Get(index);
}
inline const std::string& BlobsBundleV1::blobs(int index) const {
  // @@protoc_insertion_point(field_get:types.BlobsBundleV1.blobs)
  return _internal_blobs(index);
}
inline std::string* BlobsBundleV1::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:types.BlobsBundleV1.blobs)
  return _impl_.blobs_.Mutable(index);
}
inline void BlobsBundleV1::set_blobs(int index, const std::string& value) {
  _impl_.blobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:types.BlobsBundleV1.blobs)
}
inline void BlobsBundleV1::set_blobs(int index, std::string&& value) {
  _impl_.blobs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:types.BlobsBundleV1.blobs)
}
inline void BlobsBundleV1::set_blobs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blobs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:types.BlobsBundleV1.blobs)
}
inline void BlobsBundleV1::set_blobs(int index, const void* value, size_t size) {
  _impl_.blobs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:types.BlobsBundleV1.blobs)
}
inline std::string* BlobsBundleV1::_internal_add_blobs() {
  return _impl_.blobs_.Add();
}
inline void BlobsBundleV1::add_blobs(const std::string& value) {
  _impl_.blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:types.BlobsBundleV1.blobs)
}
inline void BlobsBundleV1::add_blobs(std::string&& value) {
  _impl_.blobs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:types.BlobsBundleV1.blobs)
}
inline void BlobsBundleV1::add_blobs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blobs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:types.BlobsBundleV1.blobs)
}
inline void BlobsBundleV1::add_blobs(const void* value, size_t size) {
  _impl_.blobs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:types.BlobsBundleV1.blobs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlobsBundleV1::blobs() const {
  // @@protoc_insertion_point(field_list:types.BlobsBundleV1.blobs)
  return _impl_.blobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlobsBundleV1::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:types.BlobsBundleV1.blobs)
  return &_impl_.blobs_;
}

// repeated bytes proofs = 3;
inline int BlobsBundleV1::_internal_proofs_size() const {
  return _impl_.proofs_.size();
}
inline int BlobsBundleV1::proofs_size() const {
  return _internal_proofs_size();
}
inline void BlobsBundleV1::clear_proofs() {
  _impl_.proofs_.Clear();
}
inline std::string* BlobsBundleV1::add_proofs() {
  std::string* _s = _internal_add_proofs();
  // @@protoc_insertion_point(field_add_mutable:types.BlobsBundleV1.proofs)
  return _s;
}
inline const std::string& BlobsBundleV1::_internal_proofs(int index) const {
  return _impl_.proofs_.Get(index);
}
inline const std::string& BlobsBundleV1::proofs(int index) const {
  // @@protoc_insertion_point(field_get:types.BlobsBundleV1.proofs)
  return _internal_proofs(index);
}
inline std::string* BlobsBundleV1::mutable_proofs(int index) {
  // @@protoc_insertion_point(field_mutable:types.BlobsBundleV1.proofs)
  return _impl_.proofs_.Mutable(index);
}
inline void BlobsBundleV1::set_proofs(int index, const std::string& value) {
  _impl_.proofs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:types.BlobsBundleV1.proofs)
}
inline void BlobsBundleV1::set_proofs(int index, std::string&& value) {
  _impl_.proofs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:types.BlobsBundleV1.proofs)
}
inline void BlobsBundleV1::set_proofs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.proofs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:types.BlobsBundleV1.proofs)
}
inline void BlobsBundleV1::set_proofs(int index, const void* value, size_t size) {
  _impl_.proofs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:types.BlobsBundleV1.proofs)
}
inline std::string* BlobsBundleV1::_internal_add_proofs() {
  return _impl_.proofs_.Add();
}
inline void BlobsBundleV1::add_proofs(const std::string& value) {
  _impl_.proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:types.BlobsBundleV1.proofs)
}
inline void BlobsBundleV1::add_proofs(std::string&& value) {
  _impl_.proofs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:types.BlobsBundleV1.proofs)
}
inline void BlobsBundleV1::add_proofs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.proofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:types.BlobsBundleV1.proofs)
}
inline void BlobsBundleV1::add_proofs(const void* value, size_t size) {
  _impl_.proofs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:types.BlobsBundleV1.proofs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlobsBundleV1::proofs() const {
  // @@protoc_insertion_point(field_list:types.BlobsBundleV1.proofs)
  return _impl_.proofs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlobsBundleV1::mutable_proofs() {
  // @@protoc_insertion_point(field_mutable_list:types.BlobsBundleV1.proofs)
  return &_impl_.proofs_;
}

// -------------------------------------------------------------------

// NodeInfoPorts

// uint32 discovery = 1;
inline void NodeInfoPorts::clear_discovery() {
  _impl_.discovery_ = 0u;
}
inline uint32_t NodeInfoPorts::_internal_discovery() const {
  return _impl_.discovery_;
}
inline uint32_t NodeInfoPorts::discovery() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoPorts.discovery)
  return _internal_discovery();
}
inline void NodeInfoPorts::_internal_set_discovery(uint32_t value) {
  
  _impl_.discovery_ = value;
}
inline void NodeInfoPorts::set_discovery(uint32_t value) {
  _internal_set_discovery(value);
  // @@protoc_insertion_point(field_set:types.NodeInfoPorts.discovery)
}

// uint32 listener = 2;
inline void NodeInfoPorts::clear_listener() {
  _impl_.listener_ = 0u;
}
inline uint32_t NodeInfoPorts::_internal_listener() const {
  return _impl_.listener_;
}
inline uint32_t NodeInfoPorts::listener() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoPorts.listener)
  return _internal_listener();
}
inline void NodeInfoPorts::_internal_set_listener(uint32_t value) {
  
  _impl_.listener_ = value;
}
inline void NodeInfoPorts::set_listener(uint32_t value) {
  _internal_set_listener(value);
  // @@protoc_insertion_point(field_set:types.NodeInfoPorts.listener)
}

// -------------------------------------------------------------------

// NodeInfoReply

// string id = 1;
inline void NodeInfoReply::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NodeInfoReply::id() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoReply.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfoReply::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.NodeInfoReply.id)
}
inline std::string* NodeInfoReply::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:types.NodeInfoReply.id)
  return _s;
}
inline const std::string& NodeInfoReply::_internal_id() const {
  return _impl_.id_.Get();
}
inline void NodeInfoReply::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfoReply::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfoReply::release_id() {
  // @@protoc_insertion_point(field_release:types.NodeInfoReply.id)
  return _impl_.id_.Release();
}
inline void NodeInfoReply::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.NodeInfoReply.id)
}

// string name = 2;
inline void NodeInfoReply::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NodeInfoReply::name() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoReply.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfoReply::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.NodeInfoReply.name)
}
inline std::string* NodeInfoReply::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:types.NodeInfoReply.name)
  return _s;
}
inline const std::string& NodeInfoReply::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NodeInfoReply::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfoReply::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfoReply::release_name() {
  // @@protoc_insertion_point(field_release:types.NodeInfoReply.name)
  return _impl_.name_.Release();
}
inline void NodeInfoReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.NodeInfoReply.name)
}

// string enode = 3;
inline void NodeInfoReply::clear_enode() {
  _impl_.enode_.ClearToEmpty();
}
inline const std::string& NodeInfoReply::enode() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoReply.enode)
  return _internal_enode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfoReply::set_enode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.NodeInfoReply.enode)
}
inline std::string* NodeInfoReply::mutable_enode() {
  std::string* _s = _internal_mutable_enode();
  // @@protoc_insertion_point(field_mutable:types.NodeInfoReply.enode)
  return _s;
}
inline const std::string& NodeInfoReply::_internal_enode() const {
  return _impl_.enode_.Get();
}
inline void NodeInfoReply::_internal_set_enode(const std::string& value) {
  
  _impl_.enode_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfoReply::_internal_mutable_enode() {
  
  return _impl_.enode_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfoReply::release_enode() {
  // @@protoc_insertion_point(field_release:types.NodeInfoReply.enode)
  return _impl_.enode_.Release();
}
inline void NodeInfoReply::set_allocated_enode(std::string* enode) {
  if (enode != nullptr) {
    
  } else {
    
  }
  _impl_.enode_.SetAllocated(enode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enode_.IsDefault()) {
    _impl_.enode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.NodeInfoReply.enode)
}

// string enr = 4;
inline void NodeInfoReply::clear_enr() {
  _impl_.enr_.ClearToEmpty();
}
inline const std::string& NodeInfoReply::enr() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoReply.enr)
  return _internal_enr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfoReply::set_enr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.NodeInfoReply.enr)
}
inline std::string* NodeInfoReply::mutable_enr() {
  std::string* _s = _internal_mutable_enr();
  // @@protoc_insertion_point(field_mutable:types.NodeInfoReply.enr)
  return _s;
}
inline const std::string& NodeInfoReply::_internal_enr() const {
  return _impl_.enr_.Get();
}
inline void NodeInfoReply::_internal_set_enr(const std::string& value) {
  
  _impl_.enr_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfoReply::_internal_mutable_enr() {
  
  return _impl_.enr_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfoReply::release_enr() {
  // @@protoc_insertion_point(field_release:types.NodeInfoReply.enr)
  return _impl_.enr_.Release();
}
inline void NodeInfoReply::set_allocated_enr(std::string* enr) {
  if (enr != nullptr) {
    
  } else {
    
  }
  _impl_.enr_.SetAllocated(enr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enr_.IsDefault()) {
    _impl_.enr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.NodeInfoReply.enr)
}

// .types.NodeInfoPorts ports = 5;
inline bool NodeInfoReply::_internal_has_ports() const {
  return this != internal_default_instance() && _impl_.ports_ != nullptr;
}
inline bool NodeInfoReply::has_ports() const {
  return _internal_has_ports();
}
inline void NodeInfoReply::clear_ports() {
  if (GetArenaForAllocation() == nullptr && _impl_.ports_ != nullptr) {
    delete _impl_.ports_;
  }
  _impl_.ports_ = nullptr;
}
inline const ::types::NodeInfoPorts& NodeInfoReply::_internal_ports() const {
  const ::types::NodeInfoPorts* p = _impl_.ports_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::NodeInfoPorts&>(
      ::types::_NodeInfoPorts_default_instance_);
}
inline const ::types::NodeInfoPorts& NodeInfoReply::ports() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoReply.ports)
  return _internal_ports();
}
inline void NodeInfoReply::unsafe_arena_set_allocated_ports(
    ::types::NodeInfoPorts* ports) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ports_);
  }
  _impl_.ports_ = ports;
  if (ports) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.NodeInfoReply.ports)
}
inline ::types::NodeInfoPorts* NodeInfoReply::release_ports() {
  
  ::types::NodeInfoPorts* temp = _impl_.ports_;
  _impl_.ports_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::NodeInfoPorts* NodeInfoReply::unsafe_arena_release_ports() {
  // @@protoc_insertion_point(field_release:types.NodeInfoReply.ports)
  
  ::types::NodeInfoPorts* temp = _impl_.ports_;
  _impl_.ports_ = nullptr;
  return temp;
}
inline ::types::NodeInfoPorts* NodeInfoReply::_internal_mutable_ports() {
  
  if (_impl_.ports_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::NodeInfoPorts>(GetArenaForAllocation());
    _impl_.ports_ = p;
  }
  return _impl_.ports_;
}
inline ::types::NodeInfoPorts* NodeInfoReply::mutable_ports() {
  ::types::NodeInfoPorts* _msg = _internal_mutable_ports();
  // @@protoc_insertion_point(field_mutable:types.NodeInfoReply.ports)
  return _msg;
}
inline void NodeInfoReply::set_allocated_ports(::types::NodeInfoPorts* ports) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ports_;
  }
  if (ports) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ports);
    if (message_arena != submessage_arena) {
      ports = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ports, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ports_ = ports;
  // @@protoc_insertion_point(field_set_allocated:types.NodeInfoReply.ports)
}

// string listener_addr = 6;
inline void NodeInfoReply::clear_listener_addr() {
  _impl_.listener_addr_.ClearToEmpty();
}
inline const std::string& NodeInfoReply::listener_addr() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoReply.listener_addr)
  return _internal_listener_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfoReply::set_listener_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.listener_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.NodeInfoReply.listener_addr)
}
inline std::string* NodeInfoReply::mutable_listener_addr() {
  std::string* _s = _internal_mutable_listener_addr();
  // @@protoc_insertion_point(field_mutable:types.NodeInfoReply.listener_addr)
  return _s;
}
inline const std::string& NodeInfoReply::_internal_listener_addr() const {
  return _impl_.listener_addr_.Get();
}
inline void NodeInfoReply::_internal_set_listener_addr(const std::string& value) {
  
  _impl_.listener_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfoReply::_internal_mutable_listener_addr() {
  
  return _impl_.listener_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfoReply::release_listener_addr() {
  // @@protoc_insertion_point(field_release:types.NodeInfoReply.listener_addr)
  return _impl_.listener_addr_.Release();
}
inline void NodeInfoReply::set_allocated_listener_addr(std::string* listener_addr) {
  if (listener_addr != nullptr) {
    
  } else {
    
  }
  _impl_.listener_addr_.SetAllocated(listener_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.listener_addr_.IsDefault()) {
    _impl_.listener_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.NodeInfoReply.listener_addr)
}

// bytes protocols = 7;
inline void NodeInfoReply::clear_protocols() {
  _impl_.protocols_.ClearToEmpty();
}
inline const std::string& NodeInfoReply::protocols() const {
  // @@protoc_insertion_point(field_get:types.NodeInfoReply.protocols)
  return _internal_protocols();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfoReply::set_protocols(ArgT0&& arg0, ArgT... args) {
 
 _impl_.protocols_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.NodeInfoReply.protocols)
}
inline std::string* NodeInfoReply::mutable_protocols() {
  std::string* _s = _internal_mutable_protocols();
  // @@protoc_insertion_point(field_mutable:types.NodeInfoReply.protocols)
  return _s;
}
inline const std::string& NodeInfoReply::_internal_protocols() const {
  return _impl_.protocols_.Get();
}
inline void NodeInfoReply::_internal_set_protocols(const std::string& value) {
  
  _impl_.protocols_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfoReply::_internal_mutable_protocols() {
  
  return _impl_.protocols_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfoReply::release_protocols() {
  // @@protoc_insertion_point(field_release:types.NodeInfoReply.protocols)
  return _impl_.protocols_.Release();
}
inline void NodeInfoReply::set_allocated_protocols(std::string* protocols) {
  if (protocols != nullptr) {
    
  } else {
    
  }
  _impl_.protocols_.SetAllocated(protocols, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocols_.IsDefault()) {
    _impl_.protocols_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.NodeInfoReply.protocols)
}

// -------------------------------------------------------------------

// PeerInfo

// string id = 1;
inline void PeerInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PeerInfo::id() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.PeerInfo.id)
}
inline std::string* PeerInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:types.PeerInfo.id)
  return _s;
}
inline const std::string& PeerInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PeerInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerInfo::release_id() {
  // @@protoc_insertion_point(field_release:types.PeerInfo.id)
  return _impl_.id_.Release();
}
inline void PeerInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.PeerInfo.id)
}

// string name = 2;
inline void PeerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PeerInfo::name() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.PeerInfo.name)
}
inline std::string* PeerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:types.PeerInfo.name)
  return _s;
}
inline const std::string& PeerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PeerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerInfo::release_name() {
  // @@protoc_insertion_point(field_release:types.PeerInfo.name)
  return _impl_.name_.Release();
}
inline void PeerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.PeerInfo.name)
}

// string enode = 3;
inline void PeerInfo::clear_enode() {
  _impl_.enode_.ClearToEmpty();
}
inline const std::string& PeerInfo::enode() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.enode)
  return _internal_enode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerInfo::set_enode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.PeerInfo.enode)
}
inline std::string* PeerInfo::mutable_enode() {
  std::string* _s = _internal_mutable_enode();
  // @@protoc_insertion_point(field_mutable:types.PeerInfo.enode)
  return _s;
}
inline const std::string& PeerInfo::_internal_enode() const {
  return _impl_.enode_.Get();
}
inline void PeerInfo::_internal_set_enode(const std::string& value) {
  
  _impl_.enode_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerInfo::_internal_mutable_enode() {
  
  return _impl_.enode_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerInfo::release_enode() {
  // @@protoc_insertion_point(field_release:types.PeerInfo.enode)
  return _impl_.enode_.Release();
}
inline void PeerInfo::set_allocated_enode(std::string* enode) {
  if (enode != nullptr) {
    
  } else {
    
  }
  _impl_.enode_.SetAllocated(enode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enode_.IsDefault()) {
    _impl_.enode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.PeerInfo.enode)
}

// string enr = 4;
inline void PeerInfo::clear_enr() {
  _impl_.enr_.ClearToEmpty();
}
inline const std::string& PeerInfo::enr() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.enr)
  return _internal_enr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerInfo::set_enr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.PeerInfo.enr)
}
inline std::string* PeerInfo::mutable_enr() {
  std::string* _s = _internal_mutable_enr();
  // @@protoc_insertion_point(field_mutable:types.PeerInfo.enr)
  return _s;
}
inline const std::string& PeerInfo::_internal_enr() const {
  return _impl_.enr_.Get();
}
inline void PeerInfo::_internal_set_enr(const std::string& value) {
  
  _impl_.enr_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerInfo::_internal_mutable_enr() {
  
  return _impl_.enr_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerInfo::release_enr() {
  // @@protoc_insertion_point(field_release:types.PeerInfo.enr)
  return _impl_.enr_.Release();
}
inline void PeerInfo::set_allocated_enr(std::string* enr) {
  if (enr != nullptr) {
    
  } else {
    
  }
  _impl_.enr_.SetAllocated(enr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enr_.IsDefault()) {
    _impl_.enr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.PeerInfo.enr)
}

// repeated string caps = 5;
inline int PeerInfo::_internal_caps_size() const {
  return _impl_.caps_.size();
}
inline int PeerInfo::caps_size() const {
  return _internal_caps_size();
}
inline void PeerInfo::clear_caps() {
  _impl_.caps_.Clear();
}
inline std::string* PeerInfo::add_caps() {
  std::string* _s = _internal_add_caps();
  // @@protoc_insertion_point(field_add_mutable:types.PeerInfo.caps)
  return _s;
}
inline const std::string& PeerInfo::_internal_caps(int index) const {
  return _impl_.caps_.Get(index);
}
inline const std::string& PeerInfo::caps(int index) const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.caps)
  return _internal_caps(index);
}
inline std::string* PeerInfo::mutable_caps(int index) {
  // @@protoc_insertion_point(field_mutable:types.PeerInfo.caps)
  return _impl_.caps_.Mutable(index);
}
inline void PeerInfo::set_caps(int index, const std::string& value) {
  _impl_.caps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:types.PeerInfo.caps)
}
inline void PeerInfo::set_caps(int index, std::string&& value) {
  _impl_.caps_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:types.PeerInfo.caps)
}
inline void PeerInfo::set_caps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.caps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:types.PeerInfo.caps)
}
inline void PeerInfo::set_caps(int index, const char* value, size_t size) {
  _impl_.caps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:types.PeerInfo.caps)
}
inline std::string* PeerInfo::_internal_add_caps() {
  return _impl_.caps_.Add();
}
inline void PeerInfo::add_caps(const std::string& value) {
  _impl_.caps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:types.PeerInfo.caps)
}
inline void PeerInfo::add_caps(std::string&& value) {
  _impl_.caps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:types.PeerInfo.caps)
}
inline void PeerInfo::add_caps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.caps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:types.PeerInfo.caps)
}
inline void PeerInfo::add_caps(const char* value, size_t size) {
  _impl_.caps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:types.PeerInfo.caps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PeerInfo::caps() const {
  // @@protoc_insertion_point(field_list:types.PeerInfo.caps)
  return _impl_.caps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PeerInfo::mutable_caps() {
  // @@protoc_insertion_point(field_mutable_list:types.PeerInfo.caps)
  return &_impl_.caps_;
}

// string conn_local_addr = 6;
inline void PeerInfo::clear_conn_local_addr() {
  _impl_.conn_local_addr_.ClearToEmpty();
}
inline const std::string& PeerInfo::conn_local_addr() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.conn_local_addr)
  return _internal_conn_local_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerInfo::set_conn_local_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conn_local_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.PeerInfo.conn_local_addr)
}
inline std::string* PeerInfo::mutable_conn_local_addr() {
  std::string* _s = _internal_mutable_conn_local_addr();
  // @@protoc_insertion_point(field_mutable:types.PeerInfo.conn_local_addr)
  return _s;
}
inline const std::string& PeerInfo::_internal_conn_local_addr() const {
  return _impl_.conn_local_addr_.Get();
}
inline void PeerInfo::_internal_set_conn_local_addr(const std::string& value) {
  
  _impl_.conn_local_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerInfo::_internal_mutable_conn_local_addr() {
  
  return _impl_.conn_local_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerInfo::release_conn_local_addr() {
  // @@protoc_insertion_point(field_release:types.PeerInfo.conn_local_addr)
  return _impl_.conn_local_addr_.Release();
}
inline void PeerInfo::set_allocated_conn_local_addr(std::string* conn_local_addr) {
  if (conn_local_addr != nullptr) {
    
  } else {
    
  }
  _impl_.conn_local_addr_.SetAllocated(conn_local_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conn_local_addr_.IsDefault()) {
    _impl_.conn_local_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.PeerInfo.conn_local_addr)
}

// string conn_remote_addr = 7;
inline void PeerInfo::clear_conn_remote_addr() {
  _impl_.conn_remote_addr_.ClearToEmpty();
}
inline const std::string& PeerInfo::conn_remote_addr() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.conn_remote_addr)
  return _internal_conn_remote_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerInfo::set_conn_remote_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conn_remote_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.PeerInfo.conn_remote_addr)
}
inline std::string* PeerInfo::mutable_conn_remote_addr() {
  std::string* _s = _internal_mutable_conn_remote_addr();
  // @@protoc_insertion_point(field_mutable:types.PeerInfo.conn_remote_addr)
  return _s;
}
inline const std::string& PeerInfo::_internal_conn_remote_addr() const {
  return _impl_.conn_remote_addr_.Get();
}
inline void PeerInfo::_internal_set_conn_remote_addr(const std::string& value) {
  
  _impl_.conn_remote_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerInfo::_internal_mutable_conn_remote_addr() {
  
  return _impl_.conn_remote_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerInfo::release_conn_remote_addr() {
  // @@protoc_insertion_point(field_release:types.PeerInfo.conn_remote_addr)
  return _impl_.conn_remote_addr_.Release();
}
inline void PeerInfo::set_allocated_conn_remote_addr(std::string* conn_remote_addr) {
  if (conn_remote_addr != nullptr) {
    
  } else {
    
  }
  _impl_.conn_remote_addr_.SetAllocated(conn_remote_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conn_remote_addr_.IsDefault()) {
    _impl_.conn_remote_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.PeerInfo.conn_remote_addr)
}

// bool conn_is_inbound = 8;
inline void PeerInfo::clear_conn_is_inbound() {
  _impl_.conn_is_inbound_ = false;
}
inline bool PeerInfo::_internal_conn_is_inbound() const {
  return _impl_.conn_is_inbound_;
}
inline bool PeerInfo::conn_is_inbound() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.conn_is_inbound)
  return _internal_conn_is_inbound();
}
inline void PeerInfo::_internal_set_conn_is_inbound(bool value) {
  
  _impl_.conn_is_inbound_ = value;
}
inline void PeerInfo::set_conn_is_inbound(bool value) {
  _internal_set_conn_is_inbound(value);
  // @@protoc_insertion_point(field_set:types.PeerInfo.conn_is_inbound)
}

// bool conn_is_trusted = 9;
inline void PeerInfo::clear_conn_is_trusted() {
  _impl_.conn_is_trusted_ = false;
}
inline bool PeerInfo::_internal_conn_is_trusted() const {
  return _impl_.conn_is_trusted_;
}
inline bool PeerInfo::conn_is_trusted() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.conn_is_trusted)
  return _internal_conn_is_trusted();
}
inline void PeerInfo::_internal_set_conn_is_trusted(bool value) {
  
  _impl_.conn_is_trusted_ = value;
}
inline void PeerInfo::set_conn_is_trusted(bool value) {
  _internal_set_conn_is_trusted(value);
  // @@protoc_insertion_point(field_set:types.PeerInfo.conn_is_trusted)
}

// bool conn_is_static = 10;
inline void PeerInfo::clear_conn_is_static() {
  _impl_.conn_is_static_ = false;
}
inline bool PeerInfo::_internal_conn_is_static() const {
  return _impl_.conn_is_static_;
}
inline bool PeerInfo::conn_is_static() const {
  // @@protoc_insertion_point(field_get:types.PeerInfo.conn_is_static)
  return _internal_conn_is_static();
}
inline void PeerInfo::_internal_set_conn_is_static(bool value) {
  
  _impl_.conn_is_static_ = value;
}
inline void PeerInfo::set_conn_is_static(bool value) {
  _internal_set_conn_is_static(value);
  // @@protoc_insertion_point(field_set:types.PeerInfo.conn_is_static)
}

// -------------------------------------------------------------------

// ExecutionPayloadBodyV1

// repeated bytes transactions = 1;
inline int ExecutionPayloadBodyV1::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int ExecutionPayloadBodyV1::transactions_size() const {
  return _internal_transactions_size();
}
inline void ExecutionPayloadBodyV1::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline std::string* ExecutionPayloadBodyV1::add_transactions() {
  std::string* _s = _internal_add_transactions();
  // @@protoc_insertion_point(field_add_mutable:types.ExecutionPayloadBodyV1.transactions)
  return _s;
}
inline const std::string& ExecutionPayloadBodyV1::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const std::string& ExecutionPayloadBodyV1::transactions(int index) const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayloadBodyV1.transactions)
  return _internal_transactions(index);
}
inline std::string* ExecutionPayloadBodyV1::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayloadBodyV1.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline void ExecutionPayloadBodyV1::set_transactions(int index, const std::string& value) {
  _impl_.transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:types.ExecutionPayloadBodyV1.transactions)
}
inline void ExecutionPayloadBodyV1::set_transactions(int index, std::string&& value) {
  _impl_.transactions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:types.ExecutionPayloadBodyV1.transactions)
}
inline void ExecutionPayloadBodyV1::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:types.ExecutionPayloadBodyV1.transactions)
}
inline void ExecutionPayloadBodyV1::set_transactions(int index, const void* value, size_t size) {
  _impl_.transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:types.ExecutionPayloadBodyV1.transactions)
}
inline std::string* ExecutionPayloadBodyV1::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline void ExecutionPayloadBodyV1::add_transactions(const std::string& value) {
  _impl_.transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:types.ExecutionPayloadBodyV1.transactions)
}
inline void ExecutionPayloadBodyV1::add_transactions(std::string&& value) {
  _impl_.transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:types.ExecutionPayloadBodyV1.transactions)
}
inline void ExecutionPayloadBodyV1::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:types.ExecutionPayloadBodyV1.transactions)
}
inline void ExecutionPayloadBodyV1::add_transactions(const void* value, size_t size) {
  _impl_.transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:types.ExecutionPayloadBodyV1.transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecutionPayloadBodyV1::transactions() const {
  // @@protoc_insertion_point(field_list:types.ExecutionPayloadBodyV1.transactions)
  return _impl_.transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecutionPayloadBodyV1::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:types.ExecutionPayloadBodyV1.transactions)
  return &_impl_.transactions_;
}

// repeated .types.Withdrawal withdrawals = 2;
inline int ExecutionPayloadBodyV1::_internal_withdrawals_size() const {
  return _impl_.withdrawals_.size();
}
inline int ExecutionPayloadBodyV1::withdrawals_size() const {
  return _internal_withdrawals_size();
}
inline void ExecutionPayloadBodyV1::clear_withdrawals() {
  _impl_.withdrawals_.Clear();
}
inline ::types::Withdrawal* ExecutionPayloadBodyV1::mutable_withdrawals(int index) {
  // @@protoc_insertion_point(field_mutable:types.ExecutionPayloadBodyV1.withdrawals)
  return _impl_.withdrawals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
ExecutionPayloadBodyV1::mutable_withdrawals() {
  // @@protoc_insertion_point(field_mutable_list:types.ExecutionPayloadBodyV1.withdrawals)
  return &_impl_.withdrawals_;
}
inline const ::types::Withdrawal& ExecutionPayloadBodyV1::_internal_withdrawals(int index) const {
  return _impl_.withdrawals_.Get(index);
}
inline const ::types::Withdrawal& ExecutionPayloadBodyV1::withdrawals(int index) const {
  // @@protoc_insertion_point(field_get:types.ExecutionPayloadBodyV1.withdrawals)
  return _internal_withdrawals(index);
}
inline ::types::Withdrawal* ExecutionPayloadBodyV1::_internal_add_withdrawals() {
  return _impl_.withdrawals_.Add();
}
inline ::types::Withdrawal* ExecutionPayloadBodyV1::add_withdrawals() {
  ::types::Withdrawal* _add = _internal_add_withdrawals();
  // @@protoc_insertion_point(field_add:types.ExecutionPayloadBodyV1.withdrawals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
ExecutionPayloadBodyV1::withdrawals() const {
  // @@protoc_insertion_point(field_list:types.ExecutionPayloadBodyV1.withdrawals)
  return _impl_.withdrawals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2ftypes_2eproto
