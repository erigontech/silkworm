// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution/execution.proto

#include "execution/execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace execution {
PROTOBUF_CONSTEXPR ForkChoiceReceipt::ForkChoiceReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validation_error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latest_valid_hash_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForkChoiceReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForkChoiceReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForkChoiceReceiptDefaultTypeInternal() {}
  union {
    ForkChoiceReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForkChoiceReceiptDefaultTypeInternal _ForkChoiceReceipt_default_instance_;
PROTOBUF_CONSTEXPR ValidationReceipt::ValidationReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validation_error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latest_valid_hash_)*/nullptr
  , /*decltype(_impl_.validation_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidationReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidationReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidationReceiptDefaultTypeInternal() {}
  union {
    ValidationReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidationReceiptDefaultTypeInternal _ValidationReceipt_default_instance_;
PROTOBUF_CONSTEXPR IsCanonicalResponse::IsCanonicalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.canonical_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsCanonicalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsCanonicalResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsCanonicalResponseDefaultTypeInternal() {}
  union {
    IsCanonicalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsCanonicalResponseDefaultTypeInternal _IsCanonicalResponse_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aura_seal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_hash_)*/nullptr
  , /*decltype(_impl_.coinbase_)*/nullptr
  , /*decltype(_impl_.state_root_)*/nullptr
  , /*decltype(_impl_.receipt_root_)*/nullptr
  , /*decltype(_impl_.logs_bloom_)*/nullptr
  , /*decltype(_impl_.prev_randao_)*/nullptr
  , /*decltype(_impl_.difficulty_)*/nullptr
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.ommer_hash_)*/nullptr
  , /*decltype(_impl_.transaction_hash_)*/nullptr
  , /*decltype(_impl_.base_fee_per_gas_)*/nullptr
  , /*decltype(_impl_.withdrawal_hash_)*/nullptr
  , /*decltype(_impl_.parent_beacon_block_root_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.blob_gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.excess_blob_gas_)*/uint64_t{0u}
  , /*decltype(_impl_.aura_step_)*/uint64_t{0u}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR BlockBody::BlockBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.uncles_)*/{}
  , /*decltype(_impl_.withdrawals_)*/{}
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBodyDefaultTypeInternal() {}
  union {
    BlockBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBodyDefaultTypeInternal _BlockBody_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR GetHeaderResponse::GetHeaderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct GetHeaderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeaderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeaderResponseDefaultTypeInternal() {}
  union {
    GetHeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeaderResponseDefaultTypeInternal _GetHeaderResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTDResponse::GetTDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.td_)*/nullptr} {}
struct GetTDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTDResponseDefaultTypeInternal() {}
  union {
    GetTDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTDResponseDefaultTypeInternal _GetTDResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBodyResponse::GetBodyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_)*/nullptr} {}
struct GetBodyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBodyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBodyResponseDefaultTypeInternal() {}
  union {
    GetBodyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBodyResponseDefaultTypeInternal _GetBodyResponse_default_instance_;
PROTOBUF_CONSTEXPR GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}} {}
struct GetHeaderHashNumberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHeaderHashNumberResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHeaderHashNumberResponseDefaultTypeInternal() {}
  union {
    GetHeaderHashNumberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHeaderHashNumberResponseDefaultTypeInternal _GetHeaderHashNumberResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSegmentRequest::GetSegmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}} {}
struct GetSegmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmentRequestDefaultTypeInternal() {}
  union {
    GetSegmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmentRequestDefaultTypeInternal _GetSegmentRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertBlocksRequest::InsertBlocksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertBlocksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertBlocksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertBlocksRequestDefaultTypeInternal() {}
  union {
    InsertBlocksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertBlocksRequestDefaultTypeInternal _InsertBlocksRequest_default_instance_;
PROTOBUF_CONSTEXPR ForkChoice::ForkChoice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.head_block_hash_)*/nullptr
  , /*decltype(_impl_.finalized_block_hash_)*/nullptr
  , /*decltype(_impl_.safe_block_hash_)*/nullptr
  , /*decltype(_impl_.timeout_)*/uint64_t{0u}} {}
struct ForkChoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForkChoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForkChoiceDefaultTypeInternal() {}
  union {
    ForkChoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForkChoiceDefaultTypeInternal _ForkChoice_default_instance_;
PROTOBUF_CONSTEXPR InsertionResult::InsertionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertionResultDefaultTypeInternal() {}
  union {
    InsertionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertionResultDefaultTypeInternal _InsertionResult_default_instance_;
PROTOBUF_CONSTEXPR ValidationRequest::ValidationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/nullptr
  , /*decltype(_impl_.number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidationRequestDefaultTypeInternal() {}
  union {
    ValidationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidationRequestDefaultTypeInternal _ValidationRequest_default_instance_;
PROTOBUF_CONSTEXPR AssembleBlockRequest::AssembleBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.withdrawals_)*/{}
  , /*decltype(_impl_.parent_hash_)*/nullptr
  , /*decltype(_impl_.prev_randao_)*/nullptr
  , /*decltype(_impl_.suggested_fee_recipient_)*/nullptr
  , /*decltype(_impl_.parent_beacon_block_root_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}} {}
struct AssembleBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssembleBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssembleBlockRequestDefaultTypeInternal() {}
  union {
    AssembleBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssembleBlockRequestDefaultTypeInternal _AssembleBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR AssembleBlockResponse::AssembleBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.busy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssembleBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssembleBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssembleBlockResponseDefaultTypeInternal() {}
  union {
    AssembleBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssembleBlockResponseDefaultTypeInternal _AssembleBlockResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAssembledBlockRequest::GetAssembledBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssembledBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssembledBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssembledBlockRequestDefaultTypeInternal() {}
  union {
    GetAssembledBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssembledBlockRequestDefaultTypeInternal _GetAssembledBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR AssembledBlockData::AssembledBlockData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.execution_payload_)*/nullptr
  , /*decltype(_impl_.block_value_)*/nullptr
  , /*decltype(_impl_.blobs_bundle_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssembledBlockDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssembledBlockDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssembledBlockDataDefaultTypeInternal() {}
  union {
    AssembledBlockData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssembledBlockDataDefaultTypeInternal _AssembledBlockData_default_instance_;
PROTOBUF_CONSTEXPR GetAssembledBlockResponse::GetAssembledBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.busy_)*/false} {}
struct GetAssembledBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssembledBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssembledBlockResponseDefaultTypeInternal() {}
  union {
    GetAssembledBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssembledBlockResponseDefaultTypeInternal _GetAssembledBlockResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBodiesBatchResponse::GetBodiesBatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bodies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBodiesBatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBodiesBatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBodiesBatchResponseDefaultTypeInternal() {}
  union {
    GetBodiesBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBodiesBatchResponseDefaultTypeInternal _GetBodiesBatchResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBodiesByHashesRequest::GetBodiesByHashesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBodiesByHashesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBodiesByHashesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBodiesByHashesRequestDefaultTypeInternal() {}
  union {
    GetBodiesByHashesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBodiesByHashesRequestDefaultTypeInternal _GetBodiesByHashesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBodiesByRangeRequest::GetBodiesByRangeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBodiesByRangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBodiesByRangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBodiesByRangeRequestDefaultTypeInternal() {}
  union {
    GetBodiesByRangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBodiesByRangeRequestDefaultTypeInternal _GetBodiesByRangeRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadyResponse::ReadyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadyResponseDefaultTypeInternal() {}
  union {
    ReadyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadyResponseDefaultTypeInternal _ReadyResponse_default_instance_;
PROTOBUF_CONSTEXPR FrozenBlocksResponse::FrozenBlocksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frozen_blocks_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrozenBlocksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrozenBlocksResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrozenBlocksResponseDefaultTypeInternal() {}
  union {
    FrozenBlocksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrozenBlocksResponseDefaultTypeInternal _FrozenBlocksResponse_default_instance_;
PROTOBUF_CONSTEXPR HasBlockResponse::HasBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.has_block_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HasBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasBlockResponseDefaultTypeInternal() {}
  union {
    HasBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasBlockResponseDefaultTypeInternal _HasBlockResponse_default_instance_;
}  // namespace execution
static ::_pb::Metadata file_level_metadata_execution_2fexecution_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_execution_2fexecution_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_execution_2fexecution_2eproto = nullptr;

const uint32_t TableStruct_execution_2fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _impl_.latest_valid_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _impl_.validation_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _impl_.validation_status_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _impl_.latest_valid_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _impl_.validation_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::IsCanonicalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::IsCanonicalResponse, _impl_.canonical_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.parent_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.receipt_root_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.logs_bloom_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.prev_randao_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.gas_limit_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.extra_data_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.ommer_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.transaction_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.base_fee_per_gas_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.withdrawal_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.blob_gas_used_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.excess_blob_gas_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.parent_beacon_block_root_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.aura_step_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _impl_.aura_seal_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  4,
  5,
  3,
  6,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.transactions_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.uncles_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _impl_.withdrawals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::Block, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::execution::Block, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _impl_.header_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetTDResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetTDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetTDResponse, _impl_.td_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _impl_.body_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _impl_.block_number_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _impl_.block_hash_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::InsertBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::InsertBlocksRequest, _impl_.blocks_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoice, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoice, _impl_.head_block_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoice, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoice, _impl_.finalized_block_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoice, _impl_.safe_block_hash_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::InsertionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::InsertionResult, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::ValidationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::ValidationRequest, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationRequest, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _impl_.parent_hash_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _impl_.prev_randao_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _impl_.suggested_fee_recipient_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _impl_.withdrawals_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockRequest, _impl_.parent_beacon_block_root_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembleBlockResponse, _impl_.busy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::GetAssembledBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetAssembledBlockRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::AssembledBlockData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::AssembledBlockData, _impl_.execution_payload_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembledBlockData, _impl_.block_value_),
  PROTOBUF_FIELD_OFFSET(::execution::AssembledBlockData, _impl_.blobs_bundle_),
  PROTOBUF_FIELD_OFFSET(::execution::GetAssembledBlockResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetAssembledBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetAssembledBlockResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::execution::GetAssembledBlockResponse, _impl_.busy_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodiesBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodiesBatchResponse, _impl_.bodies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodiesByHashesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodiesByHashesRequest, _impl_.hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodiesByRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodiesByRangeRequest, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::execution::GetBodiesByRangeRequest, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::ReadyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::ReadyResponse, _impl_.ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::FrozenBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::FrozenBlocksResponse, _impl_.frozen_blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::HasBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::execution::HasBlockResponse, _impl_.has_block_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::execution::ForkChoiceReceipt)},
  { 9, -1, -1, sizeof(::execution::ValidationReceipt)},
  { 18, -1, -1, sizeof(::execution::IsCanonicalResponse)},
  { 25, 54, -1, sizeof(::execution::Header)},
  { 77, -1, -1, sizeof(::execution::BlockBody)},
  { 88, -1, -1, sizeof(::execution::Block)},
  { 96, 103, -1, sizeof(::execution::GetHeaderResponse)},
  { 104, 111, -1, sizeof(::execution::GetTDResponse)},
  { 112, 119, -1, sizeof(::execution::GetBodyResponse)},
  { 120, 127, -1, sizeof(::execution::GetHeaderHashNumberResponse)},
  { 128, 136, -1, sizeof(::execution::GetSegmentRequest)},
  { 138, -1, -1, sizeof(::execution::InsertBlocksRequest)},
  { 145, 155, -1, sizeof(::execution::ForkChoice)},
  { 159, -1, -1, sizeof(::execution::InsertionResult)},
  { 166, -1, -1, sizeof(::execution::ValidationRequest)},
  { 174, 186, -1, sizeof(::execution::AssembleBlockRequest)},
  { 192, -1, -1, sizeof(::execution::AssembleBlockResponse)},
  { 200, -1, -1, sizeof(::execution::GetAssembledBlockRequest)},
  { 207, -1, -1, sizeof(::execution::AssembledBlockData)},
  { 216, 224, -1, sizeof(::execution::GetAssembledBlockResponse)},
  { 226, -1, -1, sizeof(::execution::GetBodiesBatchResponse)},
  { 233, -1, -1, sizeof(::execution::GetBodiesByHashesRequest)},
  { 240, -1, -1, sizeof(::execution::GetBodiesByRangeRequest)},
  { 248, -1, -1, sizeof(::execution::ReadyResponse)},
  { 255, -1, -1, sizeof(::execution::FrozenBlocksResponse)},
  { 262, -1, -1, sizeof(::execution::HasBlockResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::execution::_ForkChoiceReceipt_default_instance_._instance,
  &::execution::_ValidationReceipt_default_instance_._instance,
  &::execution::_IsCanonicalResponse_default_instance_._instance,
  &::execution::_Header_default_instance_._instance,
  &::execution::_BlockBody_default_instance_._instance,
  &::execution::_Block_default_instance_._instance,
  &::execution::_GetHeaderResponse_default_instance_._instance,
  &::execution::_GetTDResponse_default_instance_._instance,
  &::execution::_GetBodyResponse_default_instance_._instance,
  &::execution::_GetHeaderHashNumberResponse_default_instance_._instance,
  &::execution::_GetSegmentRequest_default_instance_._instance,
  &::execution::_InsertBlocksRequest_default_instance_._instance,
  &::execution::_ForkChoice_default_instance_._instance,
  &::execution::_InsertionResult_default_instance_._instance,
  &::execution::_ValidationRequest_default_instance_._instance,
  &::execution::_AssembleBlockRequest_default_instance_._instance,
  &::execution::_AssembleBlockResponse_default_instance_._instance,
  &::execution::_GetAssembledBlockRequest_default_instance_._instance,
  &::execution::_AssembledBlockData_default_instance_._instance,
  &::execution::_GetAssembledBlockResponse_default_instance_._instance,
  &::execution::_GetBodiesBatchResponse_default_instance_._instance,
  &::execution::_GetBodiesByHashesRequest_default_instance_._instance,
  &::execution::_GetBodiesByRangeRequest_default_instance_._instance,
  &::execution::_ReadyResponse_default_instance_._instance,
  &::execution::_FrozenBlocksResponse_default_instance_._instance,
  &::execution::_HasBlockResponse_default_instance_._instance,
};

const char descriptor_table_protodef_execution_2fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031execution/execution.proto\022\texecution\032\033"
  "google/protobuf/empty.proto\032\021types/types"
  ".proto\"\201\001\n\021ForkChoiceReceipt\022*\n\006status\030\001"
  " \001(\0162\032.execution.ExecutionStatus\022&\n\021late"
  "st_valid_hash\030\002 \001(\0132\013.types.H256\022\030\n\020vali"
  "dation_error\030\003 \001(\t\"\214\001\n\021ValidationReceipt"
  "\0225\n\021validation_status\030\001 \001(\0162\032.execution."
  "ExecutionStatus\022&\n\021latest_valid_hash\030\002 \001"
  "(\0132\013.types.H256\022\030\n\020validation_error\030\003 \001("
  "\t\"(\n\023IsCanonicalResponse\022\021\n\tcanonical\030\001 "
  "\001(\010\"\311\006\n\006Header\022 \n\013parent_hash\030\001 \001(\0132\013.ty"
  "pes.H256\022\035\n\010coinbase\030\002 \001(\0132\013.types.H160\022"
  "\037\n\nstate_root\030\003 \001(\0132\013.types.H256\022!\n\014rece"
  "ipt_root\030\004 \001(\0132\013.types.H256\022 \n\nlogs_bloo"
  "m\030\005 \001(\0132\014.types.H2048\022 \n\013prev_randao\030\006 \001"
  "(\0132\013.types.H256\022\024\n\014block_number\030\007 \001(\004\022\021\n"
  "\tgas_limit\030\010 \001(\004\022\020\n\010gas_used\030\t \001(\004\022\021\n\tti"
  "mestamp\030\n \001(\004\022\r\n\005nonce\030\013 \001(\004\022\022\n\nextra_da"
  "ta\030\014 \001(\014\022\037\n\ndifficulty\030\r \001(\0132\013.types.H25"
  "6\022\037\n\nblock_hash\030\016 \001(\0132\013.types.H256\022\037\n\nom"
  "mer_hash\030\017 \001(\0132\013.types.H256\022%\n\020transacti"
  "on_hash\030\020 \001(\0132\013.types.H256\022*\n\020base_fee_p"
  "er_gas\030\021 \001(\0132\013.types.H256H\000\210\001\001\022)\n\017withdr"
  "awal_hash\030\022 \001(\0132\013.types.H256H\001\210\001\001\022\032\n\rblo"
  "b_gas_used\030\023 \001(\004H\002\210\001\001\022\034\n\017excess_blob_gas"
  "\030\024 \001(\004H\003\210\001\001\0222\n\030parent_beacon_block_root\030"
  "\025 \001(\0132\013.types.H256H\004\210\001\001\022\026\n\taura_step\030\026 \001"
  "(\004H\005\210\001\001\022\026\n\taura_seal\030\027 \001(\014H\006\210\001\001B\023\n\021_base"
  "_fee_per_gasB\022\n\020_withdrawal_hashB\020\n\016_blo"
  "b_gas_usedB\022\n\020_excess_blob_gasB\033\n\031_paren"
  "t_beacon_block_rootB\014\n\n_aura_stepB\014\n\n_au"
  "ra_seal\"\243\001\n\tBlockBody\022\037\n\nblock_hash\030\001 \001("
  "\0132\013.types.H256\022\024\n\014block_number\030\002 \001(\004\022\024\n\014"
  "transactions\030\003 \003(\014\022!\n\006uncles\030\004 \003(\0132\021.exe"
  "cution.Header\022&\n\013withdrawals\030\005 \003(\0132\021.typ"
  "es.Withdrawal\"N\n\005Block\022!\n\006header\030\001 \001(\0132\021"
  ".execution.Header\022\"\n\004body\030\002 \001(\0132\024.execut"
  "ion.BlockBody\"F\n\021GetHeaderResponse\022&\n\006he"
  "ader\030\001 \001(\0132\021.execution.HeaderH\000\210\001\001B\t\n\007_h"
  "eader\"4\n\rGetTDResponse\022\034\n\002td\030\001 \001(\0132\013.typ"
  "es.H256H\000\210\001\001B\005\n\003_td\"C\n\017GetBodyResponse\022\'"
  "\n\004body\030\001 \001(\0132\024.execution.BlockBodyH\000\210\001\001B"
  "\007\n\005_body\"I\n\033GetHeaderHashNumberResponse\022"
  "\031\n\014block_number\030\001 \001(\004H\000\210\001\001B\017\n\r_block_num"
  "ber\"t\n\021GetSegmentRequest\022\031\n\014block_number"
  "\030\001 \001(\004H\000\210\001\001\022$\n\nblock_hash\030\002 \001(\0132\013.types."
  "H256H\001\210\001\001B\017\n\r_block_numberB\r\n\013_block_has"
  "h\"7\n\023InsertBlocksRequest\022 \n\006blocks\030\001 \003(\013"
  "2\020.execution.Block\"\313\001\n\nForkChoice\022$\n\017hea"
  "d_block_hash\030\001 \001(\0132\013.types.H256\022\017\n\007timeo"
  "ut\030\002 \001(\004\022.\n\024finalized_block_hash\030\003 \001(\0132\013"
  ".types.H256H\000\210\001\001\022)\n\017safe_block_hash\030\004 \001("
  "\0132\013.types.H256H\001\210\001\001B\027\n\025_finalized_block_"
  "hashB\022\n\020_safe_block_hash\"=\n\017InsertionRes"
  "ult\022*\n\006result\030\001 \001(\0162\032.execution.Executio"
  "nStatus\">\n\021ValidationRequest\022\031\n\004hash\030\001 \001"
  "(\0132\013.types.H256\022\016\n\006number\030\002 \001(\004\"\224\002\n\024Asse"
  "mbleBlockRequest\022 \n\013parent_hash\030\001 \001(\0132\013."
  "types.H256\022\021\n\ttimestamp\030\002 \001(\004\022 \n\013prev_ra"
  "ndao\030\003 \001(\0132\013.types.H256\022,\n\027suggested_fee"
  "_recipient\030\004 \001(\0132\013.types.H160\022&\n\013withdra"
  "wals\030\005 \003(\0132\021.types.Withdrawal\0222\n\030parent_"
  "beacon_block_root\030\006 \001(\0132\013.types.H256H\000\210\001"
  "\001B\033\n\031_parent_beacon_block_root\"1\n\025Assemb"
  "leBlockResponse\022\n\n\002id\030\001 \001(\004\022\014\n\004busy\030\002 \001("
  "\010\"&\n\030GetAssembledBlockRequest\022\n\n\002id\030\001 \001("
  "\004\"\226\001\n\022AssembledBlockData\0222\n\021execution_pa"
  "yload\030\001 \001(\0132\027.types.ExecutionPayload\022 \n\013"
  "block_value\030\002 \001(\0132\013.types.H256\022*\n\014blobs_"
  "bundle\030\003 \001(\0132\024.types.BlobsBundleV1\"d\n\031Ge"
  "tAssembledBlockResponse\0220\n\004data\030\001 \001(\0132\035."
  "execution.AssembledBlockDataH\000\210\001\001\022\014\n\004bus"
  "y\030\002 \001(\010B\007\n\005_data\">\n\026GetBodiesBatchRespon"
  "se\022$\n\006bodies\030\001 \003(\0132\024.execution.BlockBody"
  "\"7\n\030GetBodiesByHashesRequest\022\033\n\006hashes\030\001"
  " \003(\0132\013.types.H256\"7\n\027GetBodiesByRangeReq"
  "uest\022\r\n\005start\030\001 \001(\004\022\r\n\005count\030\002 \001(\004\"\036\n\rRe"
  "adyResponse\022\r\n\005ready\030\001 \001(\010\"-\n\024FrozenBloc"
  "ksResponse\022\025\n\rfrozen_blocks\030\001 \001(\004\"%\n\020Has"
  "BlockResponse\022\021\n\thas_block\030\001 \001(\010*q\n\017Exec"
  "utionStatus\022\013\n\007Success\020\000\022\014\n\010BadBlock\020\001\022\016"
  "\n\nTooFarAway\020\002\022\022\n\016MissingSegment\020\003\022\025\n\021In"
  "validForkchoice\020\004\022\010\n\004Busy\020\0052\206\n\n\tExecutio"
  "n\022J\n\014InsertBlocks\022\036.execution.InsertBloc"
  "ksRequest\032\032.execution.InsertionResult\022K\n"
  "\rValidateChain\022\034.execution.ValidationReq"
  "uest\032\034.execution.ValidationReceipt\022G\n\020Up"
  "dateForkChoice\022\025.execution.ForkChoice\032\034."
  "execution.ForkChoiceReceipt\022R\n\rAssembleB"
  "lock\022\037.execution.AssembleBlockRequest\032 ."
  "execution.AssembleBlockResponse\022^\n\021GetAs"
  "sembledBlock\022#.execution.GetAssembledBlo"
  "ckRequest\032$.execution.GetAssembledBlockR"
  "esponse\022E\n\rCurrentHeader\022\026.google.protob"
  "uf.Empty\032\034.execution.GetHeaderResponse\022\?"
  "\n\005GetTD\022\034.execution.GetSegmentRequest\032\030."
  "execution.GetTDResponse\022G\n\tGetHeader\022\034.e"
  "xecution.GetSegmentRequest\032\034.execution.G"
  "etHeaderResponse\022C\n\007GetBody\022\034.execution."
  "GetSegmentRequest\032\032.execution.GetBodyRes"
  "ponse\022E\n\010HasBlock\022\034.execution.GetSegment"
  "Request\032\033.execution.HasBlockResponse\022Y\n\020"
  "GetBodiesByRange\022\".execution.GetBodiesBy"
  "RangeRequest\032!.execution.GetBodiesBatchR"
  "esponse\022[\n\021GetBodiesByHashes\022#.execution"
  ".GetBodiesByHashesRequest\032!.execution.Ge"
  "tBodiesBatchResponse\022>\n\017IsCanonicalHash\022"
  "\013.types.H256\032\036.execution.IsCanonicalResp"
  "onse\022J\n\023GetHeaderHashNumber\022\013.types.H256"
  "\032&.execution.GetHeaderHashNumberResponse"
  "\022>\n\rGetForkChoice\022\026.google.protobuf.Empt"
  "y\032\025.execution.ForkChoice\0229\n\005Ready\022\026.goog"
  "le.protobuf.Empty\032\030.execution.ReadyRespo"
  "nse\022G\n\014FrozenBlocks\022\026.google.protobuf.Em"
  "pty\032\037.execution.FrozenBlocksResponseB\027Z\025"
  "./execution;executionb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_execution_2fexecution_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_execution_2fexecution_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_execution_2fexecution_2eproto = {
    false, false, 4629, descriptor_table_protodef_execution_2fexecution_2eproto,
    "execution/execution.proto",
    &descriptor_table_execution_2fexecution_2eproto_once, descriptor_table_execution_2fexecution_2eproto_deps, 2, 26,
    schemas, file_default_instances, TableStruct_execution_2fexecution_2eproto::offsets,
    file_level_metadata_execution_2fexecution_2eproto, file_level_enum_descriptors_execution_2fexecution_2eproto,
    file_level_service_descriptors_execution_2fexecution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_execution_2fexecution_2eproto_getter() {
  return &descriptor_table_execution_2fexecution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_execution_2fexecution_2eproto(&descriptor_table_execution_2fexecution_2eproto);
namespace execution {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_execution_2fexecution_2eproto);
  return file_level_enum_descriptors_execution_2fexecution_2eproto[0];
}
bool ExecutionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ForkChoiceReceipt::_Internal {
 public:
  static const ::types::H256& latest_valid_hash(const ForkChoiceReceipt* msg);
};

const ::types::H256&
ForkChoiceReceipt::_Internal::latest_valid_hash(const ForkChoiceReceipt* msg) {
  return *msg->_impl_.latest_valid_hash_;
}
void ForkChoiceReceipt::clear_latest_valid_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
}
ForkChoiceReceipt::ForkChoiceReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.ForkChoiceReceipt)
}
ForkChoiceReceipt::ForkChoiceReceipt(const ForkChoiceReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForkChoiceReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validation_error_){}
    , decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validation_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validation_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validation_error().empty()) {
    _this->_impl_.validation_error_.Set(from._internal_validation_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_latest_valid_hash()) {
    _this->_impl_.latest_valid_hash_ = new ::types::H256(*from._impl_.latest_valid_hash_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:execution.ForkChoiceReceipt)
}

inline void ForkChoiceReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validation_error_){}
    , decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.validation_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validation_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ForkChoiceReceipt::~ForkChoiceReceipt() {
  // @@protoc_insertion_point(destructor:execution.ForkChoiceReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForkChoiceReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validation_error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.latest_valid_hash_;
}

void ForkChoiceReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForkChoiceReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ForkChoiceReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validation_error_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForkChoiceReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .execution.ExecutionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::execution::ExecutionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.H256 latest_valid_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_valid_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string validation_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_validation_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "execution.ForkChoiceReceipt.validation_error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForkChoiceReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ForkChoiceReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.ExecutionStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latest_valid_hash(this),
        _Internal::latest_valid_hash(this).GetCachedSize(), target, stream);
  }

  // string validation_error = 3;
  if (!this->_internal_validation_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validation_error().data(), static_cast<int>(this->_internal_validation_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "execution.ForkChoiceReceipt.validation_error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_validation_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ForkChoiceReceipt)
  return target;
}

size_t ForkChoiceReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ForkChoiceReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validation_error = 3;
  if (!this->_internal_validation_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validation_error());
  }

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latest_valid_hash_);
  }

  // .execution.ExecutionStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForkChoiceReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForkChoiceReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForkChoiceReceipt::GetClassData() const { return &_class_data_; }


void ForkChoiceReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForkChoiceReceipt*>(&to_msg);
  auto& from = static_cast<const ForkChoiceReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.ForkChoiceReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validation_error().empty()) {
    _this->_internal_set_validation_error(from._internal_validation_error());
  }
  if (from._internal_has_latest_valid_hash()) {
    _this->_internal_mutable_latest_valid_hash()->::types::H256::MergeFrom(
        from._internal_latest_valid_hash());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForkChoiceReceipt::CopyFrom(const ForkChoiceReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ForkChoiceReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkChoiceReceipt::IsInitialized() const {
  return true;
}

void ForkChoiceReceipt::InternalSwap(ForkChoiceReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.validation_error_, lhs_arena,
      &other->_impl_.validation_error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForkChoiceReceipt, _impl_.status_)
      + sizeof(ForkChoiceReceipt::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ForkChoiceReceipt, _impl_.latest_valid_hash_)>(
          reinterpret_cast<char*>(&_impl_.latest_valid_hash_),
          reinterpret_cast<char*>(&other->_impl_.latest_valid_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForkChoiceReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[0]);
}

// ===================================================================

class ValidationReceipt::_Internal {
 public:
  static const ::types::H256& latest_valid_hash(const ValidationReceipt* msg);
};

const ::types::H256&
ValidationReceipt::_Internal::latest_valid_hash(const ValidationReceipt* msg) {
  return *msg->_impl_.latest_valid_hash_;
}
void ValidationReceipt::clear_latest_valid_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
}
ValidationReceipt::ValidationReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.ValidationReceipt)
}
ValidationReceipt::ValidationReceipt(const ValidationReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidationReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validation_error_){}
    , decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.validation_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validation_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validation_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validation_error().empty()) {
    _this->_impl_.validation_error_.Set(from._internal_validation_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_latest_valid_hash()) {
    _this->_impl_.latest_valid_hash_ = new ::types::H256(*from._impl_.latest_valid_hash_);
  }
  _this->_impl_.validation_status_ = from._impl_.validation_status_;
  // @@protoc_insertion_point(copy_constructor:execution.ValidationReceipt)
}

inline void ValidationReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validation_error_){}
    , decltype(_impl_.latest_valid_hash_){nullptr}
    , decltype(_impl_.validation_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.validation_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validation_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidationReceipt::~ValidationReceipt() {
  // @@protoc_insertion_point(destructor:execution.ValidationReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidationReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validation_error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.latest_valid_hash_;
}

void ValidationReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidationReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ValidationReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validation_error_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.latest_valid_hash_ != nullptr) {
    delete _impl_.latest_valid_hash_;
  }
  _impl_.latest_valid_hash_ = nullptr;
  _impl_.validation_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .execution.ExecutionStatus validation_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validation_status(static_cast<::execution::ExecutionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.H256 latest_valid_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_valid_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string validation_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_validation_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "execution.ValidationReceipt.validation_error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidationReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ValidationReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.ExecutionStatus validation_status = 1;
  if (this->_internal_validation_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_validation_status(), target);
  }

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latest_valid_hash(this),
        _Internal::latest_valid_hash(this).GetCachedSize(), target, stream);
  }

  // string validation_error = 3;
  if (!this->_internal_validation_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validation_error().data(), static_cast<int>(this->_internal_validation_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "execution.ValidationReceipt.validation_error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_validation_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ValidationReceipt)
  return target;
}

size_t ValidationReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ValidationReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validation_error = 3;
  if (!this->_internal_validation_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validation_error());
  }

  // .types.H256 latest_valid_hash = 2;
  if (this->_internal_has_latest_valid_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latest_valid_hash_);
  }

  // .execution.ExecutionStatus validation_status = 1;
  if (this->_internal_validation_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_validation_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidationReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidationReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidationReceipt::GetClassData() const { return &_class_data_; }


void ValidationReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidationReceipt*>(&to_msg);
  auto& from = static_cast<const ValidationReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.ValidationReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validation_error().empty()) {
    _this->_internal_set_validation_error(from._internal_validation_error());
  }
  if (from._internal_has_latest_valid_hash()) {
    _this->_internal_mutable_latest_valid_hash()->::types::H256::MergeFrom(
        from._internal_latest_valid_hash());
  }
  if (from._internal_validation_status() != 0) {
    _this->_internal_set_validation_status(from._internal_validation_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidationReceipt::CopyFrom(const ValidationReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ValidationReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationReceipt::IsInitialized() const {
  return true;
}

void ValidationReceipt::InternalSwap(ValidationReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.validation_error_, lhs_arena,
      &other->_impl_.validation_error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidationReceipt, _impl_.validation_status_)
      + sizeof(ValidationReceipt::_impl_.validation_status_)
      - PROTOBUF_FIELD_OFFSET(ValidationReceipt, _impl_.latest_valid_hash_)>(
          reinterpret_cast<char*>(&_impl_.latest_valid_hash_),
          reinterpret_cast<char*>(&other->_impl_.latest_valid_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[1]);
}

// ===================================================================

class IsCanonicalResponse::_Internal {
 public:
};

IsCanonicalResponse::IsCanonicalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.IsCanonicalResponse)
}
IsCanonicalResponse::IsCanonicalResponse(const IsCanonicalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsCanonicalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.canonical_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.canonical_ = from._impl_.canonical_;
  // @@protoc_insertion_point(copy_constructor:execution.IsCanonicalResponse)
}

inline void IsCanonicalResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.canonical_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IsCanonicalResponse::~IsCanonicalResponse() {
  // @@protoc_insertion_point(destructor:execution.IsCanonicalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsCanonicalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsCanonicalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsCanonicalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.IsCanonicalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.canonical_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCanonicalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool canonical = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.canonical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsCanonicalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.IsCanonicalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool canonical = 1;
  if (this->_internal_canonical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_canonical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.IsCanonicalResponse)
  return target;
}

size_t IsCanonicalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.IsCanonicalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool canonical = 1;
  if (this->_internal_canonical() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsCanonicalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsCanonicalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsCanonicalResponse::GetClassData() const { return &_class_data_; }


void IsCanonicalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsCanonicalResponse*>(&to_msg);
  auto& from = static_cast<const IsCanonicalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.IsCanonicalResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_canonical() != 0) {
    _this->_internal_set_canonical(from._internal_canonical());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsCanonicalResponse::CopyFrom(const IsCanonicalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.IsCanonicalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCanonicalResponse::IsInitialized() const {
  return true;
}

void IsCanonicalResponse::InternalSwap(IsCanonicalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.canonical_, other->_impl_.canonical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCanonicalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[2]);
}

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static const ::types::H256& parent_hash(const Header* msg);
  static const ::types::H160& coinbase(const Header* msg);
  static const ::types::H256& state_root(const Header* msg);
  static const ::types::H256& receipt_root(const Header* msg);
  static const ::types::H2048& logs_bloom(const Header* msg);
  static const ::types::H256& prev_randao(const Header* msg);
  static const ::types::H256& difficulty(const Header* msg);
  static const ::types::H256& block_hash(const Header* msg);
  static const ::types::H256& ommer_hash(const Header* msg);
  static const ::types::H256& transaction_hash(const Header* msg);
  static const ::types::H256& base_fee_per_gas(const Header* msg);
  static void set_has_base_fee_per_gas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::types::H256& withdrawal_hash(const Header* msg);
  static void set_has_withdrawal_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blob_gas_used(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_excess_blob_gas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::types::H256& parent_beacon_block_root(const Header* msg);
  static void set_has_parent_beacon_block_root(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_aura_step(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_aura_seal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
Header::_Internal::parent_hash(const Header* msg) {
  return *msg->_impl_.parent_hash_;
}
const ::types::H160&
Header::_Internal::coinbase(const Header* msg) {
  return *msg->_impl_.coinbase_;
}
const ::types::H256&
Header::_Internal::state_root(const Header* msg) {
  return *msg->_impl_.state_root_;
}
const ::types::H256&
Header::_Internal::receipt_root(const Header* msg) {
  return *msg->_impl_.receipt_root_;
}
const ::types::H2048&
Header::_Internal::logs_bloom(const Header* msg) {
  return *msg->_impl_.logs_bloom_;
}
const ::types::H256&
Header::_Internal::prev_randao(const Header* msg) {
  return *msg->_impl_.prev_randao_;
}
const ::types::H256&
Header::_Internal::difficulty(const Header* msg) {
  return *msg->_impl_.difficulty_;
}
const ::types::H256&
Header::_Internal::block_hash(const Header* msg) {
  return *msg->_impl_.block_hash_;
}
const ::types::H256&
Header::_Internal::ommer_hash(const Header* msg) {
  return *msg->_impl_.ommer_hash_;
}
const ::types::H256&
Header::_Internal::transaction_hash(const Header* msg) {
  return *msg->_impl_.transaction_hash_;
}
const ::types::H256&
Header::_Internal::base_fee_per_gas(const Header* msg) {
  return *msg->_impl_.base_fee_per_gas_;
}
const ::types::H256&
Header::_Internal::withdrawal_hash(const Header* msg) {
  return *msg->_impl_.withdrawal_hash_;
}
const ::types::H256&
Header::_Internal::parent_beacon_block_root(const Header* msg) {
  return *msg->_impl_.parent_beacon_block_root_;
}
void Header::clear_parent_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.parent_hash_ != nullptr) {
    delete _impl_.parent_hash_;
  }
  _impl_.parent_hash_ = nullptr;
}
void Header::clear_coinbase() {
  if (GetArenaForAllocation() == nullptr && _impl_.coinbase_ != nullptr) {
    delete _impl_.coinbase_;
  }
  _impl_.coinbase_ = nullptr;
}
void Header::clear_state_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_root_ != nullptr) {
    delete _impl_.state_root_;
  }
  _impl_.state_root_ = nullptr;
}
void Header::clear_receipt_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.receipt_root_ != nullptr) {
    delete _impl_.receipt_root_;
  }
  _impl_.receipt_root_ = nullptr;
}
void Header::clear_logs_bloom() {
  if (GetArenaForAllocation() == nullptr && _impl_.logs_bloom_ != nullptr) {
    delete _impl_.logs_bloom_;
  }
  _impl_.logs_bloom_ = nullptr;
}
void Header::clear_prev_randao() {
  if (GetArenaForAllocation() == nullptr && _impl_.prev_randao_ != nullptr) {
    delete _impl_.prev_randao_;
  }
  _impl_.prev_randao_ = nullptr;
}
void Header::clear_difficulty() {
  if (GetArenaForAllocation() == nullptr && _impl_.difficulty_ != nullptr) {
    delete _impl_.difficulty_;
  }
  _impl_.difficulty_ = nullptr;
}
void Header::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
void Header::clear_ommer_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.ommer_hash_ != nullptr) {
    delete _impl_.ommer_hash_;
  }
  _impl_.ommer_hash_ = nullptr;
}
void Header::clear_transaction_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_hash_ != nullptr) {
    delete _impl_.transaction_hash_;
  }
  _impl_.transaction_hash_ = nullptr;
}
void Header::clear_base_fee_per_gas() {
  if (_impl_.base_fee_per_gas_ != nullptr) _impl_.base_fee_per_gas_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Header::clear_withdrawal_hash() {
  if (_impl_.withdrawal_hash_ != nullptr) _impl_.withdrawal_hash_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Header::clear_parent_beacon_block_root() {
  if (_impl_.parent_beacon_block_root_ != nullptr) _impl_.parent_beacon_block_root_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.aura_seal_){}
    , decltype(_impl_.parent_hash_){nullptr}
    , decltype(_impl_.coinbase_){nullptr}
    , decltype(_impl_.state_root_){nullptr}
    , decltype(_impl_.receipt_root_){nullptr}
    , decltype(_impl_.logs_bloom_){nullptr}
    , decltype(_impl_.prev_randao_){nullptr}
    , decltype(_impl_.difficulty_){nullptr}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.ommer_hash_){nullptr}
    , decltype(_impl_.transaction_hash_){nullptr}
    , decltype(_impl_.base_fee_per_gas_){nullptr}
    , decltype(_impl_.withdrawal_hash_){nullptr}
    , decltype(_impl_.parent_beacon_block_root_){nullptr}
    , decltype(_impl_.block_number_){}
    , decltype(_impl_.gas_limit_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.blob_gas_used_){}
    , decltype(_impl_.excess_blob_gas_){}
    , decltype(_impl_.aura_step_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra_data().empty()) {
    _this->_impl_.extra_data_.Set(from._internal_extra_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aura_seal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aura_seal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_aura_seal()) {
    _this->_impl_.aura_seal_.Set(from._internal_aura_seal(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent_hash()) {
    _this->_impl_.parent_hash_ = new ::types::H256(*from._impl_.parent_hash_);
  }
  if (from._internal_has_coinbase()) {
    _this->_impl_.coinbase_ = new ::types::H160(*from._impl_.coinbase_);
  }
  if (from._internal_has_state_root()) {
    _this->_impl_.state_root_ = new ::types::H256(*from._impl_.state_root_);
  }
  if (from._internal_has_receipt_root()) {
    _this->_impl_.receipt_root_ = new ::types::H256(*from._impl_.receipt_root_);
  }
  if (from._internal_has_logs_bloom()) {
    _this->_impl_.logs_bloom_ = new ::types::H2048(*from._impl_.logs_bloom_);
  }
  if (from._internal_has_prev_randao()) {
    _this->_impl_.prev_randao_ = new ::types::H256(*from._impl_.prev_randao_);
  }
  if (from._internal_has_difficulty()) {
    _this->_impl_.difficulty_ = new ::types::H256(*from._impl_.difficulty_);
  }
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  if (from._internal_has_ommer_hash()) {
    _this->_impl_.ommer_hash_ = new ::types::H256(*from._impl_.ommer_hash_);
  }
  if (from._internal_has_transaction_hash()) {
    _this->_impl_.transaction_hash_ = new ::types::H256(*from._impl_.transaction_hash_);
  }
  if (from._internal_has_base_fee_per_gas()) {
    _this->_impl_.base_fee_per_gas_ = new ::types::H256(*from._impl_.base_fee_per_gas_);
  }
  if (from._internal_has_withdrawal_hash()) {
    _this->_impl_.withdrawal_hash_ = new ::types::H256(*from._impl_.withdrawal_hash_);
  }
  if (from._internal_has_parent_beacon_block_root()) {
    _this->_impl_.parent_beacon_block_root_ = new ::types::H256(*from._impl_.parent_beacon_block_root_);
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aura_step_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.aura_step_));
  // @@protoc_insertion_point(copy_constructor:execution.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.aura_seal_){}
    , decltype(_impl_.parent_hash_){nullptr}
    , decltype(_impl_.coinbase_){nullptr}
    , decltype(_impl_.state_root_){nullptr}
    , decltype(_impl_.receipt_root_){nullptr}
    , decltype(_impl_.logs_bloom_){nullptr}
    , decltype(_impl_.prev_randao_){nullptr}
    , decltype(_impl_.difficulty_){nullptr}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.ommer_hash_){nullptr}
    , decltype(_impl_.transaction_hash_){nullptr}
    , decltype(_impl_.base_fee_per_gas_){nullptr}
    , decltype(_impl_.withdrawal_hash_){nullptr}
    , decltype(_impl_.parent_beacon_block_root_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , decltype(_impl_.gas_limit_){uint64_t{0u}}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.blob_gas_used_){uint64_t{0u}}
    , decltype(_impl_.excess_blob_gas_){uint64_t{0u}}
    , decltype(_impl_.aura_step_){uint64_t{0u}}
  };
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aura_seal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aura_seal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:execution.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_data_.Destroy();
  _impl_.aura_seal_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_hash_;
  if (this != internal_default_instance()) delete _impl_.coinbase_;
  if (this != internal_default_instance()) delete _impl_.state_root_;
  if (this != internal_default_instance()) delete _impl_.receipt_root_;
  if (this != internal_default_instance()) delete _impl_.logs_bloom_;
  if (this != internal_default_instance()) delete _impl_.prev_randao_;
  if (this != internal_default_instance()) delete _impl_.difficulty_;
  if (this != internal_default_instance()) delete _impl_.block_hash_;
  if (this != internal_default_instance()) delete _impl_.ommer_hash_;
  if (this != internal_default_instance()) delete _impl_.transaction_hash_;
  if (this != internal_default_instance()) delete _impl_.base_fee_per_gas_;
  if (this != internal_default_instance()) delete _impl_.withdrawal_hash_;
  if (this != internal_default_instance()) delete _impl_.parent_beacon_block_root_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.aura_seal_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.parent_hash_ != nullptr) {
    delete _impl_.parent_hash_;
  }
  _impl_.parent_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coinbase_ != nullptr) {
    delete _impl_.coinbase_;
  }
  _impl_.coinbase_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_root_ != nullptr) {
    delete _impl_.state_root_;
  }
  _impl_.state_root_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.receipt_root_ != nullptr) {
    delete _impl_.receipt_root_;
  }
  _impl_.receipt_root_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.logs_bloom_ != nullptr) {
    delete _impl_.logs_bloom_;
  }
  _impl_.logs_bloom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prev_randao_ != nullptr) {
    delete _impl_.prev_randao_;
  }
  _impl_.prev_randao_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.difficulty_ != nullptr) {
    delete _impl_.difficulty_;
  }
  _impl_.difficulty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ommer_hash_ != nullptr) {
    delete _impl_.ommer_hash_;
  }
  _impl_.ommer_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_hash_ != nullptr) {
    delete _impl_.transaction_hash_;
  }
  _impl_.transaction_hash_ = nullptr;
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.base_fee_per_gas_ != nullptr);
      _impl_.base_fee_per_gas_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.withdrawal_hash_ != nullptr);
      _impl_.withdrawal_hash_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.parent_beacon_block_root_ != nullptr);
      _impl_.parent_beacon_block_root_->Clear();
    }
  }
  ::memset(&_impl_.block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nonce_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.nonce_));
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.blob_gas_used_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.aura_step_) -
        reinterpret_cast<char*>(&_impl_.blob_gas_used_)) + sizeof(_impl_.aura_step_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 parent_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H160 coinbase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coinbase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 state_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 receipt_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H2048 logs_bloom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_logs_bloom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 prev_randao = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_randao(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extra_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 difficulty = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_difficulty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 block_hash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 ommer_hash = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ommer_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 transaction_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 base_fee_per_gas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_fee_per_gas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 withdrawal_hash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 blob_gas_used = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_blob_gas_used(&has_bits);
          _impl_.blob_gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 excess_blob_gas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_excess_blob_gas(&has_bits);
          _impl_.excess_blob_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 parent_beacon_block_root = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_beacon_block_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 aura_step = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_aura_step(&has_bits);
          _impl_.aura_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes aura_seal = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_aura_seal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 parent_hash = 1;
  if (this->_internal_has_parent_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parent_hash(this),
        _Internal::parent_hash(this).GetCachedSize(), target, stream);
  }

  // .types.H160 coinbase = 2;
  if (this->_internal_has_coinbase()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coinbase(this),
        _Internal::coinbase(this).GetCachedSize(), target, stream);
  }

  // .types.H256 state_root = 3;
  if (this->_internal_has_state_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state_root(this),
        _Internal::state_root(this).GetCachedSize(), target, stream);
  }

  // .types.H256 receipt_root = 4;
  if (this->_internal_has_receipt_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::receipt_root(this),
        _Internal::receipt_root(this).GetCachedSize(), target, stream);
  }

  // .types.H2048 logs_bloom = 5;
  if (this->_internal_has_logs_bloom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::logs_bloom(this),
        _Internal::logs_bloom(this).GetCachedSize(), target, stream);
  }

  // .types.H256 prev_randao = 6;
  if (this->_internal_has_prev_randao()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::prev_randao(this),
        _Internal::prev_randao(this).GetCachedSize(), target, stream);
  }

  // uint64 block_number = 7;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_block_number(), target);
  }

  // uint64 gas_limit = 8;
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_limit(), target);
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // uint64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // uint64 nonce = 11;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_nonce(), target);
  }

  // bytes extra_data = 12;
  if (!this->_internal_extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extra_data(), target);
  }

  // .types.H256 difficulty = 13;
  if (this->_internal_has_difficulty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::difficulty(this),
        _Internal::difficulty(this).GetCachedSize(), target, stream);
  }

  // .types.H256 block_hash = 14;
  if (this->_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  // .types.H256 ommer_hash = 15;
  if (this->_internal_has_ommer_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ommer_hash(this),
        _Internal::ommer_hash(this).GetCachedSize(), target, stream);
  }

  // .types.H256 transaction_hash = 16;
  if (this->_internal_has_transaction_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::transaction_hash(this),
        _Internal::transaction_hash(this).GetCachedSize(), target, stream);
  }

  // optional .types.H256 base_fee_per_gas = 17;
  if (_internal_has_base_fee_per_gas()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::base_fee_per_gas(this),
        _Internal::base_fee_per_gas(this).GetCachedSize(), target, stream);
  }

  // optional .types.H256 withdrawal_hash = 18;
  if (_internal_has_withdrawal_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::withdrawal_hash(this),
        _Internal::withdrawal_hash(this).GetCachedSize(), target, stream);
  }

  // optional uint64 blob_gas_used = 19;
  if (_internal_has_blob_gas_used()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_blob_gas_used(), target);
  }

  // optional uint64 excess_blob_gas = 20;
  if (_internal_has_excess_blob_gas()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_excess_blob_gas(), target);
  }

  // optional .types.H256 parent_beacon_block_root = 21;
  if (_internal_has_parent_beacon_block_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::parent_beacon_block_root(this),
        _Internal::parent_beacon_block_root(this).GetCachedSize(), target, stream);
  }

  // optional uint64 aura_step = 22;
  if (_internal_has_aura_step()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_aura_step(), target);
  }

  // optional bytes aura_seal = 23;
  if (_internal_has_aura_seal()) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_aura_seal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes extra_data = 12;
  if (!this->_internal_extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // optional bytes aura_seal = 23;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_aura_seal());
  }

  // .types.H256 parent_hash = 1;
  if (this->_internal_has_parent_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_hash_);
  }

  // .types.H160 coinbase = 2;
  if (this->_internal_has_coinbase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coinbase_);
  }

  // .types.H256 state_root = 3;
  if (this->_internal_has_state_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_root_);
  }

  // .types.H256 receipt_root = 4;
  if (this->_internal_has_receipt_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.receipt_root_);
  }

  // .types.H2048 logs_bloom = 5;
  if (this->_internal_has_logs_bloom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logs_bloom_);
  }

  // .types.H256 prev_randao = 6;
  if (this->_internal_has_prev_randao()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_randao_);
  }

  // .types.H256 difficulty = 13;
  if (this->_internal_has_difficulty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.difficulty_);
  }

  // .types.H256 block_hash = 14;
  if (this->_internal_has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_hash_);
  }

  // .types.H256 ommer_hash = 15;
  if (this->_internal_has_ommer_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ommer_hash_);
  }

  // .types.H256 transaction_hash = 16;
  if (this->_internal_has_transaction_hash()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transaction_hash_);
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional .types.H256 base_fee_per_gas = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_fee_per_gas_);
    }

    // optional .types.H256 withdrawal_hash = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.withdrawal_hash_);
    }

    // optional .types.H256 parent_beacon_block_root = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parent_beacon_block_root_);
    }

  }
  // uint64 block_number = 7;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // uint64 gas_limit = 8;
  if (this->_internal_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_limit());
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // uint64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 nonce = 11;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  if (cached_has_bits & 0x00000070u) {
    // optional uint64 blob_gas_used = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_blob_gas_used());
    }

    // optional uint64 excess_blob_gas = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_excess_blob_gas());
    }

    // optional uint64 aura_step = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_aura_step());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extra_data().empty()) {
    _this->_internal_set_extra_data(from._internal_extra_data());
  }
  if (from._internal_has_aura_seal()) {
    _this->_internal_set_aura_seal(from._internal_aura_seal());
  }
  if (from._internal_has_parent_hash()) {
    _this->_internal_mutable_parent_hash()->::types::H256::MergeFrom(
        from._internal_parent_hash());
  }
  if (from._internal_has_coinbase()) {
    _this->_internal_mutable_coinbase()->::types::H160::MergeFrom(
        from._internal_coinbase());
  }
  if (from._internal_has_state_root()) {
    _this->_internal_mutable_state_root()->::types::H256::MergeFrom(
        from._internal_state_root());
  }
  if (from._internal_has_receipt_root()) {
    _this->_internal_mutable_receipt_root()->::types::H256::MergeFrom(
        from._internal_receipt_root());
  }
  if (from._internal_has_logs_bloom()) {
    _this->_internal_mutable_logs_bloom()->::types::H2048::MergeFrom(
        from._internal_logs_bloom());
  }
  if (from._internal_has_prev_randao()) {
    _this->_internal_mutable_prev_randao()->::types::H256::MergeFrom(
        from._internal_prev_randao());
  }
  if (from._internal_has_difficulty()) {
    _this->_internal_mutable_difficulty()->::types::H256::MergeFrom(
        from._internal_difficulty());
  }
  if (from._internal_has_block_hash()) {
    _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
        from._internal_block_hash());
  }
  if (from._internal_has_ommer_hash()) {
    _this->_internal_mutable_ommer_hash()->::types::H256::MergeFrom(
        from._internal_ommer_hash());
  }
  if (from._internal_has_transaction_hash()) {
    _this->_internal_mutable_transaction_hash()->::types::H256::MergeFrom(
        from._internal_transaction_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_base_fee_per_gas()->::types::H256::MergeFrom(
          from._internal_base_fee_per_gas());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_withdrawal_hash()->::types::H256::MergeFrom(
          from._internal_withdrawal_hash());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_parent_beacon_block_root()->::types::H256::MergeFrom(
          from._internal_parent_beacon_block_root());
    }
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (cached_has_bits & 0x00000070u) {
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.blob_gas_used_ = from._impl_.blob_gas_used_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.excess_blob_gas_ = from._impl_.excess_blob_gas_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.aura_step_ = from._impl_.aura_step_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_data_, lhs_arena,
      &other->_impl_.extra_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aura_seal_, lhs_arena,
      &other->_impl_.aura_seal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.aura_step_)
      + sizeof(Header::_impl_.aura_step_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.parent_hash_)>(
          reinterpret_cast<char*>(&_impl_.parent_hash_),
          reinterpret_cast<char*>(&other->_impl_.parent_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[3]);
}

// ===================================================================

class BlockBody::_Internal {
 public:
  static const ::types::H256& block_hash(const BlockBody* msg);
};

const ::types::H256&
BlockBody::_Internal::block_hash(const BlockBody* msg) {
  return *msg->_impl_.block_hash_;
}
void BlockBody::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
void BlockBody::clear_withdrawals() {
  _impl_.withdrawals_.Clear();
}
BlockBody::BlockBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.BlockBody)
}
BlockBody::BlockBody(const BlockBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.uncles_){from._impl_.uncles_}
    , decltype(_impl_.withdrawals_){from._impl_.withdrawals_}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:execution.BlockBody)
}

inline void BlockBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.uncles_){arena}
    , decltype(_impl_.withdrawals_){arena}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockBody::~BlockBody() {
  // @@protoc_insertion_point(destructor:execution.BlockBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  _impl_.uncles_.~RepeatedPtrField();
  _impl_.withdrawals_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.block_hash_;
}

void BlockBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBody::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.BlockBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.uncles_.Clear();
  _impl_.withdrawals_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
  _impl_.block_number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .execution.Header uncles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uncles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.BlockBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 block_hash = 1;
  if (this->_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  // uint64 block_number = 2;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_number(), target);
  }

  // repeated bytes transactions = 3;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated .execution.Header uncles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uncles_size()); i < n; i++) {
    const auto& repfield = this->_internal_uncles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .types.Withdrawal withdrawals = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_withdrawals_size()); i < n; i++) {
    const auto& repfield = this->_internal_withdrawals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.BlockBody)
  return target;
}

size_t BlockBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.BlockBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.transactions_.size());
  for (int i = 0, n = _impl_.transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.transactions_.Get(i));
  }

  // repeated .execution.Header uncles = 4;
  total_size += 1UL * this->_internal_uncles_size();
  for (const auto& msg : this->_impl_.uncles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .types.Withdrawal withdrawals = 5;
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->_impl_.withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .types.H256 block_hash = 1;
  if (this->_internal_has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_hash_);
  }

  // uint64 block_number = 2;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBody::GetClassData() const { return &_class_data_; }


void BlockBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBody*>(&to_msg);
  auto& from = static_cast<const BlockBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.BlockBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  _this->_impl_.uncles_.MergeFrom(from._impl_.uncles_);
  _this->_impl_.withdrawals_.MergeFrom(from._impl_.withdrawals_);
  if (from._internal_has_block_hash()) {
    _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
        from._internal_block_hash());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBody::CopyFrom(const BlockBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.BlockBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBody::IsInitialized() const {
  return true;
}

void BlockBody::InternalSwap(BlockBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  _impl_.uncles_.InternalSwap(&other->_impl_.uncles_);
  _impl_.withdrawals_.InternalSwap(&other->_impl_.withdrawals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBody, _impl_.block_number_)
      + sizeof(BlockBody::_impl_.block_number_)
      - PROTOBUF_FIELD_OFFSET(BlockBody, _impl_.block_hash_)>(
          reinterpret_cast<char*>(&_impl_.block_hash_),
          reinterpret_cast<char*>(&other->_impl_.block_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[4]);
}

// ===================================================================

class Block::_Internal {
 public:
  static const ::execution::Header& header(const Block* msg);
  static const ::execution::BlockBody& body(const Block* msg);
};

const ::execution::Header&
Block::_Internal::header(const Block* msg) {
  return *msg->_impl_.header_;
}
const ::execution::BlockBody&
Block::_Internal::body(const Block* msg) {
  return *msg->_impl_.body_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::execution::Header(*from._impl_.header_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::execution::BlockBody(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:execution.Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:execution.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.body_;
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .execution.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .execution.BlockBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .execution.BlockBody body = 2;
  if (this->_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .execution.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .execution.BlockBody body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::execution::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::execution::BlockBody::MergeFrom(
        from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.body_)
      + sizeof(Block::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[5]);
}

// ===================================================================

class GetHeaderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHeaderResponse>()._impl_._has_bits_);
  static const ::execution::Header& header(const GetHeaderResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::execution::Header&
GetHeaderResponse::_Internal::header(const GetHeaderResponse* msg) {
  return *msg->_impl_.header_;
}
GetHeaderResponse::GetHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetHeaderResponse)
}
GetHeaderResponse::GetHeaderResponse(const GetHeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHeaderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::execution::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:execution.GetHeaderResponse)
}

inline void GetHeaderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
  };
}

GetHeaderResponse::~GetHeaderResponse() {
  // @@protoc_insertion_point(destructor:execution.GetHeaderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void GetHeaderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetHeaderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeaderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .execution.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHeaderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetHeaderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .execution.Header header = 1;
  if (_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetHeaderResponse)
  return target;
}

size_t GetHeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetHeaderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .execution.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHeaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHeaderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHeaderResponse::GetClassData() const { return &_class_data_; }


void GetHeaderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHeaderResponse*>(&to_msg);
  auto& from = static_cast<const GetHeaderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetHeaderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::execution::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHeaderResponse::CopyFrom(const GetHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeaderResponse::IsInitialized() const {
  return true;
}

void GetHeaderResponse::InternalSwap(GetHeaderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeaderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[6]);
}

// ===================================================================

class GetTDResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTDResponse>()._impl_._has_bits_);
  static const ::types::H256& td(const GetTDResponse* msg);
  static void set_has_td(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
GetTDResponse::_Internal::td(const GetTDResponse* msg) {
  return *msg->_impl_.td_;
}
void GetTDResponse::clear_td() {
  if (_impl_.td_ != nullptr) _impl_.td_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetTDResponse::GetTDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetTDResponse)
}
GetTDResponse::GetTDResponse(const GetTDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.td_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_td()) {
    _this->_impl_.td_ = new ::types::H256(*from._impl_.td_);
  }
  // @@protoc_insertion_point(copy_constructor:execution.GetTDResponse)
}

inline void GetTDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.td_){nullptr}
  };
}

GetTDResponse::~GetTDResponse() {
  // @@protoc_insertion_point(destructor:execution.GetTDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.td_;
}

void GetTDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetTDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.td_ != nullptr);
    _impl_.td_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .types.H256 td = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_td(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetTDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .types.H256 td = 1;
  if (_internal_has_td()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::td(this),
        _Internal::td(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetTDResponse)
  return target;
}

size_t GetTDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetTDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .types.H256 td = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.td_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTDResponse::GetClassData() const { return &_class_data_; }


void GetTDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTDResponse*>(&to_msg);
  auto& from = static_cast<const GetTDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetTDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_td()) {
    _this->_internal_mutable_td()->::types::H256::MergeFrom(
        from._internal_td());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTDResponse::CopyFrom(const GetTDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetTDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTDResponse::IsInitialized() const {
  return true;
}

void GetTDResponse::InternalSwap(GetTDResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.td_, other->_impl_.td_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[7]);
}

// ===================================================================

class GetBodyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBodyResponse>()._impl_._has_bits_);
  static const ::execution::BlockBody& body(const GetBodyResponse* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::execution::BlockBody&
GetBodyResponse::_Internal::body(const GetBodyResponse* msg) {
  return *msg->_impl_.body_;
}
GetBodyResponse::GetBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetBodyResponse)
}
GetBodyResponse::GetBodyResponse(const GetBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBodyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::execution::BlockBody(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:execution.GetBodyResponse)
}

inline void GetBodyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){nullptr}
  };
}

GetBodyResponse::~GetBodyResponse() {
  // @@protoc_insertion_point(destructor:execution.GetBodyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBodyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.body_;
}

void GetBodyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetBodyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.body_ != nullptr);
    _impl_.body_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBodyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .execution.BlockBody body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBodyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetBodyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .execution.BlockBody body = 1;
  if (_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetBodyResponse)
  return target;
}

size_t GetBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetBodyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .execution.BlockBody body = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBodyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBodyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBodyResponse::GetClassData() const { return &_class_data_; }


void GetBodyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBodyResponse*>(&to_msg);
  auto& from = static_cast<const GetBodyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetBodyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::execution::BlockBody::MergeFrom(
        from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBodyResponse::CopyFrom(const GetBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBodyResponse::IsInitialized() const {
  return true;
}

void GetBodyResponse::InternalSwap(GetBodyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.body_, other->_impl_.body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBodyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[8]);
}

// ===================================================================

class GetHeaderHashNumberResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHeaderHashNumberResponse>()._impl_._has_bits_);
  static void set_has_block_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetHeaderHashNumberResponse)
}
GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(const GetHeaderHashNumberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHeaderHashNumberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:execution.GetHeaderHashNumberResponse)
}

inline void GetHeaderHashNumberResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_number_){uint64_t{0u}}
  };
}

GetHeaderHashNumberResponse::~GetHeaderHashNumberResponse() {
  // @@protoc_insertion_point(destructor:execution.GetHeaderHashNumberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHeaderHashNumberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetHeaderHashNumberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHeaderHashNumberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetHeaderHashNumberResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_number_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeaderHashNumberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_block_number(&has_bits);
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHeaderHashNumberResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetHeaderHashNumberResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 block_number = 1;
  if (_internal_has_block_number()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetHeaderHashNumberResponse)
  return target;
}

size_t GetHeaderHashNumberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetHeaderHashNumberResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 block_number = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHeaderHashNumberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHeaderHashNumberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHeaderHashNumberResponse::GetClassData() const { return &_class_data_; }


void GetHeaderHashNumberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHeaderHashNumberResponse*>(&to_msg);
  auto& from = static_cast<const GetHeaderHashNumberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetHeaderHashNumberResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_number()) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHeaderHashNumberResponse::CopyFrom(const GetHeaderHashNumberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetHeaderHashNumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeaderHashNumberResponse::IsInitialized() const {
  return true;
}

void GetHeaderHashNumberResponse::InternalSwap(GetHeaderHashNumberResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.block_number_, other->_impl_.block_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeaderHashNumberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[9]);
}

// ===================================================================

class GetSegmentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSegmentRequest>()._impl_._has_bits_);
  static void set_has_block_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::types::H256& block_hash(const GetSegmentRequest* msg);
  static void set_has_block_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
GetSegmentRequest::_Internal::block_hash(const GetSegmentRequest* msg) {
  return *msg->_impl_.block_hash_;
}
void GetSegmentRequest::clear_block_hash() {
  if (_impl_.block_hash_ != nullptr) _impl_.block_hash_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetSegmentRequest::GetSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetSegmentRequest)
}
GetSegmentRequest::GetSegmentRequest(const GetSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSegmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:execution.GetSegmentRequest)
}

inline void GetSegmentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
  };
}

GetSegmentRequest::~GetSegmentRequest() {
  // @@protoc_insertion_point(destructor:execution.GetSegmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_hash_;
}

void GetSegmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetSegmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.block_hash_ != nullptr);
    _impl_.block_hash_->Clear();
  }
  _impl_.block_number_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_block_number(&has_bits);
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetSegmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 block_number = 1;
  if (_internal_has_block_number()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_number(), target);
  }

  // optional .types.H256 block_hash = 2;
  if (_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetSegmentRequest)
  return target;
}

size_t GetSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetSegmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .types.H256 block_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_hash_);
    }

    // optional uint64 block_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSegmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmentRequest::GetClassData() const { return &_class_data_; }


void GetSegmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSegmentRequest*>(&to_msg);
  auto& from = static_cast<const GetSegmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetSegmentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
          from._internal_block_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.block_number_ = from._impl_.block_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmentRequest::CopyFrom(const GetSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentRequest::IsInitialized() const {
  return true;
}

void GetSegmentRequest::InternalSwap(GetSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSegmentRequest, _impl_.block_number_)
      + sizeof(GetSegmentRequest::_impl_.block_number_)
      - PROTOBUF_FIELD_OFFSET(GetSegmentRequest, _impl_.block_hash_)>(
          reinterpret_cast<char*>(&_impl_.block_hash_),
          reinterpret_cast<char*>(&other->_impl_.block_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[10]);
}

// ===================================================================

class InsertBlocksRequest::_Internal {
 public:
};

InsertBlocksRequest::InsertBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.InsertBlocksRequest)
}
InsertBlocksRequest::InsertBlocksRequest(const InsertBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertBlocksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.InsertBlocksRequest)
}

inline void InsertBlocksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InsertBlocksRequest::~InsertBlocksRequest() {
  // @@protoc_insertion_point(destructor:execution.InsertBlocksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
}

void InsertBlocksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.InsertBlocksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBlocksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .execution.Block blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertBlocksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.InsertBlocksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .execution.Block blocks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.InsertBlocksRequest)
  return target;
}

size_t InsertBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.InsertBlocksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .execution.Block blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertBlocksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertBlocksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertBlocksRequest::GetClassData() const { return &_class_data_; }


void InsertBlocksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertBlocksRequest*>(&to_msg);
  auto& from = static_cast<const InsertBlocksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.InsertBlocksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertBlocksRequest::CopyFrom(const InsertBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.InsertBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBlocksRequest::IsInitialized() const {
  return true;
}

void InsertBlocksRequest::InternalSwap(InsertBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBlocksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[11]);
}

// ===================================================================

class ForkChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<ForkChoice>()._impl_._has_bits_);
  static const ::types::H256& head_block_hash(const ForkChoice* msg);
  static const ::types::H256& finalized_block_hash(const ForkChoice* msg);
  static void set_has_finalized_block_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::types::H256& safe_block_hash(const ForkChoice* msg);
  static void set_has_safe_block_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::types::H256&
ForkChoice::_Internal::head_block_hash(const ForkChoice* msg) {
  return *msg->_impl_.head_block_hash_;
}
const ::types::H256&
ForkChoice::_Internal::finalized_block_hash(const ForkChoice* msg) {
  return *msg->_impl_.finalized_block_hash_;
}
const ::types::H256&
ForkChoice::_Internal::safe_block_hash(const ForkChoice* msg) {
  return *msg->_impl_.safe_block_hash_;
}
void ForkChoice::clear_head_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.head_block_hash_ != nullptr) {
    delete _impl_.head_block_hash_;
  }
  _impl_.head_block_hash_ = nullptr;
}
void ForkChoice::clear_finalized_block_hash() {
  if (_impl_.finalized_block_hash_ != nullptr) _impl_.finalized_block_hash_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ForkChoice::clear_safe_block_hash() {
  if (_impl_.safe_block_hash_ != nullptr) _impl_.safe_block_hash_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ForkChoice::ForkChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.ForkChoice)
}
ForkChoice::ForkChoice(const ForkChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForkChoice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.head_block_hash_){nullptr}
    , decltype(_impl_.finalized_block_hash_){nullptr}
    , decltype(_impl_.safe_block_hash_){nullptr}
    , decltype(_impl_.timeout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head_block_hash()) {
    _this->_impl_.head_block_hash_ = new ::types::H256(*from._impl_.head_block_hash_);
  }
  if (from._internal_has_finalized_block_hash()) {
    _this->_impl_.finalized_block_hash_ = new ::types::H256(*from._impl_.finalized_block_hash_);
  }
  if (from._internal_has_safe_block_hash()) {
    _this->_impl_.safe_block_hash_ = new ::types::H256(*from._impl_.safe_block_hash_);
  }
  _this->_impl_.timeout_ = from._impl_.timeout_;
  // @@protoc_insertion_point(copy_constructor:execution.ForkChoice)
}

inline void ForkChoice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.head_block_hash_){nullptr}
    , decltype(_impl_.finalized_block_hash_){nullptr}
    , decltype(_impl_.safe_block_hash_){nullptr}
    , decltype(_impl_.timeout_){uint64_t{0u}}
  };
}

ForkChoice::~ForkChoice() {
  // @@protoc_insertion_point(destructor:execution.ForkChoice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForkChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.head_block_hash_;
  if (this != internal_default_instance()) delete _impl_.finalized_block_hash_;
  if (this != internal_default_instance()) delete _impl_.safe_block_hash_;
}

void ForkChoice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForkChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ForkChoice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.head_block_hash_ != nullptr) {
    delete _impl_.head_block_hash_;
  }
  _impl_.head_block_hash_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.finalized_block_hash_ != nullptr);
      _impl_.finalized_block_hash_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.safe_block_hash_ != nullptr);
      _impl_.safe_block_hash_->Clear();
    }
  }
  _impl_.timeout_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForkChoice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 head_block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 finalized_block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_finalized_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 safe_block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_safe_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForkChoice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ForkChoice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 head_block_hash = 1;
  if (this->_internal_has_head_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head_block_hash(this),
        _Internal::head_block_hash(this).GetCachedSize(), target, stream);
  }

  // uint64 timeout = 2;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout(), target);
  }

  // optional .types.H256 finalized_block_hash = 3;
  if (_internal_has_finalized_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::finalized_block_hash(this),
        _Internal::finalized_block_hash(this).GetCachedSize(), target, stream);
  }

  // optional .types.H256 safe_block_hash = 4;
  if (_internal_has_safe_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::safe_block_hash(this),
        _Internal::safe_block_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ForkChoice)
  return target;
}

size_t ForkChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ForkChoice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 head_block_hash = 1;
  if (this->_internal_has_head_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_block_hash_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .types.H256 finalized_block_hash = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.finalized_block_hash_);
    }

    // optional .types.H256 safe_block_hash = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.safe_block_hash_);
    }

  }
  // uint64 timeout = 2;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForkChoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForkChoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForkChoice::GetClassData() const { return &_class_data_; }


void ForkChoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForkChoice*>(&to_msg);
  auto& from = static_cast<const ForkChoice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.ForkChoice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head_block_hash()) {
    _this->_internal_mutable_head_block_hash()->::types::H256::MergeFrom(
        from._internal_head_block_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_finalized_block_hash()->::types::H256::MergeFrom(
          from._internal_finalized_block_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_safe_block_hash()->::types::H256::MergeFrom(
          from._internal_safe_block_hash());
    }
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForkChoice::CopyFrom(const ForkChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ForkChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkChoice::IsInitialized() const {
  return true;
}

void ForkChoice::InternalSwap(ForkChoice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForkChoice, _impl_.timeout_)
      + sizeof(ForkChoice::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(ForkChoice, _impl_.head_block_hash_)>(
          reinterpret_cast<char*>(&_impl_.head_block_hash_),
          reinterpret_cast<char*>(&other->_impl_.head_block_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForkChoice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[12]);
}

// ===================================================================

class InsertionResult::_Internal {
 public:
};

InsertionResult::InsertionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.InsertionResult)
}
InsertionResult::InsertionResult(const InsertionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:execution.InsertionResult)
}

inline void InsertionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InsertionResult::~InsertionResult() {
  // @@protoc_insertion_point(destructor:execution.InsertionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InsertionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.InsertionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .execution.ExecutionStatus result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::execution::ExecutionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.InsertionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.ExecutionStatus result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.InsertionResult)
  return target;
}

size_t InsertionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.InsertionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .execution.ExecutionStatus result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertionResult::GetClassData() const { return &_class_data_; }


void InsertionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertionResult*>(&to_msg);
  auto& from = static_cast<const InsertionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.InsertionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertionResult::CopyFrom(const InsertionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.InsertionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertionResult::IsInitialized() const {
  return true;
}

void InsertionResult::InternalSwap(InsertionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[13]);
}

// ===================================================================

class ValidationRequest::_Internal {
 public:
  static const ::types::H256& hash(const ValidationRequest* msg);
};

const ::types::H256&
ValidationRequest::_Internal::hash(const ValidationRequest* msg) {
  return *msg->_impl_.hash_;
}
void ValidationRequest::clear_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.hash_ != nullptr) {
    delete _impl_.hash_;
  }
  _impl_.hash_ = nullptr;
}
ValidationRequest::ValidationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.ValidationRequest)
}
ValidationRequest::ValidationRequest(const ValidationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){nullptr}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hash()) {
    _this->_impl_.hash_ = new ::types::H256(*from._impl_.hash_);
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:execution.ValidationRequest)
}

inline void ValidationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){nullptr}
    , decltype(_impl_.number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidationRequest::~ValidationRequest() {
  // @@protoc_insertion_point(destructor:execution.ValidationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hash_;
}

void ValidationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ValidationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hash_ != nullptr) {
    delete _impl_.hash_;
  }
  _impl_.hash_ = nullptr;
  _impl_.number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ValidationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 hash = 1;
  if (this->_internal_has_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hash(this),
        _Internal::hash(this).GetCachedSize(), target, stream);
  }

  // uint64 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ValidationRequest)
  return target;
}

size_t ValidationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ValidationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 hash = 1;
  if (this->_internal_has_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hash_);
  }

  // uint64 number = 2;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidationRequest::GetClassData() const { return &_class_data_; }


void ValidationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidationRequest*>(&to_msg);
  auto& from = static_cast<const ValidationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.ValidationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hash()) {
    _this->_internal_mutable_hash()->::types::H256::MergeFrom(
        from._internal_hash());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidationRequest::CopyFrom(const ValidationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ValidationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationRequest::IsInitialized() const {
  return true;
}

void ValidationRequest::InternalSwap(ValidationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidationRequest, _impl_.number_)
      + sizeof(ValidationRequest::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(ValidationRequest, _impl_.hash_)>(
          reinterpret_cast<char*>(&_impl_.hash_),
          reinterpret_cast<char*>(&other->_impl_.hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[14]);
}

// ===================================================================

class AssembleBlockRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AssembleBlockRequest>()._impl_._has_bits_);
  static const ::types::H256& parent_hash(const AssembleBlockRequest* msg);
  static const ::types::H256& prev_randao(const AssembleBlockRequest* msg);
  static const ::types::H160& suggested_fee_recipient(const AssembleBlockRequest* msg);
  static const ::types::H256& parent_beacon_block_root(const AssembleBlockRequest* msg);
  static void set_has_parent_beacon_block_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
AssembleBlockRequest::_Internal::parent_hash(const AssembleBlockRequest* msg) {
  return *msg->_impl_.parent_hash_;
}
const ::types::H256&
AssembleBlockRequest::_Internal::prev_randao(const AssembleBlockRequest* msg) {
  return *msg->_impl_.prev_randao_;
}
const ::types::H160&
AssembleBlockRequest::_Internal::suggested_fee_recipient(const AssembleBlockRequest* msg) {
  return *msg->_impl_.suggested_fee_recipient_;
}
const ::types::H256&
AssembleBlockRequest::_Internal::parent_beacon_block_root(const AssembleBlockRequest* msg) {
  return *msg->_impl_.parent_beacon_block_root_;
}
void AssembleBlockRequest::clear_parent_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.parent_hash_ != nullptr) {
    delete _impl_.parent_hash_;
  }
  _impl_.parent_hash_ = nullptr;
}
void AssembleBlockRequest::clear_prev_randao() {
  if (GetArenaForAllocation() == nullptr && _impl_.prev_randao_ != nullptr) {
    delete _impl_.prev_randao_;
  }
  _impl_.prev_randao_ = nullptr;
}
void AssembleBlockRequest::clear_suggested_fee_recipient() {
  if (GetArenaForAllocation() == nullptr && _impl_.suggested_fee_recipient_ != nullptr) {
    delete _impl_.suggested_fee_recipient_;
  }
  _impl_.suggested_fee_recipient_ = nullptr;
}
void AssembleBlockRequest::clear_withdrawals() {
  _impl_.withdrawals_.Clear();
}
void AssembleBlockRequest::clear_parent_beacon_block_root() {
  if (_impl_.parent_beacon_block_root_ != nullptr) _impl_.parent_beacon_block_root_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AssembleBlockRequest::AssembleBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.AssembleBlockRequest)
}
AssembleBlockRequest::AssembleBlockRequest(const AssembleBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssembleBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.withdrawals_){from._impl_.withdrawals_}
    , decltype(_impl_.parent_hash_){nullptr}
    , decltype(_impl_.prev_randao_){nullptr}
    , decltype(_impl_.suggested_fee_recipient_){nullptr}
    , decltype(_impl_.parent_beacon_block_root_){nullptr}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent_hash()) {
    _this->_impl_.parent_hash_ = new ::types::H256(*from._impl_.parent_hash_);
  }
  if (from._internal_has_prev_randao()) {
    _this->_impl_.prev_randao_ = new ::types::H256(*from._impl_.prev_randao_);
  }
  if (from._internal_has_suggested_fee_recipient()) {
    _this->_impl_.suggested_fee_recipient_ = new ::types::H160(*from._impl_.suggested_fee_recipient_);
  }
  if (from._internal_has_parent_beacon_block_root()) {
    _this->_impl_.parent_beacon_block_root_ = new ::types::H256(*from._impl_.parent_beacon_block_root_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:execution.AssembleBlockRequest)
}

inline void AssembleBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.withdrawals_){arena}
    , decltype(_impl_.parent_hash_){nullptr}
    , decltype(_impl_.prev_randao_){nullptr}
    , decltype(_impl_.suggested_fee_recipient_){nullptr}
    , decltype(_impl_.parent_beacon_block_root_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
  };
}

AssembleBlockRequest::~AssembleBlockRequest() {
  // @@protoc_insertion_point(destructor:execution.AssembleBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssembleBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.withdrawals_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_hash_;
  if (this != internal_default_instance()) delete _impl_.prev_randao_;
  if (this != internal_default_instance()) delete _impl_.suggested_fee_recipient_;
  if (this != internal_default_instance()) delete _impl_.parent_beacon_block_root_;
}

void AssembleBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssembleBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.AssembleBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.withdrawals_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.parent_hash_ != nullptr) {
    delete _impl_.parent_hash_;
  }
  _impl_.parent_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prev_randao_ != nullptr) {
    delete _impl_.prev_randao_;
  }
  _impl_.prev_randao_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.suggested_fee_recipient_ != nullptr) {
    delete _impl_.suggested_fee_recipient_;
  }
  _impl_.suggested_fee_recipient_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.parent_beacon_block_root_ != nullptr);
    _impl_.parent_beacon_block_root_->Clear();
  }
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssembleBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 parent_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 prev_randao = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_randao(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H160 suggested_fee_recipient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggested_fee_recipient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .types.H256 parent_beacon_block_root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_beacon_block_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssembleBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.AssembleBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 parent_hash = 1;
  if (this->_internal_has_parent_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parent_hash(this),
        _Internal::parent_hash(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .types.H256 prev_randao = 3;
  if (this->_internal_has_prev_randao()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::prev_randao(this),
        _Internal::prev_randao(this).GetCachedSize(), target, stream);
  }

  // .types.H160 suggested_fee_recipient = 4;
  if (this->_internal_has_suggested_fee_recipient()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::suggested_fee_recipient(this),
        _Internal::suggested_fee_recipient(this).GetCachedSize(), target, stream);
  }

  // repeated .types.Withdrawal withdrawals = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_withdrawals_size()); i < n; i++) {
    const auto& repfield = this->_internal_withdrawals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .types.H256 parent_beacon_block_root = 6;
  if (_internal_has_parent_beacon_block_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::parent_beacon_block_root(this),
        _Internal::parent_beacon_block_root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.AssembleBlockRequest)
  return target;
}

size_t AssembleBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.AssembleBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.Withdrawal withdrawals = 5;
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->_impl_.withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .types.H256 parent_hash = 1;
  if (this->_internal_has_parent_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_hash_);
  }

  // .types.H256 prev_randao = 3;
  if (this->_internal_has_prev_randao()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_randao_);
  }

  // .types.H160 suggested_fee_recipient = 4;
  if (this->_internal_has_suggested_fee_recipient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.suggested_fee_recipient_);
  }

  // optional .types.H256 parent_beacon_block_root = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_beacon_block_root_);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssembleBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssembleBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssembleBlockRequest::GetClassData() const { return &_class_data_; }


void AssembleBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssembleBlockRequest*>(&to_msg);
  auto& from = static_cast<const AssembleBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.AssembleBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.withdrawals_.MergeFrom(from._impl_.withdrawals_);
  if (from._internal_has_parent_hash()) {
    _this->_internal_mutable_parent_hash()->::types::H256::MergeFrom(
        from._internal_parent_hash());
  }
  if (from._internal_has_prev_randao()) {
    _this->_internal_mutable_prev_randao()->::types::H256::MergeFrom(
        from._internal_prev_randao());
  }
  if (from._internal_has_suggested_fee_recipient()) {
    _this->_internal_mutable_suggested_fee_recipient()->::types::H160::MergeFrom(
        from._internal_suggested_fee_recipient());
  }
  if (from._internal_has_parent_beacon_block_root()) {
    _this->_internal_mutable_parent_beacon_block_root()->::types::H256::MergeFrom(
        from._internal_parent_beacon_block_root());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssembleBlockRequest::CopyFrom(const AssembleBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.AssembleBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssembleBlockRequest::IsInitialized() const {
  return true;
}

void AssembleBlockRequest::InternalSwap(AssembleBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.withdrawals_.InternalSwap(&other->_impl_.withdrawals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssembleBlockRequest, _impl_.timestamp_)
      + sizeof(AssembleBlockRequest::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(AssembleBlockRequest, _impl_.parent_hash_)>(
          reinterpret_cast<char*>(&_impl_.parent_hash_),
          reinterpret_cast<char*>(&other->_impl_.parent_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssembleBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[15]);
}

// ===================================================================

class AssembleBlockResponse::_Internal {
 public:
};

AssembleBlockResponse::AssembleBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.AssembleBlockResponse)
}
AssembleBlockResponse::AssembleBlockResponse(const AssembleBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssembleBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.busy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.busy_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.busy_));
  // @@protoc_insertion_point(copy_constructor:execution.AssembleBlockResponse)
}

inline void AssembleBlockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.busy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssembleBlockResponse::~AssembleBlockResponse() {
  // @@protoc_insertion_point(destructor:execution.AssembleBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssembleBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssembleBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssembleBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.AssembleBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.busy_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.busy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssembleBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool busy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.busy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssembleBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.AssembleBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // bool busy = 2;
  if (this->_internal_busy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_busy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.AssembleBlockResponse)
  return target;
}

size_t AssembleBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.AssembleBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // bool busy = 2;
  if (this->_internal_busy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssembleBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssembleBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssembleBlockResponse::GetClassData() const { return &_class_data_; }


void AssembleBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssembleBlockResponse*>(&to_msg);
  auto& from = static_cast<const AssembleBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.AssembleBlockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_busy() != 0) {
    _this->_internal_set_busy(from._internal_busy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssembleBlockResponse::CopyFrom(const AssembleBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.AssembleBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssembleBlockResponse::IsInitialized() const {
  return true;
}

void AssembleBlockResponse::InternalSwap(AssembleBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssembleBlockResponse, _impl_.busy_)
      + sizeof(AssembleBlockResponse::_impl_.busy_)
      - PROTOBUF_FIELD_OFFSET(AssembleBlockResponse, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssembleBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[16]);
}

// ===================================================================

class GetAssembledBlockRequest::_Internal {
 public:
};

GetAssembledBlockRequest::GetAssembledBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetAssembledBlockRequest)
}
GetAssembledBlockRequest::GetAssembledBlockRequest(const GetAssembledBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssembledBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:execution.GetAssembledBlockRequest)
}

inline void GetAssembledBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAssembledBlockRequest::~GetAssembledBlockRequest() {
  // @@protoc_insertion_point(destructor:execution.GetAssembledBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssembledBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetAssembledBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssembledBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetAssembledBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssembledBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssembledBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetAssembledBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetAssembledBlockRequest)
  return target;
}

size_t GetAssembledBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetAssembledBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssembledBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssembledBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssembledBlockRequest::GetClassData() const { return &_class_data_; }


void GetAssembledBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssembledBlockRequest*>(&to_msg);
  auto& from = static_cast<const GetAssembledBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetAssembledBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssembledBlockRequest::CopyFrom(const GetAssembledBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetAssembledBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssembledBlockRequest::IsInitialized() const {
  return true;
}

void GetAssembledBlockRequest::InternalSwap(GetAssembledBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssembledBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[17]);
}

// ===================================================================

class AssembledBlockData::_Internal {
 public:
  static const ::types::ExecutionPayload& execution_payload(const AssembledBlockData* msg);
  static const ::types::H256& block_value(const AssembledBlockData* msg);
  static const ::types::BlobsBundleV1& blobs_bundle(const AssembledBlockData* msg);
};

const ::types::ExecutionPayload&
AssembledBlockData::_Internal::execution_payload(const AssembledBlockData* msg) {
  return *msg->_impl_.execution_payload_;
}
const ::types::H256&
AssembledBlockData::_Internal::block_value(const AssembledBlockData* msg) {
  return *msg->_impl_.block_value_;
}
const ::types::BlobsBundleV1&
AssembledBlockData::_Internal::blobs_bundle(const AssembledBlockData* msg) {
  return *msg->_impl_.blobs_bundle_;
}
void AssembledBlockData::clear_execution_payload() {
  if (GetArenaForAllocation() == nullptr && _impl_.execution_payload_ != nullptr) {
    delete _impl_.execution_payload_;
  }
  _impl_.execution_payload_ = nullptr;
}
void AssembledBlockData::clear_block_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_value_ != nullptr) {
    delete _impl_.block_value_;
  }
  _impl_.block_value_ = nullptr;
}
void AssembledBlockData::clear_blobs_bundle() {
  if (GetArenaForAllocation() == nullptr && _impl_.blobs_bundle_ != nullptr) {
    delete _impl_.blobs_bundle_;
  }
  _impl_.blobs_bundle_ = nullptr;
}
AssembledBlockData::AssembledBlockData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.AssembledBlockData)
}
AssembledBlockData::AssembledBlockData(const AssembledBlockData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssembledBlockData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.execution_payload_){nullptr}
    , decltype(_impl_.block_value_){nullptr}
    , decltype(_impl_.blobs_bundle_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_execution_payload()) {
    _this->_impl_.execution_payload_ = new ::types::ExecutionPayload(*from._impl_.execution_payload_);
  }
  if (from._internal_has_block_value()) {
    _this->_impl_.block_value_ = new ::types::H256(*from._impl_.block_value_);
  }
  if (from._internal_has_blobs_bundle()) {
    _this->_impl_.blobs_bundle_ = new ::types::BlobsBundleV1(*from._impl_.blobs_bundle_);
  }
  // @@protoc_insertion_point(copy_constructor:execution.AssembledBlockData)
}

inline void AssembledBlockData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.execution_payload_){nullptr}
    , decltype(_impl_.block_value_){nullptr}
    , decltype(_impl_.blobs_bundle_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssembledBlockData::~AssembledBlockData() {
  // @@protoc_insertion_point(destructor:execution.AssembledBlockData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssembledBlockData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.execution_payload_;
  if (this != internal_default_instance()) delete _impl_.block_value_;
  if (this != internal_default_instance()) delete _impl_.blobs_bundle_;
}

void AssembledBlockData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssembledBlockData::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.AssembledBlockData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.execution_payload_ != nullptr) {
    delete _impl_.execution_payload_;
  }
  _impl_.execution_payload_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.block_value_ != nullptr) {
    delete _impl_.block_value_;
  }
  _impl_.block_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blobs_bundle_ != nullptr) {
    delete _impl_.blobs_bundle_;
  }
  _impl_.blobs_bundle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssembledBlockData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.ExecutionPayload execution_payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 block_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.BlobsBundleV1 blobs_bundle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blobs_bundle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssembledBlockData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.AssembledBlockData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.ExecutionPayload execution_payload = 1;
  if (this->_internal_has_execution_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::execution_payload(this),
        _Internal::execution_payload(this).GetCachedSize(), target, stream);
  }

  // .types.H256 block_value = 2;
  if (this->_internal_has_block_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::block_value(this),
        _Internal::block_value(this).GetCachedSize(), target, stream);
  }

  // .types.BlobsBundleV1 blobs_bundle = 3;
  if (this->_internal_has_blobs_bundle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::blobs_bundle(this),
        _Internal::blobs_bundle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.AssembledBlockData)
  return target;
}

size_t AssembledBlockData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.AssembledBlockData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.ExecutionPayload execution_payload = 1;
  if (this->_internal_has_execution_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.execution_payload_);
  }

  // .types.H256 block_value = 2;
  if (this->_internal_has_block_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_value_);
  }

  // .types.BlobsBundleV1 blobs_bundle = 3;
  if (this->_internal_has_blobs_bundle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blobs_bundle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssembledBlockData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssembledBlockData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssembledBlockData::GetClassData() const { return &_class_data_; }


void AssembledBlockData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssembledBlockData*>(&to_msg);
  auto& from = static_cast<const AssembledBlockData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.AssembledBlockData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_execution_payload()) {
    _this->_internal_mutable_execution_payload()->::types::ExecutionPayload::MergeFrom(
        from._internal_execution_payload());
  }
  if (from._internal_has_block_value()) {
    _this->_internal_mutable_block_value()->::types::H256::MergeFrom(
        from._internal_block_value());
  }
  if (from._internal_has_blobs_bundle()) {
    _this->_internal_mutable_blobs_bundle()->::types::BlobsBundleV1::MergeFrom(
        from._internal_blobs_bundle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssembledBlockData::CopyFrom(const AssembledBlockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.AssembledBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssembledBlockData::IsInitialized() const {
  return true;
}

void AssembledBlockData::InternalSwap(AssembledBlockData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssembledBlockData, _impl_.blobs_bundle_)
      + sizeof(AssembledBlockData::_impl_.blobs_bundle_)
      - PROTOBUF_FIELD_OFFSET(AssembledBlockData, _impl_.execution_payload_)>(
          reinterpret_cast<char*>(&_impl_.execution_payload_),
          reinterpret_cast<char*>(&other->_impl_.execution_payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssembledBlockData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[18]);
}

// ===================================================================

class GetAssembledBlockResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAssembledBlockResponse>()._impl_._has_bits_);
  static const ::execution::AssembledBlockData& data(const GetAssembledBlockResponse* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::execution::AssembledBlockData&
GetAssembledBlockResponse::_Internal::data(const GetAssembledBlockResponse* msg) {
  return *msg->_impl_.data_;
}
GetAssembledBlockResponse::GetAssembledBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetAssembledBlockResponse)
}
GetAssembledBlockResponse::GetAssembledBlockResponse(const GetAssembledBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssembledBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.busy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::execution::AssembledBlockData(*from._impl_.data_);
  }
  _this->_impl_.busy_ = from._impl_.busy_;
  // @@protoc_insertion_point(copy_constructor:execution.GetAssembledBlockResponse)
}

inline void GetAssembledBlockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.busy_){false}
  };
}

GetAssembledBlockResponse::~GetAssembledBlockResponse() {
  // @@protoc_insertion_point(destructor:execution.GetAssembledBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssembledBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GetAssembledBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssembledBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetAssembledBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.busy_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssembledBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .execution.AssembledBlockData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool busy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.busy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAssembledBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetAssembledBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .execution.AssembledBlockData data = 1;
  if (_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // bool busy = 2;
  if (this->_internal_busy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_busy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetAssembledBlockResponse)
  return target;
}

size_t GetAssembledBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetAssembledBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .execution.AssembledBlockData data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // bool busy = 2;
  if (this->_internal_busy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssembledBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssembledBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssembledBlockResponse::GetClassData() const { return &_class_data_; }


void GetAssembledBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssembledBlockResponse*>(&to_msg);
  auto& from = static_cast<const GetAssembledBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetAssembledBlockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::execution::AssembledBlockData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_busy() != 0) {
    _this->_internal_set_busy(from._internal_busy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssembledBlockResponse::CopyFrom(const GetAssembledBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetAssembledBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssembledBlockResponse::IsInitialized() const {
  return true;
}

void GetAssembledBlockResponse::InternalSwap(GetAssembledBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssembledBlockResponse, _impl_.busy_)
      + sizeof(GetAssembledBlockResponse::_impl_.busy_)
      - PROTOBUF_FIELD_OFFSET(GetAssembledBlockResponse, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssembledBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[19]);
}

// ===================================================================

class GetBodiesBatchResponse::_Internal {
 public:
};

GetBodiesBatchResponse::GetBodiesBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetBodiesBatchResponse)
}
GetBodiesBatchResponse::GetBodiesBatchResponse(const GetBodiesBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBodiesBatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bodies_){from._impl_.bodies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.GetBodiesBatchResponse)
}

inline void GetBodiesBatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bodies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBodiesBatchResponse::~GetBodiesBatchResponse() {
  // @@protoc_insertion_point(destructor:execution.GetBodiesBatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBodiesBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bodies_.~RepeatedPtrField();
}

void GetBodiesBatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBodiesBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetBodiesBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bodies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBodiesBatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .execution.BlockBody bodies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBodiesBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetBodiesBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .execution.BlockBody bodies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bodies_size()); i < n; i++) {
    const auto& repfield = this->_internal_bodies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetBodiesBatchResponse)
  return target;
}

size_t GetBodiesBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetBodiesBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .execution.BlockBody bodies = 1;
  total_size += 1UL * this->_internal_bodies_size();
  for (const auto& msg : this->_impl_.bodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBodiesBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBodiesBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBodiesBatchResponse::GetClassData() const { return &_class_data_; }


void GetBodiesBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBodiesBatchResponse*>(&to_msg);
  auto& from = static_cast<const GetBodiesBatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetBodiesBatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bodies_.MergeFrom(from._impl_.bodies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBodiesBatchResponse::CopyFrom(const GetBodiesBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetBodiesBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBodiesBatchResponse::IsInitialized() const {
  return true;
}

void GetBodiesBatchResponse::InternalSwap(GetBodiesBatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bodies_.InternalSwap(&other->_impl_.bodies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBodiesBatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[20]);
}

// ===================================================================

class GetBodiesByHashesRequest::_Internal {
 public:
};

void GetBodiesByHashesRequest::clear_hashes() {
  _impl_.hashes_.Clear();
}
GetBodiesByHashesRequest::GetBodiesByHashesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetBodiesByHashesRequest)
}
GetBodiesByHashesRequest::GetBodiesByHashesRequest(const GetBodiesByHashesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBodiesByHashesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){from._impl_.hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.GetBodiesByHashesRequest)
}

inline void GetBodiesByHashesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBodiesByHashesRequest::~GetBodiesByHashesRequest() {
  // @@protoc_insertion_point(destructor:execution.GetBodiesByHashesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBodiesByHashesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashes_.~RepeatedPtrField();
}

void GetBodiesByHashesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBodiesByHashesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetBodiesByHashesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBodiesByHashesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.H256 hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBodiesByHashesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetBodiesByHashesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hashes_size()); i < n; i++) {
    const auto& repfield = this->_internal_hashes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetBodiesByHashesRequest)
  return target;
}

size_t GetBodiesByHashesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetBodiesByHashesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->_impl_.hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBodiesByHashesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBodiesByHashesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBodiesByHashesRequest::GetClassData() const { return &_class_data_; }


void GetBodiesByHashesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBodiesByHashesRequest*>(&to_msg);
  auto& from = static_cast<const GetBodiesByHashesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetBodiesByHashesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashes_.MergeFrom(from._impl_.hashes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBodiesByHashesRequest::CopyFrom(const GetBodiesByHashesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetBodiesByHashesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBodiesByHashesRequest::IsInitialized() const {
  return true;
}

void GetBodiesByHashesRequest::InternalSwap(GetBodiesByHashesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashes_.InternalSwap(&other->_impl_.hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBodiesByHashesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[21]);
}

// ===================================================================

class GetBodiesByRangeRequest::_Internal {
 public:
};

GetBodiesByRangeRequest::GetBodiesByRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.GetBodiesByRangeRequest)
}
GetBodiesByRangeRequest::GetBodiesByRangeRequest(const GetBodiesByRangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBodiesByRangeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:execution.GetBodiesByRangeRequest)
}

inline void GetBodiesByRangeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){uint64_t{0u}}
    , decltype(_impl_.count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBodiesByRangeRequest::~GetBodiesByRangeRequest() {
  // @@protoc_insertion_point(destructor:execution.GetBodiesByRangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBodiesByRangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBodiesByRangeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBodiesByRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetBodiesByRangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBodiesByRangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBodiesByRangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetBodiesByRangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start(), target);
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetBodiesByRangeRequest)
  return target;
}

size_t GetBodiesByRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetBodiesByRangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBodiesByRangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBodiesByRangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBodiesByRangeRequest::GetClassData() const { return &_class_data_; }


void GetBodiesByRangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBodiesByRangeRequest*>(&to_msg);
  auto& from = static_cast<const GetBodiesByRangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.GetBodiesByRangeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBodiesByRangeRequest::CopyFrom(const GetBodiesByRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetBodiesByRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBodiesByRangeRequest::IsInitialized() const {
  return true;
}

void GetBodiesByRangeRequest::InternalSwap(GetBodiesByRangeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBodiesByRangeRequest, _impl_.count_)
      + sizeof(GetBodiesByRangeRequest::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(GetBodiesByRangeRequest, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBodiesByRangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[22]);
}

// ===================================================================

class ReadyResponse::_Internal {
 public:
};

ReadyResponse::ReadyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.ReadyResponse)
}
ReadyResponse::ReadyResponse(const ReadyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ready_ = from._impl_.ready_;
  // @@protoc_insertion_point(copy_constructor:execution.ReadyResponse)
}

inline void ReadyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadyResponse::~ReadyResponse() {
  // @@protoc_insertion_point(destructor:execution.ReadyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ReadyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ReadyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ReadyResponse)
  return target;
}

size_t ReadyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ReadyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadyResponse::GetClassData() const { return &_class_data_; }


void ReadyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadyResponse*>(&to_msg);
  auto& from = static_cast<const ReadyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.ReadyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ready() != 0) {
    _this->_internal_set_ready(from._internal_ready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadyResponse::CopyFrom(const ReadyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ReadyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyResponse::IsInitialized() const {
  return true;
}

void ReadyResponse::InternalSwap(ReadyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ready_, other->_impl_.ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[23]);
}

// ===================================================================

class FrozenBlocksResponse::_Internal {
 public:
};

FrozenBlocksResponse::FrozenBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.FrozenBlocksResponse)
}
FrozenBlocksResponse::FrozenBlocksResponse(const FrozenBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrozenBlocksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frozen_blocks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.frozen_blocks_ = from._impl_.frozen_blocks_;
  // @@protoc_insertion_point(copy_constructor:execution.FrozenBlocksResponse)
}

inline void FrozenBlocksResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frozen_blocks_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrozenBlocksResponse::~FrozenBlocksResponse() {
  // @@protoc_insertion_point(destructor:execution.FrozenBlocksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrozenBlocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrozenBlocksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrozenBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.FrozenBlocksResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frozen_blocks_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrozenBlocksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 frozen_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frozen_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrozenBlocksResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.FrozenBlocksResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frozen_blocks = 1;
  if (this->_internal_frozen_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frozen_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.FrozenBlocksResponse)
  return target;
}

size_t FrozenBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.FrozenBlocksResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 frozen_blocks = 1;
  if (this->_internal_frozen_blocks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frozen_blocks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrozenBlocksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrozenBlocksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrozenBlocksResponse::GetClassData() const { return &_class_data_; }


void FrozenBlocksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrozenBlocksResponse*>(&to_msg);
  auto& from = static_cast<const FrozenBlocksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.FrozenBlocksResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_frozen_blocks() != 0) {
    _this->_internal_set_frozen_blocks(from._internal_frozen_blocks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrozenBlocksResponse::CopyFrom(const FrozenBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.FrozenBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrozenBlocksResponse::IsInitialized() const {
  return true;
}

void FrozenBlocksResponse::InternalSwap(FrozenBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.frozen_blocks_, other->_impl_.frozen_blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrozenBlocksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[24]);
}

// ===================================================================

class HasBlockResponse::_Internal {
 public:
};

HasBlockResponse::HasBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:execution.HasBlockResponse)
}
HasBlockResponse::HasBlockResponse(const HasBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HasBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.has_block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.has_block_ = from._impl_.has_block_;
  // @@protoc_insertion_point(copy_constructor:execution.HasBlockResponse)
}

inline void HasBlockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.has_block_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HasBlockResponse::~HasBlockResponse() {
  // @@protoc_insertion_point(destructor:execution.HasBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HasBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.HasBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.has_block_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.has_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HasBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.HasBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_block = 1;
  if (this->_internal_has_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.HasBlockResponse)
  return target;
}

size_t HasBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.HasBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool has_block = 1;
  if (this->_internal_has_block() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasBlockResponse::GetClassData() const { return &_class_data_; }


void HasBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasBlockResponse*>(&to_msg);
  auto& from = static_cast<const HasBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:execution.HasBlockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block() != 0) {
    _this->_internal_set_has_block(from._internal_has_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasBlockResponse::CopyFrom(const HasBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.HasBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasBlockResponse::IsInitialized() const {
  return true;
}

void HasBlockResponse::InternalSwap(HasBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.has_block_, other->_impl_.has_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_execution_2fexecution_2eproto_getter, &descriptor_table_execution_2fexecution_2eproto_once,
      file_level_metadata_execution_2fexecution_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace execution
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::execution::ForkChoiceReceipt*
Arena::CreateMaybeMessage< ::execution::ForkChoiceReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ForkChoiceReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::ValidationReceipt*
Arena::CreateMaybeMessage< ::execution::ValidationReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ValidationReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::IsCanonicalResponse*
Arena::CreateMaybeMessage< ::execution::IsCanonicalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::IsCanonicalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::Header*
Arena::CreateMaybeMessage< ::execution::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::BlockBody*
Arena::CreateMaybeMessage< ::execution::BlockBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::BlockBody >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::Block*
Arena::CreateMaybeMessage< ::execution::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetHeaderResponse*
Arena::CreateMaybeMessage< ::execution::GetHeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetHeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetTDResponse*
Arena::CreateMaybeMessage< ::execution::GetTDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetTDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetBodyResponse*
Arena::CreateMaybeMessage< ::execution::GetBodyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetHeaderHashNumberResponse*
Arena::CreateMaybeMessage< ::execution::GetHeaderHashNumberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetHeaderHashNumberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetSegmentRequest*
Arena::CreateMaybeMessage< ::execution::GetSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::InsertBlocksRequest*
Arena::CreateMaybeMessage< ::execution::InsertBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::InsertBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::ForkChoice*
Arena::CreateMaybeMessage< ::execution::ForkChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ForkChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::InsertionResult*
Arena::CreateMaybeMessage< ::execution::InsertionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::InsertionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::ValidationRequest*
Arena::CreateMaybeMessage< ::execution::ValidationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ValidationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::AssembleBlockRequest*
Arena::CreateMaybeMessage< ::execution::AssembleBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::AssembleBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::AssembleBlockResponse*
Arena::CreateMaybeMessage< ::execution::AssembleBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::AssembleBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetAssembledBlockRequest*
Arena::CreateMaybeMessage< ::execution::GetAssembledBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetAssembledBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::AssembledBlockData*
Arena::CreateMaybeMessage< ::execution::AssembledBlockData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::AssembledBlockData >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetAssembledBlockResponse*
Arena::CreateMaybeMessage< ::execution::GetAssembledBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetAssembledBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetBodiesBatchResponse*
Arena::CreateMaybeMessage< ::execution::GetBodiesBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetBodiesBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetBodiesByHashesRequest*
Arena::CreateMaybeMessage< ::execution::GetBodiesByHashesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetBodiesByHashesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetBodiesByRangeRequest*
Arena::CreateMaybeMessage< ::execution::GetBodiesByRangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetBodiesByRangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::ReadyResponse*
Arena::CreateMaybeMessage< ::execution::ReadyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ReadyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::FrozenBlocksResponse*
Arena::CreateMaybeMessage< ::execution::FrozenBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::FrozenBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::HasBlockResponse*
Arena::CreateMaybeMessage< ::execution::HasBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::HasBlockResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
