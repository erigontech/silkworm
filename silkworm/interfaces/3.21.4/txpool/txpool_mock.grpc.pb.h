// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: txpool/txpool.proto

#include "txpool/txpool.pb.h"
#include "txpool/txpool.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace txpool {

class MockTxpoolStub : public Txpool::StubInterface {
 public:
  MOCK_METHOD3(Version, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::VersionReply* response));
  MOCK_METHOD3(AsyncVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncVersionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(FindUnknown, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::txpool::TxHashes* response));
  MOCK_METHOD3(AsyncFindUnknownRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>*(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFindUnknownRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>*(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Add, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::txpool::AddReply* response));
  MOCK_METHOD3(AsyncAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>*(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAddRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>*(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Transactions, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::txpool::TransactionsReply* response));
  MOCK_METHOD3(AsyncTransactionsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>*(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncTransactionsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>*(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(All, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::txpool::AllReply* response));
  MOCK_METHOD3(AsyncAllRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>*(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAllRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>*(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Pending, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::txpool::PendingReply* response));
  MOCK_METHOD3(AsyncPendingRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::PendingReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPendingRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::PendingReply>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(OnAddRaw, ::grpc::ClientReaderInterface< ::txpool::OnAddReply>*(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request));
  MOCK_METHOD4(AsyncOnAddRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>*(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncOnAddRaw, ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>*(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Status, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::txpool::StatusReply* response));
  MOCK_METHOD3(AsyncStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>*(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStatusRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>*(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Nonce, ::grpc::Status(::grpc::ClientContext* context, const ::txpool::NonceRequest& request, ::txpool::NonceReply* response));
  MOCK_METHOD3(AsyncNonceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::NonceReply>*(::grpc::ClientContext* context, const ::txpool::NonceRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncNonceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::txpool::NonceReply>*(::grpc::ClientContext* context, const ::txpool::NonceRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace txpool

