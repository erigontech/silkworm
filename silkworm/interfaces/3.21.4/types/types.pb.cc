// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types/types.proto

#include "types/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace types {
PROTOBUF_CONSTEXPR H128::H128(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/uint64_t{0u}
  , /*decltype(_impl_.lo_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct H128DefaultTypeInternal {
  PROTOBUF_CONSTEXPR H128DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~H128DefaultTypeInternal() {}
  union {
    H128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 H128DefaultTypeInternal _H128_default_instance_;
PROTOBUF_CONSTEXPR H160::H160(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/nullptr
  , /*decltype(_impl_.lo_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct H160DefaultTypeInternal {
  PROTOBUF_CONSTEXPR H160DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~H160DefaultTypeInternal() {}
  union {
    H160 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 H160DefaultTypeInternal _H160_default_instance_;
PROTOBUF_CONSTEXPR H256::H256(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/nullptr
  , /*decltype(_impl_.lo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct H256DefaultTypeInternal {
  PROTOBUF_CONSTEXPR H256DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~H256DefaultTypeInternal() {}
  union {
    H256 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 H256DefaultTypeInternal _H256_default_instance_;
PROTOBUF_CONSTEXPR H512::H512(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/nullptr
  , /*decltype(_impl_.lo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct H512DefaultTypeInternal {
  PROTOBUF_CONSTEXPR H512DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~H512DefaultTypeInternal() {}
  union {
    H512 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 H512DefaultTypeInternal _H512_default_instance_;
PROTOBUF_CONSTEXPR H1024::H1024(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/nullptr
  , /*decltype(_impl_.lo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct H1024DefaultTypeInternal {
  PROTOBUF_CONSTEXPR H1024DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~H1024DefaultTypeInternal() {}
  union {
    H1024 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 H1024DefaultTypeInternal _H1024_default_instance_;
PROTOBUF_CONSTEXPR H2048::H2048(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hi_)*/nullptr
  , /*decltype(_impl_.lo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct H2048DefaultTypeInternal {
  PROTOBUF_CONSTEXPR H2048DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~H2048DefaultTypeInternal() {}
  union {
    H2048 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 H2048DefaultTypeInternal _H2048_default_instance_;
PROTOBUF_CONSTEXPR VersionReply::VersionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.major_)*/0u
  , /*decltype(_impl_.minor_)*/0u
  , /*decltype(_impl_.patch_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionReplyDefaultTypeInternal() {}
  union {
    VersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionReplyDefaultTypeInternal _VersionReply_default_instance_;
PROTOBUF_CONSTEXPR ExecutionPayload::ExecutionPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.withdrawals_)*/{}
  , /*decltype(_impl_.extradata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parenthash_)*/nullptr
  , /*decltype(_impl_.coinbase_)*/nullptr
  , /*decltype(_impl_.stateroot_)*/nullptr
  , /*decltype(_impl_.receiptroot_)*/nullptr
  , /*decltype(_impl_.logsbloom_)*/nullptr
  , /*decltype(_impl_.prevrandao_)*/nullptr
  , /*decltype(_impl_.basefeepergas_)*/nullptr
  , /*decltype(_impl_.blockhash_)*/nullptr
  , /*decltype(_impl_.excessdatagas_)*/nullptr
  , /*decltype(_impl_.blocknumber_)*/uint64_t{0u}
  , /*decltype(_impl_.gaslimit_)*/uint64_t{0u}
  , /*decltype(_impl_.gasused_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionPayloadDefaultTypeInternal() {}
  union {
    ExecutionPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionPayloadDefaultTypeInternal _ExecutionPayload_default_instance_;
PROTOBUF_CONSTEXPR Withdrawal::Withdrawal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_.validatorindex_)*/uint64_t{0u}
  , /*decltype(_impl_.amount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WithdrawalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WithdrawalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WithdrawalDefaultTypeInternal() {}
  union {
    Withdrawal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WithdrawalDefaultTypeInternal _Withdrawal_default_instance_;
PROTOBUF_CONSTEXPR BlobsBundleV1::BlobsBundleV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kzgs_)*/{}
  , /*decltype(_impl_.blobs_)*/{}
  , /*decltype(_impl_.blockhash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlobsBundleV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobsBundleV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobsBundleV1DefaultTypeInternal() {}
  union {
    BlobsBundleV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobsBundleV1DefaultTypeInternal _BlobsBundleV1_default_instance_;
PROTOBUF_CONSTEXPR NodeInfoPorts::NodeInfoPorts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.discovery_)*/0u
  , /*decltype(_impl_.listener_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeInfoPortsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeInfoPortsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeInfoPortsDefaultTypeInternal() {}
  union {
    NodeInfoPorts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeInfoPortsDefaultTypeInternal _NodeInfoPorts_default_instance_;
PROTOBUF_CONSTEXPR NodeInfoReply::NodeInfoReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listeneraddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocols_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ports_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeInfoReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeInfoReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeInfoReplyDefaultTypeInternal() {}
  union {
    NodeInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeInfoReplyDefaultTypeInternal _NodeInfoReply_default_instance_;
PROTOBUF_CONSTEXPR PeerInfo::PeerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.caps_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connlocaladdr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connremoteaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connisinbound_)*/false
  , /*decltype(_impl_.connistrusted_)*/false
  , /*decltype(_impl_.connisstatic_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerInfoDefaultTypeInternal() {}
  union {
    PeerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
PROTOBUF_CONSTEXPR ExecutionPayloadBodyV1::ExecutionPayloadBodyV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.withdrawals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionPayloadBodyV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionPayloadBodyV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionPayloadBodyV1DefaultTypeInternal() {}
  union {
    ExecutionPayloadBodyV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionPayloadBodyV1DefaultTypeInternal _ExecutionPayloadBodyV1_default_instance_;
}  // namespace types
static ::_pb::Metadata file_level_metadata_types_2ftypes_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_types_2ftypes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_types_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_types_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H128, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::types::H128, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H160, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H160, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::types::H160, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H256, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H256, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::types::H256, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H512, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H512, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::types::H512, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H1024, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H1024, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::types::H1024, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H2048, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::H2048, _impl_.hi_),
  PROTOBUF_FIELD_OFFSET(::types::H2048, _impl_.lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, _impl_.major_),
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, _impl_.minor_),
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, _impl_.patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.parenthash_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.stateroot_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.receiptroot_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.logsbloom_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.prevrandao_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.blocknumber_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.gaslimit_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.gasused_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.extradata_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.basefeepergas_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.blockhash_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.transactions_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.withdrawals_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _impl_.excessdatagas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, _impl_.validatorindex_),
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, _impl_.blockhash_),
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, _impl_.kzgs_),
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, _impl_.blobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, _impl_.discovery_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, _impl_.listener_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _impl_.enode_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _impl_.enr_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _impl_.ports_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _impl_.listeneraddr_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _impl_.protocols_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.enode_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.enr_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.caps_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.connlocaladdr_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.connremoteaddr_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.connisinbound_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.connistrusted_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _impl_.connisstatic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayloadBodyV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayloadBodyV1, _impl_.transactions_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayloadBodyV1, _impl_.withdrawals_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::types::H128)},
  { 8, -1, -1, sizeof(::types::H160)},
  { 16, -1, -1, sizeof(::types::H256)},
  { 24, -1, -1, sizeof(::types::H512)},
  { 32, -1, -1, sizeof(::types::H1024)},
  { 40, -1, -1, sizeof(::types::H2048)},
  { 48, -1, -1, sizeof(::types::VersionReply)},
  { 57, -1, -1, sizeof(::types::ExecutionPayload)},
  { 80, -1, -1, sizeof(::types::Withdrawal)},
  { 90, -1, -1, sizeof(::types::BlobsBundleV1)},
  { 99, -1, -1, sizeof(::types::NodeInfoPorts)},
  { 107, -1, -1, sizeof(::types::NodeInfoReply)},
  { 120, -1, -1, sizeof(::types::PeerInfo)},
  { 136, -1, -1, sizeof(::types::ExecutionPayloadBodyV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::types::_H128_default_instance_._instance,
  &::types::_H160_default_instance_._instance,
  &::types::_H256_default_instance_._instance,
  &::types::_H512_default_instance_._instance,
  &::types::_H1024_default_instance_._instance,
  &::types::_H2048_default_instance_._instance,
  &::types::_VersionReply_default_instance_._instance,
  &::types::_ExecutionPayload_default_instance_._instance,
  &::types::_Withdrawal_default_instance_._instance,
  &::types::_BlobsBundleV1_default_instance_._instance,
  &::types::_NodeInfoPorts_default_instance_._instance,
  &::types::_NodeInfoReply_default_instance_._instance,
  &::types::_PeerInfo_default_instance_._instance,
  &::types::_ExecutionPayloadBodyV1_default_instance_._instance,
};

const char descriptor_table_protodef_types_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021types/types.proto\022\005types\032 google/proto"
  "buf/descriptor.proto\"\036\n\004H128\022\n\n\002hi\030\001 \001(\004"
  "\022\n\n\002lo\030\002 \001(\004\"+\n\004H160\022\027\n\002hi\030\001 \001(\0132\013.types"
  ".H128\022\n\n\002lo\030\002 \001(\r\"8\n\004H256\022\027\n\002hi\030\001 \001(\0132\013."
  "types.H128\022\027\n\002lo\030\002 \001(\0132\013.types.H128\"8\n\004H"
  "512\022\027\n\002hi\030\001 \001(\0132\013.types.H256\022\027\n\002lo\030\002 \001(\013"
  "2\013.types.H256\"9\n\005H1024\022\027\n\002hi\030\001 \001(\0132\013.typ"
  "es.H512\022\027\n\002lo\030\002 \001(\0132\013.types.H512\";\n\005H204"
  "8\022\030\n\002hi\030\001 \001(\0132\014.types.H1024\022\030\n\002lo\030\002 \001(\0132"
  "\014.types.H1024\";\n\014VersionReply\022\r\n\005major\030\001"
  " \001(\r\022\r\n\005minor\030\002 \001(\r\022\r\n\005patch\030\003 \001(\r\"\353\003\n\020E"
  "xecutionPayload\022\017\n\007version\030\001 \001(\r\022\037\n\npare"
  "ntHash\030\002 \001(\0132\013.types.H256\022\035\n\010coinbase\030\003 "
  "\001(\0132\013.types.H160\022\036\n\tstateRoot\030\004 \001(\0132\013.ty"
  "pes.H256\022 \n\013receiptRoot\030\005 \001(\0132\013.types.H2"
  "56\022\037\n\tlogsBloom\030\006 \001(\0132\014.types.H2048\022\037\n\np"
  "revRandao\030\007 \001(\0132\013.types.H256\022\023\n\013blockNum"
  "ber\030\010 \001(\004\022\020\n\010gasLimit\030\t \001(\004\022\017\n\007gasUsed\030\n"
  " \001(\004\022\021\n\ttimestamp\030\013 \001(\004\022\021\n\textraData\030\014 \001"
  "(\014\022\"\n\rbaseFeePerGas\030\r \001(\0132\013.types.H256\022\036"
  "\n\tblockHash\030\016 \001(\0132\013.types.H256\022\024\n\014transa"
  "ctions\030\017 \003(\014\022&\n\013withdrawals\030\020 \003(\0132\021.type"
  "s.Withdrawal\022\"\n\rexcessDataGas\030\021 \001(\0132\013.ty"
  "pes.H256\"a\n\nWithdrawal\022\r\n\005index\030\001 \001(\004\022\026\n"
  "\016validatorIndex\030\002 \001(\004\022\034\n\007address\030\003 \001(\0132\013"
  ".types.H160\022\016\n\006amount\030\004 \001(\004\"L\n\rBlobsBund"
  "leV1\022\036\n\tblockHash\030\001 \001(\0132\013.types.H256\022\014\n\004"
  "kzgs\030\002 \003(\014\022\r\n\005blobs\030\003 \003(\014\"4\n\rNodeInfoPor"
  "ts\022\021\n\tdiscovery\030\001 \001(\r\022\020\n\010listener\030\002 \001(\r\""
  "\223\001\n\rNodeInfoReply\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 "
  "\001(\t\022\r\n\005enode\030\003 \001(\t\022\013\n\003enr\030\004 \001(\t\022#\n\005ports"
  "\030\005 \001(\0132\024.types.NodeInfoPorts\022\024\n\014listener"
  "Addr\030\006 \001(\t\022\021\n\tprotocols\030\007 \001(\014\"\301\001\n\010PeerIn"
  "fo\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005enode\030\003 "
  "\001(\t\022\013\n\003enr\030\004 \001(\t\022\014\n\004caps\030\005 \003(\t\022\025\n\rconnLo"
  "calAddr\030\006 \001(\t\022\026\n\016connRemoteAddr\030\007 \001(\t\022\025\n"
  "\rconnIsInbound\030\010 \001(\010\022\025\n\rconnIsTrusted\030\t "
  "\001(\010\022\024\n\014connIsStatic\030\n \001(\010\"V\n\026ExecutionPa"
  "yloadBodyV1\022\024\n\014transactions\030\001 \003(\014\022&\n\013wit"
  "hdrawals\030\002 \003(\0132\021.types.Withdrawal:=\n\025ser"
  "vice_major_version\022\034.google.protobuf.Fil"
  "eOptions\030\321\206\003 \001(\r:=\n\025service_minor_versio"
  "n\022\034.google.protobuf.FileOptions\030\322\206\003 \001(\r:"
  "=\n\025service_patch_version\022\034.google.protob"
  "uf.FileOptions\030\323\206\003 \001(\rB\017Z\r./types;typesb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_types_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_types_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_types_2ftypes_2eproto = {
    false, false, 1807, descriptor_table_protodef_types_2ftypes_2eproto,
    "types/types.proto",
    &descriptor_table_types_2ftypes_2eproto_once, descriptor_table_types_2ftypes_2eproto_deps, 1, 14,
    schemas, file_default_instances, TableStruct_types_2ftypes_2eproto::offsets,
    file_level_metadata_types_2ftypes_2eproto, file_level_enum_descriptors_types_2ftypes_2eproto,
    file_level_service_descriptors_types_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_types_2ftypes_2eproto_getter() {
  return &descriptor_table_types_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_types_2ftypes_2eproto(&descriptor_table_types_2ftypes_2eproto);
namespace types {

// ===================================================================

class H128::_Internal {
 public:
};

H128::H128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.H128)
}
H128::H128(const H128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  H128* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){}
    , decltype(_impl_.lo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hi_, &from._impl_.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lo_) -
    reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.lo_));
  // @@protoc_insertion_point(copy_constructor:types.H128)
}

inline void H128::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){uint64_t{0u}}
    , decltype(_impl_.lo_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

H128::~H128() {
  // @@protoc_insertion_point(destructor:types.H128)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void H128::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void H128::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void H128::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H128)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lo_) -
      reinterpret_cast<char*>(&_impl_.hi_)) + sizeof(_impl_.lo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H128::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H128::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H128)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hi(), target);
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H128)
  return target;
}

size_t H128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H128)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->_internal_hi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hi());
  }

  // uint64 lo = 2;
  if (this->_internal_lo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H128::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    H128::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H128::GetClassData() const { return &_class_data_; }


void H128::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<H128*>(&to_msg);
  auto& from = static_cast<const H128&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.H128)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hi() != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  if (from._internal_lo() != 0) {
    _this->_internal_set_lo(from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H128::CopyFrom(const H128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H128::IsInitialized() const {
  return true;
}

void H128::InternalSwap(H128* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H128, _impl_.lo_)
      + sizeof(H128::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(H128, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H128::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[0]);
}

// ===================================================================

class H160::_Internal {
 public:
  static const ::types::H128& hi(const H160* msg);
};

const ::types::H128&
H160::_Internal::hi(const H160* msg) {
  return *msg->_impl_.hi_;
}
H160::H160(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.H160)
}
H160::H160(const H160& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  H160* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    _this->_impl_.hi_ = new ::types::H128(*from._impl_.hi_);
  }
  _this->_impl_.lo_ = from._impl_.lo_;
  // @@protoc_insertion_point(copy_constructor:types.H160)
}

inline void H160::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

H160::~H160() {
  // @@protoc_insertion_point(destructor:types.H160)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void H160::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hi_;
}

void H160::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void H160::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H160)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
  _impl_.lo_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H160::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H128 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H160::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H160)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hi(this),
        _Internal::hi(this).GetCachedSize(), target, stream);
  }

  // uint32 lo = 2;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H160)
  return target;
}

size_t H160::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H160)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hi_);
  }

  // uint32 lo = 2;
  if (this->_internal_lo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H160::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    H160::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H160::GetClassData() const { return &_class_data_; }


void H160::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<H160*>(&to_msg);
  auto& from = static_cast<const H160&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.H160)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _this->_internal_mutable_hi()->::types::H128::MergeFrom(
        from._internal_hi());
  }
  if (from._internal_lo() != 0) {
    _this->_internal_set_lo(from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H160::CopyFrom(const H160& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H160)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H160::IsInitialized() const {
  return true;
}

void H160::InternalSwap(H160* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H160, _impl_.lo_)
      + sizeof(H160::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(H160, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H160::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[1]);
}

// ===================================================================

class H256::_Internal {
 public:
  static const ::types::H128& hi(const H256* msg);
  static const ::types::H128& lo(const H256* msg);
};

const ::types::H128&
H256::_Internal::hi(const H256* msg) {
  return *msg->_impl_.hi_;
}
const ::types::H128&
H256::_Internal::lo(const H256* msg) {
  return *msg->_impl_.lo_;
}
H256::H256(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.H256)
}
H256::H256(const H256& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  H256* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    _this->_impl_.hi_ = new ::types::H128(*from._impl_.hi_);
  }
  if (from._internal_has_lo()) {
    _this->_impl_.lo_ = new ::types::H128(*from._impl_.lo_);
  }
  // @@protoc_insertion_point(copy_constructor:types.H256)
}

inline void H256::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

H256::~H256() {
  // @@protoc_insertion_point(destructor:types.H256)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void H256::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hi_;
  if (this != internal_default_instance()) delete _impl_.lo_;
}

void H256::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void H256::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H256)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H256::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H128 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H128 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H256::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H256)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hi(this),
        _Internal::hi(this).GetCachedSize(), target, stream);
  }

  // .types.H128 lo = 2;
  if (this->_internal_has_lo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lo(this),
        _Internal::lo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H256)
  return target;
}

size_t H256::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H256)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hi_);
  }

  // .types.H128 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H256::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    H256::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H256::GetClassData() const { return &_class_data_; }


void H256::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<H256*>(&to_msg);
  auto& from = static_cast<const H256&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.H256)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _this->_internal_mutable_hi()->::types::H128::MergeFrom(
        from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _this->_internal_mutable_lo()->::types::H128::MergeFrom(
        from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H256::CopyFrom(const H256& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H256)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H256::IsInitialized() const {
  return true;
}

void H256::InternalSwap(H256* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H256, _impl_.lo_)
      + sizeof(H256::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(H256, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H256::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[2]);
}

// ===================================================================

class H512::_Internal {
 public:
  static const ::types::H256& hi(const H512* msg);
  static const ::types::H256& lo(const H512* msg);
};

const ::types::H256&
H512::_Internal::hi(const H512* msg) {
  return *msg->_impl_.hi_;
}
const ::types::H256&
H512::_Internal::lo(const H512* msg) {
  return *msg->_impl_.lo_;
}
H512::H512(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.H512)
}
H512::H512(const H512& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  H512* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    _this->_impl_.hi_ = new ::types::H256(*from._impl_.hi_);
  }
  if (from._internal_has_lo()) {
    _this->_impl_.lo_ = new ::types::H256(*from._impl_.lo_);
  }
  // @@protoc_insertion_point(copy_constructor:types.H512)
}

inline void H512::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

H512::~H512() {
  // @@protoc_insertion_point(destructor:types.H512)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void H512::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hi_;
  if (this != internal_default_instance()) delete _impl_.lo_;
}

void H512::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void H512::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H512)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H512::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H512::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H512)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 hi = 1;
  if (this->_internal_has_hi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hi(this),
        _Internal::hi(this).GetCachedSize(), target, stream);
  }

  // .types.H256 lo = 2;
  if (this->_internal_has_lo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lo(this),
        _Internal::lo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H512)
  return target;
}

size_t H512::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H512)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hi_);
  }

  // .types.H256 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H512::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    H512::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H512::GetClassData() const { return &_class_data_; }


void H512::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<H512*>(&to_msg);
  auto& from = static_cast<const H512&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.H512)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _this->_internal_mutable_hi()->::types::H256::MergeFrom(
        from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _this->_internal_mutable_lo()->::types::H256::MergeFrom(
        from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H512::CopyFrom(const H512& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H512::IsInitialized() const {
  return true;
}

void H512::InternalSwap(H512* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H512, _impl_.lo_)
      + sizeof(H512::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(H512, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H512::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[3]);
}

// ===================================================================

class H1024::_Internal {
 public:
  static const ::types::H512& hi(const H1024* msg);
  static const ::types::H512& lo(const H1024* msg);
};

const ::types::H512&
H1024::_Internal::hi(const H1024* msg) {
  return *msg->_impl_.hi_;
}
const ::types::H512&
H1024::_Internal::lo(const H1024* msg) {
  return *msg->_impl_.lo_;
}
H1024::H1024(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.H1024)
}
H1024::H1024(const H1024& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  H1024* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    _this->_impl_.hi_ = new ::types::H512(*from._impl_.hi_);
  }
  if (from._internal_has_lo()) {
    _this->_impl_.lo_ = new ::types::H512(*from._impl_.lo_);
  }
  // @@protoc_insertion_point(copy_constructor:types.H1024)
}

inline void H1024::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

H1024::~H1024() {
  // @@protoc_insertion_point(destructor:types.H1024)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void H1024::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hi_;
  if (this != internal_default_instance()) delete _impl_.lo_;
}

void H1024::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void H1024::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H1024)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H1024::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H512 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H1024::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H1024)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 hi = 1;
  if (this->_internal_has_hi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hi(this),
        _Internal::hi(this).GetCachedSize(), target, stream);
  }

  // .types.H512 lo = 2;
  if (this->_internal_has_lo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lo(this),
        _Internal::lo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H1024)
  return target;
}

size_t H1024::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H1024)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hi_);
  }

  // .types.H512 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H1024::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    H1024::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H1024::GetClassData() const { return &_class_data_; }


void H1024::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<H1024*>(&to_msg);
  auto& from = static_cast<const H1024&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.H1024)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _this->_internal_mutable_hi()->::types::H512::MergeFrom(
        from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _this->_internal_mutable_lo()->::types::H512::MergeFrom(
        from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H1024::CopyFrom(const H1024& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H1024)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H1024::IsInitialized() const {
  return true;
}

void H1024::InternalSwap(H1024* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H1024, _impl_.lo_)
      + sizeof(H1024::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(H1024, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H1024::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[4]);
}

// ===================================================================

class H2048::_Internal {
 public:
  static const ::types::H1024& hi(const H2048* msg);
  static const ::types::H1024& lo(const H2048* msg);
};

const ::types::H1024&
H2048::_Internal::hi(const H2048* msg) {
  return *msg->_impl_.hi_;
}
const ::types::H1024&
H2048::_Internal::lo(const H2048* msg) {
  return *msg->_impl_.lo_;
}
H2048::H2048(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.H2048)
}
H2048::H2048(const H2048& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  H2048* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    _this->_impl_.hi_ = new ::types::H1024(*from._impl_.hi_);
  }
  if (from._internal_has_lo()) {
    _this->_impl_.lo_ = new ::types::H1024(*from._impl_.lo_);
  }
  // @@protoc_insertion_point(copy_constructor:types.H2048)
}

inline void H2048::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hi_){nullptr}
    , decltype(_impl_.lo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

H2048::~H2048() {
  // @@protoc_insertion_point(destructor:types.H2048)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void H2048::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hi_;
  if (this != internal_default_instance()) delete _impl_.lo_;
}

void H2048::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void H2048::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H2048)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hi_ != nullptr) {
    delete _impl_.hi_;
  }
  _impl_.hi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lo_ != nullptr) {
    delete _impl_.lo_;
  }
  _impl_.lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H2048::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H1024 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H1024 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H2048::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H2048)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H1024 hi = 1;
  if (this->_internal_has_hi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hi(this),
        _Internal::hi(this).GetCachedSize(), target, stream);
  }

  // .types.H1024 lo = 2;
  if (this->_internal_has_lo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lo(this),
        _Internal::lo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H2048)
  return target;
}

size_t H2048::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H2048)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H1024 hi = 1;
  if (this->_internal_has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hi_);
  }

  // .types.H1024 lo = 2;
  if (this->_internal_has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H2048::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    H2048::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H2048::GetClassData() const { return &_class_data_; }


void H2048::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<H2048*>(&to_msg);
  auto& from = static_cast<const H2048&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.H2048)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hi()) {
    _this->_internal_mutable_hi()->::types::H1024::MergeFrom(
        from._internal_hi());
  }
  if (from._internal_has_lo()) {
    _this->_internal_mutable_lo()->::types::H1024::MergeFrom(
        from._internal_lo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H2048::CopyFrom(const H2048& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H2048)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H2048::IsInitialized() const {
  return true;
}

void H2048::InternalSwap(H2048* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H2048, _impl_.lo_)
      + sizeof(H2048::_impl_.lo_)
      - PROTOBUF_FIELD_OFFSET(H2048, _impl_.hi_)>(
          reinterpret_cast<char*>(&_impl_.hi_),
          reinterpret_cast<char*>(&other->_impl_.hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H2048::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[5]);
}

// ===================================================================

class VersionReply::_Internal {
 public:
};

VersionReply::VersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.VersionReply)
}
VersionReply::VersionReply(const VersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.patch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.major_, &from._impl_.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.patch_) -
    reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  // @@protoc_insertion_point(copy_constructor:types.VersionReply)
}

inline void VersionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){0u}
    , decltype(_impl_.minor_){0u}
    , decltype(_impl_.patch_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VersionReply::~VersionReply() {
  // @@protoc_insertion_point(destructor:types.VersionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:types.VersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.patch_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.VersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.VersionReply)
  return target;
}

size_t VersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.VersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionReply::GetClassData() const { return &_class_data_; }


void VersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionReply*>(&to_msg);
  auto& from = static_cast<const VersionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.VersionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _this->_internal_set_patch(from._internal_patch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionReply::CopyFrom(const VersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.VersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionReply::IsInitialized() const {
  return true;
}

void VersionReply::InternalSwap(VersionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionReply, _impl_.patch_)
      + sizeof(VersionReply::_impl_.patch_)
      - PROTOBUF_FIELD_OFFSET(VersionReply, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[6]);
}

// ===================================================================

class ExecutionPayload::_Internal {
 public:
  static const ::types::H256& parenthash(const ExecutionPayload* msg);
  static const ::types::H160& coinbase(const ExecutionPayload* msg);
  static const ::types::H256& stateroot(const ExecutionPayload* msg);
  static const ::types::H256& receiptroot(const ExecutionPayload* msg);
  static const ::types::H2048& logsbloom(const ExecutionPayload* msg);
  static const ::types::H256& prevrandao(const ExecutionPayload* msg);
  static const ::types::H256& basefeepergas(const ExecutionPayload* msg);
  static const ::types::H256& blockhash(const ExecutionPayload* msg);
  static const ::types::H256& excessdatagas(const ExecutionPayload* msg);
};

const ::types::H256&
ExecutionPayload::_Internal::parenthash(const ExecutionPayload* msg) {
  return *msg->_impl_.parenthash_;
}
const ::types::H160&
ExecutionPayload::_Internal::coinbase(const ExecutionPayload* msg) {
  return *msg->_impl_.coinbase_;
}
const ::types::H256&
ExecutionPayload::_Internal::stateroot(const ExecutionPayload* msg) {
  return *msg->_impl_.stateroot_;
}
const ::types::H256&
ExecutionPayload::_Internal::receiptroot(const ExecutionPayload* msg) {
  return *msg->_impl_.receiptroot_;
}
const ::types::H2048&
ExecutionPayload::_Internal::logsbloom(const ExecutionPayload* msg) {
  return *msg->_impl_.logsbloom_;
}
const ::types::H256&
ExecutionPayload::_Internal::prevrandao(const ExecutionPayload* msg) {
  return *msg->_impl_.prevrandao_;
}
const ::types::H256&
ExecutionPayload::_Internal::basefeepergas(const ExecutionPayload* msg) {
  return *msg->_impl_.basefeepergas_;
}
const ::types::H256&
ExecutionPayload::_Internal::blockhash(const ExecutionPayload* msg) {
  return *msg->_impl_.blockhash_;
}
const ::types::H256&
ExecutionPayload::_Internal::excessdatagas(const ExecutionPayload* msg) {
  return *msg->_impl_.excessdatagas_;
}
ExecutionPayload::ExecutionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.ExecutionPayload)
}
ExecutionPayload::ExecutionPayload(const ExecutionPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.withdrawals_){from._impl_.withdrawals_}
    , decltype(_impl_.extradata_){}
    , decltype(_impl_.parenthash_){nullptr}
    , decltype(_impl_.coinbase_){nullptr}
    , decltype(_impl_.stateroot_){nullptr}
    , decltype(_impl_.receiptroot_){nullptr}
    , decltype(_impl_.logsbloom_){nullptr}
    , decltype(_impl_.prevrandao_){nullptr}
    , decltype(_impl_.basefeepergas_){nullptr}
    , decltype(_impl_.blockhash_){nullptr}
    , decltype(_impl_.excessdatagas_){nullptr}
    , decltype(_impl_.blocknumber_){}
    , decltype(_impl_.gaslimit_){}
    , decltype(_impl_.gasused_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extradata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extradata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extradata().empty()) {
    _this->_impl_.extradata_.Set(from._internal_extradata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parenthash()) {
    _this->_impl_.parenthash_ = new ::types::H256(*from._impl_.parenthash_);
  }
  if (from._internal_has_coinbase()) {
    _this->_impl_.coinbase_ = new ::types::H160(*from._impl_.coinbase_);
  }
  if (from._internal_has_stateroot()) {
    _this->_impl_.stateroot_ = new ::types::H256(*from._impl_.stateroot_);
  }
  if (from._internal_has_receiptroot()) {
    _this->_impl_.receiptroot_ = new ::types::H256(*from._impl_.receiptroot_);
  }
  if (from._internal_has_logsbloom()) {
    _this->_impl_.logsbloom_ = new ::types::H2048(*from._impl_.logsbloom_);
  }
  if (from._internal_has_prevrandao()) {
    _this->_impl_.prevrandao_ = new ::types::H256(*from._impl_.prevrandao_);
  }
  if (from._internal_has_basefeepergas()) {
    _this->_impl_.basefeepergas_ = new ::types::H256(*from._impl_.basefeepergas_);
  }
  if (from._internal_has_blockhash()) {
    _this->_impl_.blockhash_ = new ::types::H256(*from._impl_.blockhash_);
  }
  if (from._internal_has_excessdatagas()) {
    _this->_impl_.excessdatagas_ = new ::types::H256(*from._impl_.excessdatagas_);
  }
  ::memcpy(&_impl_.blocknumber_, &from._impl_.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.blocknumber_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:types.ExecutionPayload)
}

inline void ExecutionPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.withdrawals_){arena}
    , decltype(_impl_.extradata_){}
    , decltype(_impl_.parenthash_){nullptr}
    , decltype(_impl_.coinbase_){nullptr}
    , decltype(_impl_.stateroot_){nullptr}
    , decltype(_impl_.receiptroot_){nullptr}
    , decltype(_impl_.logsbloom_){nullptr}
    , decltype(_impl_.prevrandao_){nullptr}
    , decltype(_impl_.basefeepergas_){nullptr}
    , decltype(_impl_.blockhash_){nullptr}
    , decltype(_impl_.excessdatagas_){nullptr}
    , decltype(_impl_.blocknumber_){uint64_t{0u}}
    , decltype(_impl_.gaslimit_){uint64_t{0u}}
    , decltype(_impl_.gasused_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.extradata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extradata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecutionPayload::~ExecutionPayload() {
  // @@protoc_insertion_point(destructor:types.ExecutionPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  _impl_.withdrawals_.~RepeatedPtrField();
  _impl_.extradata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parenthash_;
  if (this != internal_default_instance()) delete _impl_.coinbase_;
  if (this != internal_default_instance()) delete _impl_.stateroot_;
  if (this != internal_default_instance()) delete _impl_.receiptroot_;
  if (this != internal_default_instance()) delete _impl_.logsbloom_;
  if (this != internal_default_instance()) delete _impl_.prevrandao_;
  if (this != internal_default_instance()) delete _impl_.basefeepergas_;
  if (this != internal_default_instance()) delete _impl_.blockhash_;
  if (this != internal_default_instance()) delete _impl_.excessdatagas_;
}

void ExecutionPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:types.ExecutionPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.withdrawals_.Clear();
  _impl_.extradata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.parenthash_ != nullptr) {
    delete _impl_.parenthash_;
  }
  _impl_.parenthash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coinbase_ != nullptr) {
    delete _impl_.coinbase_;
  }
  _impl_.coinbase_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stateroot_ != nullptr) {
    delete _impl_.stateroot_;
  }
  _impl_.stateroot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.receiptroot_ != nullptr) {
    delete _impl_.receiptroot_;
  }
  _impl_.receiptroot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.logsbloom_ != nullptr) {
    delete _impl_.logsbloom_;
  }
  _impl_.logsbloom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prevrandao_ != nullptr) {
    delete _impl_.prevrandao_;
  }
  _impl_.prevrandao_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.basefeepergas_ != nullptr) {
    delete _impl_.basefeepergas_;
  }
  _impl_.basefeepergas_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blockhash_ != nullptr) {
    delete _impl_.blockhash_;
  }
  _impl_.blockhash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.excessdatagas_ != nullptr) {
    delete _impl_.excessdatagas_;
  }
  _impl_.excessdatagas_ = nullptr;
  ::memset(&_impl_.blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.blocknumber_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 parentHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parenthash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H160 coinbase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coinbase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 stateRoot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stateroot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 receiptRoot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiptroot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H2048 logsBloom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_logsbloom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 prevRandao = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prevrandao(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 blockNumber = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gasLimit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gaslimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gasUsed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.gasused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes extraData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_extradata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 baseFeePerGas = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_basefeepergas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 blockHash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes transactions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .types.H256 excessDataGas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_excessdatagas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ExecutionPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // .types.H256 parentHash = 2;
  if (this->_internal_has_parenthash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parenthash(this),
        _Internal::parenthash(this).GetCachedSize(), target, stream);
  }

  // .types.H160 coinbase = 3;
  if (this->_internal_has_coinbase()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::coinbase(this),
        _Internal::coinbase(this).GetCachedSize(), target, stream);
  }

  // .types.H256 stateRoot = 4;
  if (this->_internal_has_stateroot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stateroot(this),
        _Internal::stateroot(this).GetCachedSize(), target, stream);
  }

  // .types.H256 receiptRoot = 5;
  if (this->_internal_has_receiptroot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::receiptroot(this),
        _Internal::receiptroot(this).GetCachedSize(), target, stream);
  }

  // .types.H2048 logsBloom = 6;
  if (this->_internal_has_logsbloom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::logsbloom(this),
        _Internal::logsbloom(this).GetCachedSize(), target, stream);
  }

  // .types.H256 prevRandao = 7;
  if (this->_internal_has_prevrandao()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::prevrandao(this),
        _Internal::prevrandao(this).GetCachedSize(), target, stream);
  }

  // uint64 blockNumber = 8;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_blocknumber(), target);
  }

  // uint64 gasLimit = 9;
  if (this->_internal_gaslimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gaslimit(), target);
  }

  // uint64 gasUsed = 10;
  if (this->_internal_gasused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_gasused(), target);
  }

  // uint64 timestamp = 11;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_timestamp(), target);
  }

  // bytes extraData = 12;
  if (!this->_internal_extradata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extradata(), target);
  }

  // .types.H256 baseFeePerGas = 13;
  if (this->_internal_has_basefeepergas()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::basefeepergas(this),
        _Internal::basefeepergas(this).GetCachedSize(), target, stream);
  }

  // .types.H256 blockHash = 14;
  if (this->_internal_has_blockhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::blockhash(this),
        _Internal::blockhash(this).GetCachedSize(), target, stream);
  }

  // repeated bytes transactions = 15;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(15, s, target);
  }

  // repeated .types.Withdrawal withdrawals = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_withdrawals_size()); i < n; i++) {
    const auto& repfield = this->_internal_withdrawals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .types.H256 excessDataGas = 17;
  if (this->_internal_has_excessdatagas()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::excessdatagas(this),
        _Internal::excessdatagas(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.ExecutionPayload)
  return target;
}

size_t ExecutionPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.ExecutionPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.transactions_.size());
  for (int i = 0, n = _impl_.transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.transactions_.Get(i));
  }

  // repeated .types.Withdrawal withdrawals = 16;
  total_size += 2UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->_impl_.withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes extraData = 12;
  if (!this->_internal_extradata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extradata());
  }

  // .types.H256 parentHash = 2;
  if (this->_internal_has_parenthash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parenthash_);
  }

  // .types.H160 coinbase = 3;
  if (this->_internal_has_coinbase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coinbase_);
  }

  // .types.H256 stateRoot = 4;
  if (this->_internal_has_stateroot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stateroot_);
  }

  // .types.H256 receiptRoot = 5;
  if (this->_internal_has_receiptroot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.receiptroot_);
  }

  // .types.H2048 logsBloom = 6;
  if (this->_internal_has_logsbloom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logsbloom_);
  }

  // .types.H256 prevRandao = 7;
  if (this->_internal_has_prevrandao()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prevrandao_);
  }

  // .types.H256 baseFeePerGas = 13;
  if (this->_internal_has_basefeepergas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basefeepergas_);
  }

  // .types.H256 blockHash = 14;
  if (this->_internal_has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockhash_);
  }

  // .types.H256 excessDataGas = 17;
  if (this->_internal_has_excessdatagas()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.excessdatagas_);
  }

  // uint64 blockNumber = 8;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blocknumber());
  }

  // uint64 gasLimit = 9;
  if (this->_internal_gaslimit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gaslimit());
  }

  // uint64 gasUsed = 10;
  if (this->_internal_gasused() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gasused());
  }

  // uint64 timestamp = 11;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionPayload::GetClassData() const { return &_class_data_; }


void ExecutionPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionPayload*>(&to_msg);
  auto& from = static_cast<const ExecutionPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.ExecutionPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  _this->_impl_.withdrawals_.MergeFrom(from._impl_.withdrawals_);
  if (!from._internal_extradata().empty()) {
    _this->_internal_set_extradata(from._internal_extradata());
  }
  if (from._internal_has_parenthash()) {
    _this->_internal_mutable_parenthash()->::types::H256::MergeFrom(
        from._internal_parenthash());
  }
  if (from._internal_has_coinbase()) {
    _this->_internal_mutable_coinbase()->::types::H160::MergeFrom(
        from._internal_coinbase());
  }
  if (from._internal_has_stateroot()) {
    _this->_internal_mutable_stateroot()->::types::H256::MergeFrom(
        from._internal_stateroot());
  }
  if (from._internal_has_receiptroot()) {
    _this->_internal_mutable_receiptroot()->::types::H256::MergeFrom(
        from._internal_receiptroot());
  }
  if (from._internal_has_logsbloom()) {
    _this->_internal_mutable_logsbloom()->::types::H2048::MergeFrom(
        from._internal_logsbloom());
  }
  if (from._internal_has_prevrandao()) {
    _this->_internal_mutable_prevrandao()->::types::H256::MergeFrom(
        from._internal_prevrandao());
  }
  if (from._internal_has_basefeepergas()) {
    _this->_internal_mutable_basefeepergas()->::types::H256::MergeFrom(
        from._internal_basefeepergas());
  }
  if (from._internal_has_blockhash()) {
    _this->_internal_mutable_blockhash()->::types::H256::MergeFrom(
        from._internal_blockhash());
  }
  if (from._internal_has_excessdatagas()) {
    _this->_internal_mutable_excessdatagas()->::types::H256::MergeFrom(
        from._internal_excessdatagas());
  }
  if (from._internal_blocknumber() != 0) {
    _this->_internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from._internal_gaslimit() != 0) {
    _this->_internal_set_gaslimit(from._internal_gaslimit());
  }
  if (from._internal_gasused() != 0) {
    _this->_internal_set_gasused(from._internal_gasused());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionPayload::CopyFrom(const ExecutionPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.ExecutionPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionPayload::IsInitialized() const {
  return true;
}

void ExecutionPayload::InternalSwap(ExecutionPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  _impl_.withdrawals_.InternalSwap(&other->_impl_.withdrawals_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extradata_, lhs_arena,
      &other->_impl_.extradata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionPayload, _impl_.version_)
      + sizeof(ExecutionPayload::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(ExecutionPayload, _impl_.parenthash_)>(
          reinterpret_cast<char*>(&_impl_.parenthash_),
          reinterpret_cast<char*>(&other->_impl_.parenthash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[7]);
}

// ===================================================================

class Withdrawal::_Internal {
 public:
  static const ::types::H160& address(const Withdrawal* msg);
};

const ::types::H160&
Withdrawal::_Internal::address(const Withdrawal* msg) {
  return *msg->_impl_.address_;
}
Withdrawal::Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.Withdrawal)
}
Withdrawal::Withdrawal(const Withdrawal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Withdrawal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.validatorindex_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::types::H160(*from._impl_.address_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.amount_));
  // @@protoc_insertion_point(copy_constructor:types.Withdrawal)
}

inline void Withdrawal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , decltype(_impl_.index_){uint64_t{0u}}
    , decltype(_impl_.validatorindex_){uint64_t{0u}}
    , decltype(_impl_.amount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Withdrawal::~Withdrawal() {
  // @@protoc_insertion_point(destructor:types.Withdrawal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Withdrawal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.address_;
}

void Withdrawal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Withdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:types.Withdrawal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Withdrawal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 validatorIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.validatorindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H160 address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Withdrawal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.Withdrawal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // uint64 validatorIndex = 2;
  if (this->_internal_validatorindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_validatorindex(), target);
  }

  // .types.H160 address = 3;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.Withdrawal)
  return target;
}

size_t Withdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.Withdrawal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H160 address = 3;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // uint64 validatorIndex = 2;
  if (this->_internal_validatorindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_validatorindex());
  }

  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Withdrawal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Withdrawal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Withdrawal::GetClassData() const { return &_class_data_; }


void Withdrawal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Withdrawal*>(&to_msg);
  auto& from = static_cast<const Withdrawal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.Withdrawal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::types::H160::MergeFrom(
        from._internal_address());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_validatorindex() != 0) {
    _this->_internal_set_validatorindex(from._internal_validatorindex());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Withdrawal::CopyFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdrawal::IsInitialized() const {
  return true;
}

void Withdrawal::InternalSwap(Withdrawal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Withdrawal, _impl_.amount_)
      + sizeof(Withdrawal::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(Withdrawal, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Withdrawal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[8]);
}

// ===================================================================

class BlobsBundleV1::_Internal {
 public:
  static const ::types::H256& blockhash(const BlobsBundleV1* msg);
};

const ::types::H256&
BlobsBundleV1::_Internal::blockhash(const BlobsBundleV1* msg) {
  return *msg->_impl_.blockhash_;
}
BlobsBundleV1::BlobsBundleV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.BlobsBundleV1)
}
BlobsBundleV1::BlobsBundleV1(const BlobsBundleV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlobsBundleV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kzgs_){from._impl_.kzgs_}
    , decltype(_impl_.blobs_){from._impl_.blobs_}
    , decltype(_impl_.blockhash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blockhash()) {
    _this->_impl_.blockhash_ = new ::types::H256(*from._impl_.blockhash_);
  }
  // @@protoc_insertion_point(copy_constructor:types.BlobsBundleV1)
}

inline void BlobsBundleV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kzgs_){arena}
    , decltype(_impl_.blobs_){arena}
    , decltype(_impl_.blockhash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlobsBundleV1::~BlobsBundleV1() {
  // @@protoc_insertion_point(destructor:types.BlobsBundleV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlobsBundleV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kzgs_.~RepeatedPtrField();
  _impl_.blobs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.blockhash_;
}

void BlobsBundleV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlobsBundleV1::Clear() {
// @@protoc_insertion_point(message_clear_start:types.BlobsBundleV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kzgs_.Clear();
  _impl_.blobs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.blockhash_ != nullptr) {
    delete _impl_.blockhash_;
  }
  _impl_.blockhash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobsBundleV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 blockHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes kzgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_kzgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes blobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlobsBundleV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.BlobsBundleV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 blockHash = 1;
  if (this->_internal_has_blockhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::blockhash(this),
        _Internal::blockhash(this).GetCachedSize(), target, stream);
  }

  // repeated bytes kzgs = 2;
  for (int i = 0, n = this->_internal_kzgs_size(); i < n; i++) {
    const auto& s = this->_internal_kzgs(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes blobs = 3;
  for (int i = 0, n = this->_internal_blobs_size(); i < n; i++) {
    const auto& s = this->_internal_blobs(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.BlobsBundleV1)
  return target;
}

size_t BlobsBundleV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.BlobsBundleV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes kzgs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.kzgs_.size());
  for (int i = 0, n = _impl_.kzgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.kzgs_.Get(i));
  }

  // repeated bytes blobs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blobs_.size());
  for (int i = 0, n = _impl_.blobs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.blobs_.Get(i));
  }

  // .types.H256 blockHash = 1;
  if (this->_internal_has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockhash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlobsBundleV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlobsBundleV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlobsBundleV1::GetClassData() const { return &_class_data_; }


void BlobsBundleV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlobsBundleV1*>(&to_msg);
  auto& from = static_cast<const BlobsBundleV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.BlobsBundleV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kzgs_.MergeFrom(from._impl_.kzgs_);
  _this->_impl_.blobs_.MergeFrom(from._impl_.blobs_);
  if (from._internal_has_blockhash()) {
    _this->_internal_mutable_blockhash()->::types::H256::MergeFrom(
        from._internal_blockhash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlobsBundleV1::CopyFrom(const BlobsBundleV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.BlobsBundleV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobsBundleV1::IsInitialized() const {
  return true;
}

void BlobsBundleV1::InternalSwap(BlobsBundleV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kzgs_.InternalSwap(&other->_impl_.kzgs_);
  _impl_.blobs_.InternalSwap(&other->_impl_.blobs_);
  swap(_impl_.blockhash_, other->_impl_.blockhash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobsBundleV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[9]);
}

// ===================================================================

class NodeInfoPorts::_Internal {
 public:
};

NodeInfoPorts::NodeInfoPorts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.NodeInfoPorts)
}
NodeInfoPorts::NodeInfoPorts(const NodeInfoPorts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeInfoPorts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.discovery_){}
    , decltype(_impl_.listener_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.discovery_, &from._impl_.discovery_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.listener_) -
    reinterpret_cast<char*>(&_impl_.discovery_)) + sizeof(_impl_.listener_));
  // @@protoc_insertion_point(copy_constructor:types.NodeInfoPorts)
}

inline void NodeInfoPorts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.discovery_){0u}
    , decltype(_impl_.listener_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeInfoPorts::~NodeInfoPorts() {
  // @@protoc_insertion_point(destructor:types.NodeInfoPorts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeInfoPorts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeInfoPorts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeInfoPorts::Clear() {
// @@protoc_insertion_point(message_clear_start:types.NodeInfoPorts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.discovery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.listener_) -
      reinterpret_cast<char*>(&_impl_.discovery_)) + sizeof(_impl_.listener_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfoPorts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 discovery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.discovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listener = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.listener_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInfoPorts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.NodeInfoPorts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 discovery = 1;
  if (this->_internal_discovery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_discovery(), target);
  }

  // uint32 listener = 2;
  if (this->_internal_listener() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_listener(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.NodeInfoPorts)
  return target;
}

size_t NodeInfoPorts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.NodeInfoPorts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 discovery = 1;
  if (this->_internal_discovery() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_discovery());
  }

  // uint32 listener = 2;
  if (this->_internal_listener() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listener());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfoPorts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeInfoPorts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfoPorts::GetClassData() const { return &_class_data_; }


void NodeInfoPorts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeInfoPorts*>(&to_msg);
  auto& from = static_cast<const NodeInfoPorts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.NodeInfoPorts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_discovery() != 0) {
    _this->_internal_set_discovery(from._internal_discovery());
  }
  if (from._internal_listener() != 0) {
    _this->_internal_set_listener(from._internal_listener());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfoPorts::CopyFrom(const NodeInfoPorts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.NodeInfoPorts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoPorts::IsInitialized() const {
  return true;
}

void NodeInfoPorts::InternalSwap(NodeInfoPorts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfoPorts, _impl_.listener_)
      + sizeof(NodeInfoPorts::_impl_.listener_)
      - PROTOBUF_FIELD_OFFSET(NodeInfoPorts, _impl_.discovery_)>(
          reinterpret_cast<char*>(&_impl_.discovery_),
          reinterpret_cast<char*>(&other->_impl_.discovery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoPorts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[10]);
}

// ===================================================================

class NodeInfoReply::_Internal {
 public:
  static const ::types::NodeInfoPorts& ports(const NodeInfoReply* msg);
};

const ::types::NodeInfoPorts&
NodeInfoReply::_Internal::ports(const NodeInfoReply* msg) {
  return *msg->_impl_.ports_;
}
NodeInfoReply::NodeInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.NodeInfoReply)
}
NodeInfoReply::NodeInfoReply(const NodeInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeInfoReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.enode_){}
    , decltype(_impl_.enr_){}
    , decltype(_impl_.listeneraddr_){}
    , decltype(_impl_.protocols_){}
    , decltype(_impl_.ports_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enode().empty()) {
    _this->_impl_.enode_.Set(from._internal_enode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enr().empty()) {
    _this->_impl_.enr_.Set(from._internal_enr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.listeneraddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listeneraddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_listeneraddr().empty()) {
    _this->_impl_.listeneraddr_.Set(from._internal_listeneraddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocols_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocols_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocols().empty()) {
    _this->_impl_.protocols_.Set(from._internal_protocols(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ports()) {
    _this->_impl_.ports_ = new ::types::NodeInfoPorts(*from._impl_.ports_);
  }
  // @@protoc_insertion_point(copy_constructor:types.NodeInfoReply)
}

inline void NodeInfoReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.enode_){}
    , decltype(_impl_.enr_){}
    , decltype(_impl_.listeneraddr_){}
    , decltype(_impl_.protocols_){}
    , decltype(_impl_.ports_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.listeneraddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listeneraddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocols_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocols_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeInfoReply::~NodeInfoReply() {
  // @@protoc_insertion_point(destructor:types.NodeInfoReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.enode_.Destroy();
  _impl_.enr_.Destroy();
  _impl_.listeneraddr_.Destroy();
  _impl_.protocols_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ports_;
}

void NodeInfoReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:types.NodeInfoReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.enode_.ClearToEmpty();
  _impl_.enr_.ClearToEmpty();
  _impl_.listeneraddr_.ClearToEmpty();
  _impl_.protocols_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ports_ != nullptr) {
    delete _impl_.ports_;
  }
  _impl_.ports_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfoReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.NodeInfoReply.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.NodeInfoReply.name"));
        } else
          goto handle_unusual;
        continue;
      // string enode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_enode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.NodeInfoReply.enode"));
        } else
          goto handle_unusual;
        continue;
      // string enr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_enr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.NodeInfoReply.enr"));
        } else
          goto handle_unusual;
        continue;
      // .types.NodeInfoPorts ports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ports(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string listenerAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_listeneraddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.NodeInfoReply.listenerAddr"));
        } else
          goto handle_unusual;
        continue;
      // bytes protocols = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_protocols();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeInfoReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.NodeInfoReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string enode = 3;
  if (!this->_internal_enode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enode().data(), static_cast<int>(this->_internal_enode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.enode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enode(), target);
  }

  // string enr = 4;
  if (!this->_internal_enr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enr().data(), static_cast<int>(this->_internal_enr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.enr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enr(), target);
  }

  // .types.NodeInfoPorts ports = 5;
  if (this->_internal_has_ports()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ports(this),
        _Internal::ports(this).GetCachedSize(), target, stream);
  }

  // string listenerAddr = 6;
  if (!this->_internal_listeneraddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listeneraddr().data(), static_cast<int>(this->_internal_listeneraddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.listenerAddr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_listeneraddr(), target);
  }

  // bytes protocols = 7;
  if (!this->_internal_protocols().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_protocols(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.NodeInfoReply)
  return target;
}

size_t NodeInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.NodeInfoReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string enode = 3;
  if (!this->_internal_enode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enode());
  }

  // string enr = 4;
  if (!this->_internal_enr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enr());
  }

  // string listenerAddr = 6;
  if (!this->_internal_listeneraddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listeneraddr());
  }

  // bytes protocols = 7;
  if (!this->_internal_protocols().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_protocols());
  }

  // .types.NodeInfoPorts ports = 5;
  if (this->_internal_has_ports()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ports_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfoReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeInfoReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfoReply::GetClassData() const { return &_class_data_; }


void NodeInfoReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeInfoReply*>(&to_msg);
  auto& from = static_cast<const NodeInfoReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.NodeInfoReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_enode().empty()) {
    _this->_internal_set_enode(from._internal_enode());
  }
  if (!from._internal_enr().empty()) {
    _this->_internal_set_enr(from._internal_enr());
  }
  if (!from._internal_listeneraddr().empty()) {
    _this->_internal_set_listeneraddr(from._internal_listeneraddr());
  }
  if (!from._internal_protocols().empty()) {
    _this->_internal_set_protocols(from._internal_protocols());
  }
  if (from._internal_has_ports()) {
    _this->_internal_mutable_ports()->::types::NodeInfoPorts::MergeFrom(
        from._internal_ports());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfoReply::CopyFrom(const NodeInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.NodeInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoReply::IsInitialized() const {
  return true;
}

void NodeInfoReply::InternalSwap(NodeInfoReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enode_, lhs_arena,
      &other->_impl_.enode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enr_, lhs_arena,
      &other->_impl_.enr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listeneraddr_, lhs_arena,
      &other->_impl_.listeneraddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocols_, lhs_arena,
      &other->_impl_.protocols_, rhs_arena
  );
  swap(_impl_.ports_, other->_impl_.ports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[11]);
}

// ===================================================================

class PeerInfo::_Internal {
 public:
};

PeerInfo::PeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.caps_){from._impl_.caps_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.enode_){}
    , decltype(_impl_.enr_){}
    , decltype(_impl_.connlocaladdr_){}
    , decltype(_impl_.connremoteaddr_){}
    , decltype(_impl_.connisinbound_){}
    , decltype(_impl_.connistrusted_){}
    , decltype(_impl_.connisstatic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enode().empty()) {
    _this->_impl_.enode_.Set(from._internal_enode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enr().empty()) {
    _this->_impl_.enr_.Set(from._internal_enr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connlocaladdr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connlocaladdr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connlocaladdr().empty()) {
    _this->_impl_.connlocaladdr_.Set(from._internal_connlocaladdr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connremoteaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connremoteaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connremoteaddr().empty()) {
    _this->_impl_.connremoteaddr_.Set(from._internal_connremoteaddr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.connisinbound_, &from._impl_.connisinbound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.connisstatic_) -
    reinterpret_cast<char*>(&_impl_.connisinbound_)) + sizeof(_impl_.connisstatic_));
  // @@protoc_insertion_point(copy_constructor:types.PeerInfo)
}

inline void PeerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.caps_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.enode_){}
    , decltype(_impl_.enr_){}
    , decltype(_impl_.connlocaladdr_){}
    , decltype(_impl_.connremoteaddr_){}
    , decltype(_impl_.connisinbound_){false}
    , decltype(_impl_.connistrusted_){false}
    , decltype(_impl_.connisstatic_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connlocaladdr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connlocaladdr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connremoteaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connremoteaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:types.PeerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.caps_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.enode_.Destroy();
  _impl_.enr_.Destroy();
  _impl_.connlocaladdr_.Destroy();
  _impl_.connremoteaddr_.Destroy();
}

void PeerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:types.PeerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.caps_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.enode_.ClearToEmpty();
  _impl_.enr_.ClearToEmpty();
  _impl_.connlocaladdr_.ClearToEmpty();
  _impl_.connremoteaddr_.ClearToEmpty();
  ::memset(&_impl_.connisinbound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.connisstatic_) -
      reinterpret_cast<char*>(&_impl_.connisinbound_)) + sizeof(_impl_.connisstatic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.PeerInfo.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.PeerInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string enode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_enode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.PeerInfo.enode"));
        } else
          goto handle_unusual;
        continue;
      // string enr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_enr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.PeerInfo.enr"));
        } else
          goto handle_unusual;
        continue;
      // repeated string caps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_caps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "types.PeerInfo.caps"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string connLocalAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_connlocaladdr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.PeerInfo.connLocalAddr"));
        } else
          goto handle_unusual;
        continue;
      // string connRemoteAddr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_connremoteaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "types.PeerInfo.connRemoteAddr"));
        } else
          goto handle_unusual;
        continue;
      // bool connIsInbound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.connisinbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool connIsTrusted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.connistrusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool connIsStatic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.connisstatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.PeerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string enode = 3;
  if (!this->_internal_enode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enode().data(), static_cast<int>(this->_internal_enode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.enode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enode(), target);
  }

  // string enr = 4;
  if (!this->_internal_enr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enr().data(), static_cast<int>(this->_internal_enr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.enr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enr(), target);
  }

  // repeated string caps = 5;
  for (int i = 0, n = this->_internal_caps_size(); i < n; i++) {
    const auto& s = this->_internal_caps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.caps");
    target = stream->WriteString(5, s, target);
  }

  // string connLocalAddr = 6;
  if (!this->_internal_connlocaladdr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connlocaladdr().data(), static_cast<int>(this->_internal_connlocaladdr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.connLocalAddr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_connlocaladdr(), target);
  }

  // string connRemoteAddr = 7;
  if (!this->_internal_connremoteaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connremoteaddr().data(), static_cast<int>(this->_internal_connremoteaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.connRemoteAddr");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_connremoteaddr(), target);
  }

  // bool connIsInbound = 8;
  if (this->_internal_connisinbound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_connisinbound(), target);
  }

  // bool connIsTrusted = 9;
  if (this->_internal_connistrusted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_connistrusted(), target);
  }

  // bool connIsStatic = 10;
  if (this->_internal_connisstatic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_connisstatic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.PeerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string caps = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.caps_.size());
  for (int i = 0, n = _impl_.caps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.caps_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string enode = 3;
  if (!this->_internal_enode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enode());
  }

  // string enr = 4;
  if (!this->_internal_enr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enr());
  }

  // string connLocalAddr = 6;
  if (!this->_internal_connlocaladdr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connlocaladdr());
  }

  // string connRemoteAddr = 7;
  if (!this->_internal_connremoteaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connremoteaddr());
  }

  // bool connIsInbound = 8;
  if (this->_internal_connisinbound() != 0) {
    total_size += 1 + 1;
  }

  // bool connIsTrusted = 9;
  if (this->_internal_connistrusted() != 0) {
    total_size += 1 + 1;
  }

  // bool connIsStatic = 10;
  if (this->_internal_connisstatic() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerInfo::GetClassData() const { return &_class_data_; }


void PeerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeerInfo*>(&to_msg);
  auto& from = static_cast<const PeerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.PeerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.caps_.MergeFrom(from._impl_.caps_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_enode().empty()) {
    _this->_internal_set_enode(from._internal_enode());
  }
  if (!from._internal_enr().empty()) {
    _this->_internal_set_enr(from._internal_enr());
  }
  if (!from._internal_connlocaladdr().empty()) {
    _this->_internal_set_connlocaladdr(from._internal_connlocaladdr());
  }
  if (!from._internal_connremoteaddr().empty()) {
    _this->_internal_set_connremoteaddr(from._internal_connremoteaddr());
  }
  if (from._internal_connisinbound() != 0) {
    _this->_internal_set_connisinbound(from._internal_connisinbound());
  }
  if (from._internal_connistrusted() != 0) {
    _this->_internal_set_connistrusted(from._internal_connistrusted());
  }
  if (from._internal_connisstatic() != 0) {
    _this->_internal_set_connisstatic(from._internal_connisstatic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::InternalSwap(PeerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.caps_.InternalSwap(&other->_impl_.caps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enode_, lhs_arena,
      &other->_impl_.enode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enr_, lhs_arena,
      &other->_impl_.enr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connlocaladdr_, lhs_arena,
      &other->_impl_.connlocaladdr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connremoteaddr_, lhs_arena,
      &other->_impl_.connremoteaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerInfo, _impl_.connisstatic_)
      + sizeof(PeerInfo::_impl_.connisstatic_)
      - PROTOBUF_FIELD_OFFSET(PeerInfo, _impl_.connisinbound_)>(
          reinterpret_cast<char*>(&_impl_.connisinbound_),
          reinterpret_cast<char*>(&other->_impl_.connisinbound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[12]);
}

// ===================================================================

class ExecutionPayloadBodyV1::_Internal {
 public:
};

ExecutionPayloadBodyV1::ExecutionPayloadBodyV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:types.ExecutionPayloadBodyV1)
}
ExecutionPayloadBodyV1::ExecutionPayloadBodyV1(const ExecutionPayloadBodyV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionPayloadBodyV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.withdrawals_){from._impl_.withdrawals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.ExecutionPayloadBodyV1)
}

inline void ExecutionPayloadBodyV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.withdrawals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExecutionPayloadBodyV1::~ExecutionPayloadBodyV1() {
  // @@protoc_insertion_point(destructor:types.ExecutionPayloadBodyV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionPayloadBodyV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  _impl_.withdrawals_.~RepeatedPtrField();
}

void ExecutionPayloadBodyV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionPayloadBodyV1::Clear() {
// @@protoc_insertion_point(message_clear_start:types.ExecutionPayloadBodyV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.withdrawals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionPayloadBodyV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionPayloadBodyV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ExecutionPayloadBodyV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes transactions = 1;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated .types.Withdrawal withdrawals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_withdrawals_size()); i < n; i++) {
    const auto& repfield = this->_internal_withdrawals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.ExecutionPayloadBodyV1)
  return target;
}

size_t ExecutionPayloadBodyV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.ExecutionPayloadBodyV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.transactions_.size());
  for (int i = 0, n = _impl_.transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.transactions_.Get(i));
  }

  // repeated .types.Withdrawal withdrawals = 2;
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->_impl_.withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionPayloadBodyV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionPayloadBodyV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionPayloadBodyV1::GetClassData() const { return &_class_data_; }


void ExecutionPayloadBodyV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionPayloadBodyV1*>(&to_msg);
  auto& from = static_cast<const ExecutionPayloadBodyV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:types.ExecutionPayloadBodyV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  _this->_impl_.withdrawals_.MergeFrom(from._impl_.withdrawals_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionPayloadBodyV1::CopyFrom(const ExecutionPayloadBodyV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.ExecutionPayloadBodyV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionPayloadBodyV1::IsInitialized() const {
  return true;
}

void ExecutionPayloadBodyV1::InternalSwap(ExecutionPayloadBodyV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  _impl_.withdrawals_.InternalSwap(&other->_impl_.withdrawals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionPayloadBodyV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_types_2ftypes_2eproto_getter, &descriptor_table_types_2ftypes_2eproto_once,
      file_level_metadata_types_2ftypes_2eproto[13]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  service_major_version(kServiceMajorVersionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  service_minor_version(kServiceMinorVersionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  service_patch_version(kServicePatchVersionFieldNumber, 0u, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::types::H128*
Arena::CreateMaybeMessage< ::types::H128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H128 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H160*
Arena::CreateMaybeMessage< ::types::H160 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H160 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H256*
Arena::CreateMaybeMessage< ::types::H256 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H256 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H512*
Arena::CreateMaybeMessage< ::types::H512 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H512 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H1024*
Arena::CreateMaybeMessage< ::types::H1024 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H1024 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H2048*
Arena::CreateMaybeMessage< ::types::H2048 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H2048 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::VersionReply*
Arena::CreateMaybeMessage< ::types::VersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::VersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::types::ExecutionPayload*
Arena::CreateMaybeMessage< ::types::ExecutionPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::ExecutionPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::types::Withdrawal*
Arena::CreateMaybeMessage< ::types::Withdrawal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::Withdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::types::BlobsBundleV1*
Arena::CreateMaybeMessage< ::types::BlobsBundleV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::BlobsBundleV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::NodeInfoPorts*
Arena::CreateMaybeMessage< ::types::NodeInfoPorts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::NodeInfoPorts >(arena);
}
template<> PROTOBUF_NOINLINE ::types::NodeInfoReply*
Arena::CreateMaybeMessage< ::types::NodeInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::NodeInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::types::PeerInfo*
Arena::CreateMaybeMessage< ::types::PeerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::PeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::types::ExecutionPayloadBodyV1*
Arena::CreateMaybeMessage< ::types::ExecutionPayloadBodyV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::ExecutionPayloadBodyV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
