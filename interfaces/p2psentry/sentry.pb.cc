// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2psentry/sentry.proto

#include "p2psentry/sentry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sentry {
constexpr OutboundMessageData::OutboundMessageData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
{}
struct OutboundMessageDataDefaultTypeInternal {
  constexpr OutboundMessageDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutboundMessageDataDefaultTypeInternal() {}
  union {
    OutboundMessageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutboundMessageDataDefaultTypeInternal _OutboundMessageData_default_instance_;
constexpr SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , min_block_(uint64_t{0u}){}
struct SendMessageByMinBlockRequestDefaultTypeInternal {
  constexpr SendMessageByMinBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendMessageByMinBlockRequestDefaultTypeInternal() {}
  union {
    SendMessageByMinBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMessageByMinBlockRequestDefaultTypeInternal _SendMessageByMinBlockRequest_default_instance_;
constexpr SendMessageByIdRequest::SendMessageByIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , peer_id_(nullptr){}
struct SendMessageByIdRequestDefaultTypeInternal {
  constexpr SendMessageByIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendMessageByIdRequestDefaultTypeInternal() {}
  union {
    SendMessageByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMessageByIdRequestDefaultTypeInternal _SendMessageByIdRequest_default_instance_;
constexpr SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , max_peers_(uint64_t{0u}){}
struct SendMessageToRandomPeersRequestDefaultTypeInternal {
  constexpr SendMessageToRandomPeersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendMessageToRandomPeersRequestDefaultTypeInternal() {}
  union {
    SendMessageToRandomPeersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMessageToRandomPeersRequestDefaultTypeInternal _SendMessageToRandomPeersRequest_default_instance_;
constexpr SentPeers::SentPeers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peers_(){}
struct SentPeersDefaultTypeInternal {
  constexpr SentPeersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SentPeersDefaultTypeInternal() {}
  union {
    SentPeers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SentPeersDefaultTypeInternal _SentPeers_default_instance_;
constexpr PenalizePeerRequest::PenalizePeerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_id_(nullptr)
  , penalty_(0)
{}
struct PenalizePeerRequestDefaultTypeInternal {
  constexpr PenalizePeerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PenalizePeerRequestDefaultTypeInternal() {}
  union {
    PenalizePeerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PenalizePeerRequestDefaultTypeInternal _PenalizePeerRequest_default_instance_;
constexpr PeerMinBlockRequest::PeerMinBlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_id_(nullptr)
  , min_block_(uint64_t{0u}){}
struct PeerMinBlockRequestDefaultTypeInternal {
  constexpr PeerMinBlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerMinBlockRequestDefaultTypeInternal() {}
  union {
    PeerMinBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerMinBlockRequestDefaultTypeInternal _PeerMinBlockRequest_default_instance_;
constexpr InboundMessage::InboundMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_id_(nullptr)
  , id_(0)
{}
struct InboundMessageDefaultTypeInternal {
  constexpr InboundMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InboundMessageDefaultTypeInternal() {}
  union {
    InboundMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InboundMessageDefaultTypeInternal _InboundMessage_default_instance_;
constexpr Forks::Forks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forks_()
  , _forks_cached_byte_size_(0)
  , genesis_(nullptr){}
struct ForksDefaultTypeInternal {
  constexpr ForksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ForksDefaultTypeInternal() {}
  union {
    Forks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ForksDefaultTypeInternal _Forks_default_instance_;
constexpr StatusData::StatusData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_difficulty_(nullptr)
  , best_hash_(nullptr)
  , fork_data_(nullptr)
  , network_id_(uint64_t{0u})
  , max_block_(uint64_t{0u}){}
struct StatusDataDefaultTypeInternal {
  constexpr StatusDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDataDefaultTypeInternal() {}
  union {
    StatusData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDataDefaultTypeInternal _StatusData_default_instance_;
constexpr SetStatusReply::SetStatusReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetStatusReplyDefaultTypeInternal {
  constexpr SetStatusReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetStatusReplyDefaultTypeInternal() {}
  union {
    SetStatusReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetStatusReplyDefaultTypeInternal _SetStatusReply_default_instance_;
constexpr HandShakeReply::HandShakeReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_(0)
{}
struct HandShakeReplyDefaultTypeInternal {
  constexpr HandShakeReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HandShakeReplyDefaultTypeInternal() {}
  union {
    HandShakeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HandShakeReplyDefaultTypeInternal _HandShakeReply_default_instance_;
constexpr MessagesRequest::MessagesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , _ids_cached_byte_size_(0){}
struct MessagesRequestDefaultTypeInternal {
  constexpr MessagesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessagesRequestDefaultTypeInternal() {}
  union {
    MessagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessagesRequestDefaultTypeInternal _MessagesRequest_default_instance_;
constexpr PeerCountRequest::PeerCountRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PeerCountRequestDefaultTypeInternal {
  constexpr PeerCountRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerCountRequestDefaultTypeInternal() {}
  union {
    PeerCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerCountRequestDefaultTypeInternal _PeerCountRequest_default_instance_;
constexpr PeerCountReply::PeerCountReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_(uint64_t{0u}){}
struct PeerCountReplyDefaultTypeInternal {
  constexpr PeerCountReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerCountReplyDefaultTypeInternal() {}
  union {
    PeerCountReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerCountReplyDefaultTypeInternal _PeerCountReply_default_instance_;
constexpr PeersRequest::PeersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PeersRequestDefaultTypeInternal {
  constexpr PeersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeersRequestDefaultTypeInternal() {}
  union {
    PeersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeersRequestDefaultTypeInternal _PeersRequest_default_instance_;
constexpr PeersReply::PeersReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_id_(nullptr)
  , event_(0)
{}
struct PeersReplyDefaultTypeInternal {
  constexpr PeersReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeersReplyDefaultTypeInternal() {}
  union {
    PeersReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeersReplyDefaultTypeInternal _PeersReply_default_instance_;
}  // namespace sentry
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p2psentry_2fsentry_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_p2psentry_2fsentry_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p2psentry_2fsentry_2eproto = nullptr;

const uint32_t TableStruct_p2psentry_2fsentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, id_),
  PROTOBUF_FIELD_OFFSET(::sentry::OutboundMessageData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByMinBlockRequest, min_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageByIdRequest, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::SendMessageToRandomPeersRequest, max_peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::SentPeers, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PenalizePeerRequest, penalty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeerMinBlockRequest, min_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, id_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, data_),
  PROTOBUF_FIELD_OFFSET(::sentry::InboundMessage, peer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, genesis_),
  PROTOBUF_FIELD_OFFSET(::sentry::Forks, forks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, network_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, total_difficulty_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, best_hash_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, fork_data_),
  PROTOBUF_FIELD_OFFSET(::sentry::StatusData, max_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::SetStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::HandShakeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::HandShakeReply, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::MessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::MessagesRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeerCountReply, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sentry::PeersReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sentry::PeersReply, peer_id_),
  PROTOBUF_FIELD_OFFSET(::sentry::PeersReply, event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sentry::OutboundMessageData)},
  { 8, -1, -1, sizeof(::sentry::SendMessageByMinBlockRequest)},
  { 16, -1, -1, sizeof(::sentry::SendMessageByIdRequest)},
  { 24, -1, -1, sizeof(::sentry::SendMessageToRandomPeersRequest)},
  { 32, -1, -1, sizeof(::sentry::SentPeers)},
  { 39, -1, -1, sizeof(::sentry::PenalizePeerRequest)},
  { 47, -1, -1, sizeof(::sentry::PeerMinBlockRequest)},
  { 55, -1, -1, sizeof(::sentry::InboundMessage)},
  { 64, -1, -1, sizeof(::sentry::Forks)},
  { 72, -1, -1, sizeof(::sentry::StatusData)},
  { 83, -1, -1, sizeof(::sentry::SetStatusReply)},
  { 89, -1, -1, sizeof(::sentry::HandShakeReply)},
  { 96, -1, -1, sizeof(::sentry::MessagesRequest)},
  { 103, -1, -1, sizeof(::sentry::PeerCountRequest)},
  { 109, -1, -1, sizeof(::sentry::PeerCountReply)},
  { 116, -1, -1, sizeof(::sentry::PeersRequest)},
  { 122, -1, -1, sizeof(::sentry::PeersReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_OutboundMessageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageByMinBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageByIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SendMessageToRandomPeersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SentPeers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PenalizePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerMinBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_InboundMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_Forks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_StatusData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_SetStatusReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_HandShakeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_MessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeerCountReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sentry::_PeersReply_default_instance_),
};

const char descriptor_table_protodef_p2psentry_2fsentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026p2psentry/sentry.proto\022\006sentry\032\033google"
  "/protobuf/empty.proto\032\021types/types.proto"
  "\"B\n\023OutboundMessageData\022\035\n\002id\030\001 \001(\0162\021.se"
  "ntry.MessageId\022\014\n\004data\030\002 \001(\014\"\\\n\034SendMess"
  "ageByMinBlockRequest\022)\n\004data\030\001 \001(\0132\033.sen"
  "try.OutboundMessageData\022\021\n\tmin_block\030\002 \001"
  "(\004\"a\n\026SendMessageByIdRequest\022)\n\004data\030\001 \001"
  "(\0132\033.sentry.OutboundMessageData\022\034\n\007peer_"
  "id\030\002 \001(\0132\013.types.H512\"_\n\037SendMessageToRa"
  "ndomPeersRequest\022)\n\004data\030\001 \001(\0132\033.sentry."
  "OutboundMessageData\022\021\n\tmax_peers\030\002 \001(\004\"\'"
  "\n\tSentPeers\022\032\n\005peers\030\001 \003(\0132\013.types.H512\""
  "Y\n\023PenalizePeerRequest\022\034\n\007peer_id\030\001 \001(\0132"
  "\013.types.H512\022$\n\007penalty\030\002 \001(\0162\023.sentry.P"
  "enaltyKind\"F\n\023PeerMinBlockRequest\022\034\n\007pee"
  "r_id\030\001 \001(\0132\013.types.H512\022\021\n\tmin_block\030\002 \001"
  "(\004\"[\n\016InboundMessage\022\035\n\002id\030\001 \001(\0162\021.sentr"
  "y.MessageId\022\014\n\004data\030\002 \001(\014\022\034\n\007peer_id\030\003 \001"
  "(\0132\013.types.H512\"4\n\005Forks\022\034\n\007genesis\030\001 \001("
  "\0132\013.types.H256\022\r\n\005forks\030\002 \003(\004\"\234\001\n\nStatus"
  "Data\022\022\n\nnetwork_id\030\001 \001(\004\022%\n\020total_diffic"
  "ulty\030\002 \001(\0132\013.types.H256\022\036\n\tbest_hash\030\003 \001"
  "(\0132\013.types.H256\022 \n\tfork_data\030\004 \001(\0132\r.sen"
  "try.Forks\022\021\n\tmax_block\030\005 \001(\004\"\020\n\016SetStatu"
  "sReply\"4\n\016HandShakeReply\022\"\n\010protocol\030\001 \001"
  "(\0162\020.sentry.Protocol\"1\n\017MessagesRequest\022"
  "\036\n\003ids\030\001 \003(\0162\021.sentry.MessageId\"\022\n\020PeerC"
  "ountRequest\"\037\n\016PeerCountReply\022\r\n\005count\030\001"
  " \001(\004\"\016\n\014PeersRequest\"\201\001\n\nPeersReply\022\034\n\007p"
  "eer_id\030\001 \001(\0132\013.types.H512\022+\n\005event\030\002 \001(\016"
  "2\034.sentry.PeersReply.PeerEvent\"(\n\tPeerEv"
  "ent\022\013\n\007Connect\020\000\022\016\n\nDisconnect\020\001*\332\005\n\tMes"
  "sageId\022\r\n\tSTATUS_65\020\000\022\030\n\024GET_BLOCK_HEADE"
  "RS_65\020\001\022\024\n\020BLOCK_HEADERS_65\020\002\022\023\n\017BLOCK_H"
  "ASHES_65\020\003\022\027\n\023GET_BLOCK_BODIES_65\020\004\022\023\n\017B"
  "LOCK_BODIES_65\020\005\022\024\n\020GET_NODE_DATA_65\020\006\022\020"
  "\n\014NODE_DATA_65\020\007\022\023\n\017GET_RECEIPTS_65\020\010\022\017\n"
  "\013RECEIPTS_65\020\t\022\027\n\023NEW_BLOCK_HASHES_65\020\n\022"
  "\020\n\014NEW_BLOCK_65\020\013\022\023\n\017TRANSACTIONS_65\020\014\022$"
  "\n NEW_POOLED_TRANSACTION_HASHES_65\020\r\022\036\n\032"
  "GET_POOLED_TRANSACTIONS_65\020\016\022\032\n\026POOLED_T"
  "RANSACTIONS_65\020\017\022\r\n\tSTATUS_66\020\021\022\027\n\023NEW_B"
  "LOCK_HASHES_66\020\022\022\020\n\014NEW_BLOCK_66\020\023\022\023\n\017TR"
  "ANSACTIONS_66\020\024\022$\n NEW_POOLED_TRANSACTIO"
  "N_HASHES_66\020\025\022\030\n\024GET_BLOCK_HEADERS_66\020\026\022"
  "\027\n\023GET_BLOCK_BODIES_66\020\027\022\024\n\020GET_NODE_DAT"
  "A_66\020\030\022\023\n\017GET_RECEIPTS_66\020\031\022\036\n\032GET_POOLE"
  "D_TRANSACTIONS_66\020\032\022\024\n\020BLOCK_HEADERS_66\020"
  "\033\022\023\n\017BLOCK_BODIES_66\020\034\022\020\n\014NODE_DATA_66\020\035"
  "\022\017\n\013RECEIPTS_66\020\036\022\032\n\026POOLED_TRANSACTIONS"
  "_66\020\037*\027\n\013PenaltyKind\022\010\n\004Kick\020\000* \n\010Protoc"
  "ol\022\t\n\005ETH65\020\000\022\t\n\005ETH66\020\0012\251\006\n\006Sentry\0227\n\tS"
  "etStatus\022\022.sentry.StatusData\032\026.sentry.Se"
  "tStatusReply\022C\n\014PenalizePeer\022\033.sentry.Pe"
  "nalizePeerRequest\032\026.google.protobuf.Empt"
  "y\022C\n\014PeerMinBlock\022\033.sentry.PeerMinBlockR"
  "equest\032\026.google.protobuf.Empty\022;\n\tHandSh"
  "ake\022\026.google.protobuf.Empty\032\026.sentry.Han"
  "dShakeReply\022P\n\025SendMessageByMinBlock\022$.s"
  "entry.SendMessageByMinBlockRequest\032\021.sen"
  "try.SentPeers\022D\n\017SendMessageById\022\036.sentr"
  "y.SendMessageByIdRequest\032\021.sentry.SentPe"
  "ers\022V\n\030SendMessageToRandomPeers\022\'.sentry"
  ".SendMessageToRandomPeersRequest\032\021.sentr"
  "y.SentPeers\022B\n\020SendMessageToAll\022\033.sentry"
  ".OutboundMessageData\032\021.sentry.SentPeers\022"
  "=\n\010Messages\022\027.sentry.MessagesRequest\032\026.s"
  "entry.InboundMessage0\001\022=\n\tPeerCount\022\030.se"
  "ntry.PeerCountRequest\032\026.sentry.PeerCount"
  "Reply\0223\n\005Peers\022\024.sentry.PeersRequest\032\022.s"
  "entry.PeersReply0\001\0228\n\010NodeInfo\022\026.google."
  "protobuf.Empty\032\024.types.NodeInfoReplyB\021Z\017"
  "./sentry;sentryb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_p2psentry_2fsentry_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p2psentry_2fsentry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p2psentry_2fsentry_2eproto = {
  false, false, 2903, descriptor_table_protodef_p2psentry_2fsentry_2eproto, "p2psentry/sentry.proto", 
  &descriptor_table_p2psentry_2fsentry_2eproto_once, descriptor_table_p2psentry_2fsentry_2eproto_deps, 2, 17,
  schemas, file_default_instances, TableStruct_p2psentry_2fsentry_2eproto::offsets,
  file_level_metadata_p2psentry_2fsentry_2eproto, file_level_enum_descriptors_p2psentry_2fsentry_2eproto, file_level_service_descriptors_p2psentry_2fsentry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_p2psentry_2fsentry_2eproto_getter() {
  return &descriptor_table_p2psentry_2fsentry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_p2psentry_2fsentry_2eproto(&descriptor_table_p2psentry_2fsentry_2eproto);
namespace sentry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeersReply_PeerEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[0];
}
bool PeersReply_PeerEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PeersReply_PeerEvent PeersReply::Connect;
constexpr PeersReply_PeerEvent PeersReply::Disconnect;
constexpr PeersReply_PeerEvent PeersReply::PeerEvent_MIN;
constexpr PeersReply_PeerEvent PeersReply::PeerEvent_MAX;
constexpr int PeersReply::PeerEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[1];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PenaltyKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[2];
}
bool PenaltyKind_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_p2psentry_2fsentry_2eproto);
  return file_level_enum_descriptors_p2psentry_2fsentry_2eproto[3];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OutboundMessageData::_Internal {
 public:
};

OutboundMessageData::OutboundMessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.OutboundMessageData)
}
OutboundMessageData::OutboundMessageData(const OutboundMessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.OutboundMessageData)
}

inline void OutboundMessageData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = 0;
}

OutboundMessageData::~OutboundMessageData() {
  // @@protoc_insertion_point(destructor:sentry.OutboundMessageData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutboundMessageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutboundMessageData::ArenaDtor(void* object) {
  OutboundMessageData* _this = reinterpret_cast< OutboundMessageData* >(object);
  (void)_this;
}
void OutboundMessageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutboundMessageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutboundMessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.OutboundMessageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutboundMessageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutboundMessageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.OutboundMessageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.OutboundMessageData)
  return target;
}

size_t OutboundMessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.OutboundMessageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutboundMessageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutboundMessageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutboundMessageData::GetClassData() const { return &_class_data_; }

void OutboundMessageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutboundMessageData *>(to)->MergeFrom(
      static_cast<const OutboundMessageData &>(from));
}


void OutboundMessageData::MergeFrom(const OutboundMessageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.OutboundMessageData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutboundMessageData::CopyFrom(const OutboundMessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.OutboundMessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundMessageData::IsInitialized() const {
  return true;
}

void OutboundMessageData::InternalSwap(OutboundMessageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutboundMessageData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[0]);
}

// ===================================================================

class SendMessageByMinBlockRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByMinBlockRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByMinBlockRequest::_Internal::data(const SendMessageByMinBlockRequest* msg) {
  return *msg->data_;
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByMinBlockRequest)
}
SendMessageByMinBlockRequest::SendMessageByMinBlockRequest(const SendMessageByMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  min_block_ = from.min_block_;
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByMinBlockRequest)
}

inline void SendMessageByMinBlockRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_block_) -
    reinterpret_cast<char*>(&data_)) + sizeof(min_block_));
}

SendMessageByMinBlockRequest::~SendMessageByMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByMinBlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendMessageByMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SendMessageByMinBlockRequest::ArenaDtor(void* object) {
  SendMessageByMinBlockRequest* _this = reinterpret_cast< SendMessageByMinBlockRequest* >(object);
  (void)_this;
}
void SendMessageByMinBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageByMinBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMessageByMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByMinBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  min_block_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByMinBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageByMinBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByMinBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByMinBlockRequest)
  return target;
}

size_t SendMessageByMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByMinBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_min_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageByMinBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendMessageByMinBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageByMinBlockRequest::GetClassData() const { return &_class_data_; }

void SendMessageByMinBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendMessageByMinBlockRequest *>(to)->MergeFrom(
      static_cast<const SendMessageByMinBlockRequest &>(from));
}


void SendMessageByMinBlockRequest::MergeFrom(const SendMessageByMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from._internal_min_block() != 0) {
    _internal_set_min_block(from._internal_min_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageByMinBlockRequest::CopyFrom(const SendMessageByMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByMinBlockRequest::IsInitialized() const {
  return true;
}

void SendMessageByMinBlockRequest::InternalSwap(SendMessageByMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, min_block_)
      + sizeof(SendMessageByMinBlockRequest::min_block_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByMinBlockRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByMinBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[1]);
}

// ===================================================================

class SendMessageByIdRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageByIdRequest* msg);
  static const ::types::H512& peer_id(const SendMessageByIdRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageByIdRequest::_Internal::data(const SendMessageByIdRequest* msg) {
  return *msg->data_;
}
const ::types::H512&
SendMessageByIdRequest::_Internal::peer_id(const SendMessageByIdRequest* msg) {
  return *msg->peer_id_;
}
void SendMessageByIdRequest::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
SendMessageByIdRequest::SendMessageByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageByIdRequest)
}
SendMessageByIdRequest::SendMessageByIdRequest(const SendMessageByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageByIdRequest)
}

inline void SendMessageByIdRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&peer_id_) -
    reinterpret_cast<char*>(&data_)) + sizeof(peer_id_));
}

SendMessageByIdRequest::~SendMessageByIdRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageByIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendMessageByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete peer_id_;
}

void SendMessageByIdRequest::ArenaDtor(void* object) {
  SendMessageByIdRequest* _this = reinterpret_cast< SendMessageByIdRequest* >(object);
  (void)_this;
}
void SendMessageByIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageByIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMessageByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageByIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H512 peer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // .types.H512 peer_id = 2;
  if (this->_internal_has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::peer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageByIdRequest)
  return target;
}

size_t SendMessageByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .types.H512 peer_id = 2;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendMessageByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageByIdRequest::GetClassData() const { return &_class_data_; }

void SendMessageByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendMessageByIdRequest *>(to)->MergeFrom(
      static_cast<const SendMessageByIdRequest &>(from));
}


void SendMessageByIdRequest::MergeFrom(const SendMessageByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from._internal_has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageByIdRequest::CopyFrom(const SendMessageByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageByIdRequest::IsInitialized() const {
  return true;
}

void SendMessageByIdRequest::InternalSwap(SendMessageByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, peer_id_)
      + sizeof(SendMessageByIdRequest::peer_id_)
      - PROTOBUF_FIELD_OFFSET(SendMessageByIdRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageByIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[2]);
}

// ===================================================================

class SendMessageToRandomPeersRequest::_Internal {
 public:
  static const ::sentry::OutboundMessageData& data(const SendMessageToRandomPeersRequest* msg);
};

const ::sentry::OutboundMessageData&
SendMessageToRandomPeersRequest::_Internal::data(const SendMessageToRandomPeersRequest* msg) {
  return *msg->data_;
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.SendMessageToRandomPeersRequest)
}
SendMessageToRandomPeersRequest::SendMessageToRandomPeersRequest(const SendMessageToRandomPeersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::sentry::OutboundMessageData(*from.data_);
  } else {
    data_ = nullptr;
  }
  max_peers_ = from.max_peers_;
  // @@protoc_insertion_point(copy_constructor:sentry.SendMessageToRandomPeersRequest)
}

inline void SendMessageToRandomPeersRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_peers_) -
    reinterpret_cast<char*>(&data_)) + sizeof(max_peers_));
}

SendMessageToRandomPeersRequest::~SendMessageToRandomPeersRequest() {
  // @@protoc_insertion_point(destructor:sentry.SendMessageToRandomPeersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendMessageToRandomPeersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void SendMessageToRandomPeersRequest::ArenaDtor(void* object) {
  SendMessageToRandomPeersRequest* _this = reinterpret_cast< SendMessageToRandomPeersRequest* >(object);
  (void)_this;
}
void SendMessageToRandomPeersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageToRandomPeersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMessageToRandomPeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SendMessageToRandomPeersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  max_peers_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageToRandomPeersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.OutboundMessageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_peers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageToRandomPeersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SendMessageToRandomPeersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // uint64 max_peers = 2;
  if (this->_internal_max_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_peers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SendMessageToRandomPeersRequest)
  return target;
}

size_t SendMessageToRandomPeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SendMessageToRandomPeersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.OutboundMessageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 max_peers = 2;
  if (this->_internal_max_peers() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_max_peers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageToRandomPeersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendMessageToRandomPeersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageToRandomPeersRequest::GetClassData() const { return &_class_data_; }

void SendMessageToRandomPeersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendMessageToRandomPeersRequest *>(to)->MergeFrom(
      static_cast<const SendMessageToRandomPeersRequest &>(from));
}


void SendMessageToRandomPeersRequest::MergeFrom(const SendMessageToRandomPeersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SendMessageToRandomPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::sentry::OutboundMessageData::MergeFrom(from._internal_data());
  }
  if (from._internal_max_peers() != 0) {
    _internal_set_max_peers(from._internal_max_peers());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageToRandomPeersRequest::CopyFrom(const SendMessageToRandomPeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SendMessageToRandomPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageToRandomPeersRequest::IsInitialized() const {
  return true;
}

void SendMessageToRandomPeersRequest::InternalSwap(SendMessageToRandomPeersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, max_peers_)
      + sizeof(SendMessageToRandomPeersRequest::max_peers_)
      - PROTOBUF_FIELD_OFFSET(SendMessageToRandomPeersRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageToRandomPeersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[3]);
}

// ===================================================================

class SentPeers::_Internal {
 public:
};

void SentPeers::clear_peers() {
  peers_.Clear();
}
SentPeers::SentPeers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.SentPeers)
}
SentPeers::SentPeers(const SentPeers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.SentPeers)
}

inline void SentPeers::SharedCtor() {
}

SentPeers::~SentPeers() {
  // @@protoc_insertion_point(destructor:sentry.SentPeers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SentPeers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SentPeers::ArenaDtor(void* object) {
  SentPeers* _this = reinterpret_cast< SentPeers* >(object);
  (void)_this;
}
void SentPeers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SentPeers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SentPeers::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.SentPeers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentPeers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.H512 peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SentPeers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.SentPeers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.SentPeers)
  return target;
}

size_t SentPeers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.SentPeers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H512 peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SentPeers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SentPeers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SentPeers::GetClassData() const { return &_class_data_; }

void SentPeers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SentPeers *>(to)->MergeFrom(
      static_cast<const SentPeers &>(from));
}


void SentPeers::MergeFrom(const SentPeers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.SentPeers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SentPeers::CopyFrom(const SentPeers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.SentPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentPeers::IsInitialized() const {
  return true;
}

void SentPeers::InternalSwap(SentPeers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SentPeers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[4]);
}

// ===================================================================

class PenalizePeerRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PenalizePeerRequest* msg);
};

const ::types::H512&
PenalizePeerRequest::_Internal::peer_id(const PenalizePeerRequest* msg) {
  return *msg->peer_id_;
}
void PenalizePeerRequest::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PenalizePeerRequest::PenalizePeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.PenalizePeerRequest)
}
PenalizePeerRequest::PenalizePeerRequest(const PenalizePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  penalty_ = from.penalty_;
  // @@protoc_insertion_point(copy_constructor:sentry.PenalizePeerRequest)
}

inline void PenalizePeerRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&penalty_) -
    reinterpret_cast<char*>(&peer_id_)) + sizeof(penalty_));
}

PenalizePeerRequest::~PenalizePeerRequest() {
  // @@protoc_insertion_point(destructor:sentry.PenalizePeerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PenalizePeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PenalizePeerRequest::ArenaDtor(void* object) {
  PenalizePeerRequest* _this = reinterpret_cast< PenalizePeerRequest* >(object);
  (void)_this;
}
void PenalizePeerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PenalizePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PenalizePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PenalizePeerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  penalty_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PenalizePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sentry.PenaltyKind penalty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_penalty(static_cast<::sentry::PenaltyKind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PenalizePeerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PenalizePeerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->_internal_penalty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PenalizePeerRequest)
  return target;
}

size_t PenalizePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PenalizePeerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.PenaltyKind penalty = 2;
  if (this->_internal_penalty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_penalty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PenalizePeerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PenalizePeerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PenalizePeerRequest::GetClassData() const { return &_class_data_; }

void PenalizePeerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PenalizePeerRequest *>(to)->MergeFrom(
      static_cast<const PenalizePeerRequest &>(from));
}


void PenalizePeerRequest::MergeFrom(const PenalizePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PenalizePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from._internal_penalty() != 0) {
    _internal_set_penalty(from._internal_penalty());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PenalizePeerRequest::CopyFrom(const PenalizePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PenalizePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PenalizePeerRequest::IsInitialized() const {
  return true;
}

void PenalizePeerRequest::InternalSwap(PenalizePeerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, penalty_)
      + sizeof(PenalizePeerRequest::penalty_)
      - PROTOBUF_FIELD_OFFSET(PenalizePeerRequest, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PenalizePeerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[5]);
}

// ===================================================================

class PeerMinBlockRequest::_Internal {
 public:
  static const ::types::H512& peer_id(const PeerMinBlockRequest* msg);
};

const ::types::H512&
PeerMinBlockRequest::_Internal::peer_id(const PeerMinBlockRequest* msg) {
  return *msg->peer_id_;
}
void PeerMinBlockRequest::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PeerMinBlockRequest::PeerMinBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.PeerMinBlockRequest)
}
PeerMinBlockRequest::PeerMinBlockRequest(const PeerMinBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  min_block_ = from.min_block_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerMinBlockRequest)
}

inline void PeerMinBlockRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_block_) -
    reinterpret_cast<char*>(&peer_id_)) + sizeof(min_block_));
}

PeerMinBlockRequest::~PeerMinBlockRequest() {
  // @@protoc_insertion_point(destructor:sentry.PeerMinBlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PeerMinBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PeerMinBlockRequest::ArenaDtor(void* object) {
  PeerMinBlockRequest* _this = reinterpret_cast< PeerMinBlockRequest* >(object);
  (void)_this;
}
void PeerMinBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerMinBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerMinBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerMinBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  min_block_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerMinBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          min_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerMinBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerMinBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerMinBlockRequest)
  return target;
}

size_t PeerMinBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerMinBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // uint64 min_block = 2;
  if (this->_internal_min_block() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_min_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerMinBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PeerMinBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerMinBlockRequest::GetClassData() const { return &_class_data_; }

void PeerMinBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PeerMinBlockRequest *>(to)->MergeFrom(
      static_cast<const PeerMinBlockRequest &>(from));
}


void PeerMinBlockRequest::MergeFrom(const PeerMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerMinBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from._internal_min_block() != 0) {
    _internal_set_min_block(from._internal_min_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerMinBlockRequest::CopyFrom(const PeerMinBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerMinBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerMinBlockRequest::IsInitialized() const {
  return true;
}

void PeerMinBlockRequest::InternalSwap(PeerMinBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, min_block_)
      + sizeof(PeerMinBlockRequest::min_block_)
      - PROTOBUF_FIELD_OFFSET(PeerMinBlockRequest, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerMinBlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[6]);
}

// ===================================================================

class InboundMessage::_Internal {
 public:
  static const ::types::H512& peer_id(const InboundMessage* msg);
};

const ::types::H512&
InboundMessage::_Internal::peer_id(const InboundMessage* msg) {
  return *msg->peer_id_;
}
void InboundMessage::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
InboundMessage::InboundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.InboundMessage)
}
InboundMessage::InboundMessage(const InboundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sentry.InboundMessage)
}

inline void InboundMessage::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&peer_id_)) + sizeof(id_));
}

InboundMessage::~InboundMessage() {
  // @@protoc_insertion_point(destructor:sentry.InboundMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InboundMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_id_;
}

void InboundMessage::ArenaDtor(void* object) {
  InboundMessage* _this = reinterpret_cast< InboundMessage* >(object);
  (void)_this;
}
void InboundMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InboundMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InboundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.InboundMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InboundMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.MessageId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::sentry::MessageId>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H512 peer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InboundMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.InboundMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .types.H512 peer_id = 3;
  if (this->_internal_has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.InboundMessage)
  return target;
}

size_t InboundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.InboundMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H512 peer_id = 3;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.MessageId id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InboundMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InboundMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InboundMessage::GetClassData() const { return &_class_data_; }

void InboundMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InboundMessage *>(to)->MergeFrom(
      static_cast<const InboundMessage &>(from));
}


void InboundMessage::MergeFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.InboundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InboundMessage::CopyFrom(const InboundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.InboundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundMessage::IsInitialized() const {
  return true;
}

void InboundMessage::InternalSwap(InboundMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboundMessage, id_)
      + sizeof(InboundMessage::id_)
      - PROTOBUF_FIELD_OFFSET(InboundMessage, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InboundMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[7]);
}

// ===================================================================

class Forks::_Internal {
 public:
  static const ::types::H256& genesis(const Forks* msg);
};

const ::types::H256&
Forks::_Internal::genesis(const Forks* msg) {
  return *msg->genesis_;
}
void Forks::clear_genesis() {
  if (GetArenaForAllocation() == nullptr && genesis_ != nullptr) {
    delete genesis_;
  }
  genesis_ = nullptr;
}
Forks::Forks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  forks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.Forks)
}
Forks::Forks(const Forks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      forks_(from.forks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_genesis()) {
    genesis_ = new ::types::H256(*from.genesis_);
  } else {
    genesis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sentry.Forks)
}

inline void Forks::SharedCtor() {
genesis_ = nullptr;
}

Forks::~Forks() {
  // @@protoc_insertion_point(destructor:sentry.Forks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Forks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete genesis_;
}

void Forks::ArenaDtor(void* object) {
  Forks* _this = reinterpret_cast< Forks* >(object);
  (void)_this;
}
void Forks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Forks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Forks::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.Forks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forks_.Clear();
  if (GetArenaForAllocation() == nullptr && genesis_ != nullptr) {
    delete genesis_;
  }
  genesis_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Forks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 genesis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_genesis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 forks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_forks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_forks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Forks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.Forks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 genesis = 1;
  if (this->_internal_has_genesis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::genesis(this), target, stream);
  }

  // repeated uint64 forks = 2;
  {
    int byte_size = _forks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_forks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.Forks)
  return target;
}

size_t Forks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.Forks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 forks = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->forks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _forks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .types.H256 genesis = 1;
  if (this->_internal_has_genesis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *genesis_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Forks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Forks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Forks::GetClassData() const { return &_class_data_; }

void Forks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Forks *>(to)->MergeFrom(
      static_cast<const Forks &>(from));
}


void Forks::MergeFrom(const Forks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.Forks)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  forks_.MergeFrom(from.forks_);
  if (from._internal_has_genesis()) {
    _internal_mutable_genesis()->::types::H256::MergeFrom(from._internal_genesis());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Forks::CopyFrom(const Forks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.Forks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Forks::IsInitialized() const {
  return true;
}

void Forks::InternalSwap(Forks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  forks_.InternalSwap(&other->forks_);
  swap(genesis_, other->genesis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Forks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[8]);
}

// ===================================================================

class StatusData::_Internal {
 public:
  static const ::types::H256& total_difficulty(const StatusData* msg);
  static const ::types::H256& best_hash(const StatusData* msg);
  static const ::sentry::Forks& fork_data(const StatusData* msg);
};

const ::types::H256&
StatusData::_Internal::total_difficulty(const StatusData* msg) {
  return *msg->total_difficulty_;
}
const ::types::H256&
StatusData::_Internal::best_hash(const StatusData* msg) {
  return *msg->best_hash_;
}
const ::sentry::Forks&
StatusData::_Internal::fork_data(const StatusData* msg) {
  return *msg->fork_data_;
}
void StatusData::clear_total_difficulty() {
  if (GetArenaForAllocation() == nullptr && total_difficulty_ != nullptr) {
    delete total_difficulty_;
  }
  total_difficulty_ = nullptr;
}
void StatusData::clear_best_hash() {
  if (GetArenaForAllocation() == nullptr && best_hash_ != nullptr) {
    delete best_hash_;
  }
  best_hash_ = nullptr;
}
StatusData::StatusData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.StatusData)
}
StatusData::StatusData(const StatusData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_difficulty()) {
    total_difficulty_ = new ::types::H256(*from.total_difficulty_);
  } else {
    total_difficulty_ = nullptr;
  }
  if (from._internal_has_best_hash()) {
    best_hash_ = new ::types::H256(*from.best_hash_);
  } else {
    best_hash_ = nullptr;
  }
  if (from._internal_has_fork_data()) {
    fork_data_ = new ::sentry::Forks(*from.fork_data_);
  } else {
    fork_data_ = nullptr;
  }
  ::memcpy(&network_id_, &from.network_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_block_) -
    reinterpret_cast<char*>(&network_id_)) + sizeof(max_block_));
  // @@protoc_insertion_point(copy_constructor:sentry.StatusData)
}

inline void StatusData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_difficulty_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_block_) -
    reinterpret_cast<char*>(&total_difficulty_)) + sizeof(max_block_));
}

StatusData::~StatusData() {
  // @@protoc_insertion_point(destructor:sentry.StatusData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete total_difficulty_;
  if (this != internal_default_instance()) delete best_hash_;
  if (this != internal_default_instance()) delete fork_data_;
}

void StatusData::ArenaDtor(void* object) {
  StatusData* _this = reinterpret_cast< StatusData* >(object);
  (void)_this;
}
void StatusData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.StatusData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && total_difficulty_ != nullptr) {
    delete total_difficulty_;
  }
  total_difficulty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && best_hash_ != nullptr) {
    delete best_hash_;
  }
  best_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fork_data_ != nullptr) {
    delete fork_data_;
  }
  fork_data_ = nullptr;
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_block_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(max_block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 network_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 total_difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_difficulty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 best_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sentry.Forks fork_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fork_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          max_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.StatusData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 network_id = 1;
  if (this->_internal_network_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_network_id(), target);
  }

  // .types.H256 total_difficulty = 2;
  if (this->_internal_has_total_difficulty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total_difficulty(this), target, stream);
  }

  // .types.H256 best_hash = 3;
  if (this->_internal_has_best_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::best_hash(this), target, stream);
  }

  // .sentry.Forks fork_data = 4;
  if (this->_internal_has_fork_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fork_data(this), target, stream);
  }

  // uint64 max_block = 5;
  if (this->_internal_max_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_max_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.StatusData)
  return target;
}

size_t StatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.StatusData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 total_difficulty = 2;
  if (this->_internal_has_total_difficulty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_difficulty_);
  }

  // .types.H256 best_hash = 3;
  if (this->_internal_has_best_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *best_hash_);
  }

  // .sentry.Forks fork_data = 4;
  if (this->_internal_has_fork_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fork_data_);
  }

  // uint64 network_id = 1;
  if (this->_internal_network_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_network_id());
  }

  // uint64 max_block = 5;
  if (this->_internal_max_block() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_max_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusData::GetClassData() const { return &_class_data_; }

void StatusData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusData *>(to)->MergeFrom(
      static_cast<const StatusData &>(from));
}


void StatusData::MergeFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.StatusData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_total_difficulty()) {
    _internal_mutable_total_difficulty()->::types::H256::MergeFrom(from._internal_total_difficulty());
  }
  if (from._internal_has_best_hash()) {
    _internal_mutable_best_hash()->::types::H256::MergeFrom(from._internal_best_hash());
  }
  if (from._internal_has_fork_data()) {
    _internal_mutable_fork_data()->::sentry::Forks::MergeFrom(from._internal_fork_data());
  }
  if (from._internal_network_id() != 0) {
    _internal_set_network_id(from._internal_network_id());
  }
  if (from._internal_max_block() != 0) {
    _internal_set_max_block(from._internal_max_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusData::CopyFrom(const StatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.StatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusData::IsInitialized() const {
  return true;
}

void StatusData::InternalSwap(StatusData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusData, max_block_)
      + sizeof(StatusData::max_block_)
      - PROTOBUF_FIELD_OFFSET(StatusData, total_difficulty_)>(
          reinterpret_cast<char*>(&total_difficulty_),
          reinterpret_cast<char*>(&other->total_difficulty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[9]);
}

// ===================================================================

class SetStatusReply::_Internal {
 public:
};

SetStatusReply::SetStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sentry.SetStatusReply)
}
SetStatusReply::SetStatusReply(const SetStatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.SetStatusReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetStatusReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetStatusReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetStatusReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[10]);
}

// ===================================================================

class HandShakeReply::_Internal {
 public:
};

HandShakeReply::HandShakeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.HandShakeReply)
}
HandShakeReply::HandShakeReply(const HandShakeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:sentry.HandShakeReply)
}

inline void HandShakeReply::SharedCtor() {
protocol_ = 0;
}

HandShakeReply::~HandShakeReply() {
  // @@protoc_insertion_point(destructor:sentry.HandShakeReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HandShakeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandShakeReply::ArenaDtor(void* object) {
  HandShakeReply* _this = reinterpret_cast< HandShakeReply* >(object);
  (void)_this;
}
void HandShakeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandShakeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HandShakeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.HandShakeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandShakeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sentry.Protocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::sentry::Protocol>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandShakeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.HandShakeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sentry.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.HandShakeReply)
  return target;
}

size_t HandShakeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.HandShakeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sentry.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandShakeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HandShakeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandShakeReply::GetClassData() const { return &_class_data_; }

void HandShakeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HandShakeReply *>(to)->MergeFrom(
      static_cast<const HandShakeReply &>(from));
}


void HandShakeReply::MergeFrom(const HandShakeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.HandShakeReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandShakeReply::CopyFrom(const HandShakeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.HandShakeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandShakeReply::IsInitialized() const {
  return true;
}

void HandShakeReply::InternalSwap(HandShakeReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandShakeReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[11]);
}

// ===================================================================

class MessagesRequest::_Internal {
 public:
};

MessagesRequest::MessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.MessagesRequest)
}
MessagesRequest::MessagesRequest(const MessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.MessagesRequest)
}

inline void MessagesRequest::SharedCtor() {
}

MessagesRequest::~MessagesRequest() {
  // @@protoc_insertion_point(destructor:sentry.MessagesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MessagesRequest::ArenaDtor(void* object) {
  MessagesRequest* _this = reinterpret_cast< MessagesRequest* >(object);
  (void)_this;
}
void MessagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.MessagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sentry.MessageId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ids(static_cast<::sentry::MessageId>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.MessagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sentry.MessageId ids = 1;
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ids_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.MessagesRequest)
  return target;
}

size_t MessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.MessagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sentry.MessageId ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ids(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessagesRequest::GetClassData() const { return &_class_data_; }

void MessagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessagesRequest *>(to)->MergeFrom(
      static_cast<const MessagesRequest &>(from));
}


void MessagesRequest::MergeFrom(const MessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.MessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessagesRequest::CopyFrom(const MessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.MessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagesRequest::IsInitialized() const {
  return true;
}

void MessagesRequest::InternalSwap(MessagesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[12]);
}

// ===================================================================

class PeerCountRequest::_Internal {
 public:
};

PeerCountRequest::PeerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sentry.PeerCountRequest)
}
PeerCountRequest::PeerCountRequest(const PeerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeerCountRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerCountRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PeerCountRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[13]);
}

// ===================================================================

class PeerCountReply::_Internal {
 public:
};

PeerCountReply::PeerCountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.PeerCountReply)
}
PeerCountReply::PeerCountReply(const PeerCountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeerCountReply)
}

inline void PeerCountReply::SharedCtor() {
count_ = uint64_t{0u};
}

PeerCountReply::~PeerCountReply() {
  // @@protoc_insertion_point(destructor:sentry.PeerCountReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PeerCountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PeerCountReply::ArenaDtor(void* object) {
  PeerCountReply* _this = reinterpret_cast< PeerCountReply* >(object);
  (void)_this;
}
void PeerCountReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerCountReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerCountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeerCountReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerCountReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerCountReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeerCountReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeerCountReply)
  return target;
}

size_t PeerCountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeerCountReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerCountReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PeerCountReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerCountReply::GetClassData() const { return &_class_data_; }

void PeerCountReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PeerCountReply *>(to)->MergeFrom(
      static_cast<const PeerCountReply &>(from));
}


void PeerCountReply::MergeFrom(const PeerCountReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeerCountReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerCountReply::CopyFrom(const PeerCountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCountReply::IsInitialized() const {
  return true;
}

void PeerCountReply::InternalSwap(PeerCountReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerCountReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[14]);
}

// ===================================================================

class PeersRequest::_Internal {
 public:
};

PeersRequest::PeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sentry.PeersRequest)
}
PeersRequest::PeersRequest(const PeersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sentry.PeersRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeersRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PeersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[15]);
}

// ===================================================================

class PeersReply::_Internal {
 public:
  static const ::types::H512& peer_id(const PeersReply* msg);
};

const ::types::H512&
PeersReply::_Internal::peer_id(const PeersReply* msg) {
  return *msg->peer_id_;
}
void PeersReply::clear_peer_id() {
  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
PeersReply::PeersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sentry.PeersReply)
}
PeersReply::PeersReply(const PeersReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::types::H512(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:sentry.PeersReply)
}

inline void PeersReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_) -
    reinterpret_cast<char*>(&peer_id_)) + sizeof(event_));
}

PeersReply::~PeersReply() {
  // @@protoc_insertion_point(destructor:sentry.PeersReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PeersReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_id_;
}

void PeersReply::ArenaDtor(void* object) {
  PeersReply* _this = reinterpret_cast< PeersReply* >(object);
  (void)_this;
}
void PeersReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeersReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeersReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sentry.PeersReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  event_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeersReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H512 peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sentry.PeersReply.PeerEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::sentry::PeersReply_PeerEvent>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeersReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sentry.PeersReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // .sentry.PeersReply.PeerEvent event = 2;
  if (this->_internal_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sentry.PeersReply)
  return target;
}

size_t PeersReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sentry.PeersReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 peer_id = 1;
  if (this->_internal_has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .sentry.PeersReply.PeerEvent event = 2;
  if (this->_internal_event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeersReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PeersReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeersReply::GetClassData() const { return &_class_data_; }

void PeersReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PeersReply *>(to)->MergeFrom(
      static_cast<const PeersReply &>(from));
}


void PeersReply::MergeFrom(const PeersReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sentry.PeersReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer_id()) {
    _internal_mutable_peer_id()->::types::H512::MergeFrom(from._internal_peer_id());
  }
  if (from._internal_event() != 0) {
    _internal_set_event(from._internal_event());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeersReply::CopyFrom(const PeersReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sentry.PeersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeersReply::IsInitialized() const {
  return true;
}

void PeersReply::InternalSwap(PeersReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeersReply, event_)
      + sizeof(PeersReply::event_)
      - PROTOBUF_FIELD_OFFSET(PeersReply, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeersReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2psentry_2fsentry_2eproto_getter, &descriptor_table_p2psentry_2fsentry_2eproto_once,
      file_level_metadata_p2psentry_2fsentry_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sentry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sentry::OutboundMessageData* Arena::CreateMaybeMessage< ::sentry::OutboundMessageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::OutboundMessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByMinBlockRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageByMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageByIdRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SendMessageToRandomPeersRequest* Arena::CreateMaybeMessage< ::sentry::SendMessageToRandomPeersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SendMessageToRandomPeersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SentPeers* Arena::CreateMaybeMessage< ::sentry::SentPeers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SentPeers >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PenalizePeerRequest* Arena::CreateMaybeMessage< ::sentry::PenalizePeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PenalizePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerMinBlockRequest* Arena::CreateMaybeMessage< ::sentry::PeerMinBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerMinBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::InboundMessage* Arena::CreateMaybeMessage< ::sentry::InboundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::InboundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::Forks* Arena::CreateMaybeMessage< ::sentry::Forks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::Forks >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::StatusData* Arena::CreateMaybeMessage< ::sentry::StatusData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::StatusData >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::SetStatusReply* Arena::CreateMaybeMessage< ::sentry::SetStatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::SetStatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::HandShakeReply* Arena::CreateMaybeMessage< ::sentry::HandShakeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::HandShakeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::MessagesRequest* Arena::CreateMaybeMessage< ::sentry::MessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::MessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerCountRequest* Arena::CreateMaybeMessage< ::sentry::PeerCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeerCountReply* Arena::CreateMaybeMessage< ::sentry::PeerCountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeerCountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeersRequest* Arena::CreateMaybeMessage< ::sentry::PeersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sentry::PeersReply* Arena::CreateMaybeMessage< ::sentry::PeersReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sentry::PeersReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
