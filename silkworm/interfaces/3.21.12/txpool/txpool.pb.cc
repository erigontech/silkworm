// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/txpool.proto

#include "txpool/txpool.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace txpool {
PROTOBUF_CONSTEXPR TxHashes::TxHashes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxHashesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxHashesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxHashesDefaultTypeInternal() {}
  union {
    TxHashes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxHashesDefaultTypeInternal _TxHashes_default_instance_;
PROTOBUF_CONSTEXPR AddRequest::AddRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rlp_txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRequestDefaultTypeInternal() {}
  union {
    AddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRequestDefaultTypeInternal _AddRequest_default_instance_;
PROTOBUF_CONSTEXPR AddReply::AddReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.imported_)*/{}
  , /*decltype(_impl_._imported_cached_byte_size_)*/{0}
  , /*decltype(_impl_.errors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReplyDefaultTypeInternal() {}
  union {
    AddReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReplyDefaultTypeInternal _AddReply_default_instance_;
PROTOBUF_CONSTEXPR TransactionsRequest::TransactionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionsRequestDefaultTypeInternal() {}
  union {
    TransactionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionsRequestDefaultTypeInternal _TransactionsRequest_default_instance_;
PROTOBUF_CONSTEXPR TransactionsReply::TransactionsReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rlp_txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionsReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionsReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionsReplyDefaultTypeInternal() {}
  union {
    TransactionsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionsReplyDefaultTypeInternal _TransactionsReply_default_instance_;
PROTOBUF_CONSTEXPR OnAddRequest::OnAddRequest(
    ::_pbi::ConstantInitialized) {}
struct OnAddRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnAddRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnAddRequestDefaultTypeInternal() {}
  union {
    OnAddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnAddRequestDefaultTypeInternal _OnAddRequest_default_instance_;
PROTOBUF_CONSTEXPR OnAddReply::OnAddReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpl_txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnAddReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnAddReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnAddReplyDefaultTypeInternal() {}
  union {
    OnAddReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnAddReplyDefaultTypeInternal _OnAddReply_default_instance_;
PROTOBUF_CONSTEXPR AllRequest::AllRequest(
    ::_pbi::ConstantInitialized) {}
struct AllRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllRequestDefaultTypeInternal() {}
  union {
    AllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllRequestDefaultTypeInternal _AllRequest_default_instance_;
PROTOBUF_CONSTEXPR AllReply_Tx::AllReply_Tx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rlp_tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/nullptr
  , /*decltype(_impl_.txn_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllReply_TxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllReply_TxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllReply_TxDefaultTypeInternal() {}
  union {
    AllReply_Tx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllReply_TxDefaultTypeInternal _AllReply_Tx_default_instance_;
PROTOBUF_CONSTEXPR AllReply::AllReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllReplyDefaultTypeInternal() {}
  union {
    AllReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllReplyDefaultTypeInternal _AllReply_default_instance_;
PROTOBUF_CONSTEXPR PendingReply_Tx::PendingReply_Tx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rlp_tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/nullptr
  , /*decltype(_impl_.is_local_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PendingReply_TxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PendingReply_TxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PendingReply_TxDefaultTypeInternal() {}
  union {
    PendingReply_Tx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PendingReply_TxDefaultTypeInternal _PendingReply_Tx_default_instance_;
PROTOBUF_CONSTEXPR PendingReply::PendingReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PendingReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PendingReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PendingReplyDefaultTypeInternal() {}
  union {
    PendingReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PendingReplyDefaultTypeInternal _PendingReply_default_instance_;
PROTOBUF_CONSTEXPR StatusRequest::StatusRequest(
    ::_pbi::ConstantInitialized) {}
struct StatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusRequestDefaultTypeInternal() {}
  union {
    StatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
PROTOBUF_CONSTEXPR StatusReply::StatusReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pending_count_)*/0u
  , /*decltype(_impl_.queued_count_)*/0u
  , /*decltype(_impl_.base_fee_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusReplyDefaultTypeInternal() {}
  union {
    StatusReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusReplyDefaultTypeInternal _StatusReply_default_instance_;
PROTOBUF_CONSTEXPR NonceRequest::NonceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NonceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NonceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NonceRequestDefaultTypeInternal() {}
  union {
    NonceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NonceRequestDefaultTypeInternal _NonceRequest_default_instance_;
PROTOBUF_CONSTEXPR NonceReply::NonceReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.found_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NonceReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NonceReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NonceReplyDefaultTypeInternal() {}
  union {
    NonceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NonceReplyDefaultTypeInternal _NonceReply_default_instance_;
}  // namespace txpool
static ::_pb::Metadata file_level_metadata_txpool_2ftxpool_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_txpool_2ftxpool_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_txpool_2ftxpool_2eproto = nullptr;

const uint32_t TableStruct_txpool_2ftxpool_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::TxHashes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::TxHashes, _impl_.hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::AddRequest, _impl_.rlp_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AddReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::AddReply, _impl_.imported_),
  PROTOBUF_FIELD_OFFSET(::txpool::AddReply, _impl_.errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsRequest, _impl_.hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::TransactionsReply, _impl_.rlp_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnAddReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::OnAddReply, _impl_.rpl_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, _impl_.txn_type_),
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply_Tx, _impl_.rlp_tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::AllReply, _impl_.txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, _impl_.rlp_tx_),
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply_Tx, _impl_.is_local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::PendingReply, _impl_.txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, _impl_.pending_count_),
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, _impl_.queued_count_),
  PROTOBUF_FIELD_OFFSET(::txpool::StatusReply, _impl_.base_fee_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceRequest, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txpool::NonceReply, _impl_.found_),
  PROTOBUF_FIELD_OFFSET(::txpool::NonceReply, _impl_.nonce_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::txpool::TxHashes)},
  { 7, -1, -1, sizeof(::txpool::AddRequest)},
  { 14, -1, -1, sizeof(::txpool::AddReply)},
  { 22, -1, -1, sizeof(::txpool::TransactionsRequest)},
  { 29, -1, -1, sizeof(::txpool::TransactionsReply)},
  { 36, -1, -1, sizeof(::txpool::OnAddRequest)},
  { 42, -1, -1, sizeof(::txpool::OnAddReply)},
  { 49, -1, -1, sizeof(::txpool::AllRequest)},
  { 55, -1, -1, sizeof(::txpool::AllReply_Tx)},
  { 64, -1, -1, sizeof(::txpool::AllReply)},
  { 71, -1, -1, sizeof(::txpool::PendingReply_Tx)},
  { 80, -1, -1, sizeof(::txpool::PendingReply)},
  { 87, -1, -1, sizeof(::txpool::StatusRequest)},
  { 93, -1, -1, sizeof(::txpool::StatusReply)},
  { 102, -1, -1, sizeof(::txpool::NonceRequest)},
  { 109, -1, -1, sizeof(::txpool::NonceReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::txpool::_TxHashes_default_instance_._instance,
  &::txpool::_AddRequest_default_instance_._instance,
  &::txpool::_AddReply_default_instance_._instance,
  &::txpool::_TransactionsRequest_default_instance_._instance,
  &::txpool::_TransactionsReply_default_instance_._instance,
  &::txpool::_OnAddRequest_default_instance_._instance,
  &::txpool::_OnAddReply_default_instance_._instance,
  &::txpool::_AllRequest_default_instance_._instance,
  &::txpool::_AllReply_Tx_default_instance_._instance,
  &::txpool::_AllReply_default_instance_._instance,
  &::txpool::_PendingReply_Tx_default_instance_._instance,
  &::txpool::_PendingReply_default_instance_._instance,
  &::txpool::_StatusRequest_default_instance_._instance,
  &::txpool::_StatusReply_default_instance_._instance,
  &::txpool::_NonceRequest_default_instance_._instance,
  &::txpool::_NonceReply_default_instance_._instance,
};

const char descriptor_table_protodef_txpool_2ftxpool_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023txpool/txpool.proto\022\006txpool\032\033google/pr"
  "otobuf/empty.proto\032\021types/types.proto\"\'\n"
  "\010TxHashes\022\033\n\006hashes\030\001 \003(\0132\013.types.H256\"\035"
  "\n\nAddRequest\022\017\n\007rlp_txs\030\001 \003(\014\"B\n\010AddRepl"
  "y\022&\n\010imported\030\001 \003(\0162\024.txpool.ImportResul"
  "t\022\016\n\006errors\030\002 \003(\t\"2\n\023TransactionsRequest"
  "\022\033\n\006hashes\030\001 \003(\0132\013.types.H256\"$\n\021Transac"
  "tionsReply\022\017\n\007rlp_txs\030\001 \003(\014\"\016\n\014OnAddRequ"
  "est\"\035\n\nOnAddReply\022\017\n\007rpl_txs\030\001 \003(\014\"\014\n\nAl"
  "lRequest\"\275\001\n\010AllReply\022 \n\003txs\030\001 \003(\0132\023.txp"
  "ool.AllReply.Tx\032]\n\002Tx\022*\n\010txn_type\030\001 \001(\0162"
  "\030.txpool.AllReply.TxnType\022\033\n\006sender\030\002 \001("
  "\0132\013.types.H160\022\016\n\006rlp_tx\030\003 \001(\014\"0\n\007TxnTyp"
  "e\022\013\n\007PENDING\020\000\022\n\n\006QUEUED\020\001\022\014\n\010BASE_FEE\020\002"
  "\"y\n\014PendingReply\022$\n\003txs\030\001 \003(\0132\027.txpool.P"
  "endingReply.Tx\032C\n\002Tx\022\033\n\006sender\030\001 \001(\0132\013.t"
  "ypes.H160\022\016\n\006rlp_tx\030\002 \001(\014\022\020\n\010is_local\030\003 "
  "\001(\010\"\017\n\rStatusRequest\"R\n\013StatusReply\022\025\n\rp"
  "ending_count\030\001 \001(\r\022\024\n\014queued_count\030\002 \001(\r"
  "\022\026\n\016base_fee_count\030\003 \001(\r\",\n\014NonceRequest"
  "\022\034\n\007address\030\001 \001(\0132\013.types.H160\"*\n\nNonceR"
  "eply\022\r\n\005found\030\001 \001(\010\022\r\n\005nonce\030\002 \001(\004*l\n\014Im"
  "portResult\022\013\n\007SUCCESS\020\000\022\022\n\016ALREADY_EXIST"
  "S\020\001\022\017\n\013FEE_TOO_LOW\020\002\022\t\n\005STALE\020\003\022\013\n\007INVAL"
  "ID\020\004\022\022\n\016INTERNAL_ERROR\020\0052\354\003\n\006Txpool\0226\n\007V"
  "ersion\022\026.google.protobuf.Empty\032\023.types.V"
  "ersionReply\0221\n\013FindUnknown\022\020.txpool.TxHa"
  "shes\032\020.txpool.TxHashes\022+\n\003Add\022\022.txpool.A"
  "ddRequest\032\020.txpool.AddReply\022F\n\014Transacti"
  "ons\022\033.txpool.TransactionsRequest\032\031.txpoo"
  "l.TransactionsReply\022+\n\003All\022\022.txpool.AllR"
  "equest\032\020.txpool.AllReply\0227\n\007Pending\022\026.go"
  "ogle.protobuf.Empty\032\024.txpool.PendingRepl"
  "y\0223\n\005OnAdd\022\024.txpool.OnAddRequest\032\022.txpoo"
  "l.OnAddReply0\001\0224\n\006Status\022\025.txpool.Status"
  "Request\032\023.txpool.StatusReply\0221\n\005Nonce\022\024."
  "txpool.NonceRequest\032\022.txpool.NonceReplyB"
  "\021Z\017./txpool;txpoolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_txpool_2ftxpool_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_txpool_2ftxpool_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_txpool_2ftxpool_2eproto = {
    false, false, 1506, descriptor_table_protodef_txpool_2ftxpool_2eproto,
    "txpool/txpool.proto",
    &descriptor_table_txpool_2ftxpool_2eproto_once, descriptor_table_txpool_2ftxpool_2eproto_deps, 2, 16,
    schemas, file_default_instances, TableStruct_txpool_2ftxpool_2eproto::offsets,
    file_level_metadata_txpool_2ftxpool_2eproto, file_level_enum_descriptors_txpool_2ftxpool_2eproto,
    file_level_service_descriptors_txpool_2ftxpool_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_txpool_2ftxpool_2eproto_getter() {
  return &descriptor_table_txpool_2ftxpool_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_txpool_2ftxpool_2eproto(&descriptor_table_txpool_2ftxpool_2eproto);
namespace txpool {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllReply_TxnType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txpool_2ftxpool_2eproto);
  return file_level_enum_descriptors_txpool_2ftxpool_2eproto[0];
}
bool AllReply_TxnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AllReply_TxnType AllReply::PENDING;
constexpr AllReply_TxnType AllReply::QUEUED;
constexpr AllReply_TxnType AllReply::BASE_FEE;
constexpr AllReply_TxnType AllReply::TxnType_MIN;
constexpr AllReply_TxnType AllReply::TxnType_MAX;
constexpr int AllReply::TxnType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txpool_2ftxpool_2eproto);
  return file_level_enum_descriptors_txpool_2ftxpool_2eproto[1];
}
bool ImportResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TxHashes::_Internal {
 public:
};

void TxHashes::clear_hashes() {
  _impl_.hashes_.Clear();
}
TxHashes::TxHashes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.TxHashes)
}
TxHashes::TxHashes(const TxHashes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxHashes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){from._impl_.hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.TxHashes)
}

inline void TxHashes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxHashes::~TxHashes() {
  // @@protoc_insertion_point(destructor:txpool.TxHashes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxHashes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashes_.~RepeatedPtrField();
}

void TxHashes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxHashes::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.TxHashes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxHashes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.H256 hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxHashes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.TxHashes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hashes_size()); i < n; i++) {
    const auto& repfield = this->_internal_hashes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.TxHashes)
  return target;
}

size_t TxHashes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.TxHashes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->_impl_.hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxHashes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxHashes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxHashes::GetClassData() const { return &_class_data_; }


void TxHashes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxHashes*>(&to_msg);
  auto& from = static_cast<const TxHashes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.TxHashes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashes_.MergeFrom(from._impl_.hashes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxHashes::CopyFrom(const TxHashes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.TxHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxHashes::IsInitialized() const {
  return true;
}

void TxHashes::InternalSwap(TxHashes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashes_.InternalSwap(&other->_impl_.hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxHashes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[0]);
}

// ===================================================================

class AddRequest::_Internal {
 public:
};

AddRequest::AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.AddRequest)
}
AddRequest::AddRequest(const AddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_txs_){from._impl_.rlp_txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AddRequest)
}

inline void AddRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddRequest::~AddRequest() {
  // @@protoc_insertion_point(destructor:txpool.AddRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rlp_txs_.~RepeatedPtrField();
}

void AddRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rlp_txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes rlp_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rlp_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  for (int i = 0, n = this->_internal_rlp_txs_size(); i < n; i++) {
    const auto& s = this->_internal_rlp_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AddRequest)
  return target;
}

size_t AddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rlp_txs_.size());
  for (int i = 0, n = _impl_.rlp_txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.rlp_txs_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRequest::GetClassData() const { return &_class_data_; }


void AddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddRequest*>(&to_msg);
  auto& from = static_cast<const AddRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.AddRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rlp_txs_.MergeFrom(from._impl_.rlp_txs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRequest::CopyFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequest::IsInitialized() const {
  return true;
}

void AddRequest::InternalSwap(AddRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rlp_txs_.InternalSwap(&other->_impl_.rlp_txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[1]);
}

// ===================================================================

class AddReply::_Internal {
 public:
};

AddReply::AddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.AddReply)
}
AddReply::AddReply(const AddReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.imported_){from._impl_.imported_}
    , /*decltype(_impl_._imported_cached_byte_size_)*/{0}
    , decltype(_impl_.errors_){from._impl_.errors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AddReply)
}

inline void AddReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.imported_){arena}
    , /*decltype(_impl_._imported_cached_byte_size_)*/{0}
    , decltype(_impl_.errors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddReply::~AddReply() {
  // @@protoc_insertion_point(destructor:txpool.AddReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imported_.~RepeatedField();
  _impl_.errors_.~RepeatedPtrField();
}

void AddReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AddReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.imported_.Clear();
  _impl_.errors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .txpool.ImportResult imported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_imported(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_imported(static_cast<::txpool::ImportResult>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_errors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "txpool.AddReply.errors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AddReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txpool.ImportResult imported = 1;
  {
    int byte_size = _impl_._imported_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.imported_, byte_size, target);
    }
  }

  // repeated string errors = 2;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.AddReply.errors");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AddReply)
  return target;
}

size_t AddReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AddReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .txpool.ImportResult imported = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_imported_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_imported(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._imported_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string errors = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.errors_.size());
  for (int i = 0, n = _impl_.errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.errors_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReply::GetClassData() const { return &_class_data_; }


void AddReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddReply*>(&to_msg);
  auto& from = static_cast<const AddReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.AddReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.imported_.MergeFrom(from._impl_.imported_);
  _this->_impl_.errors_.MergeFrom(from._impl_.errors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddReply::CopyFrom(const AddReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AddReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReply::IsInitialized() const {
  return true;
}

void AddReply::InternalSwap(AddReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.imported_.InternalSwap(&other->_impl_.imported_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[2]);
}

// ===================================================================

class TransactionsRequest::_Internal {
 public:
};

void TransactionsRequest::clear_hashes() {
  _impl_.hashes_.Clear();
}
TransactionsRequest::TransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.TransactionsRequest)
}
TransactionsRequest::TransactionsRequest(const TransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){from._impl_.hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.TransactionsRequest)
}

inline void TransactionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransactionsRequest::~TransactionsRequest() {
  // @@protoc_insertion_point(destructor:txpool.TransactionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashes_.~RepeatedPtrField();
}

void TransactionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.TransactionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.H256 hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.TransactionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hashes_size()); i < n; i++) {
    const auto& repfield = this->_internal_hashes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.TransactionsRequest)
  return target;
}

size_t TransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.TransactionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->_impl_.hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionsRequest::GetClassData() const { return &_class_data_; }


void TransactionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionsRequest*>(&to_msg);
  auto& from = static_cast<const TransactionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.TransactionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashes_.MergeFrom(from._impl_.hashes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionsRequest::CopyFrom(const TransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.TransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsRequest::IsInitialized() const {
  return true;
}

void TransactionsRequest::InternalSwap(TransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashes_.InternalSwap(&other->_impl_.hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[3]);
}

// ===================================================================

class TransactionsReply::_Internal {
 public:
};

TransactionsReply::TransactionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.TransactionsReply)
}
TransactionsReply::TransactionsReply(const TransactionsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionsReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_txs_){from._impl_.rlp_txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.TransactionsReply)
}

inline void TransactionsReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransactionsReply::~TransactionsReply() {
  // @@protoc_insertion_point(destructor:txpool.TransactionsReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rlp_txs_.~RepeatedPtrField();
}

void TransactionsReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.TransactionsReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rlp_txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes rlp_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rlp_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionsReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.TransactionsReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  for (int i = 0, n = this->_internal_rlp_txs_size(); i < n; i++) {
    const auto& s = this->_internal_rlp_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.TransactionsReply)
  return target;
}

size_t TransactionsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.TransactionsReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes rlp_txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rlp_txs_.size());
  for (int i = 0, n = _impl_.rlp_txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.rlp_txs_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionsReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionsReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionsReply::GetClassData() const { return &_class_data_; }


void TransactionsReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionsReply*>(&to_msg);
  auto& from = static_cast<const TransactionsReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.TransactionsReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rlp_txs_.MergeFrom(from._impl_.rlp_txs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionsReply::CopyFrom(const TransactionsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.TransactionsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsReply::IsInitialized() const {
  return true;
}

void TransactionsReply::InternalSwap(TransactionsReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rlp_txs_.InternalSwap(&other->_impl_.rlp_txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[4]);
}

// ===================================================================

class OnAddRequest::_Internal {
 public:
};

OnAddRequest::OnAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.OnAddRequest)
}
OnAddRequest::OnAddRequest(const OnAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  OnAddRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnAddRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnAddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnAddRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnAddRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[5]);
}

// ===================================================================

class OnAddReply::_Internal {
 public:
};

OnAddReply::OnAddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.OnAddReply)
}
OnAddReply::OnAddReply(const OnAddReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnAddReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_txs_){from._impl_.rpl_txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnAddReply)
}

inline void OnAddReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rpl_txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OnAddReply::~OnAddReply() {
  // @@protoc_insertion_point(destructor:txpool.OnAddReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnAddReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rpl_txs_.~RepeatedPtrField();
}

void OnAddReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnAddReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnAddReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rpl_txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnAddReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes rpl_txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rpl_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnAddReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnAddReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes rpl_txs = 1;
  for (int i = 0, n = this->_internal_rpl_txs_size(); i < n; i++) {
    const auto& s = this->_internal_rpl_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnAddReply)
  return target;
}

size_t OnAddReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnAddReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes rpl_txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rpl_txs_.size());
  for (int i = 0, n = _impl_.rpl_txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.rpl_txs_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnAddReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnAddReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnAddReply::GetClassData() const { return &_class_data_; }


void OnAddReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnAddReply*>(&to_msg);
  auto& from = static_cast<const OnAddReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnAddReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rpl_txs_.MergeFrom(from._impl_.rpl_txs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnAddReply::CopyFrom(const OnAddReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnAddReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnAddReply::IsInitialized() const {
  return true;
}

void OnAddReply::InternalSwap(OnAddReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rpl_txs_.InternalSwap(&other->_impl_.rpl_txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnAddReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[6]);
}

// ===================================================================

class AllRequest::_Internal {
 public:
};

AllRequest::AllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.AllRequest)
}
AllRequest::AllRequest(const AllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AllRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AllRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AllRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[7]);
}

// ===================================================================

class AllReply_Tx::_Internal {
 public:
  static const ::types::H160& sender(const AllReply_Tx* msg);
};

const ::types::H160&
AllReply_Tx::_Internal::sender(const AllReply_Tx* msg) {
  return *msg->_impl_.sender_;
}
void AllReply_Tx::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
AllReply_Tx::AllReply_Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.AllReply.Tx)
}
AllReply_Tx::AllReply_Tx(const AllReply_Tx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllReply_Tx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.txn_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rlp_tx().empty()) {
    _this->_impl_.rlp_tx_.Set(from._internal_rlp_tx(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    _this->_impl_.sender_ = new ::types::H160(*from._impl_.sender_);
  }
  _this->_impl_.txn_type_ = from._impl_.txn_type_;
  // @@protoc_insertion_point(copy_constructor:txpool.AllReply.Tx)
}

inline void AllReply_Tx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.txn_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllReply_Tx::~AllReply_Tx() {
  // @@protoc_insertion_point(destructor:txpool.AllReply.Tx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllReply_Tx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rlp_tx_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sender_;
}

void AllReply_Tx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllReply_Tx::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AllReply.Tx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rlp_tx_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
  _impl_.txn_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllReply_Tx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .txpool.AllReply.TxnType txn_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_txn_type(static_cast<::txpool::AllReply_TxnType>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.H160 sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rlp_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllReply_Tx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AllReply.Tx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .txpool.AllReply.TxnType txn_type = 1;
  if (this->_internal_txn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_txn_type(), target);
  }

  // .types.H160 sender = 2;
  if (this->_internal_has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sender(this),
        _Internal::sender(this).GetCachedSize(), target, stream);
  }

  // bytes rlp_tx = 3;
  if (!this->_internal_rlp_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rlp_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AllReply.Tx)
  return target;
}

size_t AllReply_Tx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AllReply.Tx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rlp_tx = 3;
  if (!this->_internal_rlp_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // .types.H160 sender = 2;
  if (this->_internal_has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sender_);
  }

  // .txpool.AllReply.TxnType txn_type = 1;
  if (this->_internal_txn_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_txn_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllReply_Tx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllReply_Tx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllReply_Tx::GetClassData() const { return &_class_data_; }


void AllReply_Tx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllReply_Tx*>(&to_msg);
  auto& from = static_cast<const AllReply_Tx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.AllReply.Tx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rlp_tx().empty()) {
    _this->_internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (from._internal_has_sender()) {
    _this->_internal_mutable_sender()->::types::H160::MergeFrom(
        from._internal_sender());
  }
  if (from._internal_txn_type() != 0) {
    _this->_internal_set_txn_type(from._internal_txn_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllReply_Tx::CopyFrom(const AllReply_Tx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AllReply.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllReply_Tx::IsInitialized() const {
  return true;
}

void AllReply_Tx::InternalSwap(AllReply_Tx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlp_tx_, lhs_arena,
      &other->_impl_.rlp_tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllReply_Tx, _impl_.txn_type_)
      + sizeof(AllReply_Tx::_impl_.txn_type_)
      - PROTOBUF_FIELD_OFFSET(AllReply_Tx, _impl_.sender_)>(
          reinterpret_cast<char*>(&_impl_.sender_),
          reinterpret_cast<char*>(&other->_impl_.sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllReply_Tx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[8]);
}

// ===================================================================

class AllReply::_Internal {
 public:
};

AllReply::AllReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.AllReply)
}
AllReply::AllReply(const AllReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.AllReply)
}

inline void AllReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllReply::~AllReply() {
  // @@protoc_insertion_point(destructor:txpool.AllReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
}

void AllReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.AllReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .txpool.AllReply.Tx txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.AllReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txpool.AllReply.Tx txs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.AllReply)
  return target;
}

size_t AllReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.AllReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .txpool.AllReply.Tx txs = 1;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_impl_.txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllReply::GetClassData() const { return &_class_data_; }


void AllReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllReply*>(&to_msg);
  auto& from = static_cast<const AllReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.AllReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllReply::CopyFrom(const AllReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.AllReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllReply::IsInitialized() const {
  return true;
}

void AllReply::InternalSwap(AllReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[9]);
}

// ===================================================================

class PendingReply_Tx::_Internal {
 public:
  static const ::types::H160& sender(const PendingReply_Tx* msg);
};

const ::types::H160&
PendingReply_Tx::_Internal::sender(const PendingReply_Tx* msg) {
  return *msg->_impl_.sender_;
}
void PendingReply_Tx::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
PendingReply_Tx::PendingReply_Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.PendingReply.Tx)
}
PendingReply_Tx::PendingReply_Tx(const PendingReply_Tx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PendingReply_Tx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.is_local_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rlp_tx().empty()) {
    _this->_impl_.rlp_tx_.Set(from._internal_rlp_tx(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    _this->_impl_.sender_ = new ::types::H160(*from._impl_.sender_);
  }
  _this->_impl_.is_local_ = from._impl_.is_local_;
  // @@protoc_insertion_point(copy_constructor:txpool.PendingReply.Tx)
}

inline void PendingReply_Tx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.is_local_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PendingReply_Tx::~PendingReply_Tx() {
  // @@protoc_insertion_point(destructor:txpool.PendingReply.Tx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PendingReply_Tx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rlp_tx_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sender_;
}

void PendingReply_Tx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PendingReply_Tx::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.PendingReply.Tx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rlp_tx_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
  _impl_.is_local_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingReply_Tx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H160 sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rlp_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PendingReply_Tx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.PendingReply.Tx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 sender = 1;
  if (this->_internal_has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sender(this),
        _Internal::sender(this).GetCachedSize(), target, stream);
  }

  // bytes rlp_tx = 2;
  if (!this->_internal_rlp_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rlp_tx(), target);
  }

  // bool is_local = 3;
  if (this->_internal_is_local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_local(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.PendingReply.Tx)
  return target;
}

size_t PendingReply_Tx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.PendingReply.Tx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rlp_tx = 2;
  if (!this->_internal_rlp_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // .types.H160 sender = 1;
  if (this->_internal_has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sender_);
  }

  // bool is_local = 3;
  if (this->_internal_is_local() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PendingReply_Tx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PendingReply_Tx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PendingReply_Tx::GetClassData() const { return &_class_data_; }


void PendingReply_Tx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PendingReply_Tx*>(&to_msg);
  auto& from = static_cast<const PendingReply_Tx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.PendingReply.Tx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rlp_tx().empty()) {
    _this->_internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (from._internal_has_sender()) {
    _this->_internal_mutable_sender()->::types::H160::MergeFrom(
        from._internal_sender());
  }
  if (from._internal_is_local() != 0) {
    _this->_internal_set_is_local(from._internal_is_local());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PendingReply_Tx::CopyFrom(const PendingReply_Tx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.PendingReply.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingReply_Tx::IsInitialized() const {
  return true;
}

void PendingReply_Tx::InternalSwap(PendingReply_Tx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlp_tx_, lhs_arena,
      &other->_impl_.rlp_tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PendingReply_Tx, _impl_.is_local_)
      + sizeof(PendingReply_Tx::_impl_.is_local_)
      - PROTOBUF_FIELD_OFFSET(PendingReply_Tx, _impl_.sender_)>(
          reinterpret_cast<char*>(&_impl_.sender_),
          reinterpret_cast<char*>(&other->_impl_.sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingReply_Tx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[10]);
}

// ===================================================================

class PendingReply::_Internal {
 public:
};

PendingReply::PendingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.PendingReply)
}
PendingReply::PendingReply(const PendingReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PendingReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.PendingReply)
}

inline void PendingReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PendingReply::~PendingReply() {
  // @@protoc_insertion_point(destructor:txpool.PendingReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PendingReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
}

void PendingReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PendingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.PendingReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .txpool.PendingReply.Tx txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PendingReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.PendingReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txpool.PendingReply.Tx txs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.PendingReply)
  return target;
}

size_t PendingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.PendingReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .txpool.PendingReply.Tx txs = 1;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_impl_.txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PendingReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PendingReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PendingReply::GetClassData() const { return &_class_data_; }


void PendingReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PendingReply*>(&to_msg);
  auto& from = static_cast<const PendingReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.PendingReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PendingReply::CopyFrom(const PendingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.PendingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingReply::IsInitialized() const {
  return true;
}

void PendingReply::InternalSwap(PendingReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[11]);
}

// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:txpool.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StatusRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.StatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[12]);
}

// ===================================================================

class StatusReply::_Internal {
 public:
};

StatusReply::StatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.StatusReply)
}
StatusReply::StatusReply(const StatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pending_count_){}
    , decltype(_impl_.queued_count_){}
    , decltype(_impl_.base_fee_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pending_count_, &from._impl_.pending_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_fee_count_) -
    reinterpret_cast<char*>(&_impl_.pending_count_)) + sizeof(_impl_.base_fee_count_));
  // @@protoc_insertion_point(copy_constructor:txpool.StatusReply)
}

inline void StatusReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pending_count_){0u}
    , decltype(_impl_.queued_count_){0u}
    , decltype(_impl_.base_fee_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatusReply::~StatusReply() {
  // @@protoc_insertion_point(destructor:txpool.StatusReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.StatusReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pending_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.base_fee_count_) -
      reinterpret_cast<char*>(&_impl_.pending_count_)) + sizeof(_impl_.base_fee_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pending_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pending_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 queued_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.queued_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 base_fee_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.base_fee_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.StatusReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pending_count = 1;
  if (this->_internal_pending_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pending_count(), target);
  }

  // uint32 queued_count = 2;
  if (this->_internal_queued_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_queued_count(), target);
  }

  // uint32 base_fee_count = 3;
  if (this->_internal_base_fee_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_base_fee_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.StatusReply)
  return target;
}

size_t StatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.StatusReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pending_count = 1;
  if (this->_internal_pending_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pending_count());
  }

  // uint32 queued_count = 2;
  if (this->_internal_queued_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queued_count());
  }

  // uint32 base_fee_count = 3;
  if (this->_internal_base_fee_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_fee_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusReply::GetClassData() const { return &_class_data_; }


void StatusReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusReply*>(&to_msg);
  auto& from = static_cast<const StatusReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.StatusReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pending_count() != 0) {
    _this->_internal_set_pending_count(from._internal_pending_count());
  }
  if (from._internal_queued_count() != 0) {
    _this->_internal_set_queued_count(from._internal_queued_count());
  }
  if (from._internal_base_fee_count() != 0) {
    _this->_internal_set_base_fee_count(from._internal_base_fee_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusReply::CopyFrom(const StatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.StatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReply::IsInitialized() const {
  return true;
}

void StatusReply::InternalSwap(StatusReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusReply, _impl_.base_fee_count_)
      + sizeof(StatusReply::_impl_.base_fee_count_)
      - PROTOBUF_FIELD_OFFSET(StatusReply, _impl_.pending_count_)>(
          reinterpret_cast<char*>(&_impl_.pending_count_),
          reinterpret_cast<char*>(&other->_impl_.pending_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[13]);
}

// ===================================================================

class NonceRequest::_Internal {
 public:
  static const ::types::H160& address(const NonceRequest* msg);
};

const ::types::H160&
NonceRequest::_Internal::address(const NonceRequest* msg) {
  return *msg->_impl_.address_;
}
void NonceRequest::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
NonceRequest::NonceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.NonceRequest)
}
NonceRequest::NonceRequest(const NonceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NonceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::types::H160(*from._impl_.address_);
  }
  // @@protoc_insertion_point(copy_constructor:txpool.NonceRequest)
}

inline void NonceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NonceRequest::~NonceRequest() {
  // @@protoc_insertion_point(destructor:txpool.NonceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NonceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.address_;
}

void NonceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NonceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.NonceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.NonceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.NonceRequest)
  return target;
}

size_t NonceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.NonceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NonceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NonceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NonceRequest::GetClassData() const { return &_class_data_; }


void NonceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NonceRequest*>(&to_msg);
  auto& from = static_cast<const NonceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.NonceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::types::H160::MergeFrom(
        from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NonceRequest::CopyFrom(const NonceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.NonceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonceRequest::IsInitialized() const {
  return true;
}

void NonceRequest::InternalSwap(NonceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NonceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[14]);
}

// ===================================================================

class NonceReply::_Internal {
 public:
};

NonceReply::NonceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:txpool.NonceReply)
}
NonceReply::NonceReply(const NonceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NonceReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nonce_){}
    , decltype(_impl_.found_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nonce_, &from._impl_.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.found_) -
    reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.found_));
  // @@protoc_insertion_point(copy_constructor:txpool.NonceReply)
}

inline void NonceReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.found_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NonceReply::~NonceReply() {
  // @@protoc_insertion_point(destructor:txpool.NonceReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NonceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NonceReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NonceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.NonceReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.found_) -
      reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.found_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonceReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonceReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.NonceReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->_internal_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.NonceReply)
  return target;
}

size_t NonceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.NonceReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // bool found = 1;
  if (this->_internal_found() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NonceReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NonceReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NonceReply::GetClassData() const { return &_class_data_; }


void NonceReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NonceReply*>(&to_msg);
  auto& from = static_cast<const NonceReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:txpool.NonceReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_found() != 0) {
    _this->_internal_set_found(from._internal_found());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NonceReply::CopyFrom(const NonceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.NonceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonceReply::IsInitialized() const {
  return true;
}

void NonceReply::InternalSwap(NonceReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NonceReply, _impl_.found_)
      + sizeof(NonceReply::_impl_.found_)
      - PROTOBUF_FIELD_OFFSET(NonceReply, _impl_.nonce_)>(
          reinterpret_cast<char*>(&_impl_.nonce_),
          reinterpret_cast<char*>(&other->_impl_.nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NonceReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_txpool_2ftxpool_2eproto_getter, &descriptor_table_txpool_2ftxpool_2eproto_once,
      file_level_metadata_txpool_2ftxpool_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace txpool
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::txpool::TxHashes*
Arena::CreateMaybeMessage< ::txpool::TxHashes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::TxHashes >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AddRequest*
Arena::CreateMaybeMessage< ::txpool::AddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AddReply*
Arena::CreateMaybeMessage< ::txpool::AddReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AddReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::TransactionsRequest*
Arena::CreateMaybeMessage< ::txpool::TransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::TransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::TransactionsReply*
Arena::CreateMaybeMessage< ::txpool::TransactionsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::TransactionsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnAddRequest*
Arena::CreateMaybeMessage< ::txpool::OnAddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnAddReply*
Arena::CreateMaybeMessage< ::txpool::OnAddReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnAddReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AllRequest*
Arena::CreateMaybeMessage< ::txpool::AllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AllReply_Tx*
Arena::CreateMaybeMessage< ::txpool::AllReply_Tx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AllReply_Tx >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::AllReply*
Arena::CreateMaybeMessage< ::txpool::AllReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::AllReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::PendingReply_Tx*
Arena::CreateMaybeMessage< ::txpool::PendingReply_Tx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::PendingReply_Tx >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::PendingReply*
Arena::CreateMaybeMessage< ::txpool::PendingReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::PendingReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::StatusRequest*
Arena::CreateMaybeMessage< ::txpool::StatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::StatusReply*
Arena::CreateMaybeMessage< ::txpool::StatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::StatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::NonceRequest*
Arena::CreateMaybeMessage< ::txpool::NonceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::NonceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::NonceReply*
Arena::CreateMaybeMessage< ::txpool::NonceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::NonceReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
