/*
   Copyright 2024 The Silkworm Authors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#include "torrent_file.hpp"

#include <catch2/catch_test_macros.hpp>

#include <silkworm/core/common/bytes_to_string.hpp>

namespace silkworm::snapshots::bittorrent {

// generated using:
// xxd -i v1-000000-000500-bodies.seg.torrent
unsigned char v1_000000_000500_bodies_seg_torrent[] = {
    0x64, 0x31, 0x33, 0x3a, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
    0x2d, 0x6c, 0x69, 0x73, 0x74, 0x6c, 0x6c, 0x34, 0x32, 0x3a, 0x75, 0x64,
    0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
    0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x72, 0x2e, 0x6f,
    0x72, 0x67, 0x3a, 0x31, 0x33, 0x33, 0x37, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
    0x75, 0x6e, 0x63, 0x65, 0x34, 0x36, 0x3a, 0x75, 0x64, 0x70, 0x3a, 0x2f,
    0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x65,
    0x6e, 0x62, 0x69, 0x74, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e,
    0x63, 0x6f, 0x6d, 0x3a, 0x36, 0x39, 0x36, 0x39, 0x2f, 0x61, 0x6e, 0x6e,
    0x6f, 0x75, 0x6e, 0x63, 0x65, 0x34, 0x31, 0x3a, 0x75, 0x64, 0x70, 0x3a,
    0x2f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
    0x72, 0x2e, 0x69, 0x32, 0x70, 0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x3a,
    0x36, 0x39, 0x36, 0x39, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
    0x65, 0x34, 0x31, 0x3a, 0x75, 0x64, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x72,
    0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e,
    0x74, 0x2e, 0x65, 0x75, 0x2e, 0x6f, 0x72, 0x67, 0x3a, 0x34, 0x35, 0x31,
    0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x33, 0x33, 0x3a,
    0x75, 0x64, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73,
    0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x73, 0x69, 0x3a, 0x38, 0x30,
    0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x65, 0x65, 0x31,
    0x30, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
    0x36, 0x3a, 0x65, 0x72, 0x69, 0x67, 0x6f, 0x6e, 0x31, 0x33, 0x3a, 0x63,
    0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65,
    0x69, 0x31, 0x37, 0x31, 0x38, 0x39, 0x37, 0x34, 0x33, 0x34, 0x38, 0x65,
    0x34, 0x3a, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x36, 0x3a, 0x6c, 0x65, 0x6e,
    0x67, 0x74, 0x68, 0x69, 0x31, 0x30, 0x33, 0x33, 0x33, 0x37, 0x35, 0x30,
    0x65, 0x34, 0x3a, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x37, 0x3a, 0x76, 0x31,
    0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x35,
    0x30, 0x30, 0x2d, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x2e, 0x73, 0x65,
    0x67, 0x31, 0x32, 0x3a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6c, 0x65,
    0x6e, 0x67, 0x74, 0x68, 0x69, 0x32, 0x30, 0x39, 0x37, 0x31, 0x35, 0x32,
    0x65, 0x36, 0x3a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x31, 0x30, 0x30,
    0x3a, 0x04, 0xeb, 0x75, 0x01, 0x87, 0xd1, 0x75, 0x8c, 0x58, 0x9a, 0x45,
    0x8d, 0x85, 0x50, 0x56, 0x19, 0x0d, 0xf7, 0x83, 0x0c, 0x86, 0x9a, 0x0c,
    0x6a, 0x02, 0xc3, 0xce, 0x99, 0x9b, 0x22, 0x60, 0x6b, 0x6f, 0x12, 0x84,
    0x55, 0xa4, 0x86, 0xcd, 0x93, 0xd0, 0xf2, 0xb4, 0x44, 0x01, 0x39, 0xcb,
    0x15, 0x4c, 0x5e, 0x6c, 0xed, 0x07, 0x74, 0xbe, 0x69, 0x94, 0x9c, 0xbd,
    0x84, 0x1f, 0x09, 0x8f, 0x64, 0x7d, 0x76, 0x4c, 0x1c, 0xd2, 0xab, 0xc7,
    0x3f, 0xd6, 0x20, 0x8b, 0xa2, 0x60, 0x97, 0x87, 0xec, 0x12, 0x1e, 0x31,
    0x72, 0xa2, 0x69, 0x8c, 0xd2, 0x7d, 0x60, 0xbc, 0xf4, 0x2e, 0x2e, 0x2b,
    0xb6, 0x2a, 0x85, 0xd4, 0x79, 0x65, 0x65};
unsigned int v1_000000_000500_bodies_seg_torrent_len = 487;

#ifdef SILKWORM_TEST_SKIP
TEST_CASE("TorrentFile") {
    SKIP("Needs a valid snapshot file at the kInputFilePath");
    static const std::filesystem::path kInputFilePath{"/erigon-data/snapshots/v1-000000-000500-bodies.seg"};

    ByteView expected{v1_000000_000500_bodies_seg_torrent, v1_000000_000500_bodies_seg_torrent_len};
    // libtorrent reorders "announce-list", "created by" and "creation date" might be different,
    // so we compare only the part after the "info" key
    static constexpr char kInfoKeyPrefix[] = "4:infod";
    size_t expected_offset = expected.find(byte_ptr_cast(kInfoKeyPrefix));

    auto file = TorrentFile::from_source_file(kInputFilePath, 1718974348);
    Bytes actual = file.to_bytes();
    size_t actual_offset = actual.find(byte_ptr_cast(kInfoKeyPrefix));

    CHECK(actual.substr(actual_offset) == expected.substr(expected_offset));
}
#endif  // SILKWORM_TEST_SKIP

}  // namespace silkworm::snapshots::bittorrent
