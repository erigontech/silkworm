// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/mining.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_txpool_2fmining_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_txpool_2fmining_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_txpool_2fmining_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_txpool_2fmining_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_txpool_2fmining_2eproto;
namespace txpool {
class GetWorkReply;
class GetWorkReplyDefaultTypeInternal;
extern GetWorkReplyDefaultTypeInternal _GetWorkReply_default_instance_;
class GetWorkRequest;
class GetWorkRequestDefaultTypeInternal;
extern GetWorkRequestDefaultTypeInternal _GetWorkRequest_default_instance_;
class HashRateReply;
class HashRateReplyDefaultTypeInternal;
extern HashRateReplyDefaultTypeInternal _HashRateReply_default_instance_;
class HashRateRequest;
class HashRateRequestDefaultTypeInternal;
extern HashRateRequestDefaultTypeInternal _HashRateRequest_default_instance_;
class MiningReply;
class MiningReplyDefaultTypeInternal;
extern MiningReplyDefaultTypeInternal _MiningReply_default_instance_;
class MiningRequest;
class MiningRequestDefaultTypeInternal;
extern MiningRequestDefaultTypeInternal _MiningRequest_default_instance_;
class OnMinedBlockReply;
class OnMinedBlockReplyDefaultTypeInternal;
extern OnMinedBlockReplyDefaultTypeInternal _OnMinedBlockReply_default_instance_;
class OnMinedBlockRequest;
class OnMinedBlockRequestDefaultTypeInternal;
extern OnMinedBlockRequestDefaultTypeInternal _OnMinedBlockRequest_default_instance_;
class OnPendingBlockReply;
class OnPendingBlockReplyDefaultTypeInternal;
extern OnPendingBlockReplyDefaultTypeInternal _OnPendingBlockReply_default_instance_;
class OnPendingBlockRequest;
class OnPendingBlockRequestDefaultTypeInternal;
extern OnPendingBlockRequestDefaultTypeInternal _OnPendingBlockRequest_default_instance_;
class OnPendingLogsReply;
class OnPendingLogsReplyDefaultTypeInternal;
extern OnPendingLogsReplyDefaultTypeInternal _OnPendingLogsReply_default_instance_;
class OnPendingLogsRequest;
class OnPendingLogsRequestDefaultTypeInternal;
extern OnPendingLogsRequestDefaultTypeInternal _OnPendingLogsRequest_default_instance_;
class SubmitHashRateReply;
class SubmitHashRateReplyDefaultTypeInternal;
extern SubmitHashRateReplyDefaultTypeInternal _SubmitHashRateReply_default_instance_;
class SubmitHashRateRequest;
class SubmitHashRateRequestDefaultTypeInternal;
extern SubmitHashRateRequestDefaultTypeInternal _SubmitHashRateRequest_default_instance_;
class SubmitWorkReply;
class SubmitWorkReplyDefaultTypeInternal;
extern SubmitWorkReplyDefaultTypeInternal _SubmitWorkReply_default_instance_;
class SubmitWorkRequest;
class SubmitWorkRequestDefaultTypeInternal;
extern SubmitWorkRequestDefaultTypeInternal _SubmitWorkRequest_default_instance_;
}  // namespace txpool
PROTOBUF_NAMESPACE_OPEN
template<> ::txpool::GetWorkReply* Arena::CreateMaybeMessage<::txpool::GetWorkReply>(Arena*);
template<> ::txpool::GetWorkRequest* Arena::CreateMaybeMessage<::txpool::GetWorkRequest>(Arena*);
template<> ::txpool::HashRateReply* Arena::CreateMaybeMessage<::txpool::HashRateReply>(Arena*);
template<> ::txpool::HashRateRequest* Arena::CreateMaybeMessage<::txpool::HashRateRequest>(Arena*);
template<> ::txpool::MiningReply* Arena::CreateMaybeMessage<::txpool::MiningReply>(Arena*);
template<> ::txpool::MiningRequest* Arena::CreateMaybeMessage<::txpool::MiningRequest>(Arena*);
template<> ::txpool::OnMinedBlockReply* Arena::CreateMaybeMessage<::txpool::OnMinedBlockReply>(Arena*);
template<> ::txpool::OnMinedBlockRequest* Arena::CreateMaybeMessage<::txpool::OnMinedBlockRequest>(Arena*);
template<> ::txpool::OnPendingBlockReply* Arena::CreateMaybeMessage<::txpool::OnPendingBlockReply>(Arena*);
template<> ::txpool::OnPendingBlockRequest* Arena::CreateMaybeMessage<::txpool::OnPendingBlockRequest>(Arena*);
template<> ::txpool::OnPendingLogsReply* Arena::CreateMaybeMessage<::txpool::OnPendingLogsReply>(Arena*);
template<> ::txpool::OnPendingLogsRequest* Arena::CreateMaybeMessage<::txpool::OnPendingLogsRequest>(Arena*);
template<> ::txpool::SubmitHashRateReply* Arena::CreateMaybeMessage<::txpool::SubmitHashRateReply>(Arena*);
template<> ::txpool::SubmitHashRateRequest* Arena::CreateMaybeMessage<::txpool::SubmitHashRateRequest>(Arena*);
template<> ::txpool::SubmitWorkReply* Arena::CreateMaybeMessage<::txpool::SubmitWorkReply>(Arena*);
template<> ::txpool::SubmitWorkRequest* Arena::CreateMaybeMessage<::txpool::SubmitWorkRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace txpool {

// ===================================================================

class OnPendingBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnPendingBlockRequest) */ {
 public:
  inline OnPendingBlockRequest() : OnPendingBlockRequest(nullptr) {}
  virtual ~OnPendingBlockRequest();

  OnPendingBlockRequest(const OnPendingBlockRequest& from);
  OnPendingBlockRequest(OnPendingBlockRequest&& from) noexcept
    : OnPendingBlockRequest() {
    *this = ::std::move(from);
  }

  inline OnPendingBlockRequest& operator=(const OnPendingBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingBlockRequest& operator=(OnPendingBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnPendingBlockRequest& default_instance();

  static inline const OnPendingBlockRequest* internal_default_instance() {
    return reinterpret_cast<const OnPendingBlockRequest*>(
               &_OnPendingBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OnPendingBlockRequest& a, OnPendingBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnPendingBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnPendingBlockRequest* New() const final {
    return CreateMaybeMessage<OnPendingBlockRequest>(nullptr);
  }

  OnPendingBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnPendingBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnPendingBlockRequest& from);
  void MergeFrom(const OnPendingBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnPendingBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnPendingBlockRequest";
  }
  protected:
  explicit OnPendingBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.OnPendingBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnPendingBlockReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnPendingBlockReply) */ {
 public:
  inline OnPendingBlockReply() : OnPendingBlockReply(nullptr) {}
  virtual ~OnPendingBlockReply();

  OnPendingBlockReply(const OnPendingBlockReply& from);
  OnPendingBlockReply(OnPendingBlockReply&& from) noexcept
    : OnPendingBlockReply() {
    *this = ::std::move(from);
  }

  inline OnPendingBlockReply& operator=(const OnPendingBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingBlockReply& operator=(OnPendingBlockReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnPendingBlockReply& default_instance();

  static inline const OnPendingBlockReply* internal_default_instance() {
    return reinterpret_cast<const OnPendingBlockReply*>(
               &_OnPendingBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OnPendingBlockReply& a, OnPendingBlockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnPendingBlockReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingBlockReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnPendingBlockReply* New() const final {
    return CreateMaybeMessage<OnPendingBlockReply>(nullptr);
  }

  OnPendingBlockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnPendingBlockReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnPendingBlockReply& from);
  void MergeFrom(const OnPendingBlockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnPendingBlockReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnPendingBlockReply";
  }
  protected:
  explicit OnPendingBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRplBlockFieldNumber = 1,
  };
  // bytes rpl_block = 1;
  void clear_rpl_block();
  const std::string& rpl_block() const;
  void set_rpl_block(const std::string& value);
  void set_rpl_block(std::string&& value);
  void set_rpl_block(const char* value);
  void set_rpl_block(const void* value, size_t size);
  std::string* mutable_rpl_block();
  std::string* release_rpl_block();
  void set_allocated_rpl_block(std::string* rpl_block);
  private:
  const std::string& _internal_rpl_block() const;
  void _internal_set_rpl_block(const std::string& value);
  std::string* _internal_mutable_rpl_block();
  public:

  // @@protoc_insertion_point(class_scope:txpool.OnPendingBlockReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpl_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnMinedBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnMinedBlockRequest) */ {
 public:
  inline OnMinedBlockRequest() : OnMinedBlockRequest(nullptr) {}
  virtual ~OnMinedBlockRequest();

  OnMinedBlockRequest(const OnMinedBlockRequest& from);
  OnMinedBlockRequest(OnMinedBlockRequest&& from) noexcept
    : OnMinedBlockRequest() {
    *this = ::std::move(from);
  }

  inline OnMinedBlockRequest& operator=(const OnMinedBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnMinedBlockRequest& operator=(OnMinedBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnMinedBlockRequest& default_instance();

  static inline const OnMinedBlockRequest* internal_default_instance() {
    return reinterpret_cast<const OnMinedBlockRequest*>(
               &_OnMinedBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OnMinedBlockRequest& a, OnMinedBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnMinedBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnMinedBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnMinedBlockRequest* New() const final {
    return CreateMaybeMessage<OnMinedBlockRequest>(nullptr);
  }

  OnMinedBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnMinedBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnMinedBlockRequest& from);
  void MergeFrom(const OnMinedBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnMinedBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnMinedBlockRequest";
  }
  protected:
  explicit OnMinedBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.OnMinedBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnMinedBlockReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnMinedBlockReply) */ {
 public:
  inline OnMinedBlockReply() : OnMinedBlockReply(nullptr) {}
  virtual ~OnMinedBlockReply();

  OnMinedBlockReply(const OnMinedBlockReply& from);
  OnMinedBlockReply(OnMinedBlockReply&& from) noexcept
    : OnMinedBlockReply() {
    *this = ::std::move(from);
  }

  inline OnMinedBlockReply& operator=(const OnMinedBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnMinedBlockReply& operator=(OnMinedBlockReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnMinedBlockReply& default_instance();

  static inline const OnMinedBlockReply* internal_default_instance() {
    return reinterpret_cast<const OnMinedBlockReply*>(
               &_OnMinedBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OnMinedBlockReply& a, OnMinedBlockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnMinedBlockReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnMinedBlockReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnMinedBlockReply* New() const final {
    return CreateMaybeMessage<OnMinedBlockReply>(nullptr);
  }

  OnMinedBlockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnMinedBlockReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnMinedBlockReply& from);
  void MergeFrom(const OnMinedBlockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnMinedBlockReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnMinedBlockReply";
  }
  protected:
  explicit OnMinedBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRplBlockFieldNumber = 1,
  };
  // bytes rpl_block = 1;
  void clear_rpl_block();
  const std::string& rpl_block() const;
  void set_rpl_block(const std::string& value);
  void set_rpl_block(std::string&& value);
  void set_rpl_block(const char* value);
  void set_rpl_block(const void* value, size_t size);
  std::string* mutable_rpl_block();
  std::string* release_rpl_block();
  void set_allocated_rpl_block(std::string* rpl_block);
  private:
  const std::string& _internal_rpl_block() const;
  void _internal_set_rpl_block(const std::string& value);
  std::string* _internal_mutable_rpl_block();
  public:

  // @@protoc_insertion_point(class_scope:txpool.OnMinedBlockReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpl_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnPendingLogsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnPendingLogsRequest) */ {
 public:
  inline OnPendingLogsRequest() : OnPendingLogsRequest(nullptr) {}
  virtual ~OnPendingLogsRequest();

  OnPendingLogsRequest(const OnPendingLogsRequest& from);
  OnPendingLogsRequest(OnPendingLogsRequest&& from) noexcept
    : OnPendingLogsRequest() {
    *this = ::std::move(from);
  }

  inline OnPendingLogsRequest& operator=(const OnPendingLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingLogsRequest& operator=(OnPendingLogsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnPendingLogsRequest& default_instance();

  static inline const OnPendingLogsRequest* internal_default_instance() {
    return reinterpret_cast<const OnPendingLogsRequest*>(
               &_OnPendingLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OnPendingLogsRequest& a, OnPendingLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnPendingLogsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnPendingLogsRequest* New() const final {
    return CreateMaybeMessage<OnPendingLogsRequest>(nullptr);
  }

  OnPendingLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnPendingLogsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnPendingLogsRequest& from);
  void MergeFrom(const OnPendingLogsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnPendingLogsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnPendingLogsRequest";
  }
  protected:
  explicit OnPendingLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.OnPendingLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class OnPendingLogsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnPendingLogsReply) */ {
 public:
  inline OnPendingLogsReply() : OnPendingLogsReply(nullptr) {}
  virtual ~OnPendingLogsReply();

  OnPendingLogsReply(const OnPendingLogsReply& from);
  OnPendingLogsReply(OnPendingLogsReply&& from) noexcept
    : OnPendingLogsReply() {
    *this = ::std::move(from);
  }

  inline OnPendingLogsReply& operator=(const OnPendingLogsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnPendingLogsReply& operator=(OnPendingLogsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnPendingLogsReply& default_instance();

  static inline const OnPendingLogsReply* internal_default_instance() {
    return reinterpret_cast<const OnPendingLogsReply*>(
               &_OnPendingLogsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OnPendingLogsReply& a, OnPendingLogsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnPendingLogsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnPendingLogsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnPendingLogsReply* New() const final {
    return CreateMaybeMessage<OnPendingLogsReply>(nullptr);
  }

  OnPendingLogsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnPendingLogsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnPendingLogsReply& from);
  void MergeFrom(const OnPendingLogsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnPendingLogsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnPendingLogsReply";
  }
  protected:
  explicit OnPendingLogsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRplLogsFieldNumber = 1,
  };
  // bytes rpl_logs = 1;
  void clear_rpl_logs();
  const std::string& rpl_logs() const;
  void set_rpl_logs(const std::string& value);
  void set_rpl_logs(std::string&& value);
  void set_rpl_logs(const char* value);
  void set_rpl_logs(const void* value, size_t size);
  std::string* mutable_rpl_logs();
  std::string* release_rpl_logs();
  void set_allocated_rpl_logs(std::string* rpl_logs);
  private:
  const std::string& _internal_rpl_logs() const;
  void _internal_set_rpl_logs(const std::string& value);
  std::string* _internal_mutable_rpl_logs();
  public:

  // @@protoc_insertion_point(class_scope:txpool.OnPendingLogsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpl_logs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class GetWorkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.GetWorkRequest) */ {
 public:
  inline GetWorkRequest() : GetWorkRequest(nullptr) {}
  virtual ~GetWorkRequest();

  GetWorkRequest(const GetWorkRequest& from);
  GetWorkRequest(GetWorkRequest&& from) noexcept
    : GetWorkRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkRequest& operator=(const GetWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkRequest& operator=(GetWorkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkRequest& default_instance();

  static inline const GetWorkRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkRequest*>(
               &_GetWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetWorkRequest& a, GetWorkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkRequest* New() const final {
    return CreateMaybeMessage<GetWorkRequest>(nullptr);
  }

  GetWorkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkRequest& from);
  void MergeFrom(const GetWorkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.GetWorkRequest";
  }
  protected:
  explicit GetWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.GetWorkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class GetWorkReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.GetWorkReply) */ {
 public:
  inline GetWorkReply() : GetWorkReply(nullptr) {}
  virtual ~GetWorkReply();

  GetWorkReply(const GetWorkReply& from);
  GetWorkReply(GetWorkReply&& from) noexcept
    : GetWorkReply() {
    *this = ::std::move(from);
  }

  inline GetWorkReply& operator=(const GetWorkReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkReply& operator=(GetWorkReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkReply& default_instance();

  static inline const GetWorkReply* internal_default_instance() {
    return reinterpret_cast<const GetWorkReply*>(
               &_GetWorkReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetWorkReply& a, GetWorkReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkReply* New() const final {
    return CreateMaybeMessage<GetWorkReply>(nullptr);
  }

  GetWorkReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkReply& from);
  void MergeFrom(const GetWorkReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.GetWorkReply";
  }
  protected:
  explicit GetWorkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderHashFieldNumber = 1,
    kSeedHashFieldNumber = 2,
    kTargetFieldNumber = 3,
    kBlockNumberFieldNumber = 4,
  };
  // string header_hash = 1;
  void clear_header_hash();
  const std::string& header_hash() const;
  void set_header_hash(const std::string& value);
  void set_header_hash(std::string&& value);
  void set_header_hash(const char* value);
  void set_header_hash(const char* value, size_t size);
  std::string* mutable_header_hash();
  std::string* release_header_hash();
  void set_allocated_header_hash(std::string* header_hash);
  private:
  const std::string& _internal_header_hash() const;
  void _internal_set_header_hash(const std::string& value);
  std::string* _internal_mutable_header_hash();
  public:

  // string seed_hash = 2;
  void clear_seed_hash();
  const std::string& seed_hash() const;
  void set_seed_hash(const std::string& value);
  void set_seed_hash(std::string&& value);
  void set_seed_hash(const char* value);
  void set_seed_hash(const char* value, size_t size);
  std::string* mutable_seed_hash();
  std::string* release_seed_hash();
  void set_allocated_seed_hash(std::string* seed_hash);
  private:
  const std::string& _internal_seed_hash() const;
  void _internal_set_seed_hash(const std::string& value);
  std::string* _internal_mutable_seed_hash();
  public:

  // string target = 3;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string block_number = 4;
  void clear_block_number();
  const std::string& block_number() const;
  void set_block_number(const std::string& value);
  void set_block_number(std::string&& value);
  void set_block_number(const char* value);
  void set_block_number(const char* value, size_t size);
  std::string* mutable_block_number();
  std::string* release_block_number();
  void set_allocated_block_number(std::string* block_number);
  private:
  const std::string& _internal_block_number() const;
  void _internal_set_block_number(const std::string& value);
  std::string* _internal_mutable_block_number();
  public:

  // @@protoc_insertion_point(class_scope:txpool.GetWorkReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class SubmitWorkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.SubmitWorkRequest) */ {
 public:
  inline SubmitWorkRequest() : SubmitWorkRequest(nullptr) {}
  virtual ~SubmitWorkRequest();

  SubmitWorkRequest(const SubmitWorkRequest& from);
  SubmitWorkRequest(SubmitWorkRequest&& from) noexcept
    : SubmitWorkRequest() {
    *this = ::std::move(from);
  }

  inline SubmitWorkRequest& operator=(const SubmitWorkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitWorkRequest& operator=(SubmitWorkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitWorkRequest& default_instance();

  static inline const SubmitWorkRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitWorkRequest*>(
               &_SubmitWorkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubmitWorkRequest& a, SubmitWorkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitWorkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitWorkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitWorkRequest* New() const final {
    return CreateMaybeMessage<SubmitWorkRequest>(nullptr);
  }

  SubmitWorkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitWorkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitWorkRequest& from);
  void MergeFrom(const SubmitWorkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitWorkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.SubmitWorkRequest";
  }
  protected:
  explicit SubmitWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNonceFieldNumber = 1,
    kPowHashFieldNumber = 2,
    kDigestFieldNumber = 3,
  };
  // bytes block_nonce = 1;
  void clear_block_nonce();
  const std::string& block_nonce() const;
  void set_block_nonce(const std::string& value);
  void set_block_nonce(std::string&& value);
  void set_block_nonce(const char* value);
  void set_block_nonce(const void* value, size_t size);
  std::string* mutable_block_nonce();
  std::string* release_block_nonce();
  void set_allocated_block_nonce(std::string* block_nonce);
  private:
  const std::string& _internal_block_nonce() const;
  void _internal_set_block_nonce(const std::string& value);
  std::string* _internal_mutable_block_nonce();
  public:

  // bytes pow_hash = 2;
  void clear_pow_hash();
  const std::string& pow_hash() const;
  void set_pow_hash(const std::string& value);
  void set_pow_hash(std::string&& value);
  void set_pow_hash(const char* value);
  void set_pow_hash(const void* value, size_t size);
  std::string* mutable_pow_hash();
  std::string* release_pow_hash();
  void set_allocated_pow_hash(std::string* pow_hash);
  private:
  const std::string& _internal_pow_hash() const;
  void _internal_set_pow_hash(const std::string& value);
  std::string* _internal_mutable_pow_hash();
  public:

  // bytes digest = 3;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const void* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // @@protoc_insertion_point(class_scope:txpool.SubmitWorkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pow_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class SubmitWorkReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.SubmitWorkReply) */ {
 public:
  inline SubmitWorkReply() : SubmitWorkReply(nullptr) {}
  virtual ~SubmitWorkReply();

  SubmitWorkReply(const SubmitWorkReply& from);
  SubmitWorkReply(SubmitWorkReply&& from) noexcept
    : SubmitWorkReply() {
    *this = ::std::move(from);
  }

  inline SubmitWorkReply& operator=(const SubmitWorkReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitWorkReply& operator=(SubmitWorkReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitWorkReply& default_instance();

  static inline const SubmitWorkReply* internal_default_instance() {
    return reinterpret_cast<const SubmitWorkReply*>(
               &_SubmitWorkReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SubmitWorkReply& a, SubmitWorkReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitWorkReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitWorkReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitWorkReply* New() const final {
    return CreateMaybeMessage<SubmitWorkReply>(nullptr);
  }

  SubmitWorkReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitWorkReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitWorkReply& from);
  void MergeFrom(const SubmitWorkReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitWorkReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.SubmitWorkReply";
  }
  protected:
  explicit SubmitWorkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.SubmitWorkReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class SubmitHashRateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.SubmitHashRateRequest) */ {
 public:
  inline SubmitHashRateRequest() : SubmitHashRateRequest(nullptr) {}
  virtual ~SubmitHashRateRequest();

  SubmitHashRateRequest(const SubmitHashRateRequest& from);
  SubmitHashRateRequest(SubmitHashRateRequest&& from) noexcept
    : SubmitHashRateRequest() {
    *this = ::std::move(from);
  }

  inline SubmitHashRateRequest& operator=(const SubmitHashRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitHashRateRequest& operator=(SubmitHashRateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitHashRateRequest& default_instance();

  static inline const SubmitHashRateRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitHashRateRequest*>(
               &_SubmitHashRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubmitHashRateRequest& a, SubmitHashRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitHashRateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitHashRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitHashRateRequest* New() const final {
    return CreateMaybeMessage<SubmitHashRateRequest>(nullptr);
  }

  SubmitHashRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitHashRateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitHashRateRequest& from);
  void MergeFrom(const SubmitHashRateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitHashRateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.SubmitHashRateRequest";
  }
  protected:
  explicit SubmitHashRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kRateFieldNumber = 1,
  };
  // bytes id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 rate = 1;
  void clear_rate();
  ::PROTOBUF_NAMESPACE_ID::uint64 rate() const;
  void set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rate() const;
  void _internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.SubmitHashRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class SubmitHashRateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.SubmitHashRateReply) */ {
 public:
  inline SubmitHashRateReply() : SubmitHashRateReply(nullptr) {}
  virtual ~SubmitHashRateReply();

  SubmitHashRateReply(const SubmitHashRateReply& from);
  SubmitHashRateReply(SubmitHashRateReply&& from) noexcept
    : SubmitHashRateReply() {
    *this = ::std::move(from);
  }

  inline SubmitHashRateReply& operator=(const SubmitHashRateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitHashRateReply& operator=(SubmitHashRateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitHashRateReply& default_instance();

  static inline const SubmitHashRateReply* internal_default_instance() {
    return reinterpret_cast<const SubmitHashRateReply*>(
               &_SubmitHashRateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubmitHashRateReply& a, SubmitHashRateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitHashRateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitHashRateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitHashRateReply* New() const final {
    return CreateMaybeMessage<SubmitHashRateReply>(nullptr);
  }

  SubmitHashRateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitHashRateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitHashRateReply& from);
  void MergeFrom(const SubmitHashRateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitHashRateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.SubmitHashRateReply";
  }
  protected:
  explicit SubmitHashRateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.SubmitHashRateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class HashRateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.HashRateRequest) */ {
 public:
  inline HashRateRequest() : HashRateRequest(nullptr) {}
  virtual ~HashRateRequest();

  HashRateRequest(const HashRateRequest& from);
  HashRateRequest(HashRateRequest&& from) noexcept
    : HashRateRequest() {
    *this = ::std::move(from);
  }

  inline HashRateRequest& operator=(const HashRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashRateRequest& operator=(HashRateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashRateRequest& default_instance();

  static inline const HashRateRequest* internal_default_instance() {
    return reinterpret_cast<const HashRateRequest*>(
               &_HashRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HashRateRequest& a, HashRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HashRateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashRateRequest* New() const final {
    return CreateMaybeMessage<HashRateRequest>(nullptr);
  }

  HashRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashRateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashRateRequest& from);
  void MergeFrom(const HashRateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashRateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.HashRateRequest";
  }
  protected:
  explicit HashRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.HashRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class HashRateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.HashRateReply) */ {
 public:
  inline HashRateReply() : HashRateReply(nullptr) {}
  virtual ~HashRateReply();

  HashRateReply(const HashRateReply& from);
  HashRateReply(HashRateReply&& from) noexcept
    : HashRateReply() {
    *this = ::std::move(from);
  }

  inline HashRateReply& operator=(const HashRateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashRateReply& operator=(HashRateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashRateReply& default_instance();

  static inline const HashRateReply* internal_default_instance() {
    return reinterpret_cast<const HashRateReply*>(
               &_HashRateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HashRateReply& a, HashRateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HashRateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashRateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashRateReply* New() const final {
    return CreateMaybeMessage<HashRateReply>(nullptr);
  }

  HashRateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashRateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashRateReply& from);
  void MergeFrom(const HashRateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashRateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.HashRateReply";
  }
  protected:
  explicit HashRateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashRateFieldNumber = 1,
  };
  // uint64 hash_rate = 1;
  void clear_hash_rate();
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_rate() const;
  void set_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hash_rate() const;
  void _internal_set_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.HashRateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class MiningRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.MiningRequest) */ {
 public:
  inline MiningRequest() : MiningRequest(nullptr) {}
  virtual ~MiningRequest();

  MiningRequest(const MiningRequest& from);
  MiningRequest(MiningRequest&& from) noexcept
    : MiningRequest() {
    *this = ::std::move(from);
  }

  inline MiningRequest& operator=(const MiningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiningRequest& operator=(MiningRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MiningRequest& default_instance();

  static inline const MiningRequest* internal_default_instance() {
    return reinterpret_cast<const MiningRequest*>(
               &_MiningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MiningRequest& a, MiningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MiningRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MiningRequest* New() const final {
    return CreateMaybeMessage<MiningRequest>(nullptr);
  }

  MiningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MiningRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MiningRequest& from);
  void MergeFrom(const MiningRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiningRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.MiningRequest";
  }
  protected:
  explicit MiningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.MiningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// -------------------------------------------------------------------

class MiningReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.MiningReply) */ {
 public:
  inline MiningReply() : MiningReply(nullptr) {}
  virtual ~MiningReply();

  MiningReply(const MiningReply& from);
  MiningReply(MiningReply&& from) noexcept
    : MiningReply() {
    *this = ::std::move(from);
  }

  inline MiningReply& operator=(const MiningReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiningReply& operator=(MiningReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MiningReply& default_instance();

  static inline const MiningReply* internal_default_instance() {
    return reinterpret_cast<const MiningReply*>(
               &_MiningReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MiningReply& a, MiningReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MiningReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiningReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MiningReply* New() const final {
    return CreateMaybeMessage<MiningReply>(nullptr);
  }

  MiningReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MiningReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MiningReply& from);
  void MergeFrom(const MiningReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiningReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.MiningReply";
  }
  protected:
  explicit MiningReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2fmining_2eproto);
    return ::descriptor_table_txpool_2fmining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kRunningFieldNumber = 2,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool running = 2;
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:txpool.MiningReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enabled_;
  bool running_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2fmining_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OnPendingBlockRequest

// -------------------------------------------------------------------

// OnPendingBlockReply

// bytes rpl_block = 1;
inline void OnPendingBlockReply::clear_rpl_block() {
  rpl_block_.ClearToEmpty();
}
inline const std::string& OnPendingBlockReply::rpl_block() const {
  // @@protoc_insertion_point(field_get:txpool.OnPendingBlockReply.rpl_block)
  return _internal_rpl_block();
}
inline void OnPendingBlockReply::set_rpl_block(const std::string& value) {
  _internal_set_rpl_block(value);
  // @@protoc_insertion_point(field_set:txpool.OnPendingBlockReply.rpl_block)
}
inline std::string* OnPendingBlockReply::mutable_rpl_block() {
  // @@protoc_insertion_point(field_mutable:txpool.OnPendingBlockReply.rpl_block)
  return _internal_mutable_rpl_block();
}
inline const std::string& OnPendingBlockReply::_internal_rpl_block() const {
  return rpl_block_.Get();
}
inline void OnPendingBlockReply::_internal_set_rpl_block(const std::string& value) {
  
  rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnPendingBlockReply::set_rpl_block(std::string&& value) {
  
  rpl_block_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.OnPendingBlockReply.rpl_block)
}
inline void OnPendingBlockReply::set_rpl_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.OnPendingBlockReply.rpl_block)
}
inline void OnPendingBlockReply::set_rpl_block(const void* value,
    size_t size) {
  
  rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.OnPendingBlockReply.rpl_block)
}
inline std::string* OnPendingBlockReply::_internal_mutable_rpl_block() {
  
  return rpl_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnPendingBlockReply::release_rpl_block() {
  // @@protoc_insertion_point(field_release:txpool.OnPendingBlockReply.rpl_block)
  return rpl_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnPendingBlockReply::set_allocated_rpl_block(std::string* rpl_block) {
  if (rpl_block != nullptr) {
    
  } else {
    
  }
  rpl_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpl_block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.OnPendingBlockReply.rpl_block)
}

// -------------------------------------------------------------------

// OnMinedBlockRequest

// -------------------------------------------------------------------

// OnMinedBlockReply

// bytes rpl_block = 1;
inline void OnMinedBlockReply::clear_rpl_block() {
  rpl_block_.ClearToEmpty();
}
inline const std::string& OnMinedBlockReply::rpl_block() const {
  // @@protoc_insertion_point(field_get:txpool.OnMinedBlockReply.rpl_block)
  return _internal_rpl_block();
}
inline void OnMinedBlockReply::set_rpl_block(const std::string& value) {
  _internal_set_rpl_block(value);
  // @@protoc_insertion_point(field_set:txpool.OnMinedBlockReply.rpl_block)
}
inline std::string* OnMinedBlockReply::mutable_rpl_block() {
  // @@protoc_insertion_point(field_mutable:txpool.OnMinedBlockReply.rpl_block)
  return _internal_mutable_rpl_block();
}
inline const std::string& OnMinedBlockReply::_internal_rpl_block() const {
  return rpl_block_.Get();
}
inline void OnMinedBlockReply::_internal_set_rpl_block(const std::string& value) {
  
  rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnMinedBlockReply::set_rpl_block(std::string&& value) {
  
  rpl_block_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.OnMinedBlockReply.rpl_block)
}
inline void OnMinedBlockReply::set_rpl_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.OnMinedBlockReply.rpl_block)
}
inline void OnMinedBlockReply::set_rpl_block(const void* value,
    size_t size) {
  
  rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.OnMinedBlockReply.rpl_block)
}
inline std::string* OnMinedBlockReply::_internal_mutable_rpl_block() {
  
  return rpl_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnMinedBlockReply::release_rpl_block() {
  // @@protoc_insertion_point(field_release:txpool.OnMinedBlockReply.rpl_block)
  return rpl_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnMinedBlockReply::set_allocated_rpl_block(std::string* rpl_block) {
  if (rpl_block != nullptr) {
    
  } else {
    
  }
  rpl_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpl_block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.OnMinedBlockReply.rpl_block)
}

// -------------------------------------------------------------------

// OnPendingLogsRequest

// -------------------------------------------------------------------

// OnPendingLogsReply

// bytes rpl_logs = 1;
inline void OnPendingLogsReply::clear_rpl_logs() {
  rpl_logs_.ClearToEmpty();
}
inline const std::string& OnPendingLogsReply::rpl_logs() const {
  // @@protoc_insertion_point(field_get:txpool.OnPendingLogsReply.rpl_logs)
  return _internal_rpl_logs();
}
inline void OnPendingLogsReply::set_rpl_logs(const std::string& value) {
  _internal_set_rpl_logs(value);
  // @@protoc_insertion_point(field_set:txpool.OnPendingLogsReply.rpl_logs)
}
inline std::string* OnPendingLogsReply::mutable_rpl_logs() {
  // @@protoc_insertion_point(field_mutable:txpool.OnPendingLogsReply.rpl_logs)
  return _internal_mutable_rpl_logs();
}
inline const std::string& OnPendingLogsReply::_internal_rpl_logs() const {
  return rpl_logs_.Get();
}
inline void OnPendingLogsReply::_internal_set_rpl_logs(const std::string& value) {
  
  rpl_logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnPendingLogsReply::set_rpl_logs(std::string&& value) {
  
  rpl_logs_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.OnPendingLogsReply.rpl_logs)
}
inline void OnPendingLogsReply::set_rpl_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpl_logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.OnPendingLogsReply.rpl_logs)
}
inline void OnPendingLogsReply::set_rpl_logs(const void* value,
    size_t size) {
  
  rpl_logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.OnPendingLogsReply.rpl_logs)
}
inline std::string* OnPendingLogsReply::_internal_mutable_rpl_logs() {
  
  return rpl_logs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnPendingLogsReply::release_rpl_logs() {
  // @@protoc_insertion_point(field_release:txpool.OnPendingLogsReply.rpl_logs)
  return rpl_logs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnPendingLogsReply::set_allocated_rpl_logs(std::string* rpl_logs) {
  if (rpl_logs != nullptr) {
    
  } else {
    
  }
  rpl_logs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpl_logs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.OnPendingLogsReply.rpl_logs)
}

// -------------------------------------------------------------------

// GetWorkRequest

// -------------------------------------------------------------------

// GetWorkReply

// string header_hash = 1;
inline void GetWorkReply::clear_header_hash() {
  header_hash_.ClearToEmpty();
}
inline const std::string& GetWorkReply::header_hash() const {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.header_hash)
  return _internal_header_hash();
}
inline void GetWorkReply::set_header_hash(const std::string& value) {
  _internal_set_header_hash(value);
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.header_hash)
}
inline std::string* GetWorkReply::mutable_header_hash() {
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.header_hash)
  return _internal_mutable_header_hash();
}
inline const std::string& GetWorkReply::_internal_header_hash() const {
  return header_hash_.Get();
}
inline void GetWorkReply::_internal_set_header_hash(const std::string& value) {
  
  header_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetWorkReply::set_header_hash(std::string&& value) {
  
  header_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.GetWorkReply.header_hash)
}
inline void GetWorkReply::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.GetWorkReply.header_hash)
}
inline void GetWorkReply::set_header_hash(const char* value,
    size_t size) {
  
  header_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.GetWorkReply.header_hash)
}
inline std::string* GetWorkReply::_internal_mutable_header_hash() {
  
  return header_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetWorkReply::release_header_hash() {
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.header_hash)
  return header_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkReply::set_allocated_header_hash(std::string* header_hash) {
  if (header_hash != nullptr) {
    
  } else {
    
  }
  header_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.header_hash)
}

// string seed_hash = 2;
inline void GetWorkReply::clear_seed_hash() {
  seed_hash_.ClearToEmpty();
}
inline const std::string& GetWorkReply::seed_hash() const {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.seed_hash)
  return _internal_seed_hash();
}
inline void GetWorkReply::set_seed_hash(const std::string& value) {
  _internal_set_seed_hash(value);
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.seed_hash)
}
inline std::string* GetWorkReply::mutable_seed_hash() {
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.seed_hash)
  return _internal_mutable_seed_hash();
}
inline const std::string& GetWorkReply::_internal_seed_hash() const {
  return seed_hash_.Get();
}
inline void GetWorkReply::_internal_set_seed_hash(const std::string& value) {
  
  seed_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetWorkReply::set_seed_hash(std::string&& value) {
  
  seed_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.GetWorkReply.seed_hash)
}
inline void GetWorkReply::set_seed_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seed_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.GetWorkReply.seed_hash)
}
inline void GetWorkReply::set_seed_hash(const char* value,
    size_t size) {
  
  seed_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.GetWorkReply.seed_hash)
}
inline std::string* GetWorkReply::_internal_mutable_seed_hash() {
  
  return seed_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetWorkReply::release_seed_hash() {
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.seed_hash)
  return seed_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkReply::set_allocated_seed_hash(std::string* seed_hash) {
  if (seed_hash != nullptr) {
    
  } else {
    
  }
  seed_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.seed_hash)
}

// string target = 3;
inline void GetWorkReply::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& GetWorkReply::target() const {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.target)
  return _internal_target();
}
inline void GetWorkReply::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.target)
}
inline std::string* GetWorkReply::mutable_target() {
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.target)
  return _internal_mutable_target();
}
inline const std::string& GetWorkReply::_internal_target() const {
  return target_.Get();
}
inline void GetWorkReply::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetWorkReply::set_target(std::string&& value) {
  
  target_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.GetWorkReply.target)
}
inline void GetWorkReply::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.GetWorkReply.target)
}
inline void GetWorkReply::set_target(const char* value,
    size_t size) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.GetWorkReply.target)
}
inline std::string* GetWorkReply::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetWorkReply::release_target() {
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkReply::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.target)
}

// string block_number = 4;
inline void GetWorkReply::clear_block_number() {
  block_number_.ClearToEmpty();
}
inline const std::string& GetWorkReply::block_number() const {
  // @@protoc_insertion_point(field_get:txpool.GetWorkReply.block_number)
  return _internal_block_number();
}
inline void GetWorkReply::set_block_number(const std::string& value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:txpool.GetWorkReply.block_number)
}
inline std::string* GetWorkReply::mutable_block_number() {
  // @@protoc_insertion_point(field_mutable:txpool.GetWorkReply.block_number)
  return _internal_mutable_block_number();
}
inline const std::string& GetWorkReply::_internal_block_number() const {
  return block_number_.Get();
}
inline void GetWorkReply::_internal_set_block_number(const std::string& value) {
  
  block_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetWorkReply::set_block_number(std::string&& value) {
  
  block_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.GetWorkReply.block_number)
}
inline void GetWorkReply::set_block_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.GetWorkReply.block_number)
}
inline void GetWorkReply::set_block_number(const char* value,
    size_t size) {
  
  block_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.GetWorkReply.block_number)
}
inline std::string* GetWorkReply::_internal_mutable_block_number() {
  
  return block_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetWorkReply::release_block_number() {
  // @@protoc_insertion_point(field_release:txpool.GetWorkReply.block_number)
  return block_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkReply::set_allocated_block_number(std::string* block_number) {
  if (block_number != nullptr) {
    
  } else {
    
  }
  block_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.GetWorkReply.block_number)
}

// -------------------------------------------------------------------

// SubmitWorkRequest

// bytes block_nonce = 1;
inline void SubmitWorkRequest::clear_block_nonce() {
  block_nonce_.ClearToEmpty();
}
inline const std::string& SubmitWorkRequest::block_nonce() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkRequest.block_nonce)
  return _internal_block_nonce();
}
inline void SubmitWorkRequest::set_block_nonce(const std::string& value) {
  _internal_set_block_nonce(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkRequest.block_nonce)
}
inline std::string* SubmitWorkRequest::mutable_block_nonce() {
  // @@protoc_insertion_point(field_mutable:txpool.SubmitWorkRequest.block_nonce)
  return _internal_mutable_block_nonce();
}
inline const std::string& SubmitWorkRequest::_internal_block_nonce() const {
  return block_nonce_.Get();
}
inline void SubmitWorkRequest::_internal_set_block_nonce(const std::string& value) {
  
  block_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubmitWorkRequest::set_block_nonce(std::string&& value) {
  
  block_nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.SubmitWorkRequest.block_nonce)
}
inline void SubmitWorkRequest::set_block_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.SubmitWorkRequest.block_nonce)
}
inline void SubmitWorkRequest::set_block_nonce(const void* value,
    size_t size) {
  
  block_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.SubmitWorkRequest.block_nonce)
}
inline std::string* SubmitWorkRequest::_internal_mutable_block_nonce() {
  
  return block_nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubmitWorkRequest::release_block_nonce() {
  // @@protoc_insertion_point(field_release:txpool.SubmitWorkRequest.block_nonce)
  return block_nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitWorkRequest::set_allocated_block_nonce(std::string* block_nonce) {
  if (block_nonce != nullptr) {
    
  } else {
    
  }
  block_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitWorkRequest.block_nonce)
}

// bytes pow_hash = 2;
inline void SubmitWorkRequest::clear_pow_hash() {
  pow_hash_.ClearToEmpty();
}
inline const std::string& SubmitWorkRequest::pow_hash() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkRequest.pow_hash)
  return _internal_pow_hash();
}
inline void SubmitWorkRequest::set_pow_hash(const std::string& value) {
  _internal_set_pow_hash(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkRequest.pow_hash)
}
inline std::string* SubmitWorkRequest::mutable_pow_hash() {
  // @@protoc_insertion_point(field_mutable:txpool.SubmitWorkRequest.pow_hash)
  return _internal_mutable_pow_hash();
}
inline const std::string& SubmitWorkRequest::_internal_pow_hash() const {
  return pow_hash_.Get();
}
inline void SubmitWorkRequest::_internal_set_pow_hash(const std::string& value) {
  
  pow_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubmitWorkRequest::set_pow_hash(std::string&& value) {
  
  pow_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.SubmitWorkRequest.pow_hash)
}
inline void SubmitWorkRequest::set_pow_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pow_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.SubmitWorkRequest.pow_hash)
}
inline void SubmitWorkRequest::set_pow_hash(const void* value,
    size_t size) {
  
  pow_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.SubmitWorkRequest.pow_hash)
}
inline std::string* SubmitWorkRequest::_internal_mutable_pow_hash() {
  
  return pow_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubmitWorkRequest::release_pow_hash() {
  // @@protoc_insertion_point(field_release:txpool.SubmitWorkRequest.pow_hash)
  return pow_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitWorkRequest::set_allocated_pow_hash(std::string* pow_hash) {
  if (pow_hash != nullptr) {
    
  } else {
    
  }
  pow_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pow_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitWorkRequest.pow_hash)
}

// bytes digest = 3;
inline void SubmitWorkRequest::clear_digest() {
  digest_.ClearToEmpty();
}
inline const std::string& SubmitWorkRequest::digest() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkRequest.digest)
  return _internal_digest();
}
inline void SubmitWorkRequest::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkRequest.digest)
}
inline std::string* SubmitWorkRequest::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:txpool.SubmitWorkRequest.digest)
  return _internal_mutable_digest();
}
inline const std::string& SubmitWorkRequest::_internal_digest() const {
  return digest_.Get();
}
inline void SubmitWorkRequest::_internal_set_digest(const std::string& value) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubmitWorkRequest::set_digest(std::string&& value) {
  
  digest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.SubmitWorkRequest.digest)
}
inline void SubmitWorkRequest::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.SubmitWorkRequest.digest)
}
inline void SubmitWorkRequest::set_digest(const void* value,
    size_t size) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.SubmitWorkRequest.digest)
}
inline std::string* SubmitWorkRequest::_internal_mutable_digest() {
  
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubmitWorkRequest::release_digest() {
  // @@protoc_insertion_point(field_release:txpool.SubmitWorkRequest.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitWorkRequest::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitWorkRequest.digest)
}

// -------------------------------------------------------------------

// SubmitWorkReply

// bool ok = 1;
inline void SubmitWorkReply::clear_ok() {
  ok_ = false;
}
inline bool SubmitWorkReply::_internal_ok() const {
  return ok_;
}
inline bool SubmitWorkReply::ok() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitWorkReply.ok)
  return _internal_ok();
}
inline void SubmitWorkReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void SubmitWorkReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitWorkReply.ok)
}

// -------------------------------------------------------------------

// SubmitHashRateRequest

// uint64 rate = 1;
inline void SubmitHashRateRequest::clear_rate() {
  rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubmitHashRateRequest::_internal_rate() const {
  return rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubmitHashRateRequest::rate() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitHashRateRequest.rate)
  return _internal_rate();
}
inline void SubmitHashRateRequest::_internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rate_ = value;
}
inline void SubmitHashRateRequest::set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitHashRateRequest.rate)
}

// bytes id = 2;
inline void SubmitHashRateRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SubmitHashRateRequest::id() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitHashRateRequest.id)
  return _internal_id();
}
inline void SubmitHashRateRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitHashRateRequest.id)
}
inline std::string* SubmitHashRateRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:txpool.SubmitHashRateRequest.id)
  return _internal_mutable_id();
}
inline const std::string& SubmitHashRateRequest::_internal_id() const {
  return id_.Get();
}
inline void SubmitHashRateRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubmitHashRateRequest::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txpool.SubmitHashRateRequest.id)
}
inline void SubmitHashRateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:txpool.SubmitHashRateRequest.id)
}
inline void SubmitHashRateRequest::set_id(const void* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txpool.SubmitHashRateRequest.id)
}
inline std::string* SubmitHashRateRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubmitHashRateRequest::release_id() {
  // @@protoc_insertion_point(field_release:txpool.SubmitHashRateRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitHashRateRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txpool.SubmitHashRateRequest.id)
}

// -------------------------------------------------------------------

// SubmitHashRateReply

// bool ok = 1;
inline void SubmitHashRateReply::clear_ok() {
  ok_ = false;
}
inline bool SubmitHashRateReply::_internal_ok() const {
  return ok_;
}
inline bool SubmitHashRateReply::ok() const {
  // @@protoc_insertion_point(field_get:txpool.SubmitHashRateReply.ok)
  return _internal_ok();
}
inline void SubmitHashRateReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void SubmitHashRateReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:txpool.SubmitHashRateReply.ok)
}

// -------------------------------------------------------------------

// HashRateRequest

// -------------------------------------------------------------------

// HashRateReply

// uint64 hash_rate = 1;
inline void HashRateReply::clear_hash_rate() {
  hash_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HashRateReply::_internal_hash_rate() const {
  return hash_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HashRateReply::hash_rate() const {
  // @@protoc_insertion_point(field_get:txpool.HashRateReply.hash_rate)
  return _internal_hash_rate();
}
inline void HashRateReply::_internal_set_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hash_rate_ = value;
}
inline void HashRateReply::set_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hash_rate(value);
  // @@protoc_insertion_point(field_set:txpool.HashRateReply.hash_rate)
}

// -------------------------------------------------------------------

// MiningRequest

// -------------------------------------------------------------------

// MiningReply

// bool enabled = 1;
inline void MiningReply::clear_enabled() {
  enabled_ = false;
}
inline bool MiningReply::_internal_enabled() const {
  return enabled_;
}
inline bool MiningReply::enabled() const {
  // @@protoc_insertion_point(field_get:txpool.MiningReply.enabled)
  return _internal_enabled();
}
inline void MiningReply::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void MiningReply::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:txpool.MiningReply.enabled)
}

// bool running = 2;
inline void MiningReply::clear_running() {
  running_ = false;
}
inline bool MiningReply::_internal_running() const {
  return running_;
}
inline bool MiningReply::running() const {
  // @@protoc_insertion_point(field_get:txpool.MiningReply.running)
  return _internal_running();
}
inline void MiningReply::_internal_set_running(bool value) {
  
  running_ = value;
}
inline void MiningReply::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:txpool.MiningReply.running)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txpool

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_txpool_2fmining_2eproto
