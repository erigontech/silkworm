// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/mining.proto

#include "txpool/mining.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace txpool {
class OnPendingBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnPendingBlockRequest> _instance;
} _OnPendingBlockRequest_default_instance_;
class OnPendingBlockReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnPendingBlockReply> _instance;
} _OnPendingBlockReply_default_instance_;
class OnMinedBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnMinedBlockRequest> _instance;
} _OnMinedBlockRequest_default_instance_;
class OnMinedBlockReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnMinedBlockReply> _instance;
} _OnMinedBlockReply_default_instance_;
class OnPendingLogsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnPendingLogsRequest> _instance;
} _OnPendingLogsRequest_default_instance_;
class OnPendingLogsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnPendingLogsReply> _instance;
} _OnPendingLogsReply_default_instance_;
class GetWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkRequest> _instance;
} _GetWorkRequest_default_instance_;
class GetWorkReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkReply> _instance;
} _GetWorkReply_default_instance_;
class SubmitWorkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitWorkRequest> _instance;
} _SubmitWorkRequest_default_instance_;
class SubmitWorkReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitWorkReply> _instance;
} _SubmitWorkReply_default_instance_;
class SubmitHashRateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitHashRateRequest> _instance;
} _SubmitHashRateRequest_default_instance_;
class SubmitHashRateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitHashRateReply> _instance;
} _SubmitHashRateReply_default_instance_;
class HashRateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashRateRequest> _instance;
} _HashRateRequest_default_instance_;
class HashRateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashRateReply> _instance;
} _HashRateReply_default_instance_;
class MiningRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MiningRequest> _instance;
} _MiningRequest_default_instance_;
class MiningReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MiningReply> _instance;
} _MiningReply_default_instance_;
}  // namespace txpool
static void InitDefaultsscc_info_GetWorkReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_GetWorkReply_default_instance_;
    new (ptr) ::txpool::GetWorkReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWorkReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWorkReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_GetWorkRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_GetWorkRequest_default_instance_;
    new (ptr) ::txpool::GetWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWorkRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWorkRequest_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_HashRateReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_HashRateReply_default_instance_;
    new (ptr) ::txpool::HashRateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashRateReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashRateReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_HashRateRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_HashRateRequest_default_instance_;
    new (ptr) ::txpool::HashRateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashRateRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashRateRequest_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_MiningReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_MiningReply_default_instance_;
    new (ptr) ::txpool::MiningReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MiningReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MiningReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_MiningRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_MiningRequest_default_instance_;
    new (ptr) ::txpool::MiningRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MiningRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MiningRequest_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_OnMinedBlockReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnMinedBlockReply_default_instance_;
    new (ptr) ::txpool::OnMinedBlockReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnMinedBlockReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnMinedBlockReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_OnMinedBlockRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnMinedBlockRequest_default_instance_;
    new (ptr) ::txpool::OnMinedBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnMinedBlockRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnMinedBlockRequest_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_OnPendingBlockReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnPendingBlockReply_default_instance_;
    new (ptr) ::txpool::OnPendingBlockReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnPendingBlockReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnPendingBlockReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_OnPendingBlockRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnPendingBlockRequest_default_instance_;
    new (ptr) ::txpool::OnPendingBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnPendingBlockRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnPendingBlockRequest_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_OnPendingLogsReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnPendingLogsReply_default_instance_;
    new (ptr) ::txpool::OnPendingLogsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnPendingLogsReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnPendingLogsReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_OnPendingLogsRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_OnPendingLogsRequest_default_instance_;
    new (ptr) ::txpool::OnPendingLogsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnPendingLogsRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnPendingLogsRequest_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_SubmitHashRateReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_SubmitHashRateReply_default_instance_;
    new (ptr) ::txpool::SubmitHashRateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitHashRateReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitHashRateReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_SubmitHashRateRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_SubmitHashRateRequest_default_instance_;
    new (ptr) ::txpool::SubmitHashRateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitHashRateRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitHashRateRequest_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_SubmitWorkReply_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_SubmitWorkReply_default_instance_;
    new (ptr) ::txpool::SubmitWorkReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitWorkReply_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitWorkReply_txpool_2fmining_2eproto}, {}};

static void InitDefaultsscc_info_SubmitWorkRequest_txpool_2fmining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::txpool::_SubmitWorkRequest_default_instance_;
    new (ptr) ::txpool::SubmitWorkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitWorkRequest_txpool_2fmining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitWorkRequest_txpool_2fmining_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_txpool_2fmining_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_txpool_2fmining_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_txpool_2fmining_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_txpool_2fmining_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingBlockReply, rpl_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnMinedBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnMinedBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::OnMinedBlockReply, rpl_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingLogsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::OnPendingLogsReply, rpl_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, header_hash_),
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, seed_hash_),
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, target_),
  PROTOBUF_FIELD_OFFSET(::txpool::GetWorkReply, block_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, block_nonce_),
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, pow_hash_),
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkRequest, digest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitWorkReply, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::SubmitHashRateReply, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::HashRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::HashRateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::HashRateReply, hash_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::MiningRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txpool::MiningReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::txpool::MiningReply, enabled_),
  PROTOBUF_FIELD_OFFSET(::txpool::MiningReply, running_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::txpool::OnPendingBlockRequest)},
  { 5, -1, sizeof(::txpool::OnPendingBlockReply)},
  { 11, -1, sizeof(::txpool::OnMinedBlockRequest)},
  { 16, -1, sizeof(::txpool::OnMinedBlockReply)},
  { 22, -1, sizeof(::txpool::OnPendingLogsRequest)},
  { 27, -1, sizeof(::txpool::OnPendingLogsReply)},
  { 33, -1, sizeof(::txpool::GetWorkRequest)},
  { 38, -1, sizeof(::txpool::GetWorkReply)},
  { 47, -1, sizeof(::txpool::SubmitWorkRequest)},
  { 55, -1, sizeof(::txpool::SubmitWorkReply)},
  { 61, -1, sizeof(::txpool::SubmitHashRateRequest)},
  { 68, -1, sizeof(::txpool::SubmitHashRateReply)},
  { 74, -1, sizeof(::txpool::HashRateRequest)},
  { 79, -1, sizeof(::txpool::HashRateReply)},
  { 85, -1, sizeof(::txpool::MiningRequest)},
  { 90, -1, sizeof(::txpool::MiningReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnPendingBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnPendingBlockReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnMinedBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnMinedBlockReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnPendingLogsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_OnPendingLogsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_GetWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_GetWorkReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_SubmitWorkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_SubmitWorkReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_SubmitHashRateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_SubmitHashRateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_HashRateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_HashRateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_MiningRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txpool::_MiningReply_default_instance_),
};

const char descriptor_table_protodef_txpool_2fmining_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023txpool/mining.proto\022\006txpool\032\033google/pr"
  "otobuf/empty.proto\032\021types/types.proto\"\027\n"
  "\025OnPendingBlockRequest\"(\n\023OnPendingBlock"
  "Reply\022\021\n\trpl_block\030\001 \001(\014\"\025\n\023OnMinedBlock"
  "Request\"&\n\021OnMinedBlockReply\022\021\n\trpl_bloc"
  "k\030\001 \001(\014\"\026\n\024OnPendingLogsRequest\"&\n\022OnPen"
  "dingLogsReply\022\020\n\010rpl_logs\030\001 \001(\014\"\020\n\016GetWo"
  "rkRequest\"\\\n\014GetWorkReply\022\023\n\013header_hash"
  "\030\001 \001(\t\022\021\n\tseed_hash\030\002 \001(\t\022\016\n\006target\030\003 \001("
  "\t\022\024\n\014block_number\030\004 \001(\t\"J\n\021SubmitWorkReq"
  "uest\022\023\n\013block_nonce\030\001 \001(\014\022\020\n\010pow_hash\030\002 "
  "\001(\014\022\016\n\006digest\030\003 \001(\014\"\035\n\017SubmitWorkReply\022\n"
  "\n\002ok\030\001 \001(\010\"1\n\025SubmitHashRateRequest\022\014\n\004r"
  "ate\030\001 \001(\004\022\n\n\002id\030\002 \001(\014\"!\n\023SubmitHashRateR"
  "eply\022\n\n\002ok\030\001 \001(\010\"\021\n\017HashRateRequest\"\"\n\rH"
  "ashRateReply\022\021\n\thash_rate\030\001 \001(\004\"\017\n\rMinin"
  "gRequest\"/\n\013MiningReply\022\017\n\007enabled\030\001 \001(\010"
  "\022\017\n\007running\030\002 \001(\0102\342\004\n\006Mining\0226\n\007Version\022"
  "\026.google.protobuf.Empty\032\023.types.VersionR"
  "eply\022N\n\016OnPendingBlock\022\035.txpool.OnPendin"
  "gBlockRequest\032\033.txpool.OnPendingBlockRep"
  "ly0\001\022H\n\014OnMinedBlock\022\033.txpool.OnMinedBlo"
  "ckRequest\032\031.txpool.OnMinedBlockReply0\001\022K"
  "\n\rOnPendingLogs\022\034.txpool.OnPendingLogsRe"
  "quest\032\032.txpool.OnPendingLogsReply0\001\0227\n\007G"
  "etWork\022\026.txpool.GetWorkRequest\032\024.txpool."
  "GetWorkReply\022@\n\nSubmitWork\022\031.txpool.Subm"
  "itWorkRequest\032\027.txpool.SubmitWorkReply\022L"
  "\n\016SubmitHashRate\022\035.txpool.SubmitHashRate"
  "Request\032\033.txpool.SubmitHashRateReply\022:\n\010"
  "HashRate\022\027.txpool.HashRateRequest\032\025.txpo"
  "ol.HashRateReply\0224\n\006Mining\022\025.txpool.Mini"
  "ngRequest\032\023.txpool.MiningReplyB\021Z\017./txpo"
  "ol;txpoolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_txpool_2fmining_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_txpool_2fmining_2eproto_sccs[16] = {
  &scc_info_GetWorkReply_txpool_2fmining_2eproto.base,
  &scc_info_GetWorkRequest_txpool_2fmining_2eproto.base,
  &scc_info_HashRateReply_txpool_2fmining_2eproto.base,
  &scc_info_HashRateRequest_txpool_2fmining_2eproto.base,
  &scc_info_MiningReply_txpool_2fmining_2eproto.base,
  &scc_info_MiningRequest_txpool_2fmining_2eproto.base,
  &scc_info_OnMinedBlockReply_txpool_2fmining_2eproto.base,
  &scc_info_OnMinedBlockRequest_txpool_2fmining_2eproto.base,
  &scc_info_OnPendingBlockReply_txpool_2fmining_2eproto.base,
  &scc_info_OnPendingBlockRequest_txpool_2fmining_2eproto.base,
  &scc_info_OnPendingLogsReply_txpool_2fmining_2eproto.base,
  &scc_info_OnPendingLogsRequest_txpool_2fmining_2eproto.base,
  &scc_info_SubmitHashRateReply_txpool_2fmining_2eproto.base,
  &scc_info_SubmitHashRateRequest_txpool_2fmining_2eproto.base,
  &scc_info_SubmitWorkReply_txpool_2fmining_2eproto.base,
  &scc_info_SubmitWorkRequest_txpool_2fmining_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_txpool_2fmining_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_txpool_2fmining_2eproto = {
  false, false, descriptor_table_protodef_txpool_2fmining_2eproto, "txpool/mining.proto", 1337,
  &descriptor_table_txpool_2fmining_2eproto_once, descriptor_table_txpool_2fmining_2eproto_sccs, descriptor_table_txpool_2fmining_2eproto_deps, 16, 2,
  schemas, file_default_instances, TableStruct_txpool_2fmining_2eproto::offsets,
  file_level_metadata_txpool_2fmining_2eproto, 16, file_level_enum_descriptors_txpool_2fmining_2eproto, file_level_service_descriptors_txpool_2fmining_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_txpool_2fmining_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_txpool_2fmining_2eproto)), true);
namespace txpool {

// ===================================================================

class OnPendingBlockRequest::_Internal {
 public:
};

OnPendingBlockRequest::OnPendingBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingBlockRequest)
}
OnPendingBlockRequest::OnPendingBlockRequest(const OnPendingBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingBlockRequest)
}

void OnPendingBlockRequest::SharedCtor() {
}

OnPendingBlockRequest::~OnPendingBlockRequest() {
  // @@protoc_insertion_point(destructor:txpool.OnPendingBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnPendingBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnPendingBlockRequest::ArenaDtor(void* object) {
  OnPendingBlockRequest* _this = reinterpret_cast< OnPendingBlockRequest* >(object);
  (void)_this;
}
void OnPendingBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnPendingBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnPendingBlockRequest& OnPendingBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnPendingBlockRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void OnPendingBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnPendingBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnPendingBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnPendingBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnPendingBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnPendingBlockRequest)
  return target;
}

size_t OnPendingBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnPendingBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnPendingBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnPendingBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OnPendingBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnPendingBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnPendingBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnPendingBlockRequest)
    MergeFrom(*source);
  }
}

void OnPendingBlockRequest::MergeFrom(const OnPendingBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnPendingBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OnPendingBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnPendingBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnPendingBlockRequest::CopyFrom(const OnPendingBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnPendingBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnPendingBlockRequest::IsInitialized() const {
  return true;
}

void OnPendingBlockRequest::InternalSwap(OnPendingBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnPendingBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnPendingBlockReply::_Internal {
 public:
};

OnPendingBlockReply::OnPendingBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingBlockReply)
}
OnPendingBlockReply::OnPendingBlockReply(const OnPendingBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpl_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpl_block().empty()) {
    rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpl_block(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingBlockReply)
}

void OnPendingBlockReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnPendingBlockReply_txpool_2fmining_2eproto.base);
  rpl_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OnPendingBlockReply::~OnPendingBlockReply() {
  // @@protoc_insertion_point(destructor:txpool.OnPendingBlockReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnPendingBlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rpl_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnPendingBlockReply::ArenaDtor(void* object) {
  OnPendingBlockReply* _this = reinterpret_cast< OnPendingBlockReply* >(object);
  (void)_this;
}
void OnPendingBlockReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnPendingBlockReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnPendingBlockReply& OnPendingBlockReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnPendingBlockReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void OnPendingBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnPendingBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpl_block_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnPendingBlockReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes rpl_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpl_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnPendingBlockReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnPendingBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (this->rpl_block().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rpl_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnPendingBlockReply)
  return target;
}

size_t OnPendingBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnPendingBlockReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (this->rpl_block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rpl_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnPendingBlockReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnPendingBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OnPendingBlockReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnPendingBlockReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnPendingBlockReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnPendingBlockReply)
    MergeFrom(*source);
  }
}

void OnPendingBlockReply::MergeFrom(const OnPendingBlockReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnPendingBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rpl_block().size() > 0) {
    _internal_set_rpl_block(from._internal_rpl_block());
  }
}

void OnPendingBlockReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnPendingBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnPendingBlockReply::CopyFrom(const OnPendingBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnPendingBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnPendingBlockReply::IsInitialized() const {
  return true;
}

void OnPendingBlockReply::InternalSwap(OnPendingBlockReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rpl_block_.Swap(&other->rpl_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OnPendingBlockReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnMinedBlockRequest::_Internal {
 public:
};

OnMinedBlockRequest::OnMinedBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnMinedBlockRequest)
}
OnMinedBlockRequest::OnMinedBlockRequest(const OnMinedBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnMinedBlockRequest)
}

void OnMinedBlockRequest::SharedCtor() {
}

OnMinedBlockRequest::~OnMinedBlockRequest() {
  // @@protoc_insertion_point(destructor:txpool.OnMinedBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnMinedBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnMinedBlockRequest::ArenaDtor(void* object) {
  OnMinedBlockRequest* _this = reinterpret_cast< OnMinedBlockRequest* >(object);
  (void)_this;
}
void OnMinedBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnMinedBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnMinedBlockRequest& OnMinedBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnMinedBlockRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void OnMinedBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnMinedBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnMinedBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnMinedBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnMinedBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnMinedBlockRequest)
  return target;
}

size_t OnMinedBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnMinedBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnMinedBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnMinedBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OnMinedBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnMinedBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnMinedBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnMinedBlockRequest)
    MergeFrom(*source);
  }
}

void OnMinedBlockRequest::MergeFrom(const OnMinedBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnMinedBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OnMinedBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnMinedBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnMinedBlockRequest::CopyFrom(const OnMinedBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnMinedBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnMinedBlockRequest::IsInitialized() const {
  return true;
}

void OnMinedBlockRequest::InternalSwap(OnMinedBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnMinedBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnMinedBlockReply::_Internal {
 public:
};

OnMinedBlockReply::OnMinedBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnMinedBlockReply)
}
OnMinedBlockReply::OnMinedBlockReply(const OnMinedBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpl_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpl_block().empty()) {
    rpl_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpl_block(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.OnMinedBlockReply)
}

void OnMinedBlockReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnMinedBlockReply_txpool_2fmining_2eproto.base);
  rpl_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OnMinedBlockReply::~OnMinedBlockReply() {
  // @@protoc_insertion_point(destructor:txpool.OnMinedBlockReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnMinedBlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rpl_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnMinedBlockReply::ArenaDtor(void* object) {
  OnMinedBlockReply* _this = reinterpret_cast< OnMinedBlockReply* >(object);
  (void)_this;
}
void OnMinedBlockReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnMinedBlockReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnMinedBlockReply& OnMinedBlockReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnMinedBlockReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void OnMinedBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnMinedBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpl_block_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnMinedBlockReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes rpl_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpl_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnMinedBlockReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnMinedBlockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (this->rpl_block().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rpl_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnMinedBlockReply)
  return target;
}

size_t OnMinedBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnMinedBlockReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rpl_block = 1;
  if (this->rpl_block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rpl_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnMinedBlockReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnMinedBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OnMinedBlockReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnMinedBlockReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnMinedBlockReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnMinedBlockReply)
    MergeFrom(*source);
  }
}

void OnMinedBlockReply::MergeFrom(const OnMinedBlockReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnMinedBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rpl_block().size() > 0) {
    _internal_set_rpl_block(from._internal_rpl_block());
  }
}

void OnMinedBlockReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnMinedBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnMinedBlockReply::CopyFrom(const OnMinedBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnMinedBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnMinedBlockReply::IsInitialized() const {
  return true;
}

void OnMinedBlockReply::InternalSwap(OnMinedBlockReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rpl_block_.Swap(&other->rpl_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OnMinedBlockReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnPendingLogsRequest::_Internal {
 public:
};

OnPendingLogsRequest::OnPendingLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingLogsRequest)
}
OnPendingLogsRequest::OnPendingLogsRequest(const OnPendingLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingLogsRequest)
}

void OnPendingLogsRequest::SharedCtor() {
}

OnPendingLogsRequest::~OnPendingLogsRequest() {
  // @@protoc_insertion_point(destructor:txpool.OnPendingLogsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnPendingLogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnPendingLogsRequest::ArenaDtor(void* object) {
  OnPendingLogsRequest* _this = reinterpret_cast< OnPendingLogsRequest* >(object);
  (void)_this;
}
void OnPendingLogsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnPendingLogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnPendingLogsRequest& OnPendingLogsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnPendingLogsRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void OnPendingLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnPendingLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnPendingLogsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnPendingLogsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnPendingLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnPendingLogsRequest)
  return target;
}

size_t OnPendingLogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnPendingLogsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnPendingLogsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnPendingLogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OnPendingLogsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnPendingLogsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnPendingLogsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnPendingLogsRequest)
    MergeFrom(*source);
  }
}

void OnPendingLogsRequest::MergeFrom(const OnPendingLogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnPendingLogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OnPendingLogsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnPendingLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnPendingLogsRequest::CopyFrom(const OnPendingLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnPendingLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnPendingLogsRequest::IsInitialized() const {
  return true;
}

void OnPendingLogsRequest::InternalSwap(OnPendingLogsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnPendingLogsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnPendingLogsReply::_Internal {
 public:
};

OnPendingLogsReply::OnPendingLogsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.OnPendingLogsReply)
}
OnPendingLogsReply::OnPendingLogsReply(const OnPendingLogsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpl_logs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpl_logs().empty()) {
    rpl_logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpl_logs(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.OnPendingLogsReply)
}

void OnPendingLogsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnPendingLogsReply_txpool_2fmining_2eproto.base);
  rpl_logs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OnPendingLogsReply::~OnPendingLogsReply() {
  // @@protoc_insertion_point(destructor:txpool.OnPendingLogsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnPendingLogsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rpl_logs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnPendingLogsReply::ArenaDtor(void* object) {
  OnPendingLogsReply* _this = reinterpret_cast< OnPendingLogsReply* >(object);
  (void)_this;
}
void OnPendingLogsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnPendingLogsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnPendingLogsReply& OnPendingLogsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnPendingLogsReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void OnPendingLogsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.OnPendingLogsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpl_logs_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnPendingLogsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes rpl_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpl_logs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnPendingLogsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.OnPendingLogsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rpl_logs = 1;
  if (this->rpl_logs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rpl_logs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.OnPendingLogsReply)
  return target;
}

size_t OnPendingLogsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.OnPendingLogsReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rpl_logs = 1;
  if (this->rpl_logs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rpl_logs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnPendingLogsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.OnPendingLogsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OnPendingLogsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnPendingLogsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.OnPendingLogsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.OnPendingLogsReply)
    MergeFrom(*source);
  }
}

void OnPendingLogsReply::MergeFrom(const OnPendingLogsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.OnPendingLogsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rpl_logs().size() > 0) {
    _internal_set_rpl_logs(from._internal_rpl_logs());
  }
}

void OnPendingLogsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.OnPendingLogsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnPendingLogsReply::CopyFrom(const OnPendingLogsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.OnPendingLogsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnPendingLogsReply::IsInitialized() const {
  return true;
}

void OnPendingLogsReply::InternalSwap(OnPendingLogsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rpl_logs_.Swap(&other->rpl_logs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OnPendingLogsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetWorkRequest::_Internal {
 public:
};

GetWorkRequest::GetWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.GetWorkRequest)
}
GetWorkRequest::GetWorkRequest(const GetWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.GetWorkRequest)
}

void GetWorkRequest::SharedCtor() {
}

GetWorkRequest::~GetWorkRequest() {
  // @@protoc_insertion_point(destructor:txpool.GetWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetWorkRequest::ArenaDtor(void* object) {
  GetWorkRequest* _this = reinterpret_cast< GetWorkRequest* >(object);
  (void)_this;
}
void GetWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkRequest& GetWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void GetWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.GetWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.GetWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.GetWorkRequest)
  return target;
}

size_t GetWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.GetWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.GetWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.GetWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.GetWorkRequest)
    MergeFrom(*source);
  }
}

void GetWorkRequest::MergeFrom(const GetWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.GetWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.GetWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkRequest::CopyFrom(const GetWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.GetWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkRequest::IsInitialized() const {
  return true;
}

void GetWorkRequest::InternalSwap(GetWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetWorkReply::_Internal {
 public:
};

GetWorkReply::GetWorkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.GetWorkReply)
}
GetWorkReply::GetWorkReply(const GetWorkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_header_hash().empty()) {
    header_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_hash(), 
      GetArena());
  }
  seed_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seed_hash().empty()) {
    seed_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seed_hash(), 
      GetArena());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArena());
  }
  block_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_number().empty()) {
    block_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_number(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.GetWorkReply)
}

void GetWorkReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWorkReply_txpool_2fmining_2eproto.base);
  header_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seed_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetWorkReply::~GetWorkReply() {
  // @@protoc_insertion_point(destructor:txpool.GetWorkReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWorkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  header_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seed_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetWorkReply::ArenaDtor(void* object) {
  GetWorkReply* _this = reinterpret_cast< GetWorkReply* >(object);
  (void)_this;
}
void GetWorkReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkReply& GetWorkReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void GetWorkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.GetWorkReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_hash_.ClearToEmpty();
  seed_hash_.ClearToEmpty();
  target_.ClearToEmpty();
  block_number_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string header_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_header_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "txpool.GetWorkReply.header_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seed_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_seed_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "txpool.GetWorkReply.seed_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "txpool.GetWorkReply.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_block_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "txpool.GetWorkReply.block_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.GetWorkReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_hash = 1;
  if (this->header_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_hash().data(), static_cast<int>(this->_internal_header_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.header_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header_hash(), target);
  }

  // string seed_hash = 2;
  if (this->seed_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seed_hash().data(), static_cast<int>(this->_internal_seed_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.seed_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_seed_hash(), target);
  }

  // string target = 3;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  // string block_number = 4;
  if (this->block_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_number().data(), static_cast<int>(this->_internal_block_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "txpool.GetWorkReply.block_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_block_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.GetWorkReply)
  return target;
}

size_t GetWorkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.GetWorkReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string header_hash = 1;
  if (this->header_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_hash());
  }

  // string seed_hash = 2;
  if (this->seed_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seed_hash());
  }

  // string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string block_number = 4;
  if (this->block_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.GetWorkReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.GetWorkReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.GetWorkReply)
    MergeFrom(*source);
  }
}

void GetWorkReply::MergeFrom(const GetWorkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.GetWorkReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.header_hash().size() > 0) {
    _internal_set_header_hash(from._internal_header_hash());
  }
  if (from.seed_hash().size() > 0) {
    _internal_set_seed_hash(from._internal_seed_hash());
  }
  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.block_number().size() > 0) {
    _internal_set_block_number(from._internal_block_number());
  }
}

void GetWorkReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.GetWorkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkReply::CopyFrom(const GetWorkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.GetWorkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkReply::IsInitialized() const {
  return true;
}

void GetWorkReply::InternalSwap(GetWorkReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  header_hash_.Swap(&other->header_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seed_hash_.Swap(&other->seed_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_number_.Swap(&other->block_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitWorkRequest::_Internal {
 public:
};

SubmitWorkRequest::SubmitWorkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitWorkRequest)
}
SubmitWorkRequest::SubmitWorkRequest(const SubmitWorkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_nonce().empty()) {
    block_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_nonce(), 
      GetArena());
  }
  pow_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pow_hash().empty()) {
    pow_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pow_hash(), 
      GetArena());
  }
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digest().empty()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitWorkRequest)
}

void SubmitWorkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitWorkRequest_txpool_2fmining_2eproto.base);
  block_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pow_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubmitWorkRequest::~SubmitWorkRequest() {
  // @@protoc_insertion_point(destructor:txpool.SubmitWorkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitWorkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pow_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmitWorkRequest::ArenaDtor(void* object) {
  SubmitWorkRequest* _this = reinterpret_cast< SubmitWorkRequest* >(object);
  (void)_this;
}
void SubmitWorkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitWorkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitWorkRequest& SubmitWorkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitWorkRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void SubmitWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_nonce_.ClearToEmpty();
  pow_hash_.ClearToEmpty();
  digest_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitWorkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pow_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pow_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitWorkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitWorkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_nonce = 1;
  if (this->block_nonce().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_nonce(), target);
  }

  // bytes pow_hash = 2;
  if (this->pow_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pow_hash(), target);
  }

  // bytes digest = 3;
  if (this->digest().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitWorkRequest)
  return target;
}

size_t SubmitWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitWorkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_nonce = 1;
  if (this->block_nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_nonce());
  }

  // bytes pow_hash = 2;
  if (this->pow_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pow_hash());
  }

  // bytes digest = 3;
  if (this->digest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitWorkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.SubmitWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitWorkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitWorkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.SubmitWorkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.SubmitWorkRequest)
    MergeFrom(*source);
  }
}

void SubmitWorkRequest::MergeFrom(const SubmitWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_nonce().size() > 0) {
    _internal_set_block_nonce(from._internal_block_nonce());
  }
  if (from.pow_hash().size() > 0) {
    _internal_set_pow_hash(from._internal_pow_hash());
  }
  if (from.digest().size() > 0) {
    _internal_set_digest(from._internal_digest());
  }
}

void SubmitWorkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.SubmitWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitWorkRequest::CopyFrom(const SubmitWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitWorkRequest::IsInitialized() const {
  return true;
}

void SubmitWorkRequest::InternalSwap(SubmitWorkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_nonce_.Swap(&other->block_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pow_hash_.Swap(&other->pow_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitWorkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitWorkReply::_Internal {
 public:
};

SubmitWorkReply::SubmitWorkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitWorkReply)
}
SubmitWorkReply::SubmitWorkReply(const SubmitWorkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitWorkReply)
}

void SubmitWorkReply::SharedCtor() {
  ok_ = false;
}

SubmitWorkReply::~SubmitWorkReply() {
  // @@protoc_insertion_point(destructor:txpool.SubmitWorkReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitWorkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubmitWorkReply::ArenaDtor(void* object) {
  SubmitWorkReply* _this = reinterpret_cast< SubmitWorkReply* >(object);
  (void)_this;
}
void SubmitWorkReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitWorkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitWorkReply& SubmitWorkReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitWorkReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void SubmitWorkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitWorkReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitWorkReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitWorkReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitWorkReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitWorkReply)
  return target;
}

size_t SubmitWorkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitWorkReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitWorkReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.SubmitWorkReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitWorkReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitWorkReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.SubmitWorkReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.SubmitWorkReply)
    MergeFrom(*source);
  }
}

void SubmitWorkReply::MergeFrom(const SubmitWorkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitWorkReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void SubmitWorkReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.SubmitWorkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitWorkReply::CopyFrom(const SubmitWorkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitWorkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitWorkReply::IsInitialized() const {
  return true;
}

void SubmitWorkReply::InternalSwap(SubmitWorkReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitWorkReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitHashRateRequest::_Internal {
 public:
};

SubmitHashRateRequest::SubmitHashRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitHashRateRequest)
}
SubmitHashRateRequest::SubmitHashRateRequest(const SubmitHashRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  rate_ = from.rate_;
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitHashRateRequest)
}

void SubmitHashRateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitHashRateRequest_txpool_2fmining_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rate_ = PROTOBUF_ULONGLONG(0);
}

SubmitHashRateRequest::~SubmitHashRateRequest() {
  // @@protoc_insertion_point(destructor:txpool.SubmitHashRateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitHashRateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmitHashRateRequest::ArenaDtor(void* object) {
  SubmitHashRateRequest* _this = reinterpret_cast< SubmitHashRateRequest* >(object);
  (void)_this;
}
void SubmitHashRateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitHashRateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitHashRateRequest& SubmitHashRateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitHashRateRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void SubmitHashRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitHashRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  rate_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitHashRateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitHashRateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitHashRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rate = 1;
  if (this->rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rate(), target);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitHashRateRequest)
  return target;
}

size_t SubmitHashRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitHashRateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // uint64 rate = 1;
  if (this->rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitHashRateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.SubmitHashRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitHashRateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitHashRateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.SubmitHashRateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.SubmitHashRateRequest)
    MergeFrom(*source);
  }
}

void SubmitHashRateRequest::MergeFrom(const SubmitHashRateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitHashRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.rate() != 0) {
    _internal_set_rate(from._internal_rate());
  }
}

void SubmitHashRateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.SubmitHashRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitHashRateRequest::CopyFrom(const SubmitHashRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitHashRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitHashRateRequest::IsInitialized() const {
  return true;
}

void SubmitHashRateRequest::InternalSwap(SubmitHashRateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rate_, other->rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitHashRateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitHashRateReply::_Internal {
 public:
};

SubmitHashRateReply::SubmitHashRateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.SubmitHashRateReply)
}
SubmitHashRateReply::SubmitHashRateReply(const SubmitHashRateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:txpool.SubmitHashRateReply)
}

void SubmitHashRateReply::SharedCtor() {
  ok_ = false;
}

SubmitHashRateReply::~SubmitHashRateReply() {
  // @@protoc_insertion_point(destructor:txpool.SubmitHashRateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitHashRateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubmitHashRateReply::ArenaDtor(void* object) {
  SubmitHashRateReply* _this = reinterpret_cast< SubmitHashRateReply* >(object);
  (void)_this;
}
void SubmitHashRateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitHashRateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitHashRateReply& SubmitHashRateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitHashRateReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void SubmitHashRateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.SubmitHashRateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitHashRateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitHashRateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.SubmitHashRateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.SubmitHashRateReply)
  return target;
}

size_t SubmitHashRateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.SubmitHashRateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitHashRateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.SubmitHashRateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitHashRateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitHashRateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.SubmitHashRateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.SubmitHashRateReply)
    MergeFrom(*source);
  }
}

void SubmitHashRateReply::MergeFrom(const SubmitHashRateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.SubmitHashRateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void SubmitHashRateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.SubmitHashRateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitHashRateReply::CopyFrom(const SubmitHashRateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.SubmitHashRateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitHashRateReply::IsInitialized() const {
  return true;
}

void SubmitHashRateReply::InternalSwap(SubmitHashRateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitHashRateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HashRateRequest::_Internal {
 public:
};

HashRateRequest::HashRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.HashRateRequest)
}
HashRateRequest::HashRateRequest(const HashRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.HashRateRequest)
}

void HashRateRequest::SharedCtor() {
}

HashRateRequest::~HashRateRequest() {
  // @@protoc_insertion_point(destructor:txpool.HashRateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashRateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HashRateRequest::ArenaDtor(void* object) {
  HashRateRequest* _this = reinterpret_cast< HashRateRequest* >(object);
  (void)_this;
}
void HashRateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashRateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashRateRequest& HashRateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashRateRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void HashRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.HashRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashRateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashRateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.HashRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.HashRateRequest)
  return target;
}

size_t HashRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.HashRateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashRateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.HashRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HashRateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashRateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.HashRateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.HashRateRequest)
    MergeFrom(*source);
  }
}

void HashRateRequest::MergeFrom(const HashRateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.HashRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HashRateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.HashRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRateRequest::CopyFrom(const HashRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.HashRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRateRequest::IsInitialized() const {
  return true;
}

void HashRateRequest::InternalSwap(HashRateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashRateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HashRateReply::_Internal {
 public:
};

HashRateReply::HashRateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.HashRateReply)
}
HashRateReply::HashRateReply(const HashRateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_rate_ = from.hash_rate_;
  // @@protoc_insertion_point(copy_constructor:txpool.HashRateReply)
}

void HashRateReply::SharedCtor() {
  hash_rate_ = PROTOBUF_ULONGLONG(0);
}

HashRateReply::~HashRateReply() {
  // @@protoc_insertion_point(destructor:txpool.HashRateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashRateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HashRateReply::ArenaDtor(void* object) {
  HashRateReply* _this = reinterpret_cast< HashRateReply* >(object);
  (void)_this;
}
void HashRateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashRateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashRateReply& HashRateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashRateReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void HashRateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.HashRateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_rate_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashRateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 hash_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hash_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashRateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.HashRateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash_rate = 1;
  if (this->hash_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.HashRateReply)
  return target;
}

size_t HashRateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.HashRateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hash_rate = 1;
  if (this->hash_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hash_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashRateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.HashRateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HashRateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashRateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.HashRateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.HashRateReply)
    MergeFrom(*source);
  }
}

void HashRateReply::MergeFrom(const HashRateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.HashRateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash_rate() != 0) {
    _internal_set_hash_rate(from._internal_hash_rate());
  }
}

void HashRateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.HashRateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRateReply::CopyFrom(const HashRateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.HashRateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRateReply::IsInitialized() const {
  return true;
}

void HashRateReply::InternalSwap(HashRateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hash_rate_, other->hash_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashRateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MiningRequest::_Internal {
 public:
};

MiningRequest::MiningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.MiningRequest)
}
MiningRequest::MiningRequest(const MiningRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txpool.MiningRequest)
}

void MiningRequest::SharedCtor() {
}

MiningRequest::~MiningRequest() {
  // @@protoc_insertion_point(destructor:txpool.MiningRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MiningRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MiningRequest::ArenaDtor(void* object) {
  MiningRequest* _this = reinterpret_cast< MiningRequest* >(object);
  (void)_this;
}
void MiningRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MiningRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MiningRequest& MiningRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MiningRequest_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void MiningRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.MiningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MiningRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MiningRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.MiningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.MiningRequest)
  return target;
}

size_t MiningRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.MiningRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiningRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.MiningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MiningRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MiningRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.MiningRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.MiningRequest)
    MergeFrom(*source);
  }
}

void MiningRequest::MergeFrom(const MiningRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.MiningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MiningRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.MiningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiningRequest::CopyFrom(const MiningRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.MiningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiningRequest::IsInitialized() const {
  return true;
}

void MiningRequest::InternalSwap(MiningRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MiningRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MiningReply::_Internal {
 public:
};

MiningReply::MiningReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:txpool.MiningReply)
}
MiningReply::MiningReply(const MiningReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(running_));
  // @@protoc_insertion_point(copy_constructor:txpool.MiningReply)
}

void MiningReply::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&running_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(running_));
}

MiningReply::~MiningReply() {
  // @@protoc_insertion_point(destructor:txpool.MiningReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MiningReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MiningReply::ArenaDtor(void* object) {
  MiningReply* _this = reinterpret_cast< MiningReply* >(object);
  (void)_this;
}
void MiningReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MiningReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MiningReply& MiningReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MiningReply_txpool_2fmining_2eproto.base);
  return *internal_default_instance();
}


void MiningReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txpool.MiningReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(running_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MiningReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool running = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MiningReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txpool.MiningReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool running = 2;
  if (this->running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_running(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txpool.MiningReply)
  return target;
}

size_t MiningReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txpool.MiningReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool running = 2;
  if (this->running() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiningReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txpool.MiningReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MiningReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MiningReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txpool.MiningReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txpool.MiningReply)
    MergeFrom(*source);
  }
}

void MiningReply::MergeFrom(const MiningReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txpool.MiningReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.running() != 0) {
    _internal_set_running(from._internal_running());
  }
}

void MiningReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txpool.MiningReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiningReply::CopyFrom(const MiningReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txpool.MiningReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiningReply::IsInitialized() const {
  return true;
}

void MiningReply::InternalSwap(MiningReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MiningReply, running_)
      + sizeof(MiningReply::running_)
      - PROTOBUF_FIELD_OFFSET(MiningReply, enabled_)>(
          reinterpret_cast<char*>(&enabled_),
          reinterpret_cast<char*>(&other->enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MiningReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace txpool
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::txpool::OnPendingBlockRequest* Arena::CreateMaybeMessage< ::txpool::OnPendingBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnPendingBlockReply* Arena::CreateMaybeMessage< ::txpool::OnPendingBlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingBlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnMinedBlockRequest* Arena::CreateMaybeMessage< ::txpool::OnMinedBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnMinedBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnMinedBlockReply* Arena::CreateMaybeMessage< ::txpool::OnMinedBlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnMinedBlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnPendingLogsRequest* Arena::CreateMaybeMessage< ::txpool::OnPendingLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::OnPendingLogsReply* Arena::CreateMaybeMessage< ::txpool::OnPendingLogsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::OnPendingLogsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::GetWorkRequest* Arena::CreateMaybeMessage< ::txpool::GetWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::GetWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::GetWorkReply* Arena::CreateMaybeMessage< ::txpool::GetWorkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::GetWorkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitWorkRequest* Arena::CreateMaybeMessage< ::txpool::SubmitWorkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitWorkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitWorkReply* Arena::CreateMaybeMessage< ::txpool::SubmitWorkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitWorkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitHashRateRequest* Arena::CreateMaybeMessage< ::txpool::SubmitHashRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitHashRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::SubmitHashRateReply* Arena::CreateMaybeMessage< ::txpool::SubmitHashRateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::SubmitHashRateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::HashRateRequest* Arena::CreateMaybeMessage< ::txpool::HashRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::HashRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::HashRateReply* Arena::CreateMaybeMessage< ::txpool::HashRateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::HashRateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::MiningRequest* Arena::CreateMaybeMessage< ::txpool::MiningRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::MiningRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txpool::MiningReply* Arena::CreateMaybeMessage< ::txpool::MiningReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txpool::MiningReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
