// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution/execution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_execution_2fexecution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_execution_2fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_execution_2fexecution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_execution_2fexecution_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_execution_2fexecution_2eproto;
namespace execution {
class BlockBody;
struct BlockBodyDefaultTypeInternal;
extern BlockBodyDefaultTypeInternal _BlockBody_default_instance_;
class EmptyMessage;
struct EmptyMessageDefaultTypeInternal;
extern EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
class ForkChoiceReceipt;
struct ForkChoiceReceiptDefaultTypeInternal;
extern ForkChoiceReceiptDefaultTypeInternal _ForkChoiceReceipt_default_instance_;
class GetBodyResponse;
struct GetBodyResponseDefaultTypeInternal;
extern GetBodyResponseDefaultTypeInternal _GetBodyResponse_default_instance_;
class GetHeaderHashNumberResponse;
struct GetHeaderHashNumberResponseDefaultTypeInternal;
extern GetHeaderHashNumberResponseDefaultTypeInternal _GetHeaderHashNumberResponse_default_instance_;
class GetHeaderResponse;
struct GetHeaderResponseDefaultTypeInternal;
extern GetHeaderResponseDefaultTypeInternal _GetHeaderResponse_default_instance_;
class GetSegmentRequest;
struct GetSegmentRequestDefaultTypeInternal;
extern GetSegmentRequestDefaultTypeInternal _GetSegmentRequest_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class InsertBodiesRequest;
struct InsertBodiesRequestDefaultTypeInternal;
extern InsertBodiesRequestDefaultTypeInternal _InsertBodiesRequest_default_instance_;
class InsertHeadersRequest;
struct InsertHeadersRequestDefaultTypeInternal;
extern InsertHeadersRequestDefaultTypeInternal _InsertHeadersRequest_default_instance_;
class IsCanonicalResponse;
struct IsCanonicalResponseDefaultTypeInternal;
extern IsCanonicalResponseDefaultTypeInternal _IsCanonicalResponse_default_instance_;
class ValidationReceipt;
struct ValidationReceiptDefaultTypeInternal;
extern ValidationReceiptDefaultTypeInternal _ValidationReceipt_default_instance_;
}  // namespace execution
PROTOBUF_NAMESPACE_OPEN
template<> ::execution::BlockBody* Arena::CreateMaybeMessage<::execution::BlockBody>(Arena*);
template<> ::execution::EmptyMessage* Arena::CreateMaybeMessage<::execution::EmptyMessage>(Arena*);
template<> ::execution::ForkChoiceReceipt* Arena::CreateMaybeMessage<::execution::ForkChoiceReceipt>(Arena*);
template<> ::execution::GetBodyResponse* Arena::CreateMaybeMessage<::execution::GetBodyResponse>(Arena*);
template<> ::execution::GetHeaderHashNumberResponse* Arena::CreateMaybeMessage<::execution::GetHeaderHashNumberResponse>(Arena*);
template<> ::execution::GetHeaderResponse* Arena::CreateMaybeMessage<::execution::GetHeaderResponse>(Arena*);
template<> ::execution::GetSegmentRequest* Arena::CreateMaybeMessage<::execution::GetSegmentRequest>(Arena*);
template<> ::execution::Header* Arena::CreateMaybeMessage<::execution::Header>(Arena*);
template<> ::execution::InsertBodiesRequest* Arena::CreateMaybeMessage<::execution::InsertBodiesRequest>(Arena*);
template<> ::execution::InsertHeadersRequest* Arena::CreateMaybeMessage<::execution::InsertHeadersRequest>(Arena*);
template<> ::execution::IsCanonicalResponse* Arena::CreateMaybeMessage<::execution::IsCanonicalResponse>(Arena*);
template<> ::execution::ValidationReceipt* Arena::CreateMaybeMessage<::execution::ValidationReceipt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace execution {

enum ValidationStatus : int {
  Success = 0,
  InvalidChain = 1,
  TooFarAway = 2,
  MissingSegment = 3,
  ValidationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ValidationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ValidationStatus_IsValid(int value);
constexpr ValidationStatus ValidationStatus_MIN = Success;
constexpr ValidationStatus ValidationStatus_MAX = MissingSegment;
constexpr int ValidationStatus_ARRAYSIZE = ValidationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationStatus_descriptor();
template<typename T>
inline const std::string& ValidationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValidationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValidationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ValidationStatus_descriptor(), enum_t_value);
}
inline bool ValidationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ValidationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValidationStatus>(
    ValidationStatus_descriptor(), name, value);
}
// ===================================================================

class ForkChoiceReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.ForkChoiceReceipt) */ {
 public:
  inline ForkChoiceReceipt() : ForkChoiceReceipt(nullptr) {}
  ~ForkChoiceReceipt() override;
  explicit PROTOBUF_CONSTEXPR ForkChoiceReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForkChoiceReceipt(const ForkChoiceReceipt& from);
  ForkChoiceReceipt(ForkChoiceReceipt&& from) noexcept
    : ForkChoiceReceipt() {
    *this = ::std::move(from);
  }

  inline ForkChoiceReceipt& operator=(const ForkChoiceReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForkChoiceReceipt& operator=(ForkChoiceReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForkChoiceReceipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForkChoiceReceipt* internal_default_instance() {
    return reinterpret_cast<const ForkChoiceReceipt*>(
               &_ForkChoiceReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ForkChoiceReceipt& a, ForkChoiceReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(ForkChoiceReceipt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForkChoiceReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForkChoiceReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForkChoiceReceipt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForkChoiceReceipt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForkChoiceReceipt& from) {
    ForkChoiceReceipt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForkChoiceReceipt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.ForkChoiceReceipt";
  }
  protected:
  explicit ForkChoiceReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestValidHashFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .types.H256 latestValidHash = 2;
  bool has_latestvalidhash() const;
  private:
  bool _internal_has_latestvalidhash() const;
  public:
  void clear_latestvalidhash();
  const ::types::H256& latestvalidhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_latestvalidhash();
  ::types::H256* mutable_latestvalidhash();
  void set_allocated_latestvalidhash(::types::H256* latestvalidhash);
  private:
  const ::types::H256& _internal_latestvalidhash() const;
  ::types::H256* _internal_mutable_latestvalidhash();
  public:
  void unsafe_arena_set_allocated_latestvalidhash(
      ::types::H256* latestvalidhash);
  ::types::H256* unsafe_arena_release_latestvalidhash();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:execution.ForkChoiceReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H256* latestvalidhash_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ValidationReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.ValidationReceipt) */ {
 public:
  inline ValidationReceipt() : ValidationReceipt(nullptr) {}
  ~ValidationReceipt() override;
  explicit PROTOBUF_CONSTEXPR ValidationReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidationReceipt(const ValidationReceipt& from);
  ValidationReceipt(ValidationReceipt&& from) noexcept
    : ValidationReceipt() {
    *this = ::std::move(from);
  }

  inline ValidationReceipt& operator=(const ValidationReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidationReceipt& operator=(ValidationReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidationReceipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidationReceipt* internal_default_instance() {
    return reinterpret_cast<const ValidationReceipt*>(
               &_ValidationReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValidationReceipt& a, ValidationReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidationReceipt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidationReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidationReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidationReceipt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidationReceipt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidationReceipt& from) {
    ValidationReceipt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationReceipt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.ValidationReceipt";
  }
  protected:
  explicit ValidationReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestValidHashFieldNumber = 2,
    kMissingHashFieldNumber = 3,
    kValidationStatusFieldNumber = 1,
  };
  // .types.H256 latestValidHash = 2;
  bool has_latestvalidhash() const;
  private:
  bool _internal_has_latestvalidhash() const;
  public:
  void clear_latestvalidhash();
  const ::types::H256& latestvalidhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_latestvalidhash();
  ::types::H256* mutable_latestvalidhash();
  void set_allocated_latestvalidhash(::types::H256* latestvalidhash);
  private:
  const ::types::H256& _internal_latestvalidhash() const;
  ::types::H256* _internal_mutable_latestvalidhash();
  public:
  void unsafe_arena_set_allocated_latestvalidhash(
      ::types::H256* latestvalidhash);
  ::types::H256* unsafe_arena_release_latestvalidhash();

  // optional .types.H256 missingHash = 3;
  bool has_missinghash() const;
  private:
  bool _internal_has_missinghash() const;
  public:
  void clear_missinghash();
  const ::types::H256& missinghash() const;
  PROTOBUF_NODISCARD ::types::H256* release_missinghash();
  ::types::H256* mutable_missinghash();
  void set_allocated_missinghash(::types::H256* missinghash);
  private:
  const ::types::H256& _internal_missinghash() const;
  ::types::H256* _internal_mutable_missinghash();
  public:
  void unsafe_arena_set_allocated_missinghash(
      ::types::H256* missinghash);
  ::types::H256* unsafe_arena_release_missinghash();

  // .execution.ValidationStatus validationStatus = 1;
  void clear_validationstatus();
  ::execution::ValidationStatus validationstatus() const;
  void set_validationstatus(::execution::ValidationStatus value);
  private:
  ::execution::ValidationStatus _internal_validationstatus() const;
  void _internal_set_validationstatus(::execution::ValidationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:execution.ValidationReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::types::H256* latestvalidhash_;
    ::types::H256* missinghash_;
    int validationstatus_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class IsCanonicalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.IsCanonicalResponse) */ {
 public:
  inline IsCanonicalResponse() : IsCanonicalResponse(nullptr) {}
  ~IsCanonicalResponse() override;
  explicit PROTOBUF_CONSTEXPR IsCanonicalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsCanonicalResponse(const IsCanonicalResponse& from);
  IsCanonicalResponse(IsCanonicalResponse&& from) noexcept
    : IsCanonicalResponse() {
    *this = ::std::move(from);
  }

  inline IsCanonicalResponse& operator=(const IsCanonicalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsCanonicalResponse& operator=(IsCanonicalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsCanonicalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsCanonicalResponse* internal_default_instance() {
    return reinterpret_cast<const IsCanonicalResponse*>(
               &_IsCanonicalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IsCanonicalResponse& a, IsCanonicalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsCanonicalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsCanonicalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsCanonicalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsCanonicalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsCanonicalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IsCanonicalResponse& from) {
    IsCanonicalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsCanonicalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.IsCanonicalResponse";
  }
  protected:
  explicit IsCanonicalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanonicalFieldNumber = 1,
  };
  // bool canonical = 1;
  void clear_canonical();
  bool canonical() const;
  void set_canonical(bool value);
  private:
  bool _internal_canonical() const;
  void _internal_set_canonical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:execution.IsCanonicalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool canonical_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraDataFieldNumber = 12,
    kParentHashFieldNumber = 1,
    kCoinbaseFieldNumber = 2,
    kStateRootFieldNumber = 3,
    kReceiptRootFieldNumber = 4,
    kLogsBloomFieldNumber = 5,
    kMixDigestFieldNumber = 6,
    kDifficultyFieldNumber = 13,
    kBlockHashFieldNumber = 14,
    kOmmerHashFieldNumber = 15,
    kTransactionHashFieldNumber = 16,
    kBaseFeePerGasFieldNumber = 17,
    kWithdrawalHashFieldNumber = 18,
    kExcessDataGasFieldNumber = 19,
    kBlockNumberFieldNumber = 7,
    kGasLimitFieldNumber = 8,
    kGasUsedFieldNumber = 9,
    kTimestampFieldNumber = 10,
    kNonceFieldNumber = 11,
  };
  // bytes extraData = 12;
  void clear_extradata();
  const std::string& extradata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extradata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extradata();
  PROTOBUF_NODISCARD std::string* release_extradata();
  void set_allocated_extradata(std::string* extradata);
  private:
  const std::string& _internal_extradata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extradata(const std::string& value);
  std::string* _internal_mutable_extradata();
  public:

  // .types.H256 parentHash = 1;
  bool has_parenthash() const;
  private:
  bool _internal_has_parenthash() const;
  public:
  void clear_parenthash();
  const ::types::H256& parenthash() const;
  PROTOBUF_NODISCARD ::types::H256* release_parenthash();
  ::types::H256* mutable_parenthash();
  void set_allocated_parenthash(::types::H256* parenthash);
  private:
  const ::types::H256& _internal_parenthash() const;
  ::types::H256* _internal_mutable_parenthash();
  public:
  void unsafe_arena_set_allocated_parenthash(
      ::types::H256* parenthash);
  ::types::H256* unsafe_arena_release_parenthash();

  // .types.H160 coinbase = 2;
  bool has_coinbase() const;
  private:
  bool _internal_has_coinbase() const;
  public:
  void clear_coinbase();
  const ::types::H160& coinbase() const;
  PROTOBUF_NODISCARD ::types::H160* release_coinbase();
  ::types::H160* mutable_coinbase();
  void set_allocated_coinbase(::types::H160* coinbase);
  private:
  const ::types::H160& _internal_coinbase() const;
  ::types::H160* _internal_mutable_coinbase();
  public:
  void unsafe_arena_set_allocated_coinbase(
      ::types::H160* coinbase);
  ::types::H160* unsafe_arena_release_coinbase();

  // .types.H256 stateRoot = 3;
  bool has_stateroot() const;
  private:
  bool _internal_has_stateroot() const;
  public:
  void clear_stateroot();
  const ::types::H256& stateroot() const;
  PROTOBUF_NODISCARD ::types::H256* release_stateroot();
  ::types::H256* mutable_stateroot();
  void set_allocated_stateroot(::types::H256* stateroot);
  private:
  const ::types::H256& _internal_stateroot() const;
  ::types::H256* _internal_mutable_stateroot();
  public:
  void unsafe_arena_set_allocated_stateroot(
      ::types::H256* stateroot);
  ::types::H256* unsafe_arena_release_stateroot();

  // .types.H256 receiptRoot = 4;
  bool has_receiptroot() const;
  private:
  bool _internal_has_receiptroot() const;
  public:
  void clear_receiptroot();
  const ::types::H256& receiptroot() const;
  PROTOBUF_NODISCARD ::types::H256* release_receiptroot();
  ::types::H256* mutable_receiptroot();
  void set_allocated_receiptroot(::types::H256* receiptroot);
  private:
  const ::types::H256& _internal_receiptroot() const;
  ::types::H256* _internal_mutable_receiptroot();
  public:
  void unsafe_arena_set_allocated_receiptroot(
      ::types::H256* receiptroot);
  ::types::H256* unsafe_arena_release_receiptroot();

  // .types.H2048 logsBloom = 5;
  bool has_logsbloom() const;
  private:
  bool _internal_has_logsbloom() const;
  public:
  void clear_logsbloom();
  const ::types::H2048& logsbloom() const;
  PROTOBUF_NODISCARD ::types::H2048* release_logsbloom();
  ::types::H2048* mutable_logsbloom();
  void set_allocated_logsbloom(::types::H2048* logsbloom);
  private:
  const ::types::H2048& _internal_logsbloom() const;
  ::types::H2048* _internal_mutable_logsbloom();
  public:
  void unsafe_arena_set_allocated_logsbloom(
      ::types::H2048* logsbloom);
  ::types::H2048* unsafe_arena_release_logsbloom();

  // .types.H256 mixDigest = 6;
  bool has_mixdigest() const;
  private:
  bool _internal_has_mixdigest() const;
  public:
  void clear_mixdigest();
  const ::types::H256& mixdigest() const;
  PROTOBUF_NODISCARD ::types::H256* release_mixdigest();
  ::types::H256* mutable_mixdigest();
  void set_allocated_mixdigest(::types::H256* mixdigest);
  private:
  const ::types::H256& _internal_mixdigest() const;
  ::types::H256* _internal_mutable_mixdigest();
  public:
  void unsafe_arena_set_allocated_mixdigest(
      ::types::H256* mixdigest);
  ::types::H256* unsafe_arena_release_mixdigest();

  // .types.H256 difficulty = 13;
  bool has_difficulty() const;
  private:
  bool _internal_has_difficulty() const;
  public:
  void clear_difficulty();
  const ::types::H256& difficulty() const;
  PROTOBUF_NODISCARD ::types::H256* release_difficulty();
  ::types::H256* mutable_difficulty();
  void set_allocated_difficulty(::types::H256* difficulty);
  private:
  const ::types::H256& _internal_difficulty() const;
  ::types::H256* _internal_mutable_difficulty();
  public:
  void unsafe_arena_set_allocated_difficulty(
      ::types::H256* difficulty);
  ::types::H256* unsafe_arena_release_difficulty();

  // .types.H256 blockHash = 14;
  bool has_blockhash() const;
  private:
  bool _internal_has_blockhash() const;
  public:
  void clear_blockhash();
  const ::types::H256& blockhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_blockhash();
  ::types::H256* mutable_blockhash();
  void set_allocated_blockhash(::types::H256* blockhash);
  private:
  const ::types::H256& _internal_blockhash() const;
  ::types::H256* _internal_mutable_blockhash();
  public:
  void unsafe_arena_set_allocated_blockhash(
      ::types::H256* blockhash);
  ::types::H256* unsafe_arena_release_blockhash();

  // .types.H256 ommerHash = 15;
  bool has_ommerhash() const;
  private:
  bool _internal_has_ommerhash() const;
  public:
  void clear_ommerhash();
  const ::types::H256& ommerhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_ommerhash();
  ::types::H256* mutable_ommerhash();
  void set_allocated_ommerhash(::types::H256* ommerhash);
  private:
  const ::types::H256& _internal_ommerhash() const;
  ::types::H256* _internal_mutable_ommerhash();
  public:
  void unsafe_arena_set_allocated_ommerhash(
      ::types::H256* ommerhash);
  ::types::H256* unsafe_arena_release_ommerhash();

  // .types.H256 transactionHash = 16;
  bool has_transactionhash() const;
  private:
  bool _internal_has_transactionhash() const;
  public:
  void clear_transactionhash();
  const ::types::H256& transactionhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_transactionhash();
  ::types::H256* mutable_transactionhash();
  void set_allocated_transactionhash(::types::H256* transactionhash);
  private:
  const ::types::H256& _internal_transactionhash() const;
  ::types::H256* _internal_mutable_transactionhash();
  public:
  void unsafe_arena_set_allocated_transactionhash(
      ::types::H256* transactionhash);
  ::types::H256* unsafe_arena_release_transactionhash();

  // optional .types.H256 baseFeePerGas = 17;
  bool has_basefeepergas() const;
  private:
  bool _internal_has_basefeepergas() const;
  public:
  void clear_basefeepergas();
  const ::types::H256& basefeepergas() const;
  PROTOBUF_NODISCARD ::types::H256* release_basefeepergas();
  ::types::H256* mutable_basefeepergas();
  void set_allocated_basefeepergas(::types::H256* basefeepergas);
  private:
  const ::types::H256& _internal_basefeepergas() const;
  ::types::H256* _internal_mutable_basefeepergas();
  public:
  void unsafe_arena_set_allocated_basefeepergas(
      ::types::H256* basefeepergas);
  ::types::H256* unsafe_arena_release_basefeepergas();

  // optional .types.H256 withdrawalHash = 18;
  bool has_withdrawalhash() const;
  private:
  bool _internal_has_withdrawalhash() const;
  public:
  void clear_withdrawalhash();
  const ::types::H256& withdrawalhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_withdrawalhash();
  ::types::H256* mutable_withdrawalhash();
  void set_allocated_withdrawalhash(::types::H256* withdrawalhash);
  private:
  const ::types::H256& _internal_withdrawalhash() const;
  ::types::H256* _internal_mutable_withdrawalhash();
  public:
  void unsafe_arena_set_allocated_withdrawalhash(
      ::types::H256* withdrawalhash);
  ::types::H256* unsafe_arena_release_withdrawalhash();

  // optional .types.H256 excessDataGas = 19;
  bool has_excessdatagas() const;
  private:
  bool _internal_has_excessdatagas() const;
  public:
  void clear_excessdatagas();
  const ::types::H256& excessdatagas() const;
  PROTOBUF_NODISCARD ::types::H256* release_excessdatagas();
  ::types::H256* mutable_excessdatagas();
  void set_allocated_excessdatagas(::types::H256* excessdatagas);
  private:
  const ::types::H256& _internal_excessdatagas() const;
  ::types::H256* _internal_mutable_excessdatagas();
  public:
  void unsafe_arena_set_allocated_excessdatagas(
      ::types::H256* excessdatagas);
  ::types::H256* unsafe_arena_release_excessdatagas();

  // uint64 blockNumber = 7;
  void clear_blocknumber();
  uint64_t blocknumber() const;
  void set_blocknumber(uint64_t value);
  private:
  uint64_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint64_t value);
  public:

  // uint64 gasLimit = 8;
  void clear_gaslimit();
  uint64_t gaslimit() const;
  void set_gaslimit(uint64_t value);
  private:
  uint64_t _internal_gaslimit() const;
  void _internal_set_gaslimit(uint64_t value);
  public:

  // uint64 gasUsed = 9;
  void clear_gasused();
  uint64_t gasused() const;
  void set_gasused(uint64_t value);
  private:
  uint64_t _internal_gasused() const;
  void _internal_set_gasused(uint64_t value);
  public:

  // uint64 timestamp = 10;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // uint64 nonce = 11;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:execution.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extradata_;
    ::types::H256* parenthash_;
    ::types::H160* coinbase_;
    ::types::H256* stateroot_;
    ::types::H256* receiptroot_;
    ::types::H2048* logsbloom_;
    ::types::H256* mixdigest_;
    ::types::H256* difficulty_;
    ::types::H256* blockhash_;
    ::types::H256* ommerhash_;
    ::types::H256* transactionhash_;
    ::types::H256* basefeepergas_;
    ::types::H256* withdrawalhash_;
    ::types::H256* excessdatagas_;
    uint64_t blocknumber_;
    uint64_t gaslimit_;
    uint64_t gasused_;
    uint64_t timestamp_;
    uint64_t nonce_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class BlockBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.BlockBody) */ {
 public:
  inline BlockBody() : BlockBody(nullptr) {}
  ~BlockBody() override;
  explicit PROTOBUF_CONSTEXPR BlockBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockBody(const BlockBody& from);
  BlockBody(BlockBody&& from) noexcept
    : BlockBody() {
    *this = ::std::move(from);
  }

  inline BlockBody& operator=(const BlockBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockBody& operator=(BlockBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockBody* internal_default_instance() {
    return reinterpret_cast<const BlockBody*>(
               &_BlockBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlockBody& a, BlockBody& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockBody& from) {
    BlockBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.BlockBody";
  }
  protected:
  explicit BlockBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
    kUnclesFieldNumber = 4,
    kWithdrawalsFieldNumber = 5,
    kBlockHashFieldNumber = 1,
    kBlockNumberFieldNumber = 2,
  };
  // repeated bytes transactions = 3;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  const std::string& transactions(int index) const;
  std::string* mutable_transactions(int index);
  void set_transactions(int index, const std::string& value);
  void set_transactions(int index, std::string&& value);
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const void* value, size_t size);
  std::string* add_transactions();
  void add_transactions(const std::string& value);
  void add_transactions(std::string&& value);
  void add_transactions(const char* value);
  void add_transactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactions();
  private:
  const std::string& _internal_transactions(int index) const;
  std::string* _internal_add_transactions();
  public:

  // repeated .execution.Header uncles = 4;
  int uncles_size() const;
  private:
  int _internal_uncles_size() const;
  public:
  void clear_uncles();
  ::execution::Header* mutable_uncles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >*
      mutable_uncles();
  private:
  const ::execution::Header& _internal_uncles(int index) const;
  ::execution::Header* _internal_add_uncles();
  public:
  const ::execution::Header& uncles(int index) const;
  ::execution::Header* add_uncles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >&
      uncles() const;

  // repeated .types.Withdrawal withdrawals = 5;
  int withdrawals_size() const;
  private:
  int _internal_withdrawals_size() const;
  public:
  void clear_withdrawals();
  ::types::Withdrawal* mutable_withdrawals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
      mutable_withdrawals();
  private:
  const ::types::Withdrawal& _internal_withdrawals(int index) const;
  ::types::Withdrawal* _internal_add_withdrawals();
  public:
  const ::types::Withdrawal& withdrawals(int index) const;
  ::types::Withdrawal* add_withdrawals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
      withdrawals() const;

  // .types.H256 blockHash = 1;
  bool has_blockhash() const;
  private:
  bool _internal_has_blockhash() const;
  public:
  void clear_blockhash();
  const ::types::H256& blockhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_blockhash();
  ::types::H256* mutable_blockhash();
  void set_allocated_blockhash(::types::H256* blockhash);
  private:
  const ::types::H256& _internal_blockhash() const;
  ::types::H256* _internal_mutable_blockhash();
  public:
  void unsafe_arena_set_allocated_blockhash(
      ::types::H256* blockhash);
  ::types::H256* unsafe_arena_release_blockhash();

  // uint64 blockNumber = 2;
  void clear_blocknumber();
  uint64_t blocknumber() const;
  void set_blocknumber(uint64_t value);
  private:
  uint64_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:execution.BlockBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header > uncles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal > withdrawals_;
    ::types::H256* blockhash_;
    uint64_t blocknumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetHeaderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.GetHeaderResponse) */ {
 public:
  inline GetHeaderResponse() : GetHeaderResponse(nullptr) {}
  ~GetHeaderResponse() override;
  explicit PROTOBUF_CONSTEXPR GetHeaderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHeaderResponse(const GetHeaderResponse& from);
  GetHeaderResponse(GetHeaderResponse&& from) noexcept
    : GetHeaderResponse() {
    *this = ::std::move(from);
  }

  inline GetHeaderResponse& operator=(const GetHeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHeaderResponse& operator=(GetHeaderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHeaderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHeaderResponse* internal_default_instance() {
    return reinterpret_cast<const GetHeaderResponse*>(
               &_GetHeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetHeaderResponse& a, GetHeaderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHeaderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHeaderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHeaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHeaderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHeaderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHeaderResponse& from) {
    GetHeaderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHeaderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.GetHeaderResponse";
  }
  protected:
  explicit GetHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // optional .execution.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::execution::Header& header() const;
  PROTOBUF_NODISCARD ::execution::Header* release_header();
  ::execution::Header* mutable_header();
  void set_allocated_header(::execution::Header* header);
  private:
  const ::execution::Header& _internal_header() const;
  ::execution::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::execution::Header* header);
  ::execution::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:execution.GetHeaderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::execution::Header* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetBodyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.GetBodyResponse) */ {
 public:
  inline GetBodyResponse() : GetBodyResponse(nullptr) {}
  ~GetBodyResponse() override;
  explicit PROTOBUF_CONSTEXPR GetBodyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBodyResponse(const GetBodyResponse& from);
  GetBodyResponse(GetBodyResponse&& from) noexcept
    : GetBodyResponse() {
    *this = ::std::move(from);
  }

  inline GetBodyResponse& operator=(const GetBodyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBodyResponse& operator=(GetBodyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBodyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBodyResponse* internal_default_instance() {
    return reinterpret_cast<const GetBodyResponse*>(
               &_GetBodyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetBodyResponse& a, GetBodyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBodyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBodyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBodyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBodyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBodyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBodyResponse& from) {
    GetBodyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBodyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.GetBodyResponse";
  }
  protected:
  explicit GetBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
  };
  // optional .execution.BlockBody body = 1;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::execution::BlockBody& body() const;
  PROTOBUF_NODISCARD ::execution::BlockBody* release_body();
  ::execution::BlockBody* mutable_body();
  void set_allocated_body(::execution::BlockBody* body);
  private:
  const ::execution::BlockBody& _internal_body() const;
  ::execution::BlockBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::execution::BlockBody* body);
  ::execution::BlockBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:execution.GetBodyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::execution::BlockBody* body_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetHeaderHashNumberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.GetHeaderHashNumberResponse) */ {
 public:
  inline GetHeaderHashNumberResponse() : GetHeaderHashNumberResponse(nullptr) {}
  ~GetHeaderHashNumberResponse() override;
  explicit PROTOBUF_CONSTEXPR GetHeaderHashNumberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHeaderHashNumberResponse(const GetHeaderHashNumberResponse& from);
  GetHeaderHashNumberResponse(GetHeaderHashNumberResponse&& from) noexcept
    : GetHeaderHashNumberResponse() {
    *this = ::std::move(from);
  }

  inline GetHeaderHashNumberResponse& operator=(const GetHeaderHashNumberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHeaderHashNumberResponse& operator=(GetHeaderHashNumberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHeaderHashNumberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHeaderHashNumberResponse* internal_default_instance() {
    return reinterpret_cast<const GetHeaderHashNumberResponse*>(
               &_GetHeaderHashNumberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetHeaderHashNumberResponse& a, GetHeaderHashNumberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHeaderHashNumberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHeaderHashNumberResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHeaderHashNumberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHeaderHashNumberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHeaderHashNumberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHeaderHashNumberResponse& from) {
    GetHeaderHashNumberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHeaderHashNumberResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.GetHeaderHashNumberResponse";
  }
  protected:
  explicit GetHeaderHashNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
  };
  // optional uint64 blockNumber = 1;
  bool has_blocknumber() const;
  private:
  bool _internal_has_blocknumber() const;
  public:
  void clear_blocknumber();
  uint64_t blocknumber() const;
  void set_blocknumber(uint64_t value);
  private:
  uint64_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:execution.GetHeaderHashNumberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t blocknumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetSegmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.GetSegmentRequest) */ {
 public:
  inline GetSegmentRequest() : GetSegmentRequest(nullptr) {}
  ~GetSegmentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSegmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSegmentRequest(const GetSegmentRequest& from);
  GetSegmentRequest(GetSegmentRequest&& from) noexcept
    : GetSegmentRequest() {
    *this = ::std::move(from);
  }

  inline GetSegmentRequest& operator=(const GetSegmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSegmentRequest& operator=(GetSegmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSegmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSegmentRequest* internal_default_instance() {
    return reinterpret_cast<const GetSegmentRequest*>(
               &_GetSegmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetSegmentRequest& a, GetSegmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSegmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSegmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSegmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSegmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSegmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSegmentRequest& from) {
    GetSegmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSegmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.GetSegmentRequest";
  }
  protected:
  explicit GetSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 2,
    kBlockNumberFieldNumber = 1,
  };
  // optional .types.H256 blockHash = 2;
  bool has_blockhash() const;
  private:
  bool _internal_has_blockhash() const;
  public:
  void clear_blockhash();
  const ::types::H256& blockhash() const;
  PROTOBUF_NODISCARD ::types::H256* release_blockhash();
  ::types::H256* mutable_blockhash();
  void set_allocated_blockhash(::types::H256* blockhash);
  private:
  const ::types::H256& _internal_blockhash() const;
  ::types::H256* _internal_mutable_blockhash();
  public:
  void unsafe_arena_set_allocated_blockhash(
      ::types::H256* blockhash);
  ::types::H256* unsafe_arena_release_blockhash();

  // optional uint64 blockNumber = 1;
  bool has_blocknumber() const;
  private:
  bool _internal_has_blocknumber() const;
  public:
  void clear_blocknumber();
  uint64_t blocknumber() const;
  void set_blocknumber(uint64_t value);
  private:
  uint64_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:execution.GetSegmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::types::H256* blockhash_;
    uint64_t blocknumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class InsertHeadersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.InsertHeadersRequest) */ {
 public:
  inline InsertHeadersRequest() : InsertHeadersRequest(nullptr) {}
  ~InsertHeadersRequest() override;
  explicit PROTOBUF_CONSTEXPR InsertHeadersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertHeadersRequest(const InsertHeadersRequest& from);
  InsertHeadersRequest(InsertHeadersRequest&& from) noexcept
    : InsertHeadersRequest() {
    *this = ::std::move(from);
  }

  inline InsertHeadersRequest& operator=(const InsertHeadersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertHeadersRequest& operator=(InsertHeadersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertHeadersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertHeadersRequest* internal_default_instance() {
    return reinterpret_cast<const InsertHeadersRequest*>(
               &_InsertHeadersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InsertHeadersRequest& a, InsertHeadersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertHeadersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertHeadersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsertHeadersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InsertHeadersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertHeadersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InsertHeadersRequest& from) {
    InsertHeadersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertHeadersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.InsertHeadersRequest";
  }
  protected:
  explicit InsertHeadersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
  };
  // repeated .execution.Header headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::execution::Header* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >*
      mutable_headers();
  private:
  const ::execution::Header& _internal_headers(int index) const;
  ::execution::Header* _internal_add_headers();
  public:
  const ::execution::Header& headers(int index) const;
  ::execution::Header* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >&
      headers() const;

  // @@protoc_insertion_point(class_scope:execution.InsertHeadersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header > headers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class InsertBodiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:execution.InsertBodiesRequest) */ {
 public:
  inline InsertBodiesRequest() : InsertBodiesRequest(nullptr) {}
  ~InsertBodiesRequest() override;
  explicit PROTOBUF_CONSTEXPR InsertBodiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertBodiesRequest(const InsertBodiesRequest& from);
  InsertBodiesRequest(InsertBodiesRequest&& from) noexcept
    : InsertBodiesRequest() {
    *this = ::std::move(from);
  }

  inline InsertBodiesRequest& operator=(const InsertBodiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertBodiesRequest& operator=(InsertBodiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertBodiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertBodiesRequest* internal_default_instance() {
    return reinterpret_cast<const InsertBodiesRequest*>(
               &_InsertBodiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InsertBodiesRequest& a, InsertBodiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertBodiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertBodiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsertBodiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InsertBodiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertBodiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InsertBodiesRequest& from) {
    InsertBodiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertBodiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.InsertBodiesRequest";
  }
  protected:
  explicit InsertBodiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodiesFieldNumber = 1,
  };
  // repeated .execution.BlockBody bodies = 1;
  int bodies_size() const;
  private:
  int _internal_bodies_size() const;
  public:
  void clear_bodies();
  ::execution::BlockBody* mutable_bodies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::BlockBody >*
      mutable_bodies();
  private:
  const ::execution::BlockBody& _internal_bodies(int index) const;
  ::execution::BlockBody* _internal_add_bodies();
  public:
  const ::execution::BlockBody& bodies(int index) const;
  ::execution::BlockBody* add_bodies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::BlockBody >&
      bodies() const;

  // @@protoc_insertion_point(class_scope:execution.InsertBodiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::BlockBody > bodies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class EmptyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:execution.EmptyMessage) */ {
 public:
  inline EmptyMessage() : EmptyMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EmptyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyMessage(const EmptyMessage& from);
  EmptyMessage(EmptyMessage&& from) noexcept
    : EmptyMessage() {
    *this = ::std::move(from);
  }

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyMessage& operator=(EmptyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyMessage* internal_default_instance() {
    return reinterpret_cast<const EmptyMessage*>(
               &_EmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EmptyMessage& a, EmptyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EmptyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EmptyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "execution.EmptyMessage";
  }
  protected:
  explicit EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:execution.EmptyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_execution_2fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ForkChoiceReceipt

// bool success = 1;
inline void ForkChoiceReceipt::clear_success() {
  _impl_.success_ = false;
}
inline bool ForkChoiceReceipt::_internal_success() const {
  return _impl_.success_;
}
inline bool ForkChoiceReceipt::success() const {
  // @@protoc_insertion_point(field_get:execution.ForkChoiceReceipt.success)
  return _internal_success();
}
inline void ForkChoiceReceipt::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void ForkChoiceReceipt::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:execution.ForkChoiceReceipt.success)
}

// .types.H256 latestValidHash = 2;
inline bool ForkChoiceReceipt::_internal_has_latestvalidhash() const {
  return this != internal_default_instance() && _impl_.latestvalidhash_ != nullptr;
}
inline bool ForkChoiceReceipt::has_latestvalidhash() const {
  return _internal_has_latestvalidhash();
}
inline const ::types::H256& ForkChoiceReceipt::_internal_latestvalidhash() const {
  const ::types::H256* p = _impl_.latestvalidhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ForkChoiceReceipt::latestvalidhash() const {
  // @@protoc_insertion_point(field_get:execution.ForkChoiceReceipt.latestValidHash)
  return _internal_latestvalidhash();
}
inline void ForkChoiceReceipt::unsafe_arena_set_allocated_latestvalidhash(
    ::types::H256* latestvalidhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latestvalidhash_);
  }
  _impl_.latestvalidhash_ = latestvalidhash;
  if (latestvalidhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.ForkChoiceReceipt.latestValidHash)
}
inline ::types::H256* ForkChoiceReceipt::release_latestvalidhash() {
  
  ::types::H256* temp = _impl_.latestvalidhash_;
  _impl_.latestvalidhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ForkChoiceReceipt::unsafe_arena_release_latestvalidhash() {
  // @@protoc_insertion_point(field_release:execution.ForkChoiceReceipt.latestValidHash)
  
  ::types::H256* temp = _impl_.latestvalidhash_;
  _impl_.latestvalidhash_ = nullptr;
  return temp;
}
inline ::types::H256* ForkChoiceReceipt::_internal_mutable_latestvalidhash() {
  
  if (_impl_.latestvalidhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.latestvalidhash_ = p;
  }
  return _impl_.latestvalidhash_;
}
inline ::types::H256* ForkChoiceReceipt::mutable_latestvalidhash() {
  ::types::H256* _msg = _internal_mutable_latestvalidhash();
  // @@protoc_insertion_point(field_mutable:execution.ForkChoiceReceipt.latestValidHash)
  return _msg;
}
inline void ForkChoiceReceipt::set_allocated_latestvalidhash(::types::H256* latestvalidhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latestvalidhash_);
  }
  if (latestvalidhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latestvalidhash));
    if (message_arena != submessage_arena) {
      latestvalidhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latestvalidhash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.latestvalidhash_ = latestvalidhash;
  // @@protoc_insertion_point(field_set_allocated:execution.ForkChoiceReceipt.latestValidHash)
}

// -------------------------------------------------------------------

// ValidationReceipt

// .execution.ValidationStatus validationStatus = 1;
inline void ValidationReceipt::clear_validationstatus() {
  _impl_.validationstatus_ = 0;
}
inline ::execution::ValidationStatus ValidationReceipt::_internal_validationstatus() const {
  return static_cast< ::execution::ValidationStatus >(_impl_.validationstatus_);
}
inline ::execution::ValidationStatus ValidationReceipt::validationstatus() const {
  // @@protoc_insertion_point(field_get:execution.ValidationReceipt.validationStatus)
  return _internal_validationstatus();
}
inline void ValidationReceipt::_internal_set_validationstatus(::execution::ValidationStatus value) {
  
  _impl_.validationstatus_ = value;
}
inline void ValidationReceipt::set_validationstatus(::execution::ValidationStatus value) {
  _internal_set_validationstatus(value);
  // @@protoc_insertion_point(field_set:execution.ValidationReceipt.validationStatus)
}

// .types.H256 latestValidHash = 2;
inline bool ValidationReceipt::_internal_has_latestvalidhash() const {
  return this != internal_default_instance() && _impl_.latestvalidhash_ != nullptr;
}
inline bool ValidationReceipt::has_latestvalidhash() const {
  return _internal_has_latestvalidhash();
}
inline const ::types::H256& ValidationReceipt::_internal_latestvalidhash() const {
  const ::types::H256* p = _impl_.latestvalidhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ValidationReceipt::latestvalidhash() const {
  // @@protoc_insertion_point(field_get:execution.ValidationReceipt.latestValidHash)
  return _internal_latestvalidhash();
}
inline void ValidationReceipt::unsafe_arena_set_allocated_latestvalidhash(
    ::types::H256* latestvalidhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latestvalidhash_);
  }
  _impl_.latestvalidhash_ = latestvalidhash;
  if (latestvalidhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.ValidationReceipt.latestValidHash)
}
inline ::types::H256* ValidationReceipt::release_latestvalidhash() {
  
  ::types::H256* temp = _impl_.latestvalidhash_;
  _impl_.latestvalidhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ValidationReceipt::unsafe_arena_release_latestvalidhash() {
  // @@protoc_insertion_point(field_release:execution.ValidationReceipt.latestValidHash)
  
  ::types::H256* temp = _impl_.latestvalidhash_;
  _impl_.latestvalidhash_ = nullptr;
  return temp;
}
inline ::types::H256* ValidationReceipt::_internal_mutable_latestvalidhash() {
  
  if (_impl_.latestvalidhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.latestvalidhash_ = p;
  }
  return _impl_.latestvalidhash_;
}
inline ::types::H256* ValidationReceipt::mutable_latestvalidhash() {
  ::types::H256* _msg = _internal_mutable_latestvalidhash();
  // @@protoc_insertion_point(field_mutable:execution.ValidationReceipt.latestValidHash)
  return _msg;
}
inline void ValidationReceipt::set_allocated_latestvalidhash(::types::H256* latestvalidhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latestvalidhash_);
  }
  if (latestvalidhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latestvalidhash));
    if (message_arena != submessage_arena) {
      latestvalidhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latestvalidhash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.latestvalidhash_ = latestvalidhash;
  // @@protoc_insertion_point(field_set_allocated:execution.ValidationReceipt.latestValidHash)
}

// optional .types.H256 missingHash = 3;
inline bool ValidationReceipt::_internal_has_missinghash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.missinghash_ != nullptr);
  return value;
}
inline bool ValidationReceipt::has_missinghash() const {
  return _internal_has_missinghash();
}
inline const ::types::H256& ValidationReceipt::_internal_missinghash() const {
  const ::types::H256* p = _impl_.missinghash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& ValidationReceipt::missinghash() const {
  // @@protoc_insertion_point(field_get:execution.ValidationReceipt.missingHash)
  return _internal_missinghash();
}
inline void ValidationReceipt::unsafe_arena_set_allocated_missinghash(
    ::types::H256* missinghash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.missinghash_);
  }
  _impl_.missinghash_ = missinghash;
  if (missinghash) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.ValidationReceipt.missingHash)
}
inline ::types::H256* ValidationReceipt::release_missinghash() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H256* temp = _impl_.missinghash_;
  _impl_.missinghash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* ValidationReceipt::unsafe_arena_release_missinghash() {
  // @@protoc_insertion_point(field_release:execution.ValidationReceipt.missingHash)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H256* temp = _impl_.missinghash_;
  _impl_.missinghash_ = nullptr;
  return temp;
}
inline ::types::H256* ValidationReceipt::_internal_mutable_missinghash() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.missinghash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.missinghash_ = p;
  }
  return _impl_.missinghash_;
}
inline ::types::H256* ValidationReceipt::mutable_missinghash() {
  ::types::H256* _msg = _internal_mutable_missinghash();
  // @@protoc_insertion_point(field_mutable:execution.ValidationReceipt.missingHash)
  return _msg;
}
inline void ValidationReceipt::set_allocated_missinghash(::types::H256* missinghash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.missinghash_);
  }
  if (missinghash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(missinghash));
    if (message_arena != submessage_arena) {
      missinghash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, missinghash, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.missinghash_ = missinghash;
  // @@protoc_insertion_point(field_set_allocated:execution.ValidationReceipt.missingHash)
}

// -------------------------------------------------------------------

// IsCanonicalResponse

// bool canonical = 1;
inline void IsCanonicalResponse::clear_canonical() {
  _impl_.canonical_ = false;
}
inline bool IsCanonicalResponse::_internal_canonical() const {
  return _impl_.canonical_;
}
inline bool IsCanonicalResponse::canonical() const {
  // @@protoc_insertion_point(field_get:execution.IsCanonicalResponse.canonical)
  return _internal_canonical();
}
inline void IsCanonicalResponse::_internal_set_canonical(bool value) {
  
  _impl_.canonical_ = value;
}
inline void IsCanonicalResponse::set_canonical(bool value) {
  _internal_set_canonical(value);
  // @@protoc_insertion_point(field_set:execution.IsCanonicalResponse.canonical)
}

// -------------------------------------------------------------------

// Header

// .types.H256 parentHash = 1;
inline bool Header::_internal_has_parenthash() const {
  return this != internal_default_instance() && _impl_.parenthash_ != nullptr;
}
inline bool Header::has_parenthash() const {
  return _internal_has_parenthash();
}
inline const ::types::H256& Header::_internal_parenthash() const {
  const ::types::H256* p = _impl_.parenthash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::parenthash() const {
  // @@protoc_insertion_point(field_get:execution.Header.parentHash)
  return _internal_parenthash();
}
inline void Header::unsafe_arena_set_allocated_parenthash(
    ::types::H256* parenthash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parenthash_);
  }
  _impl_.parenthash_ = parenthash;
  if (parenthash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.parentHash)
}
inline ::types::H256* Header::release_parenthash() {
  
  ::types::H256* temp = _impl_.parenthash_;
  _impl_.parenthash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_parenthash() {
  // @@protoc_insertion_point(field_release:execution.Header.parentHash)
  
  ::types::H256* temp = _impl_.parenthash_;
  _impl_.parenthash_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_parenthash() {
  
  if (_impl_.parenthash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.parenthash_ = p;
  }
  return _impl_.parenthash_;
}
inline ::types::H256* Header::mutable_parenthash() {
  ::types::H256* _msg = _internal_mutable_parenthash();
  // @@protoc_insertion_point(field_mutable:execution.Header.parentHash)
  return _msg;
}
inline void Header::set_allocated_parenthash(::types::H256* parenthash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parenthash_);
  }
  if (parenthash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parenthash));
    if (message_arena != submessage_arena) {
      parenthash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parenthash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parenthash_ = parenthash;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.parentHash)
}

// .types.H160 coinbase = 2;
inline bool Header::_internal_has_coinbase() const {
  return this != internal_default_instance() && _impl_.coinbase_ != nullptr;
}
inline bool Header::has_coinbase() const {
  return _internal_has_coinbase();
}
inline const ::types::H160& Header::_internal_coinbase() const {
  const ::types::H160* p = _impl_.coinbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& Header::coinbase() const {
  // @@protoc_insertion_point(field_get:execution.Header.coinbase)
  return _internal_coinbase();
}
inline void Header::unsafe_arena_set_allocated_coinbase(
    ::types::H160* coinbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coinbase_);
  }
  _impl_.coinbase_ = coinbase;
  if (coinbase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.coinbase)
}
inline ::types::H160* Header::release_coinbase() {
  
  ::types::H160* temp = _impl_.coinbase_;
  _impl_.coinbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H160* Header::unsafe_arena_release_coinbase() {
  // @@protoc_insertion_point(field_release:execution.Header.coinbase)
  
  ::types::H160* temp = _impl_.coinbase_;
  _impl_.coinbase_ = nullptr;
  return temp;
}
inline ::types::H160* Header::_internal_mutable_coinbase() {
  
  if (_impl_.coinbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArenaForAllocation());
    _impl_.coinbase_ = p;
  }
  return _impl_.coinbase_;
}
inline ::types::H160* Header::mutable_coinbase() {
  ::types::H160* _msg = _internal_mutable_coinbase();
  // @@protoc_insertion_point(field_mutable:execution.Header.coinbase)
  return _msg;
}
inline void Header::set_allocated_coinbase(::types::H160* coinbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coinbase_);
  }
  if (coinbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coinbase));
    if (message_arena != submessage_arena) {
      coinbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coinbase, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coinbase_ = coinbase;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.coinbase)
}

// .types.H256 stateRoot = 3;
inline bool Header::_internal_has_stateroot() const {
  return this != internal_default_instance() && _impl_.stateroot_ != nullptr;
}
inline bool Header::has_stateroot() const {
  return _internal_has_stateroot();
}
inline const ::types::H256& Header::_internal_stateroot() const {
  const ::types::H256* p = _impl_.stateroot_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::stateroot() const {
  // @@protoc_insertion_point(field_get:execution.Header.stateRoot)
  return _internal_stateroot();
}
inline void Header::unsafe_arena_set_allocated_stateroot(
    ::types::H256* stateroot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stateroot_);
  }
  _impl_.stateroot_ = stateroot;
  if (stateroot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.stateRoot)
}
inline ::types::H256* Header::release_stateroot() {
  
  ::types::H256* temp = _impl_.stateroot_;
  _impl_.stateroot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_stateroot() {
  // @@protoc_insertion_point(field_release:execution.Header.stateRoot)
  
  ::types::H256* temp = _impl_.stateroot_;
  _impl_.stateroot_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_stateroot() {
  
  if (_impl_.stateroot_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.stateroot_ = p;
  }
  return _impl_.stateroot_;
}
inline ::types::H256* Header::mutable_stateroot() {
  ::types::H256* _msg = _internal_mutable_stateroot();
  // @@protoc_insertion_point(field_mutable:execution.Header.stateRoot)
  return _msg;
}
inline void Header::set_allocated_stateroot(::types::H256* stateroot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stateroot_);
  }
  if (stateroot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stateroot));
    if (message_arena != submessage_arena) {
      stateroot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stateroot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stateroot_ = stateroot;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.stateRoot)
}

// .types.H256 receiptRoot = 4;
inline bool Header::_internal_has_receiptroot() const {
  return this != internal_default_instance() && _impl_.receiptroot_ != nullptr;
}
inline bool Header::has_receiptroot() const {
  return _internal_has_receiptroot();
}
inline const ::types::H256& Header::_internal_receiptroot() const {
  const ::types::H256* p = _impl_.receiptroot_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::receiptroot() const {
  // @@protoc_insertion_point(field_get:execution.Header.receiptRoot)
  return _internal_receiptroot();
}
inline void Header::unsafe_arena_set_allocated_receiptroot(
    ::types::H256* receiptroot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receiptroot_);
  }
  _impl_.receiptroot_ = receiptroot;
  if (receiptroot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.receiptRoot)
}
inline ::types::H256* Header::release_receiptroot() {
  
  ::types::H256* temp = _impl_.receiptroot_;
  _impl_.receiptroot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_receiptroot() {
  // @@protoc_insertion_point(field_release:execution.Header.receiptRoot)
  
  ::types::H256* temp = _impl_.receiptroot_;
  _impl_.receiptroot_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_receiptroot() {
  
  if (_impl_.receiptroot_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.receiptroot_ = p;
  }
  return _impl_.receiptroot_;
}
inline ::types::H256* Header::mutable_receiptroot() {
  ::types::H256* _msg = _internal_mutable_receiptroot();
  // @@protoc_insertion_point(field_mutable:execution.Header.receiptRoot)
  return _msg;
}
inline void Header::set_allocated_receiptroot(::types::H256* receiptroot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receiptroot_);
  }
  if (receiptroot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiptroot));
    if (message_arena != submessage_arena) {
      receiptroot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiptroot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.receiptroot_ = receiptroot;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.receiptRoot)
}

// .types.H2048 logsBloom = 5;
inline bool Header::_internal_has_logsbloom() const {
  return this != internal_default_instance() && _impl_.logsbloom_ != nullptr;
}
inline bool Header::has_logsbloom() const {
  return _internal_has_logsbloom();
}
inline const ::types::H2048& Header::_internal_logsbloom() const {
  const ::types::H2048* p = _impl_.logsbloom_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H2048&>(
      ::types::_H2048_default_instance_);
}
inline const ::types::H2048& Header::logsbloom() const {
  // @@protoc_insertion_point(field_get:execution.Header.logsBloom)
  return _internal_logsbloom();
}
inline void Header::unsafe_arena_set_allocated_logsbloom(
    ::types::H2048* logsbloom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logsbloom_);
  }
  _impl_.logsbloom_ = logsbloom;
  if (logsbloom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.logsBloom)
}
inline ::types::H2048* Header::release_logsbloom() {
  
  ::types::H2048* temp = _impl_.logsbloom_;
  _impl_.logsbloom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H2048* Header::unsafe_arena_release_logsbloom() {
  // @@protoc_insertion_point(field_release:execution.Header.logsBloom)
  
  ::types::H2048* temp = _impl_.logsbloom_;
  _impl_.logsbloom_ = nullptr;
  return temp;
}
inline ::types::H2048* Header::_internal_mutable_logsbloom() {
  
  if (_impl_.logsbloom_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H2048>(GetArenaForAllocation());
    _impl_.logsbloom_ = p;
  }
  return _impl_.logsbloom_;
}
inline ::types::H2048* Header::mutable_logsbloom() {
  ::types::H2048* _msg = _internal_mutable_logsbloom();
  // @@protoc_insertion_point(field_mutable:execution.Header.logsBloom)
  return _msg;
}
inline void Header::set_allocated_logsbloom(::types::H2048* logsbloom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logsbloom_);
  }
  if (logsbloom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logsbloom));
    if (message_arena != submessage_arena) {
      logsbloom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logsbloom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logsbloom_ = logsbloom;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.logsBloom)
}

// .types.H256 mixDigest = 6;
inline bool Header::_internal_has_mixdigest() const {
  return this != internal_default_instance() && _impl_.mixdigest_ != nullptr;
}
inline bool Header::has_mixdigest() const {
  return _internal_has_mixdigest();
}
inline const ::types::H256& Header::_internal_mixdigest() const {
  const ::types::H256* p = _impl_.mixdigest_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::mixdigest() const {
  // @@protoc_insertion_point(field_get:execution.Header.mixDigest)
  return _internal_mixdigest();
}
inline void Header::unsafe_arena_set_allocated_mixdigest(
    ::types::H256* mixdigest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mixdigest_);
  }
  _impl_.mixdigest_ = mixdigest;
  if (mixdigest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.mixDigest)
}
inline ::types::H256* Header::release_mixdigest() {
  
  ::types::H256* temp = _impl_.mixdigest_;
  _impl_.mixdigest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_mixdigest() {
  // @@protoc_insertion_point(field_release:execution.Header.mixDigest)
  
  ::types::H256* temp = _impl_.mixdigest_;
  _impl_.mixdigest_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_mixdigest() {
  
  if (_impl_.mixdigest_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.mixdigest_ = p;
  }
  return _impl_.mixdigest_;
}
inline ::types::H256* Header::mutable_mixdigest() {
  ::types::H256* _msg = _internal_mutable_mixdigest();
  // @@protoc_insertion_point(field_mutable:execution.Header.mixDigest)
  return _msg;
}
inline void Header::set_allocated_mixdigest(::types::H256* mixdigest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mixdigest_);
  }
  if (mixdigest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixdigest));
    if (message_arena != submessage_arena) {
      mixdigest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixdigest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mixdigest_ = mixdigest;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.mixDigest)
}

// uint64 blockNumber = 7;
inline void Header::clear_blocknumber() {
  _impl_.blocknumber_ = uint64_t{0u};
}
inline uint64_t Header::_internal_blocknumber() const {
  return _impl_.blocknumber_;
}
inline uint64_t Header::blocknumber() const {
  // @@protoc_insertion_point(field_get:execution.Header.blockNumber)
  return _internal_blocknumber();
}
inline void Header::_internal_set_blocknumber(uint64_t value) {
  
  _impl_.blocknumber_ = value;
}
inline void Header::set_blocknumber(uint64_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:execution.Header.blockNumber)
}

// uint64 gasLimit = 8;
inline void Header::clear_gaslimit() {
  _impl_.gaslimit_ = uint64_t{0u};
}
inline uint64_t Header::_internal_gaslimit() const {
  return _impl_.gaslimit_;
}
inline uint64_t Header::gaslimit() const {
  // @@protoc_insertion_point(field_get:execution.Header.gasLimit)
  return _internal_gaslimit();
}
inline void Header::_internal_set_gaslimit(uint64_t value) {
  
  _impl_.gaslimit_ = value;
}
inline void Header::set_gaslimit(uint64_t value) {
  _internal_set_gaslimit(value);
  // @@protoc_insertion_point(field_set:execution.Header.gasLimit)
}

// uint64 gasUsed = 9;
inline void Header::clear_gasused() {
  _impl_.gasused_ = uint64_t{0u};
}
inline uint64_t Header::_internal_gasused() const {
  return _impl_.gasused_;
}
inline uint64_t Header::gasused() const {
  // @@protoc_insertion_point(field_get:execution.Header.gasUsed)
  return _internal_gasused();
}
inline void Header::_internal_set_gasused(uint64_t value) {
  
  _impl_.gasused_ = value;
}
inline void Header::set_gasused(uint64_t value) {
  _internal_set_gasused(value);
  // @@protoc_insertion_point(field_set:execution.Header.gasUsed)
}

// uint64 timestamp = 10;
inline void Header::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t Header::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t Header::timestamp() const {
  // @@protoc_insertion_point(field_get:execution.Header.timestamp)
  return _internal_timestamp();
}
inline void Header::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Header::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:execution.Header.timestamp)
}

// uint64 nonce = 11;
inline void Header::clear_nonce() {
  _impl_.nonce_ = uint64_t{0u};
}
inline uint64_t Header::_internal_nonce() const {
  return _impl_.nonce_;
}
inline uint64_t Header::nonce() const {
  // @@protoc_insertion_point(field_get:execution.Header.nonce)
  return _internal_nonce();
}
inline void Header::_internal_set_nonce(uint64_t value) {
  
  _impl_.nonce_ = value;
}
inline void Header::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:execution.Header.nonce)
}

// bytes extraData = 12;
inline void Header::clear_extradata() {
  _impl_.extradata_.ClearToEmpty();
}
inline const std::string& Header::extradata() const {
  // @@protoc_insertion_point(field_get:execution.Header.extraData)
  return _internal_extradata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_extradata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extradata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:execution.Header.extraData)
}
inline std::string* Header::mutable_extradata() {
  std::string* _s = _internal_mutable_extradata();
  // @@protoc_insertion_point(field_mutable:execution.Header.extraData)
  return _s;
}
inline const std::string& Header::_internal_extradata() const {
  return _impl_.extradata_.Get();
}
inline void Header::_internal_set_extradata(const std::string& value) {
  
  _impl_.extradata_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_extradata() {
  
  return _impl_.extradata_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_extradata() {
  // @@protoc_insertion_point(field_release:execution.Header.extraData)
  return _impl_.extradata_.Release();
}
inline void Header::set_allocated_extradata(std::string* extradata) {
  if (extradata != nullptr) {
    
  } else {
    
  }
  _impl_.extradata_.SetAllocated(extradata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extradata_.IsDefault()) {
    _impl_.extradata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:execution.Header.extraData)
}

// .types.H256 difficulty = 13;
inline bool Header::_internal_has_difficulty() const {
  return this != internal_default_instance() && _impl_.difficulty_ != nullptr;
}
inline bool Header::has_difficulty() const {
  return _internal_has_difficulty();
}
inline const ::types::H256& Header::_internal_difficulty() const {
  const ::types::H256* p = _impl_.difficulty_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::difficulty() const {
  // @@protoc_insertion_point(field_get:execution.Header.difficulty)
  return _internal_difficulty();
}
inline void Header::unsafe_arena_set_allocated_difficulty(
    ::types::H256* difficulty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.difficulty_);
  }
  _impl_.difficulty_ = difficulty;
  if (difficulty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.difficulty)
}
inline ::types::H256* Header::release_difficulty() {
  
  ::types::H256* temp = _impl_.difficulty_;
  _impl_.difficulty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_difficulty() {
  // @@protoc_insertion_point(field_release:execution.Header.difficulty)
  
  ::types::H256* temp = _impl_.difficulty_;
  _impl_.difficulty_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_difficulty() {
  
  if (_impl_.difficulty_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.difficulty_ = p;
  }
  return _impl_.difficulty_;
}
inline ::types::H256* Header::mutable_difficulty() {
  ::types::H256* _msg = _internal_mutable_difficulty();
  // @@protoc_insertion_point(field_mutable:execution.Header.difficulty)
  return _msg;
}
inline void Header::set_allocated_difficulty(::types::H256* difficulty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.difficulty_);
  }
  if (difficulty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(difficulty));
    if (message_arena != submessage_arena) {
      difficulty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, difficulty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.difficulty_ = difficulty;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.difficulty)
}

// .types.H256 blockHash = 14;
inline bool Header::_internal_has_blockhash() const {
  return this != internal_default_instance() && _impl_.blockhash_ != nullptr;
}
inline bool Header::has_blockhash() const {
  return _internal_has_blockhash();
}
inline const ::types::H256& Header::_internal_blockhash() const {
  const ::types::H256* p = _impl_.blockhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::blockhash() const {
  // @@protoc_insertion_point(field_get:execution.Header.blockHash)
  return _internal_blockhash();
}
inline void Header::unsafe_arena_set_allocated_blockhash(
    ::types::H256* blockhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockhash_);
  }
  _impl_.blockhash_ = blockhash;
  if (blockhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.blockHash)
}
inline ::types::H256* Header::release_blockhash() {
  
  ::types::H256* temp = _impl_.blockhash_;
  _impl_.blockhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_blockhash() {
  // @@protoc_insertion_point(field_release:execution.Header.blockHash)
  
  ::types::H256* temp = _impl_.blockhash_;
  _impl_.blockhash_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_blockhash() {
  
  if (_impl_.blockhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.blockhash_ = p;
  }
  return _impl_.blockhash_;
}
inline ::types::H256* Header::mutable_blockhash() {
  ::types::H256* _msg = _internal_mutable_blockhash();
  // @@protoc_insertion_point(field_mutable:execution.Header.blockHash)
  return _msg;
}
inline void Header::set_allocated_blockhash(::types::H256* blockhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockhash_);
  }
  if (blockhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blockhash));
    if (message_arena != submessage_arena) {
      blockhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockhash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockhash_ = blockhash;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.blockHash)
}

// .types.H256 ommerHash = 15;
inline bool Header::_internal_has_ommerhash() const {
  return this != internal_default_instance() && _impl_.ommerhash_ != nullptr;
}
inline bool Header::has_ommerhash() const {
  return _internal_has_ommerhash();
}
inline const ::types::H256& Header::_internal_ommerhash() const {
  const ::types::H256* p = _impl_.ommerhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::ommerhash() const {
  // @@protoc_insertion_point(field_get:execution.Header.ommerHash)
  return _internal_ommerhash();
}
inline void Header::unsafe_arena_set_allocated_ommerhash(
    ::types::H256* ommerhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ommerhash_);
  }
  _impl_.ommerhash_ = ommerhash;
  if (ommerhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.ommerHash)
}
inline ::types::H256* Header::release_ommerhash() {
  
  ::types::H256* temp = _impl_.ommerhash_;
  _impl_.ommerhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_ommerhash() {
  // @@protoc_insertion_point(field_release:execution.Header.ommerHash)
  
  ::types::H256* temp = _impl_.ommerhash_;
  _impl_.ommerhash_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_ommerhash() {
  
  if (_impl_.ommerhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.ommerhash_ = p;
  }
  return _impl_.ommerhash_;
}
inline ::types::H256* Header::mutable_ommerhash() {
  ::types::H256* _msg = _internal_mutable_ommerhash();
  // @@protoc_insertion_point(field_mutable:execution.Header.ommerHash)
  return _msg;
}
inline void Header::set_allocated_ommerhash(::types::H256* ommerhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ommerhash_);
  }
  if (ommerhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ommerhash));
    if (message_arena != submessage_arena) {
      ommerhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ommerhash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ommerhash_ = ommerhash;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.ommerHash)
}

// .types.H256 transactionHash = 16;
inline bool Header::_internal_has_transactionhash() const {
  return this != internal_default_instance() && _impl_.transactionhash_ != nullptr;
}
inline bool Header::has_transactionhash() const {
  return _internal_has_transactionhash();
}
inline const ::types::H256& Header::_internal_transactionhash() const {
  const ::types::H256* p = _impl_.transactionhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::transactionhash() const {
  // @@protoc_insertion_point(field_get:execution.Header.transactionHash)
  return _internal_transactionhash();
}
inline void Header::unsafe_arena_set_allocated_transactionhash(
    ::types::H256* transactionhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionhash_);
  }
  _impl_.transactionhash_ = transactionhash;
  if (transactionhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.transactionHash)
}
inline ::types::H256* Header::release_transactionhash() {
  
  ::types::H256* temp = _impl_.transactionhash_;
  _impl_.transactionhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_transactionhash() {
  // @@protoc_insertion_point(field_release:execution.Header.transactionHash)
  
  ::types::H256* temp = _impl_.transactionhash_;
  _impl_.transactionhash_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_transactionhash() {
  
  if (_impl_.transactionhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.transactionhash_ = p;
  }
  return _impl_.transactionhash_;
}
inline ::types::H256* Header::mutable_transactionhash() {
  ::types::H256* _msg = _internal_mutable_transactionhash();
  // @@protoc_insertion_point(field_mutable:execution.Header.transactionHash)
  return _msg;
}
inline void Header::set_allocated_transactionhash(::types::H256* transactionhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionhash_);
  }
  if (transactionhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionhash));
    if (message_arena != submessage_arena) {
      transactionhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionhash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transactionhash_ = transactionhash;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.transactionHash)
}

// optional .types.H256 baseFeePerGas = 17;
inline bool Header::_internal_has_basefeepergas() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basefeepergas_ != nullptr);
  return value;
}
inline bool Header::has_basefeepergas() const {
  return _internal_has_basefeepergas();
}
inline const ::types::H256& Header::_internal_basefeepergas() const {
  const ::types::H256* p = _impl_.basefeepergas_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::basefeepergas() const {
  // @@protoc_insertion_point(field_get:execution.Header.baseFeePerGas)
  return _internal_basefeepergas();
}
inline void Header::unsafe_arena_set_allocated_basefeepergas(
    ::types::H256* basefeepergas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basefeepergas_);
  }
  _impl_.basefeepergas_ = basefeepergas;
  if (basefeepergas) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.baseFeePerGas)
}
inline ::types::H256* Header::release_basefeepergas() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H256* temp = _impl_.basefeepergas_;
  _impl_.basefeepergas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_basefeepergas() {
  // @@protoc_insertion_point(field_release:execution.Header.baseFeePerGas)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H256* temp = _impl_.basefeepergas_;
  _impl_.basefeepergas_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_basefeepergas() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.basefeepergas_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.basefeepergas_ = p;
  }
  return _impl_.basefeepergas_;
}
inline ::types::H256* Header::mutable_basefeepergas() {
  ::types::H256* _msg = _internal_mutable_basefeepergas();
  // @@protoc_insertion_point(field_mutable:execution.Header.baseFeePerGas)
  return _msg;
}
inline void Header::set_allocated_basefeepergas(::types::H256* basefeepergas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basefeepergas_);
  }
  if (basefeepergas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basefeepergas));
    if (message_arena != submessage_arena) {
      basefeepergas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basefeepergas, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.basefeepergas_ = basefeepergas;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.baseFeePerGas)
}

// optional .types.H256 withdrawalHash = 18;
inline bool Header::_internal_has_withdrawalhash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.withdrawalhash_ != nullptr);
  return value;
}
inline bool Header::has_withdrawalhash() const {
  return _internal_has_withdrawalhash();
}
inline const ::types::H256& Header::_internal_withdrawalhash() const {
  const ::types::H256* p = _impl_.withdrawalhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::withdrawalhash() const {
  // @@protoc_insertion_point(field_get:execution.Header.withdrawalHash)
  return _internal_withdrawalhash();
}
inline void Header::unsafe_arena_set_allocated_withdrawalhash(
    ::types::H256* withdrawalhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.withdrawalhash_);
  }
  _impl_.withdrawalhash_ = withdrawalhash;
  if (withdrawalhash) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.withdrawalHash)
}
inline ::types::H256* Header::release_withdrawalhash() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::types::H256* temp = _impl_.withdrawalhash_;
  _impl_.withdrawalhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_withdrawalhash() {
  // @@protoc_insertion_point(field_release:execution.Header.withdrawalHash)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::types::H256* temp = _impl_.withdrawalhash_;
  _impl_.withdrawalhash_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_withdrawalhash() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.withdrawalhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.withdrawalhash_ = p;
  }
  return _impl_.withdrawalhash_;
}
inline ::types::H256* Header::mutable_withdrawalhash() {
  ::types::H256* _msg = _internal_mutable_withdrawalhash();
  // @@protoc_insertion_point(field_mutable:execution.Header.withdrawalHash)
  return _msg;
}
inline void Header::set_allocated_withdrawalhash(::types::H256* withdrawalhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.withdrawalhash_);
  }
  if (withdrawalhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawalhash));
    if (message_arena != submessage_arena) {
      withdrawalhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawalhash, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.withdrawalhash_ = withdrawalhash;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.withdrawalHash)
}

// optional .types.H256 excessDataGas = 19;
inline bool Header::_internal_has_excessdatagas() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.excessdatagas_ != nullptr);
  return value;
}
inline bool Header::has_excessdatagas() const {
  return _internal_has_excessdatagas();
}
inline const ::types::H256& Header::_internal_excessdatagas() const {
  const ::types::H256* p = _impl_.excessdatagas_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Header::excessdatagas() const {
  // @@protoc_insertion_point(field_get:execution.Header.excessDataGas)
  return _internal_excessdatagas();
}
inline void Header::unsafe_arena_set_allocated_excessdatagas(
    ::types::H256* excessdatagas) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.excessdatagas_);
  }
  _impl_.excessdatagas_ = excessdatagas;
  if (excessdatagas) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.Header.excessDataGas)
}
inline ::types::H256* Header::release_excessdatagas() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::types::H256* temp = _impl_.excessdatagas_;
  _impl_.excessdatagas_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* Header::unsafe_arena_release_excessdatagas() {
  // @@protoc_insertion_point(field_release:execution.Header.excessDataGas)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::types::H256* temp = _impl_.excessdatagas_;
  _impl_.excessdatagas_ = nullptr;
  return temp;
}
inline ::types::H256* Header::_internal_mutable_excessdatagas() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.excessdatagas_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.excessdatagas_ = p;
  }
  return _impl_.excessdatagas_;
}
inline ::types::H256* Header::mutable_excessdatagas() {
  ::types::H256* _msg = _internal_mutable_excessdatagas();
  // @@protoc_insertion_point(field_mutable:execution.Header.excessDataGas)
  return _msg;
}
inline void Header::set_allocated_excessdatagas(::types::H256* excessdatagas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.excessdatagas_);
  }
  if (excessdatagas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(excessdatagas));
    if (message_arena != submessage_arena) {
      excessdatagas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excessdatagas, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.excessdatagas_ = excessdatagas;
  // @@protoc_insertion_point(field_set_allocated:execution.Header.excessDataGas)
}

// -------------------------------------------------------------------

// BlockBody

// .types.H256 blockHash = 1;
inline bool BlockBody::_internal_has_blockhash() const {
  return this != internal_default_instance() && _impl_.blockhash_ != nullptr;
}
inline bool BlockBody::has_blockhash() const {
  return _internal_has_blockhash();
}
inline const ::types::H256& BlockBody::_internal_blockhash() const {
  const ::types::H256* p = _impl_.blockhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& BlockBody::blockhash() const {
  // @@protoc_insertion_point(field_get:execution.BlockBody.blockHash)
  return _internal_blockhash();
}
inline void BlockBody::unsafe_arena_set_allocated_blockhash(
    ::types::H256* blockhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockhash_);
  }
  _impl_.blockhash_ = blockhash;
  if (blockhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.BlockBody.blockHash)
}
inline ::types::H256* BlockBody::release_blockhash() {
  
  ::types::H256* temp = _impl_.blockhash_;
  _impl_.blockhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* BlockBody::unsafe_arena_release_blockhash() {
  // @@protoc_insertion_point(field_release:execution.BlockBody.blockHash)
  
  ::types::H256* temp = _impl_.blockhash_;
  _impl_.blockhash_ = nullptr;
  return temp;
}
inline ::types::H256* BlockBody::_internal_mutable_blockhash() {
  
  if (_impl_.blockhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.blockhash_ = p;
  }
  return _impl_.blockhash_;
}
inline ::types::H256* BlockBody::mutable_blockhash() {
  ::types::H256* _msg = _internal_mutable_blockhash();
  // @@protoc_insertion_point(field_mutable:execution.BlockBody.blockHash)
  return _msg;
}
inline void BlockBody::set_allocated_blockhash(::types::H256* blockhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockhash_);
  }
  if (blockhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blockhash));
    if (message_arena != submessage_arena) {
      blockhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockhash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockhash_ = blockhash;
  // @@protoc_insertion_point(field_set_allocated:execution.BlockBody.blockHash)
}

// uint64 blockNumber = 2;
inline void BlockBody::clear_blocknumber() {
  _impl_.blocknumber_ = uint64_t{0u};
}
inline uint64_t BlockBody::_internal_blocknumber() const {
  return _impl_.blocknumber_;
}
inline uint64_t BlockBody::blocknumber() const {
  // @@protoc_insertion_point(field_get:execution.BlockBody.blockNumber)
  return _internal_blocknumber();
}
inline void BlockBody::_internal_set_blocknumber(uint64_t value) {
  
  _impl_.blocknumber_ = value;
}
inline void BlockBody::set_blocknumber(uint64_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:execution.BlockBody.blockNumber)
}

// repeated bytes transactions = 3;
inline int BlockBody::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int BlockBody::transactions_size() const {
  return _internal_transactions_size();
}
inline void BlockBody::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline std::string* BlockBody::add_transactions() {
  std::string* _s = _internal_add_transactions();
  // @@protoc_insertion_point(field_add_mutable:execution.BlockBody.transactions)
  return _s;
}
inline const std::string& BlockBody::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const std::string& BlockBody::transactions(int index) const {
  // @@protoc_insertion_point(field_get:execution.BlockBody.transactions)
  return _internal_transactions(index);
}
inline std::string* BlockBody::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:execution.BlockBody.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline void BlockBody::set_transactions(int index, const std::string& value) {
  _impl_.transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:execution.BlockBody.transactions)
}
inline void BlockBody::set_transactions(int index, std::string&& value) {
  _impl_.transactions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:execution.BlockBody.transactions)
}
inline void BlockBody::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:execution.BlockBody.transactions)
}
inline void BlockBody::set_transactions(int index, const void* value, size_t size) {
  _impl_.transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:execution.BlockBody.transactions)
}
inline std::string* BlockBody::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline void BlockBody::add_transactions(const std::string& value) {
  _impl_.transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:execution.BlockBody.transactions)
}
inline void BlockBody::add_transactions(std::string&& value) {
  _impl_.transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:execution.BlockBody.transactions)
}
inline void BlockBody::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:execution.BlockBody.transactions)
}
inline void BlockBody::add_transactions(const void* value, size_t size) {
  _impl_.transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:execution.BlockBody.transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockBody::transactions() const {
  // @@protoc_insertion_point(field_list:execution.BlockBody.transactions)
  return _impl_.transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockBody::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:execution.BlockBody.transactions)
  return &_impl_.transactions_;
}

// repeated .execution.Header uncles = 4;
inline int BlockBody::_internal_uncles_size() const {
  return _impl_.uncles_.size();
}
inline int BlockBody::uncles_size() const {
  return _internal_uncles_size();
}
inline void BlockBody::clear_uncles() {
  _impl_.uncles_.Clear();
}
inline ::execution::Header* BlockBody::mutable_uncles(int index) {
  // @@protoc_insertion_point(field_mutable:execution.BlockBody.uncles)
  return _impl_.uncles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >*
BlockBody::mutable_uncles() {
  // @@protoc_insertion_point(field_mutable_list:execution.BlockBody.uncles)
  return &_impl_.uncles_;
}
inline const ::execution::Header& BlockBody::_internal_uncles(int index) const {
  return _impl_.uncles_.Get(index);
}
inline const ::execution::Header& BlockBody::uncles(int index) const {
  // @@protoc_insertion_point(field_get:execution.BlockBody.uncles)
  return _internal_uncles(index);
}
inline ::execution::Header* BlockBody::_internal_add_uncles() {
  return _impl_.uncles_.Add();
}
inline ::execution::Header* BlockBody::add_uncles() {
  ::execution::Header* _add = _internal_add_uncles();
  // @@protoc_insertion_point(field_add:execution.BlockBody.uncles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >&
BlockBody::uncles() const {
  // @@protoc_insertion_point(field_list:execution.BlockBody.uncles)
  return _impl_.uncles_;
}

// repeated .types.Withdrawal withdrawals = 5;
inline int BlockBody::_internal_withdrawals_size() const {
  return _impl_.withdrawals_.size();
}
inline int BlockBody::withdrawals_size() const {
  return _internal_withdrawals_size();
}
inline ::types::Withdrawal* BlockBody::mutable_withdrawals(int index) {
  // @@protoc_insertion_point(field_mutable:execution.BlockBody.withdrawals)
  return _impl_.withdrawals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
BlockBody::mutable_withdrawals() {
  // @@protoc_insertion_point(field_mutable_list:execution.BlockBody.withdrawals)
  return &_impl_.withdrawals_;
}
inline const ::types::Withdrawal& BlockBody::_internal_withdrawals(int index) const {
  return _impl_.withdrawals_.Get(index);
}
inline const ::types::Withdrawal& BlockBody::withdrawals(int index) const {
  // @@protoc_insertion_point(field_get:execution.BlockBody.withdrawals)
  return _internal_withdrawals(index);
}
inline ::types::Withdrawal* BlockBody::_internal_add_withdrawals() {
  return _impl_.withdrawals_.Add();
}
inline ::types::Withdrawal* BlockBody::add_withdrawals() {
  ::types::Withdrawal* _add = _internal_add_withdrawals();
  // @@protoc_insertion_point(field_add:execution.BlockBody.withdrawals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
BlockBody::withdrawals() const {
  // @@protoc_insertion_point(field_list:execution.BlockBody.withdrawals)
  return _impl_.withdrawals_;
}

// -------------------------------------------------------------------

// GetHeaderResponse

// optional .execution.Header header = 1;
inline bool GetHeaderResponse::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GetHeaderResponse::has_header() const {
  return _internal_has_header();
}
inline void GetHeaderResponse::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::execution::Header& GetHeaderResponse::_internal_header() const {
  const ::execution::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::execution::Header&>(
      ::execution::_Header_default_instance_);
}
inline const ::execution::Header& GetHeaderResponse::header() const {
  // @@protoc_insertion_point(field_get:execution.GetHeaderResponse.header)
  return _internal_header();
}
inline void GetHeaderResponse::unsafe_arena_set_allocated_header(
    ::execution::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.GetHeaderResponse.header)
}
inline ::execution::Header* GetHeaderResponse::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::execution::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::execution::Header* GetHeaderResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:execution.GetHeaderResponse.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::execution::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::execution::Header* GetHeaderResponse::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::execution::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::execution::Header* GetHeaderResponse::mutable_header() {
  ::execution::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:execution.GetHeaderResponse.header)
  return _msg;
}
inline void GetHeaderResponse::set_allocated_header(::execution::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:execution.GetHeaderResponse.header)
}

// -------------------------------------------------------------------

// GetBodyResponse

// optional .execution.BlockBody body = 1;
inline bool GetBodyResponse::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline bool GetBodyResponse::has_body() const {
  return _internal_has_body();
}
inline void GetBodyResponse::clear_body() {
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::execution::BlockBody& GetBodyResponse::_internal_body() const {
  const ::execution::BlockBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::execution::BlockBody&>(
      ::execution::_BlockBody_default_instance_);
}
inline const ::execution::BlockBody& GetBodyResponse::body() const {
  // @@protoc_insertion_point(field_get:execution.GetBodyResponse.body)
  return _internal_body();
}
inline void GetBodyResponse::unsafe_arena_set_allocated_body(
    ::execution::BlockBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.GetBodyResponse.body)
}
inline ::execution::BlockBody* GetBodyResponse::release_body() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::execution::BlockBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::execution::BlockBody* GetBodyResponse::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:execution.GetBodyResponse.body)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::execution::BlockBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::execution::BlockBody* GetBodyResponse::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::execution::BlockBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::execution::BlockBody* GetBodyResponse::mutable_body() {
  ::execution::BlockBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:execution.GetBodyResponse.body)
  return _msg;
}
inline void GetBodyResponse::set_allocated_body(::execution::BlockBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:execution.GetBodyResponse.body)
}

// -------------------------------------------------------------------

// GetHeaderHashNumberResponse

// optional uint64 blockNumber = 1;
inline bool GetHeaderHashNumberResponse::_internal_has_blocknumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetHeaderHashNumberResponse::has_blocknumber() const {
  return _internal_has_blocknumber();
}
inline void GetHeaderHashNumberResponse::clear_blocknumber() {
  _impl_.blocknumber_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t GetHeaderHashNumberResponse::_internal_blocknumber() const {
  return _impl_.blocknumber_;
}
inline uint64_t GetHeaderHashNumberResponse::blocknumber() const {
  // @@protoc_insertion_point(field_get:execution.GetHeaderHashNumberResponse.blockNumber)
  return _internal_blocknumber();
}
inline void GetHeaderHashNumberResponse::_internal_set_blocknumber(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.blocknumber_ = value;
}
inline void GetHeaderHashNumberResponse::set_blocknumber(uint64_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:execution.GetHeaderHashNumberResponse.blockNumber)
}

// -------------------------------------------------------------------

// GetSegmentRequest

// optional uint64 blockNumber = 1;
inline bool GetSegmentRequest::_internal_has_blocknumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSegmentRequest::has_blocknumber() const {
  return _internal_has_blocknumber();
}
inline void GetSegmentRequest::clear_blocknumber() {
  _impl_.blocknumber_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t GetSegmentRequest::_internal_blocknumber() const {
  return _impl_.blocknumber_;
}
inline uint64_t GetSegmentRequest::blocknumber() const {
  // @@protoc_insertion_point(field_get:execution.GetSegmentRequest.blockNumber)
  return _internal_blocknumber();
}
inline void GetSegmentRequest::_internal_set_blocknumber(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.blocknumber_ = value;
}
inline void GetSegmentRequest::set_blocknumber(uint64_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:execution.GetSegmentRequest.blockNumber)
}

// optional .types.H256 blockHash = 2;
inline bool GetSegmentRequest::_internal_has_blockhash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blockhash_ != nullptr);
  return value;
}
inline bool GetSegmentRequest::has_blockhash() const {
  return _internal_has_blockhash();
}
inline const ::types::H256& GetSegmentRequest::_internal_blockhash() const {
  const ::types::H256* p = _impl_.blockhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& GetSegmentRequest::blockhash() const {
  // @@protoc_insertion_point(field_get:execution.GetSegmentRequest.blockHash)
  return _internal_blockhash();
}
inline void GetSegmentRequest::unsafe_arena_set_allocated_blockhash(
    ::types::H256* blockhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockhash_);
  }
  _impl_.blockhash_ = blockhash;
  if (blockhash) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:execution.GetSegmentRequest.blockHash)
}
inline ::types::H256* GetSegmentRequest::release_blockhash() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H256* temp = _impl_.blockhash_;
  _impl_.blockhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* GetSegmentRequest::unsafe_arena_release_blockhash() {
  // @@protoc_insertion_point(field_release:execution.GetSegmentRequest.blockHash)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::types::H256* temp = _impl_.blockhash_;
  _impl_.blockhash_ = nullptr;
  return temp;
}
inline ::types::H256* GetSegmentRequest::_internal_mutable_blockhash() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.blockhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.blockhash_ = p;
  }
  return _impl_.blockhash_;
}
inline ::types::H256* GetSegmentRequest::mutable_blockhash() {
  ::types::H256* _msg = _internal_mutable_blockhash();
  // @@protoc_insertion_point(field_mutable:execution.GetSegmentRequest.blockHash)
  return _msg;
}
inline void GetSegmentRequest::set_allocated_blockhash(::types::H256* blockhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockhash_);
  }
  if (blockhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blockhash));
    if (message_arena != submessage_arena) {
      blockhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockhash, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.blockhash_ = blockhash;
  // @@protoc_insertion_point(field_set_allocated:execution.GetSegmentRequest.blockHash)
}

// -------------------------------------------------------------------

// InsertHeadersRequest

// repeated .execution.Header headers = 1;
inline int InsertHeadersRequest::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int InsertHeadersRequest::headers_size() const {
  return _internal_headers_size();
}
inline void InsertHeadersRequest::clear_headers() {
  _impl_.headers_.Clear();
}
inline ::execution::Header* InsertHeadersRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:execution.InsertHeadersRequest.headers)
  return _impl_.headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >*
InsertHeadersRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:execution.InsertHeadersRequest.headers)
  return &_impl_.headers_;
}
inline const ::execution::Header& InsertHeadersRequest::_internal_headers(int index) const {
  return _impl_.headers_.Get(index);
}
inline const ::execution::Header& InsertHeadersRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:execution.InsertHeadersRequest.headers)
  return _internal_headers(index);
}
inline ::execution::Header* InsertHeadersRequest::_internal_add_headers() {
  return _impl_.headers_.Add();
}
inline ::execution::Header* InsertHeadersRequest::add_headers() {
  ::execution::Header* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:execution.InsertHeadersRequest.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::Header >&
InsertHeadersRequest::headers() const {
  // @@protoc_insertion_point(field_list:execution.InsertHeadersRequest.headers)
  return _impl_.headers_;
}

// -------------------------------------------------------------------

// InsertBodiesRequest

// repeated .execution.BlockBody bodies = 1;
inline int InsertBodiesRequest::_internal_bodies_size() const {
  return _impl_.bodies_.size();
}
inline int InsertBodiesRequest::bodies_size() const {
  return _internal_bodies_size();
}
inline void InsertBodiesRequest::clear_bodies() {
  _impl_.bodies_.Clear();
}
inline ::execution::BlockBody* InsertBodiesRequest::mutable_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:execution.InsertBodiesRequest.bodies)
  return _impl_.bodies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::BlockBody >*
InsertBodiesRequest::mutable_bodies() {
  // @@protoc_insertion_point(field_mutable_list:execution.InsertBodiesRequest.bodies)
  return &_impl_.bodies_;
}
inline const ::execution::BlockBody& InsertBodiesRequest::_internal_bodies(int index) const {
  return _impl_.bodies_.Get(index);
}
inline const ::execution::BlockBody& InsertBodiesRequest::bodies(int index) const {
  // @@protoc_insertion_point(field_get:execution.InsertBodiesRequest.bodies)
  return _internal_bodies(index);
}
inline ::execution::BlockBody* InsertBodiesRequest::_internal_add_bodies() {
  return _impl_.bodies_.Add();
}
inline ::execution::BlockBody* InsertBodiesRequest::add_bodies() {
  ::execution::BlockBody* _add = _internal_add_bodies();
  // @@protoc_insertion_point(field_add:execution.InsertBodiesRequest.bodies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::execution::BlockBody >&
InsertBodiesRequest::bodies() const {
  // @@protoc_insertion_point(field_list:execution.InsertBodiesRequest.bodies)
  return _impl_.bodies_;
}

// -------------------------------------------------------------------

// EmptyMessage

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace execution

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::execution::ValidationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::execution::ValidationStatus>() {
  return ::execution::ValidationStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_execution_2fexecution_2eproto
