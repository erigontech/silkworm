// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution/execution.proto

#include "execution/execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_execution_2fexecution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BlockBody_execution_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_execution_2fexecution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_execution_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H160_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H2048_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H256_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Withdrawal_types_2ftypes_2eproto;
namespace execution {
class ForkChoiceReceiptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForkChoiceReceipt> _instance;
} _ForkChoiceReceipt_default_instance_;
class ValidationReceiptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidationReceipt> _instance;
} _ValidationReceipt_default_instance_;
class IsCanonicalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCanonicalResponse> _instance;
} _IsCanonicalResponse_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class BlockBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockBody> _instance;
} _BlockBody_default_instance_;
class GetHeaderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHeaderResponse> _instance;
} _GetHeaderResponse_default_instance_;
class GetBodyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBodyResponse> _instance;
} _GetBodyResponse_default_instance_;
class GetHeaderHashNumberResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHeaderHashNumberResponse> _instance;
} _GetHeaderHashNumberResponse_default_instance_;
class GetSegmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSegmentRequest> _instance;
} _GetSegmentRequest_default_instance_;
class InsertHeadersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertHeadersRequest> _instance;
} _InsertHeadersRequest_default_instance_;
class InsertBodiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertBodiesRequest> _instance;
} _InsertBodiesRequest_default_instance_;
class EmptyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyMessage> _instance;
} _EmptyMessage_default_instance_;
}  // namespace execution
static void InitDefaultsscc_info_BlockBody_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_BlockBody_default_instance_;
    new (ptr) ::execution::BlockBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BlockBody_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BlockBody_execution_2fexecution_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,
      &scc_info_Header_execution_2fexecution_2eproto.base,
      &scc_info_Withdrawal_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_EmptyMessage_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_EmptyMessage_default_instance_;
    new (ptr) ::execution::EmptyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyMessage_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmptyMessage_execution_2fexecution_2eproto}, {}};

static void InitDefaultsscc_info_ForkChoiceReceipt_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_ForkChoiceReceipt_default_instance_;
    new (ptr) ::execution::ForkChoiceReceipt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForkChoiceReceipt_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ForkChoiceReceipt_execution_2fexecution_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetBodyResponse_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_GetBodyResponse_default_instance_;
    new (ptr) ::execution::GetBodyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBodyResponse_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBodyResponse_execution_2fexecution_2eproto}, {
      &scc_info_BlockBody_execution_2fexecution_2eproto.base,}};

static void InitDefaultsscc_info_GetHeaderHashNumberResponse_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_GetHeaderHashNumberResponse_default_instance_;
    new (ptr) ::execution::GetHeaderHashNumberResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHeaderHashNumberResponse_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHeaderHashNumberResponse_execution_2fexecution_2eproto}, {}};

static void InitDefaultsscc_info_GetHeaderResponse_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_GetHeaderResponse_default_instance_;
    new (ptr) ::execution::GetHeaderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHeaderResponse_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHeaderResponse_execution_2fexecution_2eproto}, {
      &scc_info_Header_execution_2fexecution_2eproto.base,}};

static void InitDefaultsscc_info_GetSegmentRequest_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_GetSegmentRequest_default_instance_;
    new (ptr) ::execution::GetSegmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSegmentRequest_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSegmentRequest_execution_2fexecution_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Header_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_Header_default_instance_;
    new (ptr) ::execution::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Header_execution_2fexecution_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,
      &scc_info_H160_types_2ftypes_2eproto.base,
      &scc_info_H2048_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_InsertBodiesRequest_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_InsertBodiesRequest_default_instance_;
    new (ptr) ::execution::InsertBodiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertBodiesRequest_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertBodiesRequest_execution_2fexecution_2eproto}, {
      &scc_info_BlockBody_execution_2fexecution_2eproto.base,}};

static void InitDefaultsscc_info_InsertHeadersRequest_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_InsertHeadersRequest_default_instance_;
    new (ptr) ::execution::InsertHeadersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertHeadersRequest_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertHeadersRequest_execution_2fexecution_2eproto}, {
      &scc_info_Header_execution_2fexecution_2eproto.base,}};

static void InitDefaultsscc_info_IsCanonicalResponse_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_IsCanonicalResponse_default_instance_;
    new (ptr) ::execution::IsCanonicalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCanonicalResponse_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCanonicalResponse_execution_2fexecution_2eproto}, {}};

static void InitDefaultsscc_info_ValidationReceipt_execution_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::execution::_ValidationReceipt_default_instance_;
    new (ptr) ::execution::ValidationReceipt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidationReceipt_execution_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidationReceipt_execution_2fexecution_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_execution_2fexecution_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_execution_2fexecution_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_execution_2fexecution_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_execution_2fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, success_),
  PROTOBUF_FIELD_OFFSET(::execution::ForkChoiceReceipt, latestvalidhash_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, validationstatus_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, latestvalidhash_),
  PROTOBUF_FIELD_OFFSET(::execution::ValidationReceipt, missinghash_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::IsCanonicalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::IsCanonicalResponse, canonical_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::Header, parenthash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, coinbase_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, stateroot_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, receiptroot_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, logsbloom_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, mixdigest_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, gaslimit_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, gasused_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, timestamp_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, nonce_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, extradata_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, difficulty_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, blockhash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, ommerhash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, transactionhash_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, basefeepergas_),
  PROTOBUF_FIELD_OFFSET(::execution::Header, withdrawalhash_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, blockhash_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, transactions_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, uncles_),
  PROTOBUF_FIELD_OFFSET(::execution::BlockBody, withdrawals_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderResponse, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::GetBodyResponse, body_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::GetHeaderHashNumberResponse, blocknumber_),
  0,
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::execution::GetSegmentRequest, blockhash_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::InsertHeadersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::InsertHeadersRequest, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::InsertBodiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::execution::InsertBodiesRequest, bodies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::execution::EmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::execution::ForkChoiceReceipt)},
  { 7, 15, sizeof(::execution::ValidationReceipt)},
  { 18, -1, sizeof(::execution::IsCanonicalResponse)},
  { 24, 47, sizeof(::execution::Header)},
  { 65, -1, sizeof(::execution::BlockBody)},
  { 75, 81, sizeof(::execution::GetHeaderResponse)},
  { 82, 88, sizeof(::execution::GetBodyResponse)},
  { 89, 95, sizeof(::execution::GetHeaderHashNumberResponse)},
  { 96, 103, sizeof(::execution::GetSegmentRequest)},
  { 105, -1, sizeof(::execution::InsertHeadersRequest)},
  { 111, -1, sizeof(::execution::InsertBodiesRequest)},
  { 117, -1, sizeof(::execution::EmptyMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_ForkChoiceReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_ValidationReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_IsCanonicalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_BlockBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_GetHeaderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_GetBodyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_GetHeaderHashNumberResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_GetSegmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_InsertHeadersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_InsertBodiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::execution::_EmptyMessage_default_instance_),
};

const char descriptor_table_protodef_execution_2fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031execution/execution.proto\022\texecution\032\021"
  "types/types.proto\"J\n\021ForkChoiceReceipt\022\017"
  "\n\007success\030\001 \001(\010\022$\n\017latestValidHash\030\002 \001(\013"
  "2\013.types.H256\"\247\001\n\021ValidationReceipt\0225\n\020v"
  "alidationStatus\030\001 \001(\0162\033.execution.Valida"
  "tionStatus\022$\n\017latestValidHash\030\002 \001(\0132\013.ty"
  "pes.H256\022%\n\013missingHash\030\003 \001(\0132\013.types.H2"
  "56H\000\210\001\001B\016\n\014_missingHash\"(\n\023IsCanonicalRe"
  "sponse\022\021\n\tcanonical\030\001 \001(\010\"\267\004\n\006Header\022\037\n\n"
  "parentHash\030\001 \001(\0132\013.types.H256\022\035\n\010coinbas"
  "e\030\002 \001(\0132\013.types.H160\022\036\n\tstateRoot\030\003 \001(\0132"
  "\013.types.H256\022 \n\013receiptRoot\030\004 \001(\0132\013.type"
  "s.H256\022\037\n\tlogsBloom\030\005 \001(\0132\014.types.H2048\022"
  "\036\n\tmixDigest\030\006 \001(\0132\013.types.H256\022\023\n\013block"
  "Number\030\007 \001(\004\022\020\n\010gasLimit\030\010 \001(\004\022\017\n\007gasUse"
  "d\030\t \001(\004\022\021\n\ttimestamp\030\n \001(\004\022\r\n\005nonce\030\013 \001("
  "\004\022\021\n\textraData\030\014 \001(\014\022\037\n\ndifficulty\030\r \001(\013"
  "2\013.types.H256\022\036\n\tblockHash\030\016 \001(\0132\013.types"
  ".H256\022\036\n\tommerHash\030\017 \001(\0132\013.types.H256\022$\n"
  "\017transactionHash\030\020 \001(\0132\013.types.H256\022\'\n\rb"
  "aseFeePerGas\030\021 \001(\0132\013.types.H256H\000\210\001\001\022(\n\016"
  "withdrawalHash\030\022 \001(\0132\013.types.H256H\001\210\001\001B\020"
  "\n\016_baseFeePerGasB\021\n\017_withdrawalHash\"\241\001\n\t"
  "BlockBody\022\036\n\tblockHash\030\001 \001(\0132\013.types.H25"
  "6\022\023\n\013blockNumber\030\002 \001(\004\022\024\n\014transactions\030\003"
  " \003(\014\022!\n\006uncles\030\004 \003(\0132\021.execution.Header\022"
  "&\n\013withdrawals\030\005 \003(\0132\021.types.Withdrawal\""
  "F\n\021GetHeaderResponse\022&\n\006header\030\001 \001(\0132\021.e"
  "xecution.HeaderH\000\210\001\001B\t\n\007_header\"C\n\017GetBo"
  "dyResponse\022\'\n\004body\030\001 \001(\0132\024.execution.Blo"
  "ckBodyH\000\210\001\001B\007\n\005_body\"G\n\033GetHeaderHashNum"
  "berResponse\022\030\n\013blockNumber\030\001 \001(\004H\000\210\001\001B\016\n"
  "\014_blockNumber\"p\n\021GetSegmentRequest\022\030\n\013bl"
  "ockNumber\030\001 \001(\004H\000\210\001\001\022#\n\tblockHash\030\002 \001(\0132"
  "\013.types.H256H\001\210\001\001B\016\n\014_blockNumberB\014\n\n_bl"
  "ockHash\":\n\024InsertHeadersRequest\022\"\n\007heade"
  "rs\030\001 \003(\0132\021.execution.Header\";\n\023InsertBod"
  "iesRequest\022$\n\006bodies\030\001 \003(\0132\024.execution.B"
  "lockBody\"\016\n\014EmptyMessage*U\n\020ValidationSt"
  "atus\022\013\n\007Success\020\000\022\020\n\014InvalidChain\020\001\022\016\n\nT"
  "ooFarAway\020\002\022\022\n\016MissingSegment\020\0032\367\004\n\tExec"
  "ution\022I\n\rInsertHeaders\022\037.execution.Inser"
  "tHeadersRequest\032\027.execution.EmptyMessage"
  "\022G\n\014InsertBodies\022\036.execution.InsertBodie"
  "sRequest\032\027.execution.EmptyMessage\022:\n\rVal"
  "idateChain\022\013.types.H256\032\034.execution.Vali"
  "dationReceipt\022=\n\020UpdateForkChoice\022\013.type"
  "s.H256\032\034.execution.ForkChoiceReceipt\022A\n\r"
  "AssembleBlock\022\027.execution.EmptyMessage\032\027"
  ".types.ExecutionPayload\022G\n\tGetHeader\022\034.e"
  "xecution.GetSegmentRequest\032\034.execution.G"
  "etHeaderResponse\022C\n\007GetBody\022\034.execution."
  "GetSegmentRequest\032\032.execution.GetBodyRes"
  "ponse\022>\n\017IsCanonicalHash\022\013.types.H256\032\036."
  "execution.IsCanonicalResponse\022J\n\023GetHead"
  "erHashNumber\022\013.types.H256\032&.execution.Ge"
  "tHeaderHashNumberResponseB\027Z\025./execution"
  ";executionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_execution_2fexecution_2eproto_deps[1] = {
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_execution_2fexecution_2eproto_sccs[12] = {
  &scc_info_BlockBody_execution_2fexecution_2eproto.base,
  &scc_info_EmptyMessage_execution_2fexecution_2eproto.base,
  &scc_info_ForkChoiceReceipt_execution_2fexecution_2eproto.base,
  &scc_info_GetBodyResponse_execution_2fexecution_2eproto.base,
  &scc_info_GetHeaderHashNumberResponse_execution_2fexecution_2eproto.base,
  &scc_info_GetHeaderResponse_execution_2fexecution_2eproto.base,
  &scc_info_GetSegmentRequest_execution_2fexecution_2eproto.base,
  &scc_info_Header_execution_2fexecution_2eproto.base,
  &scc_info_InsertBodiesRequest_execution_2fexecution_2eproto.base,
  &scc_info_InsertHeadersRequest_execution_2fexecution_2eproto.base,
  &scc_info_IsCanonicalResponse_execution_2fexecution_2eproto.base,
  &scc_info_ValidationReceipt_execution_2fexecution_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_execution_2fexecution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_execution_2fexecution_2eproto = {
  false, false, descriptor_table_protodef_execution_2fexecution_2eproto, "execution/execution.proto", 2298,
  &descriptor_table_execution_2fexecution_2eproto_once, descriptor_table_execution_2fexecution_2eproto_sccs, descriptor_table_execution_2fexecution_2eproto_deps, 12, 1,
  schemas, file_default_instances, TableStruct_execution_2fexecution_2eproto::offsets,
  file_level_metadata_execution_2fexecution_2eproto, 12, file_level_enum_descriptors_execution_2fexecution_2eproto, file_level_service_descriptors_execution_2fexecution_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_execution_2fexecution_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_execution_2fexecution_2eproto)), true);
namespace execution {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_execution_2fexecution_2eproto);
  return file_level_enum_descriptors_execution_2fexecution_2eproto[0];
}
bool ValidationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ForkChoiceReceipt::_Internal {
 public:
  static const ::types::H256& latestvalidhash(const ForkChoiceReceipt* msg);
};

const ::types::H256&
ForkChoiceReceipt::_Internal::latestvalidhash(const ForkChoiceReceipt* msg) {
  return *msg->latestvalidhash_;
}
void ForkChoiceReceipt::clear_latestvalidhash() {
  if (GetArena() == nullptr && latestvalidhash_ != nullptr) {
    delete latestvalidhash_;
  }
  latestvalidhash_ = nullptr;
}
ForkChoiceReceipt::ForkChoiceReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.ForkChoiceReceipt)
}
ForkChoiceReceipt::ForkChoiceReceipt(const ForkChoiceReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_latestvalidhash()) {
    latestvalidhash_ = new ::types::H256(*from.latestvalidhash_);
  } else {
    latestvalidhash_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:execution.ForkChoiceReceipt)
}

void ForkChoiceReceipt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForkChoiceReceipt_execution_2fexecution_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latestvalidhash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&latestvalidhash_)) + sizeof(success_));
}

ForkChoiceReceipt::~ForkChoiceReceipt() {
  // @@protoc_insertion_point(destructor:execution.ForkChoiceReceipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForkChoiceReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete latestvalidhash_;
}

void ForkChoiceReceipt::ArenaDtor(void* object) {
  ForkChoiceReceipt* _this = reinterpret_cast< ForkChoiceReceipt* >(object);
  (void)_this;
}
void ForkChoiceReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForkChoiceReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForkChoiceReceipt& ForkChoiceReceipt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForkChoiceReceipt_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ForkChoiceReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ForkChoiceReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && latestvalidhash_ != nullptr) {
    delete latestvalidhash_;
  }
  latestvalidhash_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForkChoiceReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 latestValidHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latestvalidhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForkChoiceReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ForkChoiceReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .types.H256 latestValidHash = 2;
  if (this->has_latestvalidhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::latestvalidhash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ForkChoiceReceipt)
  return target;
}

size_t ForkChoiceReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ForkChoiceReceipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 latestValidHash = 2;
  if (this->has_latestvalidhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latestvalidhash_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForkChoiceReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.ForkChoiceReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const ForkChoiceReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForkChoiceReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.ForkChoiceReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.ForkChoiceReceipt)
    MergeFrom(*source);
  }
}

void ForkChoiceReceipt::MergeFrom(const ForkChoiceReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.ForkChoiceReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_latestvalidhash()) {
    _internal_mutable_latestvalidhash()->::types::H256::MergeFrom(from._internal_latestvalidhash());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ForkChoiceReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.ForkChoiceReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForkChoiceReceipt::CopyFrom(const ForkChoiceReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ForkChoiceReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkChoiceReceipt::IsInitialized() const {
  return true;
}

void ForkChoiceReceipt::InternalSwap(ForkChoiceReceipt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForkChoiceReceipt, success_)
      + sizeof(ForkChoiceReceipt::success_)
      - PROTOBUF_FIELD_OFFSET(ForkChoiceReceipt, latestvalidhash_)>(
          reinterpret_cast<char*>(&latestvalidhash_),
          reinterpret_cast<char*>(&other->latestvalidhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForkChoiceReceipt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidationReceipt::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidationReceipt>()._has_bits_);
  static const ::types::H256& latestvalidhash(const ValidationReceipt* msg);
  static const ::types::H256& missinghash(const ValidationReceipt* msg);
  static void set_has_missinghash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
ValidationReceipt::_Internal::latestvalidhash(const ValidationReceipt* msg) {
  return *msg->latestvalidhash_;
}
const ::types::H256&
ValidationReceipt::_Internal::missinghash(const ValidationReceipt* msg) {
  return *msg->missinghash_;
}
void ValidationReceipt::clear_latestvalidhash() {
  if (GetArena() == nullptr && latestvalidhash_ != nullptr) {
    delete latestvalidhash_;
  }
  latestvalidhash_ = nullptr;
}
void ValidationReceipt::clear_missinghash() {
  if (GetArena() == nullptr && missinghash_ != nullptr) {
    delete missinghash_;
  }
  missinghash_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
ValidationReceipt::ValidationReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.ValidationReceipt)
}
ValidationReceipt::ValidationReceipt(const ValidationReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_latestvalidhash()) {
    latestvalidhash_ = new ::types::H256(*from.latestvalidhash_);
  } else {
    latestvalidhash_ = nullptr;
  }
  if (from._internal_has_missinghash()) {
    missinghash_ = new ::types::H256(*from.missinghash_);
  } else {
    missinghash_ = nullptr;
  }
  validationstatus_ = from.validationstatus_;
  // @@protoc_insertion_point(copy_constructor:execution.ValidationReceipt)
}

void ValidationReceipt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidationReceipt_execution_2fexecution_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&latestvalidhash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&validationstatus_) -
      reinterpret_cast<char*>(&latestvalidhash_)) + sizeof(validationstatus_));
}

ValidationReceipt::~ValidationReceipt() {
  // @@protoc_insertion_point(destructor:execution.ValidationReceipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidationReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete latestvalidhash_;
  if (this != internal_default_instance()) delete missinghash_;
}

void ValidationReceipt::ArenaDtor(void* object) {
  ValidationReceipt* _this = reinterpret_cast< ValidationReceipt* >(object);
  (void)_this;
}
void ValidationReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidationReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationReceipt& ValidationReceipt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidationReceipt_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ValidationReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.ValidationReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && latestvalidhash_ != nullptr) {
    delete latestvalidhash_;
  }
  latestvalidhash_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && missinghash_ != nullptr) {
      delete missinghash_;
    }
    missinghash_ = nullptr;
  }
  validationstatus_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidationReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .execution.ValidationStatus validationStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_validationstatus(static_cast<::execution::ValidationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .types.H256 latestValidHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latestvalidhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 missingHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_missinghash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidationReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.ValidationReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.ValidationStatus validationStatus = 1;
  if (this->validationstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_validationstatus(), target);
  }

  // .types.H256 latestValidHash = 2;
  if (this->has_latestvalidhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::latestvalidhash(this), target, stream);
  }

  // .types.H256 missingHash = 3;
  if (_internal_has_missinghash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::missinghash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.ValidationReceipt)
  return target;
}

size_t ValidationReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.ValidationReceipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 latestValidHash = 2;
  if (this->has_latestvalidhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latestvalidhash_);
  }

  // .types.H256 missingHash = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *missinghash_);
  }

  // .execution.ValidationStatus validationStatus = 1;
  if (this->validationstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_validationstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.ValidationReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidationReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.ValidationReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.ValidationReceipt)
    MergeFrom(*source);
  }
}

void ValidationReceipt::MergeFrom(const ValidationReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.ValidationReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_latestvalidhash()) {
    _internal_mutable_latestvalidhash()->::types::H256::MergeFrom(from._internal_latestvalidhash());
  }
  if (from._internal_has_missinghash()) {
    _internal_mutable_missinghash()->::types::H256::MergeFrom(from._internal_missinghash());
  }
  if (from.validationstatus() != 0) {
    _internal_set_validationstatus(from._internal_validationstatus());
  }
}

void ValidationReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.ValidationReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationReceipt::CopyFrom(const ValidationReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.ValidationReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationReceipt::IsInitialized() const {
  return true;
}

void ValidationReceipt::InternalSwap(ValidationReceipt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidationReceipt, validationstatus_)
      + sizeof(ValidationReceipt::validationstatus_)
      - PROTOBUF_FIELD_OFFSET(ValidationReceipt, latestvalidhash_)>(
          reinterpret_cast<char*>(&latestvalidhash_),
          reinterpret_cast<char*>(&other->latestvalidhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationReceipt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IsCanonicalResponse::_Internal {
 public:
};

IsCanonicalResponse::IsCanonicalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.IsCanonicalResponse)
}
IsCanonicalResponse::IsCanonicalResponse(const IsCanonicalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  canonical_ = from.canonical_;
  // @@protoc_insertion_point(copy_constructor:execution.IsCanonicalResponse)
}

void IsCanonicalResponse::SharedCtor() {
  canonical_ = false;
}

IsCanonicalResponse::~IsCanonicalResponse() {
  // @@protoc_insertion_point(destructor:execution.IsCanonicalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsCanonicalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsCanonicalResponse::ArenaDtor(void* object) {
  IsCanonicalResponse* _this = reinterpret_cast< IsCanonicalResponse* >(object);
  (void)_this;
}
void IsCanonicalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsCanonicalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCanonicalResponse& IsCanonicalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCanonicalResponse_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void IsCanonicalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.IsCanonicalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  canonical_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCanonicalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool canonical = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          canonical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCanonicalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.IsCanonicalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool canonical = 1;
  if (this->canonical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_canonical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.IsCanonicalResponse)
  return target;
}

size_t IsCanonicalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.IsCanonicalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool canonical = 1;
  if (this->canonical() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCanonicalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.IsCanonicalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCanonicalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCanonicalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.IsCanonicalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.IsCanonicalResponse)
    MergeFrom(*source);
  }
}

void IsCanonicalResponse::MergeFrom(const IsCanonicalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.IsCanonicalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.canonical() != 0) {
    _internal_set_canonical(from._internal_canonical());
  }
}

void IsCanonicalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.IsCanonicalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCanonicalResponse::CopyFrom(const IsCanonicalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.IsCanonicalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCanonicalResponse::IsInitialized() const {
  return true;
}

void IsCanonicalResponse::InternalSwap(IsCanonicalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(canonical_, other->canonical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCanonicalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static const ::types::H256& parenthash(const Header* msg);
  static const ::types::H160& coinbase(const Header* msg);
  static const ::types::H256& stateroot(const Header* msg);
  static const ::types::H256& receiptroot(const Header* msg);
  static const ::types::H2048& logsbloom(const Header* msg);
  static const ::types::H256& mixdigest(const Header* msg);
  static const ::types::H256& difficulty(const Header* msg);
  static const ::types::H256& blockhash(const Header* msg);
  static const ::types::H256& ommerhash(const Header* msg);
  static const ::types::H256& transactionhash(const Header* msg);
  static const ::types::H256& basefeepergas(const Header* msg);
  static void set_has_basefeepergas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::types::H256& withdrawalhash(const Header* msg);
  static void set_has_withdrawalhash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::types::H256&
Header::_Internal::parenthash(const Header* msg) {
  return *msg->parenthash_;
}
const ::types::H160&
Header::_Internal::coinbase(const Header* msg) {
  return *msg->coinbase_;
}
const ::types::H256&
Header::_Internal::stateroot(const Header* msg) {
  return *msg->stateroot_;
}
const ::types::H256&
Header::_Internal::receiptroot(const Header* msg) {
  return *msg->receiptroot_;
}
const ::types::H2048&
Header::_Internal::logsbloom(const Header* msg) {
  return *msg->logsbloom_;
}
const ::types::H256&
Header::_Internal::mixdigest(const Header* msg) {
  return *msg->mixdigest_;
}
const ::types::H256&
Header::_Internal::difficulty(const Header* msg) {
  return *msg->difficulty_;
}
const ::types::H256&
Header::_Internal::blockhash(const Header* msg) {
  return *msg->blockhash_;
}
const ::types::H256&
Header::_Internal::ommerhash(const Header* msg) {
  return *msg->ommerhash_;
}
const ::types::H256&
Header::_Internal::transactionhash(const Header* msg) {
  return *msg->transactionhash_;
}
const ::types::H256&
Header::_Internal::basefeepergas(const Header* msg) {
  return *msg->basefeepergas_;
}
const ::types::H256&
Header::_Internal::withdrawalhash(const Header* msg) {
  return *msg->withdrawalhash_;
}
void Header::clear_parenthash() {
  if (GetArena() == nullptr && parenthash_ != nullptr) {
    delete parenthash_;
  }
  parenthash_ = nullptr;
}
void Header::clear_coinbase() {
  if (GetArena() == nullptr && coinbase_ != nullptr) {
    delete coinbase_;
  }
  coinbase_ = nullptr;
}
void Header::clear_stateroot() {
  if (GetArena() == nullptr && stateroot_ != nullptr) {
    delete stateroot_;
  }
  stateroot_ = nullptr;
}
void Header::clear_receiptroot() {
  if (GetArena() == nullptr && receiptroot_ != nullptr) {
    delete receiptroot_;
  }
  receiptroot_ = nullptr;
}
void Header::clear_logsbloom() {
  if (GetArena() == nullptr && logsbloom_ != nullptr) {
    delete logsbloom_;
  }
  logsbloom_ = nullptr;
}
void Header::clear_mixdigest() {
  if (GetArena() == nullptr && mixdigest_ != nullptr) {
    delete mixdigest_;
  }
  mixdigest_ = nullptr;
}
void Header::clear_difficulty() {
  if (GetArena() == nullptr && difficulty_ != nullptr) {
    delete difficulty_;
  }
  difficulty_ = nullptr;
}
void Header::clear_blockhash() {
  if (GetArena() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
}
void Header::clear_ommerhash() {
  if (GetArena() == nullptr && ommerhash_ != nullptr) {
    delete ommerhash_;
  }
  ommerhash_ = nullptr;
}
void Header::clear_transactionhash() {
  if (GetArena() == nullptr && transactionhash_ != nullptr) {
    delete transactionhash_;
  }
  transactionhash_ = nullptr;
}
void Header::clear_basefeepergas() {
  if (GetArena() == nullptr && basefeepergas_ != nullptr) {
    delete basefeepergas_;
  }
  basefeepergas_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_withdrawalhash() {
  if (GetArena() == nullptr && withdrawalhash_ != nullptr) {
    delete withdrawalhash_;
  }
  withdrawalhash_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extradata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extradata().empty()) {
    extradata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extradata(), 
      GetArena());
  }
  if (from._internal_has_parenthash()) {
    parenthash_ = new ::types::H256(*from.parenthash_);
  } else {
    parenthash_ = nullptr;
  }
  if (from._internal_has_coinbase()) {
    coinbase_ = new ::types::H160(*from.coinbase_);
  } else {
    coinbase_ = nullptr;
  }
  if (from._internal_has_stateroot()) {
    stateroot_ = new ::types::H256(*from.stateroot_);
  } else {
    stateroot_ = nullptr;
  }
  if (from._internal_has_receiptroot()) {
    receiptroot_ = new ::types::H256(*from.receiptroot_);
  } else {
    receiptroot_ = nullptr;
  }
  if (from._internal_has_logsbloom()) {
    logsbloom_ = new ::types::H2048(*from.logsbloom_);
  } else {
    logsbloom_ = nullptr;
  }
  if (from._internal_has_mixdigest()) {
    mixdigest_ = new ::types::H256(*from.mixdigest_);
  } else {
    mixdigest_ = nullptr;
  }
  if (from._internal_has_difficulty()) {
    difficulty_ = new ::types::H256(*from.difficulty_);
  } else {
    difficulty_ = nullptr;
  }
  if (from._internal_has_blockhash()) {
    blockhash_ = new ::types::H256(*from.blockhash_);
  } else {
    blockhash_ = nullptr;
  }
  if (from._internal_has_ommerhash()) {
    ommerhash_ = new ::types::H256(*from.ommerhash_);
  } else {
    ommerhash_ = nullptr;
  }
  if (from._internal_has_transactionhash()) {
    transactionhash_ = new ::types::H256(*from.transactionhash_);
  } else {
    transactionhash_ = nullptr;
  }
  if (from._internal_has_basefeepergas()) {
    basefeepergas_ = new ::types::H256(*from.basefeepergas_);
  } else {
    basefeepergas_ = nullptr;
  }
  if (from._internal_has_withdrawalhash()) {
    withdrawalhash_ = new ::types::H256(*from.withdrawalhash_);
  } else {
    withdrawalhash_ = nullptr;
  }
  ::memcpy(&blocknumber_, &from.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:execution.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_execution_2fexecution_2eproto.base);
  extradata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parenthash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&parenthash_)) + sizeof(nonce_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:execution.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  extradata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parenthash_;
  if (this != internal_default_instance()) delete coinbase_;
  if (this != internal_default_instance()) delete stateroot_;
  if (this != internal_default_instance()) delete receiptroot_;
  if (this != internal_default_instance()) delete logsbloom_;
  if (this != internal_default_instance()) delete mixdigest_;
  if (this != internal_default_instance()) delete difficulty_;
  if (this != internal_default_instance()) delete blockhash_;
  if (this != internal_default_instance()) delete ommerhash_;
  if (this != internal_default_instance()) delete transactionhash_;
  if (this != internal_default_instance()) delete basefeepergas_;
  if (this != internal_default_instance()) delete withdrawalhash_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extradata_.ClearToEmpty();
  if (GetArena() == nullptr && parenthash_ != nullptr) {
    delete parenthash_;
  }
  parenthash_ = nullptr;
  if (GetArena() == nullptr && coinbase_ != nullptr) {
    delete coinbase_;
  }
  coinbase_ = nullptr;
  if (GetArena() == nullptr && stateroot_ != nullptr) {
    delete stateroot_;
  }
  stateroot_ = nullptr;
  if (GetArena() == nullptr && receiptroot_ != nullptr) {
    delete receiptroot_;
  }
  receiptroot_ = nullptr;
  if (GetArena() == nullptr && logsbloom_ != nullptr) {
    delete logsbloom_;
  }
  logsbloom_ = nullptr;
  if (GetArena() == nullptr && mixdigest_ != nullptr) {
    delete mixdigest_;
  }
  mixdigest_ = nullptr;
  if (GetArena() == nullptr && difficulty_ != nullptr) {
    delete difficulty_;
  }
  difficulty_ = nullptr;
  if (GetArena() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
  if (GetArena() == nullptr && ommerhash_ != nullptr) {
    delete ommerhash_;
  }
  ommerhash_ = nullptr;
  if (GetArena() == nullptr && transactionhash_ != nullptr) {
    delete transactionhash_;
  }
  transactionhash_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && basefeepergas_ != nullptr) {
        delete basefeepergas_;
      }
      basefeepergas_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && withdrawalhash_ != nullptr) {
        delete withdrawalhash_;
      }
      withdrawalhash_ = nullptr;
    }
  }
  ::memset(&blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&blocknumber_)) + sizeof(nonce_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H256 parentHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parenthash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H160 coinbase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coinbase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 stateRoot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stateroot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 receiptRoot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiptroot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H2048 logsBloom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_logsbloom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 mixDigest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixdigest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blockNumber = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gasLimit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gaslimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gasUsed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gasused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extraData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_extradata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 difficulty = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_difficulty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 blockHash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 ommerHash = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ommerhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 transactionHash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactionhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 baseFeePerGas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_basefeepergas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 withdrawalHash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawalhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 parentHash = 1;
  if (this->has_parenthash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parenthash(this), target, stream);
  }

  // .types.H160 coinbase = 2;
  if (this->has_coinbase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coinbase(this), target, stream);
  }

  // .types.H256 stateRoot = 3;
  if (this->has_stateroot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stateroot(this), target, stream);
  }

  // .types.H256 receiptRoot = 4;
  if (this->has_receiptroot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::receiptroot(this), target, stream);
  }

  // .types.H2048 logsBloom = 5;
  if (this->has_logsbloom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::logsbloom(this), target, stream);
  }

  // .types.H256 mixDigest = 6;
  if (this->has_mixdigest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mixdigest(this), target, stream);
  }

  // uint64 blockNumber = 7;
  if (this->blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_blocknumber(), target);
  }

  // uint64 gasLimit = 8;
  if (this->gaslimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gaslimit(), target);
  }

  // uint64 gasUsed = 9;
  if (this->gasused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gasused(), target);
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // uint64 nonce = 11;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_nonce(), target);
  }

  // bytes extraData = 12;
  if (this->extradata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extradata(), target);
  }

  // .types.H256 difficulty = 13;
  if (this->has_difficulty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::difficulty(this), target, stream);
  }

  // .types.H256 blockHash = 14;
  if (this->has_blockhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::blockhash(this), target, stream);
  }

  // .types.H256 ommerHash = 15;
  if (this->has_ommerhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::ommerhash(this), target, stream);
  }

  // .types.H256 transactionHash = 16;
  if (this->has_transactionhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::transactionhash(this), target, stream);
  }

  // .types.H256 baseFeePerGas = 17;
  if (_internal_has_basefeepergas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::basefeepergas(this), target, stream);
  }

  // .types.H256 withdrawalHash = 18;
  if (_internal_has_withdrawalhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::withdrawalhash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes extraData = 12;
  if (this->extradata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extradata());
  }

  // .types.H256 parentHash = 1;
  if (this->has_parenthash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parenthash_);
  }

  // .types.H160 coinbase = 2;
  if (this->has_coinbase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coinbase_);
  }

  // .types.H256 stateRoot = 3;
  if (this->has_stateroot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stateroot_);
  }

  // .types.H256 receiptRoot = 4;
  if (this->has_receiptroot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiptroot_);
  }

  // .types.H2048 logsBloom = 5;
  if (this->has_logsbloom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logsbloom_);
  }

  // .types.H256 mixDigest = 6;
  if (this->has_mixdigest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixdigest_);
  }

  // .types.H256 difficulty = 13;
  if (this->has_difficulty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *difficulty_);
  }

  // .types.H256 blockHash = 14;
  if (this->has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockhash_);
  }

  // .types.H256 ommerHash = 15;
  if (this->has_ommerhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ommerhash_);
  }

  // .types.H256 transactionHash = 16;
  if (this->has_transactionhash()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transactionhash_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .types.H256 baseFeePerGas = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *basefeepergas_);
    }

    // .types.H256 withdrawalHash = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *withdrawalhash_);
    }

  }
  // uint64 blockNumber = 7;
  if (this->blocknumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blocknumber());
  }

  // uint64 gasLimit = 8;
  if (this->gaslimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gaslimit());
  }

  // uint64 gasUsed = 9;
  if (this->gasused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gasused());
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 nonce = 11;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.extradata().size() > 0) {
    _internal_set_extradata(from._internal_extradata());
  }
  if (from.has_parenthash()) {
    _internal_mutable_parenthash()->::types::H256::MergeFrom(from._internal_parenthash());
  }
  if (from.has_coinbase()) {
    _internal_mutable_coinbase()->::types::H160::MergeFrom(from._internal_coinbase());
  }
  if (from.has_stateroot()) {
    _internal_mutable_stateroot()->::types::H256::MergeFrom(from._internal_stateroot());
  }
  if (from.has_receiptroot()) {
    _internal_mutable_receiptroot()->::types::H256::MergeFrom(from._internal_receiptroot());
  }
  if (from.has_logsbloom()) {
    _internal_mutable_logsbloom()->::types::H2048::MergeFrom(from._internal_logsbloom());
  }
  if (from.has_mixdigest()) {
    _internal_mutable_mixdigest()->::types::H256::MergeFrom(from._internal_mixdigest());
  }
  if (from.has_difficulty()) {
    _internal_mutable_difficulty()->::types::H256::MergeFrom(from._internal_difficulty());
  }
  if (from.has_blockhash()) {
    _internal_mutable_blockhash()->::types::H256::MergeFrom(from._internal_blockhash());
  }
  if (from.has_ommerhash()) {
    _internal_mutable_ommerhash()->::types::H256::MergeFrom(from._internal_ommerhash());
  }
  if (from.has_transactionhash()) {
    _internal_mutable_transactionhash()->::types::H256::MergeFrom(from._internal_transactionhash());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_basefeepergas()->::types::H256::MergeFrom(from._internal_basefeepergas());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_withdrawalhash()->::types::H256::MergeFrom(from._internal_withdrawalhash());
    }
  }
  if (from.blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from.gaslimit() != 0) {
    _internal_set_gaslimit(from._internal_gaslimit());
  }
  if (from.gasused() != 0) {
    _internal_set_gasused(from._internal_gasused());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extradata_.Swap(&other->extradata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, nonce_)
      + sizeof(Header::nonce_)
      - PROTOBUF_FIELD_OFFSET(Header, parenthash_)>(
          reinterpret_cast<char*>(&parenthash_),
          reinterpret_cast<char*>(&other->parenthash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockBody::_Internal {
 public:
  static const ::types::H256& blockhash(const BlockBody* msg);
};

const ::types::H256&
BlockBody::_Internal::blockhash(const BlockBody* msg) {
  return *msg->blockhash_;
}
void BlockBody::clear_blockhash() {
  if (GetArena() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
}
void BlockBody::clear_withdrawals() {
  withdrawals_.Clear();
}
BlockBody::BlockBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena),
  uncles_(arena),
  withdrawals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.BlockBody)
}
BlockBody::BlockBody(const BlockBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_),
      uncles_(from.uncles_),
      withdrawals_(from.withdrawals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blockhash()) {
    blockhash_ = new ::types::H256(*from.blockhash_);
  } else {
    blockhash_ = nullptr;
  }
  blocknumber_ = from.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:execution.BlockBody)
}

void BlockBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockBody_execution_2fexecution_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&blockhash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blocknumber_) -
      reinterpret_cast<char*>(&blockhash_)) + sizeof(blocknumber_));
}

BlockBody::~BlockBody() {
  // @@protoc_insertion_point(destructor:execution.BlockBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blockhash_;
}

void BlockBody::ArenaDtor(void* object) {
  BlockBody* _this = reinterpret_cast< BlockBody* >(object);
  (void)_this;
}
void BlockBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockBody& BlockBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockBody_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void BlockBody::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.BlockBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  uncles_.Clear();
  withdrawals_.Clear();
  if (GetArena() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
  blocknumber_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H256 blockHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blockNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .execution.Header uncles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uncles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.BlockBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 blockHash = 1;
  if (this->has_blockhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blockhash(this), target, stream);
  }

  // uint64 blockNumber = 2;
  if (this->blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_blocknumber(), target);
  }

  // repeated bytes transactions = 3;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated .execution.Header uncles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uncles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_uncles(i), target, stream);
  }

  // repeated .types.Withdrawal withdrawals = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_withdrawals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_withdrawals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.BlockBody)
  return target;
}

size_t BlockBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.BlockBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_.Get(i));
  }

  // repeated .execution.Header uncles = 4;
  total_size += 1UL * this->_internal_uncles_size();
  for (const auto& msg : this->uncles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .types.Withdrawal withdrawals = 5;
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .types.H256 blockHash = 1;
  if (this->has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockhash_);
  }

  // uint64 blockNumber = 2;
  if (this->blocknumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blocknumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.BlockBody)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.BlockBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.BlockBody)
    MergeFrom(*source);
  }
}

void BlockBody::MergeFrom(const BlockBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.BlockBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  uncles_.MergeFrom(from.uncles_);
  withdrawals_.MergeFrom(from.withdrawals_);
  if (from.has_blockhash()) {
    _internal_mutable_blockhash()->::types::H256::MergeFrom(from._internal_blockhash());
  }
  if (from.blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
}

void BlockBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.BlockBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockBody::CopyFrom(const BlockBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.BlockBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBody::IsInitialized() const {
  return true;
}

void BlockBody::InternalSwap(BlockBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  uncles_.InternalSwap(&other->uncles_);
  withdrawals_.InternalSwap(&other->withdrawals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBody, blocknumber_)
      + sizeof(BlockBody::blocknumber_)
      - PROTOBUF_FIELD_OFFSET(BlockBody, blockhash_)>(
          reinterpret_cast<char*>(&blockhash_),
          reinterpret_cast<char*>(&other->blockhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetHeaderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHeaderResponse>()._has_bits_);
  static const ::execution::Header& header(const GetHeaderResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::execution::Header&
GetHeaderResponse::_Internal::header(const GetHeaderResponse* msg) {
  return *msg->header_;
}
GetHeaderResponse::GetHeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.GetHeaderResponse)
}
GetHeaderResponse::GetHeaderResponse(const GetHeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::execution::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:execution.GetHeaderResponse)
}

void GetHeaderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHeaderResponse_execution_2fexecution_2eproto.base);
  header_ = nullptr;
}

GetHeaderResponse::~GetHeaderResponse() {
  // @@protoc_insertion_point(destructor:execution.GetHeaderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHeaderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetHeaderResponse::ArenaDtor(void* object) {
  GetHeaderResponse* _this = reinterpret_cast< GetHeaderResponse* >(object);
  (void)_this;
}
void GetHeaderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHeaderResponse& GetHeaderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHeaderResponse_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void GetHeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && header_ != nullptr) {
      delete header_;
    }
    header_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .execution.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHeaderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetHeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.Header header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetHeaderResponse)
  return target;
}

size_t GetHeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetHeaderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .execution.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHeaderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.GetHeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHeaderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHeaderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.GetHeaderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.GetHeaderResponse)
    MergeFrom(*source);
  }
}

void GetHeaderResponse::MergeFrom(const GetHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.GetHeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::execution::Header::MergeFrom(from._internal_header());
  }
}

void GetHeaderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.GetHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHeaderResponse::CopyFrom(const GetHeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetHeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeaderResponse::IsInitialized() const {
  return true;
}

void GetHeaderResponse::InternalSwap(GetHeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeaderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBodyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBodyResponse>()._has_bits_);
  static const ::execution::BlockBody& body(const GetBodyResponse* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::execution::BlockBody&
GetBodyResponse::_Internal::body(const GetBodyResponse* msg) {
  return *msg->body_;
}
GetBodyResponse::GetBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.GetBodyResponse)
}
GetBodyResponse::GetBodyResponse(const GetBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body()) {
    body_ = new ::execution::BlockBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:execution.GetBodyResponse)
}

void GetBodyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBodyResponse_execution_2fexecution_2eproto.base);
  body_ = nullptr;
}

GetBodyResponse::~GetBodyResponse() {
  // @@protoc_insertion_point(destructor:execution.GetBodyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBodyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete body_;
}

void GetBodyResponse::ArenaDtor(void* object) {
  GetBodyResponse* _this = reinterpret_cast< GetBodyResponse* >(object);
  (void)_this;
}
void GetBodyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBodyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBodyResponse& GetBodyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBodyResponse_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void GetBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && body_ != nullptr) {
      delete body_;
    }
    body_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBodyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .execution.BlockBody body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBodyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .execution.BlockBody body = 1;
  if (_internal_has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetBodyResponse)
  return target;
}

size_t GetBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetBodyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .execution.BlockBody body = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBodyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.GetBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBodyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBodyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.GetBodyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.GetBodyResponse)
    MergeFrom(*source);
  }
}

void GetBodyResponse::MergeFrom(const GetBodyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.GetBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_body()) {
    _internal_mutable_body()->::execution::BlockBody::MergeFrom(from._internal_body());
  }
}

void GetBodyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.GetBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBodyResponse::CopyFrom(const GetBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBodyResponse::IsInitialized() const {
  return true;
}

void GetBodyResponse::InternalSwap(GetBodyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(body_, other->body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBodyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetHeaderHashNumberResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHeaderHashNumberResponse>()._has_bits_);
  static void set_has_blocknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.GetHeaderHashNumberResponse)
}
GetHeaderHashNumberResponse::GetHeaderHashNumberResponse(const GetHeaderHashNumberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blocknumber_ = from.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:execution.GetHeaderHashNumberResponse)
}

void GetHeaderHashNumberResponse::SharedCtor() {
  blocknumber_ = PROTOBUF_ULONGLONG(0);
}

GetHeaderHashNumberResponse::~GetHeaderHashNumberResponse() {
  // @@protoc_insertion_point(destructor:execution.GetHeaderHashNumberResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHeaderHashNumberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetHeaderHashNumberResponse::ArenaDtor(void* object) {
  GetHeaderHashNumberResponse* _this = reinterpret_cast< GetHeaderHashNumberResponse* >(object);
  (void)_this;
}
void GetHeaderHashNumberResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHeaderHashNumberResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHeaderHashNumberResponse& GetHeaderHashNumberResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHeaderHashNumberResponse_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void GetHeaderHashNumberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetHeaderHashNumberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocknumber_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeaderHashNumberResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blocknumber(&has_bits);
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHeaderHashNumberResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetHeaderHashNumberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (_internal_has_blocknumber()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocknumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetHeaderHashNumberResponse)
  return target;
}

size_t GetHeaderHashNumberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetHeaderHashNumberResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blocknumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHeaderHashNumberResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.GetHeaderHashNumberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHeaderHashNumberResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHeaderHashNumberResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.GetHeaderHashNumberResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.GetHeaderHashNumberResponse)
    MergeFrom(*source);
  }
}

void GetHeaderHashNumberResponse::MergeFrom(const GetHeaderHashNumberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.GetHeaderHashNumberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blocknumber()) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
}

void GetHeaderHashNumberResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.GetHeaderHashNumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHeaderHashNumberResponse::CopyFrom(const GetHeaderHashNumberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetHeaderHashNumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeaderHashNumberResponse::IsInitialized() const {
  return true;
}

void GetHeaderHashNumberResponse::InternalSwap(GetHeaderHashNumberResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blocknumber_, other->blocknumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeaderHashNumberResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSegmentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSegmentRequest>()._has_bits_);
  static void set_has_blocknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::types::H256& blockhash(const GetSegmentRequest* msg);
  static void set_has_blockhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
GetSegmentRequest::_Internal::blockhash(const GetSegmentRequest* msg) {
  return *msg->blockhash_;
}
void GetSegmentRequest::clear_blockhash() {
  if (GetArena() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
GetSegmentRequest::GetSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.GetSegmentRequest)
}
GetSegmentRequest::GetSegmentRequest(const GetSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blockhash()) {
    blockhash_ = new ::types::H256(*from.blockhash_);
  } else {
    blockhash_ = nullptr;
  }
  blocknumber_ = from.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:execution.GetSegmentRequest)
}

void GetSegmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSegmentRequest_execution_2fexecution_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&blockhash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blocknumber_) -
      reinterpret_cast<char*>(&blockhash_)) + sizeof(blocknumber_));
}

GetSegmentRequest::~GetSegmentRequest() {
  // @@protoc_insertion_point(destructor:execution.GetSegmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSegmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blockhash_;
}

void GetSegmentRequest::ArenaDtor(void* object) {
  GetSegmentRequest* _this = reinterpret_cast< GetSegmentRequest* >(object);
  (void)_this;
}
void GetSegmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSegmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSegmentRequest& GetSegmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSegmentRequest_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void GetSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.GetSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && blockhash_ != nullptr) {
      delete blockhash_;
    }
    blockhash_ = nullptr;
  }
  blocknumber_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blocknumber(&has_bits);
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 blockHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSegmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.GetSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (_internal_has_blocknumber()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocknumber(), target);
  }

  // .types.H256 blockHash = 2;
  if (_internal_has_blockhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blockhash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.GetSegmentRequest)
  return target;
}

size_t GetSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.GetSegmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .types.H256 blockHash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blockhash_);
    }

    // uint64 blockNumber = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_blocknumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSegmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.GetSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSegmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSegmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.GetSegmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.GetSegmentRequest)
    MergeFrom(*source);
  }
}

void GetSegmentRequest::MergeFrom(const GetSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.GetSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_blockhash()->::types::H256::MergeFrom(from._internal_blockhash());
    }
    if (cached_has_bits & 0x00000002u) {
      blocknumber_ = from.blocknumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetSegmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.GetSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentRequest::CopyFrom(const GetSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.GetSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentRequest::IsInitialized() const {
  return true;
}

void GetSegmentRequest::InternalSwap(GetSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSegmentRequest, blocknumber_)
      + sizeof(GetSegmentRequest::blocknumber_)
      - PROTOBUF_FIELD_OFFSET(GetSegmentRequest, blockhash_)>(
          reinterpret_cast<char*>(&blockhash_),
          reinterpret_cast<char*>(&other->blockhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertHeadersRequest::_Internal {
 public:
};

InsertHeadersRequest::InsertHeadersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.InsertHeadersRequest)
}
InsertHeadersRequest::InsertHeadersRequest(const InsertHeadersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.InsertHeadersRequest)
}

void InsertHeadersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertHeadersRequest_execution_2fexecution_2eproto.base);
}

InsertHeadersRequest::~InsertHeadersRequest() {
  // @@protoc_insertion_point(destructor:execution.InsertHeadersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertHeadersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InsertHeadersRequest::ArenaDtor(void* object) {
  InsertHeadersRequest* _this = reinterpret_cast< InsertHeadersRequest* >(object);
  (void)_this;
}
void InsertHeadersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertHeadersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertHeadersRequest& InsertHeadersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertHeadersRequest_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void InsertHeadersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.InsertHeadersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertHeadersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .execution.Header headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertHeadersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.InsertHeadersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .execution.Header headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.InsertHeadersRequest)
  return target;
}

size_t InsertHeadersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.InsertHeadersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .execution.Header headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertHeadersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.InsertHeadersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertHeadersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertHeadersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.InsertHeadersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.InsertHeadersRequest)
    MergeFrom(*source);
  }
}

void InsertHeadersRequest::MergeFrom(const InsertHeadersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.InsertHeadersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
}

void InsertHeadersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.InsertHeadersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertHeadersRequest::CopyFrom(const InsertHeadersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.InsertHeadersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertHeadersRequest::IsInitialized() const {
  return true;
}

void InsertHeadersRequest::InternalSwap(InsertHeadersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertHeadersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertBodiesRequest::_Internal {
 public:
};

InsertBodiesRequest::InsertBodiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bodies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.InsertBodiesRequest)
}
InsertBodiesRequest::InsertBodiesRequest(const InsertBodiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bodies_(from.bodies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.InsertBodiesRequest)
}

void InsertBodiesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertBodiesRequest_execution_2fexecution_2eproto.base);
}

InsertBodiesRequest::~InsertBodiesRequest() {
  // @@protoc_insertion_point(destructor:execution.InsertBodiesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertBodiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InsertBodiesRequest::ArenaDtor(void* object) {
  InsertBodiesRequest* _this = reinterpret_cast< InsertBodiesRequest* >(object);
  (void)_this;
}
void InsertBodiesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertBodiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertBodiesRequest& InsertBodiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertBodiesRequest_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void InsertBodiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.InsertBodiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertBodiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .execution.BlockBody bodies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertBodiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.InsertBodiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .execution.BlockBody bodies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bodies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bodies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.InsertBodiesRequest)
  return target;
}

size_t InsertBodiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.InsertBodiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .execution.BlockBody bodies = 1;
  total_size += 1UL * this->_internal_bodies_size();
  for (const auto& msg : this->bodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertBodiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.InsertBodiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertBodiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertBodiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.InsertBodiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.InsertBodiesRequest)
    MergeFrom(*source);
  }
}

void InsertBodiesRequest::MergeFrom(const InsertBodiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.InsertBodiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodies_.MergeFrom(from.bodies_);
}

void InsertBodiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.InsertBodiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertBodiesRequest::CopyFrom(const InsertBodiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.InsertBodiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertBodiesRequest::IsInitialized() const {
  return true;
}

void InsertBodiesRequest::InternalSwap(InsertBodiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bodies_.InternalSwap(&other->bodies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertBodiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EmptyMessage::_Internal {
 public:
};

EmptyMessage::EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:execution.EmptyMessage)
}
EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:execution.EmptyMessage)
}

void EmptyMessage::SharedCtor() {
}

EmptyMessage::~EmptyMessage() {
  // @@protoc_insertion_point(destructor:execution.EmptyMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmptyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmptyMessage::ArenaDtor(void* object) {
  EmptyMessage* _this = reinterpret_cast< EmptyMessage* >(object);
  (void)_this;
}
void EmptyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyMessage& EmptyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyMessage_execution_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void EmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:execution.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:execution.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:execution.EmptyMessage)
  return target;
}

size_t EmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:execution.EmptyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:execution.EmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:execution.EmptyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:execution.EmptyMessage)
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:execution.EmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:execution.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:execution.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {
  return true;
}

void EmptyMessage::InternalSwap(EmptyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace execution
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::execution::ForkChoiceReceipt* Arena::CreateMaybeMessage< ::execution::ForkChoiceReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ForkChoiceReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::ValidationReceipt* Arena::CreateMaybeMessage< ::execution::ValidationReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::ValidationReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::IsCanonicalResponse* Arena::CreateMaybeMessage< ::execution::IsCanonicalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::IsCanonicalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::Header* Arena::CreateMaybeMessage< ::execution::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::BlockBody* Arena::CreateMaybeMessage< ::execution::BlockBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::BlockBody >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetHeaderResponse* Arena::CreateMaybeMessage< ::execution::GetHeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetHeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetBodyResponse* Arena::CreateMaybeMessage< ::execution::GetBodyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetHeaderHashNumberResponse* Arena::CreateMaybeMessage< ::execution::GetHeaderHashNumberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetHeaderHashNumberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::GetSegmentRequest* Arena::CreateMaybeMessage< ::execution::GetSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::GetSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::InsertHeadersRequest* Arena::CreateMaybeMessage< ::execution::InsertHeadersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::InsertHeadersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::InsertBodiesRequest* Arena::CreateMaybeMessage< ::execution::InsertBodiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::InsertBodiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::execution::EmptyMessage* Arena::CreateMaybeMessage< ::execution::EmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::execution::EmptyMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
