// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types/types.proto

#include "types/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H1024_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_H128_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H160_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H2048_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H256_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H512_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfoPorts_types_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Withdrawal_types_2ftypes_2eproto;
namespace types {
class H128DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<H128> _instance;
} _H128_default_instance_;
class H160DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<H160> _instance;
} _H160_default_instance_;
class H256DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<H256> _instance;
} _H256_default_instance_;
class H512DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<H512> _instance;
} _H512_default_instance_;
class H1024DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<H1024> _instance;
} _H1024_default_instance_;
class H2048DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<H2048> _instance;
} _H2048_default_instance_;
class VersionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionReply> _instance;
} _VersionReply_default_instance_;
class ExecutionPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutionPayload> _instance;
} _ExecutionPayload_default_instance_;
class WithdrawalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Withdrawal> _instance;
} _Withdrawal_default_instance_;
class BlobsBundleV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobsBundleV1> _instance;
} _BlobsBundleV1_default_instance_;
class NodeInfoPortsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfoPorts> _instance;
} _NodeInfoPorts_default_instance_;
class NodeInfoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfoReply> _instance;
} _NodeInfoReply_default_instance_;
class PeerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerInfo> _instance;
} _PeerInfo_default_instance_;
class ExecutionPayloadBodyV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutionPayloadBodyV1> _instance;
} _ExecutionPayloadBodyV1_default_instance_;
}  // namespace types
static void InitDefaultsscc_info_BlobsBundleV1_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_BlobsBundleV1_default_instance_;
    new (ptr) ::types::BlobsBundleV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlobsBundleV1_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlobsBundleV1_types_2ftypes_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ExecutionPayload_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_ExecutionPayload_default_instance_;
    new (ptr) ::types::ExecutionPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ExecutionPayload_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ExecutionPayload_types_2ftypes_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,
      &scc_info_H160_types_2ftypes_2eproto.base,
      &scc_info_H2048_types_2ftypes_2eproto.base,
      &scc_info_Withdrawal_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_ExecutionPayloadBodyV1_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_ExecutionPayloadBodyV1_default_instance_;
    new (ptr) ::types::ExecutionPayloadBodyV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecutionPayloadBodyV1_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecutionPayloadBodyV1_types_2ftypes_2eproto}, {
      &scc_info_Withdrawal_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_H1024_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_H1024_default_instance_;
    new (ptr) ::types::H1024();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H1024_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_H1024_types_2ftypes_2eproto}, {
      &scc_info_H512_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_H128_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_H128_default_instance_;
    new (ptr) ::types::H128();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_H128_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_H128_types_2ftypes_2eproto}, {}};

static void InitDefaultsscc_info_H160_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_H160_default_instance_;
    new (ptr) ::types::H160();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H160_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_H160_types_2ftypes_2eproto}, {
      &scc_info_H128_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_H2048_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_H2048_default_instance_;
    new (ptr) ::types::H2048();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H2048_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_H2048_types_2ftypes_2eproto}, {
      &scc_info_H1024_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_H256_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_H256_default_instance_;
    new (ptr) ::types::H256();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H256_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_H256_types_2ftypes_2eproto}, {
      &scc_info_H128_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_H512_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_H512_default_instance_;
    new (ptr) ::types::H512();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_H512_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_H512_types_2ftypes_2eproto}, {
      &scc_info_H256_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfoPorts_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_NodeInfoPorts_default_instance_;
    new (ptr) ::types::NodeInfoPorts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfoPorts_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfoPorts_types_2ftypes_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfoReply_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_NodeInfoReply_default_instance_;
    new (ptr) ::types::NodeInfoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeInfoReply_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeInfoReply_types_2ftypes_2eproto}, {
      &scc_info_NodeInfoPorts_types_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_PeerInfo_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_PeerInfo_default_instance_;
    new (ptr) ::types::PeerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerInfo_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerInfo_types_2ftypes_2eproto}, {}};

static void InitDefaultsscc_info_VersionReply_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_VersionReply_default_instance_;
    new (ptr) ::types::VersionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionReply_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionReply_types_2ftypes_2eproto}, {}};

static void InitDefaultsscc_info_Withdrawal_types_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_Withdrawal_default_instance_;
    new (ptr) ::types::Withdrawal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Withdrawal_types_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Withdrawal_types_2ftypes_2eproto}, {
      &scc_info_H160_types_2ftypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_types_2ftypes_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_types_2ftypes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_types_2ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_types_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::H128, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H128, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H160, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::H160, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H160, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H256, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::H256, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H256, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H512, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::H512, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H512, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H1024, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::H1024, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H1024, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::H2048, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::H2048, hi_),
  PROTOBUF_FIELD_OFFSET(::types::H2048, lo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, major_),
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, minor_),
  PROTOBUF_FIELD_OFFSET(::types::VersionReply, patch_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, version_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, parent_hash_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, coinbase_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, state_root_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, receipt_root_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, logs_bloom_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, prev_randao_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, block_number_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, gas_used_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, timestamp_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, extra_data_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, base_fee_per_gas_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, block_hash_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, transactions_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, withdrawals_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayload, excess_data_gas_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, index_),
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, validator_index_),
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, address_),
  PROTOBUF_FIELD_OFFSET(::types::Withdrawal, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, block_hash_),
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, kzgs_),
  PROTOBUF_FIELD_OFFSET(::types::BlobsBundleV1, blobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, discovery_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoPorts, listener_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, id_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, name_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, enode_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, enr_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, ports_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, listener_addr_),
  PROTOBUF_FIELD_OFFSET(::types::NodeInfoReply, protocols_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, id_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, enode_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, enr_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, caps_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, conn_local_addr_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, conn_remote_addr_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, conn_is_inbound_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, conn_is_trusted_),
  PROTOBUF_FIELD_OFFSET(::types::PeerInfo, conn_is_static_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayloadBodyV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayloadBodyV1, transactions_),
  PROTOBUF_FIELD_OFFSET(::types::ExecutionPayloadBodyV1, withdrawals_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::types::H128)},
  { 7, -1, sizeof(::types::H160)},
  { 14, -1, sizeof(::types::H256)},
  { 21, -1, sizeof(::types::H512)},
  { 28, -1, sizeof(::types::H1024)},
  { 35, -1, sizeof(::types::H2048)},
  { 42, -1, sizeof(::types::VersionReply)},
  { 50, 72, sizeof(::types::ExecutionPayload)},
  { 89, -1, sizeof(::types::Withdrawal)},
  { 98, -1, sizeof(::types::BlobsBundleV1)},
  { 106, -1, sizeof(::types::NodeInfoPorts)},
  { 113, -1, sizeof(::types::NodeInfoReply)},
  { 125, -1, sizeof(::types::PeerInfo)},
  { 140, -1, sizeof(::types::ExecutionPayloadBodyV1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H128_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H160_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H256_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H512_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H1024_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_H2048_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_VersionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_ExecutionPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_Withdrawal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_BlobsBundleV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_NodeInfoPorts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_NodeInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_PeerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::types::_ExecutionPayloadBodyV1_default_instance_),
};

const char descriptor_table_protodef_types_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021types/types.proto\022\005types\032 google/proto"
  "buf/descriptor.proto\"\036\n\004H128\022\n\n\002hi\030\001 \001(\004"
  "\022\n\n\002lo\030\002 \001(\004\"+\n\004H160\022\027\n\002hi\030\001 \001(\0132\013.types"
  ".H128\022\n\n\002lo\030\002 \001(\r\"8\n\004H256\022\027\n\002hi\030\001 \001(\0132\013."
  "types.H128\022\027\n\002lo\030\002 \001(\0132\013.types.H128\"8\n\004H"
  "512\022\027\n\002hi\030\001 \001(\0132\013.types.H256\022\027\n\002lo\030\002 \001(\013"
  "2\013.types.H256\"9\n\005H1024\022\027\n\002hi\030\001 \001(\0132\013.typ"
  "es.H512\022\027\n\002lo\030\002 \001(\0132\013.types.H512\";\n\005H204"
  "8\022\030\n\002hi\030\001 \001(\0132\014.types.H1024\022\030\n\002lo\030\002 \001(\0132"
  "\014.types.H1024\";\n\014VersionReply\022\r\n\005major\030\001"
  " \001(\r\022\r\n\005minor\030\002 \001(\r\022\r\n\005patch\030\003 \001(\r\"\223\004\n\020E"
  "xecutionPayload\022\017\n\007version\030\001 \001(\r\022 \n\013pare"
  "nt_hash\030\002 \001(\0132\013.types.H256\022\035\n\010coinbase\030\003"
  " \001(\0132\013.types.H160\022\037\n\nstate_root\030\004 \001(\0132\013."
  "types.H256\022!\n\014receipt_root\030\005 \001(\0132\013.types"
  ".H256\022 \n\nlogs_bloom\030\006 \001(\0132\014.types.H2048\022"
  " \n\013prev_randao\030\007 \001(\0132\013.types.H256\022\024\n\014blo"
  "ck_number\030\010 \001(\004\022\021\n\tgas_limit\030\t \001(\004\022\020\n\010ga"
  "s_used\030\n \001(\004\022\021\n\ttimestamp\030\013 \001(\004\022\022\n\nextra"
  "_data\030\014 \001(\014\022%\n\020base_fee_per_gas\030\r \001(\0132\013."
  "types.H256\022\037\n\nblock_hash\030\016 \001(\0132\013.types.H"
  "256\022\024\n\014transactions\030\017 \003(\014\022&\n\013withdrawals"
  "\030\020 \003(\0132\021.types.Withdrawal\022)\n\017excess_data"
  "_gas\030\021 \001(\0132\013.types.H256H\000\210\001\001B\022\n\020_excess_"
  "data_gas\"b\n\nWithdrawal\022\r\n\005index\030\001 \001(\004\022\027\n"
  "\017validator_index\030\002 \001(\004\022\034\n\007address\030\003 \001(\0132"
  "\013.types.H160\022\016\n\006amount\030\004 \001(\004\"M\n\rBlobsBun"
  "dleV1\022\037\n\nblock_hash\030\001 \001(\0132\013.types.H256\022\014"
  "\n\004kzgs\030\002 \003(\014\022\r\n\005blobs\030\003 \003(\014\"4\n\rNodeInfoP"
  "orts\022\021\n\tdiscovery\030\001 \001(\r\022\020\n\010listener\030\002 \001("
  "\r\"\224\001\n\rNodeInfoReply\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\022\r\n\005enode\030\003 \001(\t\022\013\n\003enr\030\004 \001(\t\022#\n\005por"
  "ts\030\005 \001(\0132\024.types.NodeInfoPorts\022\025\n\rlisten"
  "er_addr\030\006 \001(\t\022\021\n\tprotocols\030\007 \001(\014\"\313\001\n\010Pee"
  "rInfo\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005enode"
  "\030\003 \001(\t\022\013\n\003enr\030\004 \001(\t\022\014\n\004caps\030\005 \003(\t\022\027\n\017con"
  "n_local_addr\030\006 \001(\t\022\030\n\020conn_remote_addr\030\007"
  " \001(\t\022\027\n\017conn_is_inbound\030\010 \001(\010\022\027\n\017conn_is"
  "_trusted\030\t \001(\010\022\026\n\016conn_is_static\030\n \001(\010\"V"
  "\n\026ExecutionPayloadBodyV1\022\024\n\014transactions"
  "\030\001 \003(\014\022&\n\013withdrawals\030\002 \003(\0132\021.types.With"
  "drawal:=\n\025service_major_version\022\034.google"
  ".protobuf.FileOptions\030\321\206\003 \001(\r:=\n\025service"
  "_minor_version\022\034.google.protobuf.FileOpt"
  "ions\030\322\206\003 \001(\r:=\n\025service_patch_version\022\034."
  "google.protobuf.FileOptions\030\323\206\003 \001(\rB\017Z\r."
  "/types;typesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_types_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_types_2ftypes_2eproto_sccs[14] = {
  &scc_info_BlobsBundleV1_types_2ftypes_2eproto.base,
  &scc_info_ExecutionPayload_types_2ftypes_2eproto.base,
  &scc_info_ExecutionPayloadBodyV1_types_2ftypes_2eproto.base,
  &scc_info_H1024_types_2ftypes_2eproto.base,
  &scc_info_H128_types_2ftypes_2eproto.base,
  &scc_info_H160_types_2ftypes_2eproto.base,
  &scc_info_H2048_types_2ftypes_2eproto.base,
  &scc_info_H256_types_2ftypes_2eproto.base,
  &scc_info_H512_types_2ftypes_2eproto.base,
  &scc_info_NodeInfoPorts_types_2ftypes_2eproto.base,
  &scc_info_NodeInfoReply_types_2ftypes_2eproto.base,
  &scc_info_PeerInfo_types_2ftypes_2eproto.base,
  &scc_info_VersionReply_types_2ftypes_2eproto.base,
  &scc_info_Withdrawal_types_2ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_types_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2ftypes_2eproto = {
  false, false, descriptor_table_protodef_types_2ftypes_2eproto, "types/types.proto", 1860,
  &descriptor_table_types_2ftypes_2eproto_once, descriptor_table_types_2ftypes_2eproto_sccs, descriptor_table_types_2ftypes_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_types_2ftypes_2eproto::offsets,
  file_level_metadata_types_2ftypes_2eproto, 14, file_level_enum_descriptors_types_2ftypes_2eproto, file_level_service_descriptors_types_2ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_types_2ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_types_2ftypes_2eproto)), true);
namespace types {

// ===================================================================

class H128::_Internal {
 public:
};

H128::H128(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.H128)
}
H128::H128(const H128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hi_, &from.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  // @@protoc_insertion_point(copy_constructor:types.H128)
}

void H128::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H128::~H128() {
  // @@protoc_insertion_point(destructor:types.H128)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void H128::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void H128::ArenaDtor(void* object) {
  H128* _this = reinterpret_cast< H128* >(object);
  (void)_this;
}
void H128::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const H128& H128::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_H128_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void H128::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* H128::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hi(), target);
  }

  // uint64 lo = 2;
  if (this->lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H128)
  return target;
}

size_t H128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H128)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hi = 1;
  if (this->hi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hi());
  }

  // uint64 lo = 2;
  if (this->lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void H128::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.H128)
  GOOGLE_DCHECK_NE(&from, this);
  const H128* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<H128>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.H128)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.H128)
    MergeFrom(*source);
  }
}

void H128::MergeFrom(const H128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H128)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hi() != 0) {
    _internal_set_hi(from._internal_hi());
  }
  if (from.lo() != 0) {
    _internal_set_lo(from._internal_lo());
  }
}

void H128::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.H128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H128::CopyFrom(const H128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H128::IsInitialized() const {
  return true;
}

void H128::InternalSwap(H128* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H128, lo_)
      + sizeof(H128::lo_)
      - PROTOBUF_FIELD_OFFSET(H128, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H128::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class H160::_Internal {
 public:
  static const ::types::H128& hi(const H160* msg);
};

const ::types::H128&
H160::_Internal::hi(const H160* msg) {
  return *msg->hi_;
}
H160::H160(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.H160)
}
H160::H160(const H160& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H128(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  lo_ = from.lo_;
  // @@protoc_insertion_point(copy_constructor:types.H160)
}

void H160::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_H160_types_2ftypes_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H160::~H160() {
  // @@protoc_insertion_point(destructor:types.H160)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void H160::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hi_;
}

void H160::ArenaDtor(void* object) {
  H160* _this = reinterpret_cast< H160* >(object);
  (void)_this;
}
void H160::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H160::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const H160& H160::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_H160_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void H160::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H160)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  lo_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H160::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H128 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* H160::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H160)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // uint32 lo = 2;
  if (this->lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H160)
  return target;
}

size_t H160::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H160)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // uint32 lo = 2;
  if (this->lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void H160::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.H160)
  GOOGLE_DCHECK_NE(&from, this);
  const H160* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<H160>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.H160)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.H160)
    MergeFrom(*source);
  }
}

void H160::MergeFrom(const H160& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H160)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hi()) {
    _internal_mutable_hi()->::types::H128::MergeFrom(from._internal_hi());
  }
  if (from.lo() != 0) {
    _internal_set_lo(from._internal_lo());
  }
}

void H160::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.H160)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H160::CopyFrom(const H160& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H160)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H160::IsInitialized() const {
  return true;
}

void H160::InternalSwap(H160* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H160, lo_)
      + sizeof(H160::lo_)
      - PROTOBUF_FIELD_OFFSET(H160, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H160::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class H256::_Internal {
 public:
  static const ::types::H128& hi(const H256* msg);
  static const ::types::H128& lo(const H256* msg);
};

const ::types::H128&
H256::_Internal::hi(const H256* msg) {
  return *msg->hi_;
}
const ::types::H128&
H256::_Internal::lo(const H256* msg) {
  return *msg->lo_;
}
H256::H256(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.H256)
}
H256::H256(const H256& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H128(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H128(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H256)
}

void H256::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_H256_types_2ftypes_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H256::~H256() {
  // @@protoc_insertion_point(destructor:types.H256)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void H256::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H256::ArenaDtor(void* object) {
  H256* _this = reinterpret_cast< H256* >(object);
  (void)_this;
}
void H256::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H256::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const H256& H256::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_H256_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void H256::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H256)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArena() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H256::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H128 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H128 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* H256::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H256)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H128 lo = 2;
  if (this->has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H256)
  return target;
}

size_t H256::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H256)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H128 hi = 1;
  if (this->has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H128 lo = 2;
  if (this->has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void H256::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.H256)
  GOOGLE_DCHECK_NE(&from, this);
  const H256* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<H256>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.H256)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.H256)
    MergeFrom(*source);
  }
}

void H256::MergeFrom(const H256& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H256)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hi()) {
    _internal_mutable_hi()->::types::H128::MergeFrom(from._internal_hi());
  }
  if (from.has_lo()) {
    _internal_mutable_lo()->::types::H128::MergeFrom(from._internal_lo());
  }
}

void H256::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.H256)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H256::CopyFrom(const H256& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H256)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H256::IsInitialized() const {
  return true;
}

void H256::InternalSwap(H256* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H256, lo_)
      + sizeof(H256::lo_)
      - PROTOBUF_FIELD_OFFSET(H256, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H256::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class H512::_Internal {
 public:
  static const ::types::H256& hi(const H512* msg);
  static const ::types::H256& lo(const H512* msg);
};

const ::types::H256&
H512::_Internal::hi(const H512* msg) {
  return *msg->hi_;
}
const ::types::H256&
H512::_Internal::lo(const H512* msg) {
  return *msg->lo_;
}
H512::H512(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.H512)
}
H512::H512(const H512& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H256(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H256(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H512)
}

void H512::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_H512_types_2ftypes_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H512::~H512() {
  // @@protoc_insertion_point(destructor:types.H512)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void H512::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H512::ArenaDtor(void* object) {
  H512* _this = reinterpret_cast< H512* >(object);
  (void)_this;
}
void H512::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H512::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const H512& H512::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_H512_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void H512::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H512)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArena() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H512::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H256 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* H512::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H512)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 hi = 1;
  if (this->has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H256 lo = 2;
  if (this->has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H512)
  return target;
}

size_t H512::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H512)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 hi = 1;
  if (this->has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H256 lo = 2;
  if (this->has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void H512::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.H512)
  GOOGLE_DCHECK_NE(&from, this);
  const H512* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<H512>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.H512)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.H512)
    MergeFrom(*source);
  }
}

void H512::MergeFrom(const H512& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H512)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hi()) {
    _internal_mutable_hi()->::types::H256::MergeFrom(from._internal_hi());
  }
  if (from.has_lo()) {
    _internal_mutable_lo()->::types::H256::MergeFrom(from._internal_lo());
  }
}

void H512::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.H512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H512::CopyFrom(const H512& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H512::IsInitialized() const {
  return true;
}

void H512::InternalSwap(H512* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H512, lo_)
      + sizeof(H512::lo_)
      - PROTOBUF_FIELD_OFFSET(H512, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H512::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class H1024::_Internal {
 public:
  static const ::types::H512& hi(const H1024* msg);
  static const ::types::H512& lo(const H1024* msg);
};

const ::types::H512&
H1024::_Internal::hi(const H1024* msg) {
  return *msg->hi_;
}
const ::types::H512&
H1024::_Internal::lo(const H1024* msg) {
  return *msg->lo_;
}
H1024::H1024(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.H1024)
}
H1024::H1024(const H1024& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H512(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H512(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H1024)
}

void H1024::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_H1024_types_2ftypes_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H1024::~H1024() {
  // @@protoc_insertion_point(destructor:types.H1024)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void H1024::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H1024::ArenaDtor(void* object) {
  H1024* _this = reinterpret_cast< H1024* >(object);
  (void)_this;
}
void H1024::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H1024::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const H1024& H1024::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_H1024_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void H1024::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H1024)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArena() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H1024::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H512 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H512 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* H1024::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H1024)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H512 hi = 1;
  if (this->has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H512 lo = 2;
  if (this->has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H1024)
  return target;
}

size_t H1024::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H1024)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H512 hi = 1;
  if (this->has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H512 lo = 2;
  if (this->has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void H1024::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.H1024)
  GOOGLE_DCHECK_NE(&from, this);
  const H1024* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<H1024>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.H1024)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.H1024)
    MergeFrom(*source);
  }
}

void H1024::MergeFrom(const H1024& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H1024)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hi()) {
    _internal_mutable_hi()->::types::H512::MergeFrom(from._internal_hi());
  }
  if (from.has_lo()) {
    _internal_mutable_lo()->::types::H512::MergeFrom(from._internal_lo());
  }
}

void H1024::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.H1024)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H1024::CopyFrom(const H1024& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H1024)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H1024::IsInitialized() const {
  return true;
}

void H1024::InternalSwap(H1024* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H1024, lo_)
      + sizeof(H1024::lo_)
      - PROTOBUF_FIELD_OFFSET(H1024, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H1024::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class H2048::_Internal {
 public:
  static const ::types::H1024& hi(const H2048* msg);
  static const ::types::H1024& lo(const H2048* msg);
};

const ::types::H1024&
H2048::_Internal::hi(const H2048* msg) {
  return *msg->hi_;
}
const ::types::H1024&
H2048::_Internal::lo(const H2048* msg) {
  return *msg->lo_;
}
H2048::H2048(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.H2048)
}
H2048::H2048(const H2048& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hi()) {
    hi_ = new ::types::H1024(*from.hi_);
  } else {
    hi_ = nullptr;
  }
  if (from._internal_has_lo()) {
    lo_ = new ::types::H1024(*from.lo_);
  } else {
    lo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.H2048)
}

void H2048::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_H2048_types_2ftypes_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

H2048::~H2048() {
  // @@protoc_insertion_point(destructor:types.H2048)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void H2048::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hi_;
  if (this != internal_default_instance()) delete lo_;
}

void H2048::ArenaDtor(void* object) {
  H2048* _this = reinterpret_cast< H2048* >(object);
  (void)_this;
}
void H2048::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void H2048::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const H2048& H2048::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_H2048_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void H2048::Clear() {
// @@protoc_insertion_point(message_clear_start:types.H2048)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hi_ != nullptr) {
    delete hi_;
  }
  hi_ = nullptr;
  if (GetArena() == nullptr && lo_ != nullptr) {
    delete lo_;
  }
  lo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H2048::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H1024 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H1024 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* H2048::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.H2048)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H1024 hi = 1;
  if (this->has_hi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hi(this), target, stream);
  }

  // .types.H1024 lo = 2;
  if (this->has_lo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.H2048)
  return target;
}

size_t H2048::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.H2048)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H1024 hi = 1;
  if (this->has_hi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hi_);
  }

  // .types.H1024 lo = 2;
  if (this->has_lo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void H2048::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.H2048)
  GOOGLE_DCHECK_NE(&from, this);
  const H2048* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<H2048>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.H2048)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.H2048)
    MergeFrom(*source);
  }
}

void H2048::MergeFrom(const H2048& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.H2048)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hi()) {
    _internal_mutable_hi()->::types::H1024::MergeFrom(from._internal_hi());
  }
  if (from.has_lo()) {
    _internal_mutable_lo()->::types::H1024::MergeFrom(from._internal_lo());
  }
}

void H2048::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.H2048)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H2048::CopyFrom(const H2048& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.H2048)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H2048::IsInitialized() const {
  return true;
}

void H2048::InternalSwap(H2048* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H2048, lo_)
      + sizeof(H2048::lo_)
      - PROTOBUF_FIELD_OFFSET(H2048, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H2048::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersionReply::_Internal {
 public:
};

VersionReply::VersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.VersionReply)
}
VersionReply::VersionReply(const VersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:types.VersionReply)
}

void VersionReply::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

VersionReply::~VersionReply() {
  // @@protoc_insertion_point(destructor:types.VersionReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VersionReply::ArenaDtor(void* object) {
  VersionReply* _this = reinterpret_cast< VersionReply* >(object);
  (void)_this;
}
void VersionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionReply& VersionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionReply_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void VersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:types.VersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.VersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.VersionReply)
  return target;
}

size_t VersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.VersionReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_patch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.VersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.VersionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.VersionReply)
    MergeFrom(*source);
  }
}

void VersionReply::MergeFrom(const VersionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.VersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from.minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from.patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
}

void VersionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.VersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionReply::CopyFrom(const VersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.VersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionReply::IsInitialized() const {
  return true;
}

void VersionReply::InternalSwap(VersionReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionReply, patch_)
      + sizeof(VersionReply::patch_)
      - PROTOBUF_FIELD_OFFSET(VersionReply, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecutionPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecutionPayload>()._has_bits_);
  static const ::types::H256& parent_hash(const ExecutionPayload* msg);
  static const ::types::H160& coinbase(const ExecutionPayload* msg);
  static const ::types::H256& state_root(const ExecutionPayload* msg);
  static const ::types::H256& receipt_root(const ExecutionPayload* msg);
  static const ::types::H2048& logs_bloom(const ExecutionPayload* msg);
  static const ::types::H256& prev_randao(const ExecutionPayload* msg);
  static const ::types::H256& base_fee_per_gas(const ExecutionPayload* msg);
  static const ::types::H256& block_hash(const ExecutionPayload* msg);
  static const ::types::H256& excess_data_gas(const ExecutionPayload* msg);
  static void set_has_excess_data_gas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::types::H256&
ExecutionPayload::_Internal::parent_hash(const ExecutionPayload* msg) {
  return *msg->parent_hash_;
}
const ::types::H160&
ExecutionPayload::_Internal::coinbase(const ExecutionPayload* msg) {
  return *msg->coinbase_;
}
const ::types::H256&
ExecutionPayload::_Internal::state_root(const ExecutionPayload* msg) {
  return *msg->state_root_;
}
const ::types::H256&
ExecutionPayload::_Internal::receipt_root(const ExecutionPayload* msg) {
  return *msg->receipt_root_;
}
const ::types::H2048&
ExecutionPayload::_Internal::logs_bloom(const ExecutionPayload* msg) {
  return *msg->logs_bloom_;
}
const ::types::H256&
ExecutionPayload::_Internal::prev_randao(const ExecutionPayload* msg) {
  return *msg->prev_randao_;
}
const ::types::H256&
ExecutionPayload::_Internal::base_fee_per_gas(const ExecutionPayload* msg) {
  return *msg->base_fee_per_gas_;
}
const ::types::H256&
ExecutionPayload::_Internal::block_hash(const ExecutionPayload* msg) {
  return *msg->block_hash_;
}
const ::types::H256&
ExecutionPayload::_Internal::excess_data_gas(const ExecutionPayload* msg) {
  return *msg->excess_data_gas_;
}
ExecutionPayload::ExecutionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena),
  withdrawals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.ExecutionPayload)
}
ExecutionPayload::ExecutionPayload(const ExecutionPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      transactions_(from.transactions_),
      withdrawals_(from.withdrawals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArena());
  }
  if (from._internal_has_parent_hash()) {
    parent_hash_ = new ::types::H256(*from.parent_hash_);
  } else {
    parent_hash_ = nullptr;
  }
  if (from._internal_has_coinbase()) {
    coinbase_ = new ::types::H160(*from.coinbase_);
  } else {
    coinbase_ = nullptr;
  }
  if (from._internal_has_state_root()) {
    state_root_ = new ::types::H256(*from.state_root_);
  } else {
    state_root_ = nullptr;
  }
  if (from._internal_has_receipt_root()) {
    receipt_root_ = new ::types::H256(*from.receipt_root_);
  } else {
    receipt_root_ = nullptr;
  }
  if (from._internal_has_logs_bloom()) {
    logs_bloom_ = new ::types::H2048(*from.logs_bloom_);
  } else {
    logs_bloom_ = nullptr;
  }
  if (from._internal_has_prev_randao()) {
    prev_randao_ = new ::types::H256(*from.prev_randao_);
  } else {
    prev_randao_ = nullptr;
  }
  if (from._internal_has_base_fee_per_gas()) {
    base_fee_per_gas_ = new ::types::H256(*from.base_fee_per_gas_);
  } else {
    base_fee_per_gas_ = nullptr;
  }
  if (from._internal_has_block_hash()) {
    block_hash_ = new ::types::H256(*from.block_hash_);
  } else {
    block_hash_ = nullptr;
  }
  if (from._internal_has_excess_data_gas()) {
    excess_data_gas_ = new ::types::H256(*from.excess_data_gas_);
  } else {
    excess_data_gas_ = nullptr;
  }
  ::memcpy(&block_number_, &from.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&block_number_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:types.ExecutionPayload)
}

void ExecutionPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecutionPayload_types_2ftypes_2eproto.base);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parent_hash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&parent_hash_)) + sizeof(version_));
}

ExecutionPayload::~ExecutionPayload() {
  // @@protoc_insertion_point(destructor:types.ExecutionPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecutionPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_hash_;
  if (this != internal_default_instance()) delete coinbase_;
  if (this != internal_default_instance()) delete state_root_;
  if (this != internal_default_instance()) delete receipt_root_;
  if (this != internal_default_instance()) delete logs_bloom_;
  if (this != internal_default_instance()) delete prev_randao_;
  if (this != internal_default_instance()) delete base_fee_per_gas_;
  if (this != internal_default_instance()) delete block_hash_;
  if (this != internal_default_instance()) delete excess_data_gas_;
}

void ExecutionPayload::ArenaDtor(void* object) {
  ExecutionPayload* _this = reinterpret_cast< ExecutionPayload* >(object);
  (void)_this;
}
void ExecutionPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionPayload& ExecutionPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutionPayload_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void ExecutionPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:types.ExecutionPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  withdrawals_.Clear();
  extra_data_.ClearToEmpty();
  if (GetArena() == nullptr && parent_hash_ != nullptr) {
    delete parent_hash_;
  }
  parent_hash_ = nullptr;
  if (GetArena() == nullptr && coinbase_ != nullptr) {
    delete coinbase_;
  }
  coinbase_ = nullptr;
  if (GetArena() == nullptr && state_root_ != nullptr) {
    delete state_root_;
  }
  state_root_ = nullptr;
  if (GetArena() == nullptr && receipt_root_ != nullptr) {
    delete receipt_root_;
  }
  receipt_root_ = nullptr;
  if (GetArena() == nullptr && logs_bloom_ != nullptr) {
    delete logs_bloom_;
  }
  logs_bloom_ = nullptr;
  if (GetArena() == nullptr && prev_randao_ != nullptr) {
    delete prev_randao_;
  }
  prev_randao_ = nullptr;
  if (GetArena() == nullptr && base_fee_per_gas_ != nullptr) {
    delete base_fee_per_gas_;
  }
  base_fee_per_gas_ = nullptr;
  if (GetArena() == nullptr && block_hash_ != nullptr) {
    delete block_hash_;
  }
  block_hash_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && excess_data_gas_ != nullptr) {
      delete excess_data_gas_;
    }
    excess_data_gas_ = nullptr;
  }
  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(version_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 parent_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H160 coinbase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coinbase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 state_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 receipt_root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H2048 logs_bloom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_logs_bloom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 prev_randao = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_randao(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 base_fee_per_gas = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_fee_per_gas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H256 block_hash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes transactions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // .types.H256 excess_data_gas = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_excess_data_gas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ExecutionPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // .types.H256 parent_hash = 2;
  if (this->has_parent_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent_hash(this), target, stream);
  }

  // .types.H160 coinbase = 3;
  if (this->has_coinbase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coinbase(this), target, stream);
  }

  // .types.H256 state_root = 4;
  if (this->has_state_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::state_root(this), target, stream);
  }

  // .types.H256 receipt_root = 5;
  if (this->has_receipt_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::receipt_root(this), target, stream);
  }

  // .types.H2048 logs_bloom = 6;
  if (this->has_logs_bloom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::logs_bloom(this), target, stream);
  }

  // .types.H256 prev_randao = 7;
  if (this->has_prev_randao()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::prev_randao(this), target, stream);
  }

  // uint64 block_number = 8;
  if (this->block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_block_number(), target);
  }

  // uint64 gas_limit = 9;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_limit(), target);
  }

  // uint64 gas_used = 10;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_gas_used(), target);
  }

  // uint64 timestamp = 11;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_timestamp(), target);
  }

  // bytes extra_data = 12;
  if (this->extra_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extra_data(), target);
  }

  // .types.H256 base_fee_per_gas = 13;
  if (this->has_base_fee_per_gas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::base_fee_per_gas(this), target, stream);
  }

  // .types.H256 block_hash = 14;
  if (this->has_block_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::block_hash(this), target, stream);
  }

  // repeated bytes transactions = 15;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(15, s, target);
  }

  // repeated .types.Withdrawal withdrawals = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_withdrawals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_withdrawals(i), target, stream);
  }

  // .types.H256 excess_data_gas = 17;
  if (_internal_has_excess_data_gas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::excess_data_gas(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.ExecutionPayload)
  return target;
}

size_t ExecutionPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.ExecutionPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_.Get(i));
  }

  // repeated .types.Withdrawal withdrawals = 16;
  total_size += 2UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes extra_data = 12;
  if (this->extra_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // .types.H256 parent_hash = 2;
  if (this->has_parent_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_hash_);
  }

  // .types.H160 coinbase = 3;
  if (this->has_coinbase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coinbase_);
  }

  // .types.H256 state_root = 4;
  if (this->has_state_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_root_);
  }

  // .types.H256 receipt_root = 5;
  if (this->has_receipt_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_root_);
  }

  // .types.H2048 logs_bloom = 6;
  if (this->has_logs_bloom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logs_bloom_);
  }

  // .types.H256 prev_randao = 7;
  if (this->has_prev_randao()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_randao_);
  }

  // .types.H256 base_fee_per_gas = 13;
  if (this->has_base_fee_per_gas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_fee_per_gas_);
  }

  // .types.H256 block_hash = 14;
  if (this->has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_hash_);
  }

  // .types.H256 excess_data_gas = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *excess_data_gas_);
  }

  // uint64 block_number = 8;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_number());
  }

  // uint64 gas_limit = 9;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_limit());
  }

  // uint64 gas_used = 10;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint64 timestamp = 11;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.ExecutionPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutionPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.ExecutionPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.ExecutionPayload)
    MergeFrom(*source);
  }
}

void ExecutionPayload::MergeFrom(const ExecutionPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.ExecutionPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  withdrawals_.MergeFrom(from.withdrawals_);
  if (from.extra_data().size() > 0) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.has_parent_hash()) {
    _internal_mutable_parent_hash()->::types::H256::MergeFrom(from._internal_parent_hash());
  }
  if (from.has_coinbase()) {
    _internal_mutable_coinbase()->::types::H160::MergeFrom(from._internal_coinbase());
  }
  if (from.has_state_root()) {
    _internal_mutable_state_root()->::types::H256::MergeFrom(from._internal_state_root());
  }
  if (from.has_receipt_root()) {
    _internal_mutable_receipt_root()->::types::H256::MergeFrom(from._internal_receipt_root());
  }
  if (from.has_logs_bloom()) {
    _internal_mutable_logs_bloom()->::types::H2048::MergeFrom(from._internal_logs_bloom());
  }
  if (from.has_prev_randao()) {
    _internal_mutable_prev_randao()->::types::H256::MergeFrom(from._internal_prev_randao());
  }
  if (from.has_base_fee_per_gas()) {
    _internal_mutable_base_fee_per_gas()->::types::H256::MergeFrom(from._internal_base_fee_per_gas());
  }
  if (from.has_block_hash()) {
    _internal_mutable_block_hash()->::types::H256::MergeFrom(from._internal_block_hash());
  }
  if (from._internal_has_excess_data_gas()) {
    _internal_mutable_excess_data_gas()->::types::H256::MergeFrom(from._internal_excess_data_gas());
  }
  if (from.block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void ExecutionPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.ExecutionPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionPayload::CopyFrom(const ExecutionPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.ExecutionPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionPayload::IsInitialized() const {
  return true;
}

void ExecutionPayload::InternalSwap(ExecutionPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transactions_.InternalSwap(&other->transactions_);
  withdrawals_.InternalSwap(&other->withdrawals_);
  extra_data_.Swap(&other->extra_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionPayload, version_)
      + sizeof(ExecutionPayload::version_)
      - PROTOBUF_FIELD_OFFSET(ExecutionPayload, parent_hash_)>(
          reinterpret_cast<char*>(&parent_hash_),
          reinterpret_cast<char*>(&other->parent_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Withdrawal::_Internal {
 public:
  static const ::types::H160& address(const Withdrawal* msg);
};

const ::types::H160&
Withdrawal::_Internal::address(const Withdrawal* msg) {
  return *msg->address_;
}
Withdrawal::Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.Withdrawal)
}
Withdrawal::Withdrawal(const Withdrawal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::types::H160(*from.address_);
  } else {
    address_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&index_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:types.Withdrawal)
}

void Withdrawal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Withdrawal_types_2ftypes_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&address_)) + sizeof(amount_));
}

Withdrawal::~Withdrawal() {
  // @@protoc_insertion_point(destructor:types.Withdrawal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Withdrawal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
}

void Withdrawal::ArenaDtor(void* object) {
  Withdrawal* _this = reinterpret_cast< Withdrawal* >(object);
  (void)_this;
}
void Withdrawal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Withdrawal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Withdrawal& Withdrawal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Withdrawal_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void Withdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:types.Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&index_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Withdrawal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 validator_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          validator_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.H160 address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Withdrawal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // uint64 validator_index = 2;
  if (this->validator_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_validator_index(), target);
  }

  // .types.H160 address = 3;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::address(this), target, stream);
  }

  // uint64 amount = 4;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.Withdrawal)
  return target;
}

size_t Withdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.Withdrawal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H160 address = 3;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint64 validator_index = 2;
  if (this->validator_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_validator_index());
  }

  // uint64 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Withdrawal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  const Withdrawal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Withdrawal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.Withdrawal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.Withdrawal)
    MergeFrom(*source);
  }
}

void Withdrawal::MergeFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->::types::H160::MergeFrom(from._internal_address());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.validator_index() != 0) {
    _internal_set_validator_index(from._internal_validator_index());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void Withdrawal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Withdrawal::CopyFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdrawal::IsInitialized() const {
  return true;
}

void Withdrawal::InternalSwap(Withdrawal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Withdrawal, amount_)
      + sizeof(Withdrawal::amount_)
      - PROTOBUF_FIELD_OFFSET(Withdrawal, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Withdrawal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlobsBundleV1::_Internal {
 public:
  static const ::types::H256& block_hash(const BlobsBundleV1* msg);
};

const ::types::H256&
BlobsBundleV1::_Internal::block_hash(const BlobsBundleV1* msg) {
  return *msg->block_hash_;
}
BlobsBundleV1::BlobsBundleV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kzgs_(arena),
  blobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.BlobsBundleV1)
}
BlobsBundleV1::BlobsBundleV1(const BlobsBundleV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kzgs_(from.kzgs_),
      blobs_(from.blobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_hash()) {
    block_hash_ = new ::types::H256(*from.block_hash_);
  } else {
    block_hash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.BlobsBundleV1)
}

void BlobsBundleV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlobsBundleV1_types_2ftypes_2eproto.base);
  block_hash_ = nullptr;
}

BlobsBundleV1::~BlobsBundleV1() {
  // @@protoc_insertion_point(destructor:types.BlobsBundleV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlobsBundleV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_hash_;
}

void BlobsBundleV1::ArenaDtor(void* object) {
  BlobsBundleV1* _this = reinterpret_cast< BlobsBundleV1* >(object);
  (void)_this;
}
void BlobsBundleV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlobsBundleV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobsBundleV1& BlobsBundleV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobsBundleV1_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void BlobsBundleV1::Clear() {
// @@protoc_insertion_point(message_clear_start:types.BlobsBundleV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kzgs_.Clear();
  blobs_.Clear();
  if (GetArena() == nullptr && block_hash_ != nullptr) {
    delete block_hash_;
  }
  block_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobsBundleV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .types.H256 block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes kzgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_kzgs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes blobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobsBundleV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.BlobsBundleV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 block_hash = 1;
  if (this->has_block_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_hash(this), target, stream);
  }

  // repeated bytes kzgs = 2;
  for (int i = 0, n = this->_internal_kzgs_size(); i < n; i++) {
    const auto& s = this->_internal_kzgs(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes blobs = 3;
  for (int i = 0, n = this->_internal_blobs_size(); i < n; i++) {
    const auto& s = this->_internal_blobs(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.BlobsBundleV1)
  return target;
}

size_t BlobsBundleV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.BlobsBundleV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes kzgs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(kzgs_.size());
  for (int i = 0, n = kzgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      kzgs_.Get(i));
  }

  // repeated bytes blobs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blobs_.size());
  for (int i = 0, n = blobs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      blobs_.Get(i));
  }

  // .types.H256 block_hash = 1;
  if (this->has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_hash_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobsBundleV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.BlobsBundleV1)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobsBundleV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobsBundleV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.BlobsBundleV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.BlobsBundleV1)
    MergeFrom(*source);
  }
}

void BlobsBundleV1::MergeFrom(const BlobsBundleV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.BlobsBundleV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kzgs_.MergeFrom(from.kzgs_);
  blobs_.MergeFrom(from.blobs_);
  if (from.has_block_hash()) {
    _internal_mutable_block_hash()->::types::H256::MergeFrom(from._internal_block_hash());
  }
}

void BlobsBundleV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.BlobsBundleV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobsBundleV1::CopyFrom(const BlobsBundleV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.BlobsBundleV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobsBundleV1::IsInitialized() const {
  return true;
}

void BlobsBundleV1::InternalSwap(BlobsBundleV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  kzgs_.InternalSwap(&other->kzgs_);
  blobs_.InternalSwap(&other->blobs_);
  swap(block_hash_, other->block_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobsBundleV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeInfoPorts::_Internal {
 public:
};

NodeInfoPorts::NodeInfoPorts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.NodeInfoPorts)
}
NodeInfoPorts::NodeInfoPorts(const NodeInfoPorts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&discovery_, &from.discovery_,
    static_cast<size_t>(reinterpret_cast<char*>(&listener_) -
    reinterpret_cast<char*>(&discovery_)) + sizeof(listener_));
  // @@protoc_insertion_point(copy_constructor:types.NodeInfoPorts)
}

void NodeInfoPorts::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&discovery_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&listener_) -
      reinterpret_cast<char*>(&discovery_)) + sizeof(listener_));
}

NodeInfoPorts::~NodeInfoPorts() {
  // @@protoc_insertion_point(destructor:types.NodeInfoPorts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfoPorts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeInfoPorts::ArenaDtor(void* object) {
  NodeInfoPorts* _this = reinterpret_cast< NodeInfoPorts* >(object);
  (void)_this;
}
void NodeInfoPorts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfoPorts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfoPorts& NodeInfoPorts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfoPorts_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void NodeInfoPorts::Clear() {
// @@protoc_insertion_point(message_clear_start:types.NodeInfoPorts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&discovery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listener_) -
      reinterpret_cast<char*>(&discovery_)) + sizeof(listener_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfoPorts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 discovery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          discovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 listener = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          listener_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfoPorts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.NodeInfoPorts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 discovery = 1;
  if (this->discovery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_discovery(), target);
  }

  // uint32 listener = 2;
  if (this->listener() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_listener(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.NodeInfoPorts)
  return target;
}

size_t NodeInfoPorts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.NodeInfoPorts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 discovery = 1;
  if (this->discovery() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_discovery());
  }

  // uint32 listener = 2;
  if (this->listener() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_listener());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoPorts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.NodeInfoPorts)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoPorts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfoPorts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.NodeInfoPorts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.NodeInfoPorts)
    MergeFrom(*source);
  }
}

void NodeInfoPorts::MergeFrom(const NodeInfoPorts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.NodeInfoPorts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.discovery() != 0) {
    _internal_set_discovery(from._internal_discovery());
  }
  if (from.listener() != 0) {
    _internal_set_listener(from._internal_listener());
  }
}

void NodeInfoPorts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.NodeInfoPorts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoPorts::CopyFrom(const NodeInfoPorts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.NodeInfoPorts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoPorts::IsInitialized() const {
  return true;
}

void NodeInfoPorts::InternalSwap(NodeInfoPorts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfoPorts, listener_)
      + sizeof(NodeInfoPorts::listener_)
      - PROTOBUF_FIELD_OFFSET(NodeInfoPorts, discovery_)>(
          reinterpret_cast<char*>(&discovery_),
          reinterpret_cast<char*>(&other->discovery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoPorts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeInfoReply::_Internal {
 public:
  static const ::types::NodeInfoPorts& ports(const NodeInfoReply* msg);
};

const ::types::NodeInfoPorts&
NodeInfoReply::_Internal::ports(const NodeInfoReply* msg) {
  return *msg->ports_;
}
NodeInfoReply::NodeInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.NodeInfoReply)
}
NodeInfoReply::NodeInfoReply(const NodeInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  enode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enode().empty()) {
    enode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enode(), 
      GetArena());
  }
  enr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enr().empty()) {
    enr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enr(), 
      GetArena());
  }
  listener_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_listener_addr().empty()) {
    listener_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_listener_addr(), 
      GetArena());
  }
  protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocols().empty()) {
    protocols_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocols(), 
      GetArena());
  }
  if (from._internal_has_ports()) {
    ports_ = new ::types::NodeInfoPorts(*from.ports_);
  } else {
    ports_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.NodeInfoReply)
}

void NodeInfoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfoReply_types_2ftypes_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listener_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ports_ = nullptr;
}

NodeInfoReply::~NodeInfoReply() {
  // @@protoc_insertion_point(destructor:types.NodeInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listener_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ports_;
}

void NodeInfoReply::ArenaDtor(void* object) {
  NodeInfoReply* _this = reinterpret_cast< NodeInfoReply* >(object);
  (void)_this;
}
void NodeInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfoReply& NodeInfoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfoReply_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void NodeInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:types.NodeInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  enode_.ClearToEmpty();
  enr_.ClearToEmpty();
  listener_addr_.ClearToEmpty();
  protocols_.ClearToEmpty();
  if (GetArena() == nullptr && ports_ != nullptr) {
    delete ports_;
  }
  ports_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.enode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_enr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.enr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .types.NodeInfoPorts ports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ports(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string listener_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_listener_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.NodeInfoReply.listener_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes protocols = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_protocols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.NodeInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string enode = 3;
  if (this->enode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enode().data(), static_cast<int>(this->_internal_enode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.enode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enode(), target);
  }

  // string enr = 4;
  if (this->enr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enr().data(), static_cast<int>(this->_internal_enr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.enr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enr(), target);
  }

  // .types.NodeInfoPorts ports = 5;
  if (this->has_ports()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ports(this), target, stream);
  }

  // string listener_addr = 6;
  if (this->listener_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listener_addr().data(), static_cast<int>(this->_internal_listener_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.NodeInfoReply.listener_addr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_listener_addr(), target);
  }

  // bytes protocols = 7;
  if (this->protocols().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_protocols(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.NodeInfoReply)
  return target;
}

size_t NodeInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.NodeInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string enode = 3;
  if (this->enode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enode());
  }

  // string enr = 4;
  if (this->enr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enr());
  }

  // string listener_addr = 6;
  if (this->listener_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listener_addr());
  }

  // bytes protocols = 7;
  if (this->protocols().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_protocols());
  }

  // .types.NodeInfoPorts ports = 5;
  if (this->has_ports()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ports_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.NodeInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.NodeInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.NodeInfoReply)
    MergeFrom(*source);
  }
}

void NodeInfoReply::MergeFrom(const NodeInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.NodeInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.enode().size() > 0) {
    _internal_set_enode(from._internal_enode());
  }
  if (from.enr().size() > 0) {
    _internal_set_enr(from._internal_enr());
  }
  if (from.listener_addr().size() > 0) {
    _internal_set_listener_addr(from._internal_listener_addr());
  }
  if (from.protocols().size() > 0) {
    _internal_set_protocols(from._internal_protocols());
  }
  if (from.has_ports()) {
    _internal_mutable_ports()->::types::NodeInfoPorts::MergeFrom(from._internal_ports());
  }
}

void NodeInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.NodeInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoReply::CopyFrom(const NodeInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.NodeInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoReply::IsInitialized() const {
  return true;
}

void NodeInfoReply::InternalSwap(NodeInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enode_.Swap(&other->enode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enr_.Swap(&other->enr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  listener_addr_.Swap(&other->listener_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocols_.Swap(&other->protocols_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ports_, other->ports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeerInfo::_Internal {
 public:
};

PeerInfo::PeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  caps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      caps_(from.caps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  enode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enode().empty()) {
    enode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enode(), 
      GetArena());
  }
  enr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enr().empty()) {
    enr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enr(), 
      GetArena());
  }
  conn_local_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conn_local_addr().empty()) {
    conn_local_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_conn_local_addr(), 
      GetArena());
  }
  conn_remote_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conn_remote_addr().empty()) {
    conn_remote_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_conn_remote_addr(), 
      GetArena());
  }
  ::memcpy(&conn_is_inbound_, &from.conn_is_inbound_,
    static_cast<size_t>(reinterpret_cast<char*>(&conn_is_static_) -
    reinterpret_cast<char*>(&conn_is_inbound_)) + sizeof(conn_is_static_));
  // @@protoc_insertion_point(copy_constructor:types.PeerInfo)
}

void PeerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerInfo_types_2ftypes_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conn_local_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conn_remote_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&conn_is_inbound_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&conn_is_static_) -
      reinterpret_cast<char*>(&conn_is_inbound_)) + sizeof(conn_is_static_));
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:types.PeerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conn_local_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conn_remote_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerInfo::ArenaDtor(void* object) {
  PeerInfo* _this = reinterpret_cast< PeerInfo* >(object);
  (void)_this;
}
void PeerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerInfo& PeerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerInfo_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:types.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caps_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  enode_.ClearToEmpty();
  enr_.ClearToEmpty();
  conn_local_addr_.ClearToEmpty();
  conn_remote_addr_.ClearToEmpty();
  ::memset(&conn_is_inbound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conn_is_static_) -
      reinterpret_cast<char*>(&conn_is_inbound_)) + sizeof(conn_is_static_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.PeerInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.PeerInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.PeerInfo.enode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_enr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.PeerInfo.enr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string caps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_caps();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.PeerInfo.caps"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string conn_local_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_conn_local_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.PeerInfo.conn_local_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string conn_remote_addr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_conn_remote_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "types.PeerInfo.conn_remote_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool conn_is_inbound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          conn_is_inbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool conn_is_trusted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          conn_is_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool conn_is_static = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          conn_is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string enode = 3;
  if (this->enode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enode().data(), static_cast<int>(this->_internal_enode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.enode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enode(), target);
  }

  // string enr = 4;
  if (this->enr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enr().data(), static_cast<int>(this->_internal_enr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.enr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enr(), target);
  }

  // repeated string caps = 5;
  for (int i = 0, n = this->_internal_caps_size(); i < n; i++) {
    const auto& s = this->_internal_caps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.caps");
    target = stream->WriteString(5, s, target);
  }

  // string conn_local_addr = 6;
  if (this->conn_local_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conn_local_addr().data(), static_cast<int>(this->_internal_conn_local_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.conn_local_addr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_conn_local_addr(), target);
  }

  // string conn_remote_addr = 7;
  if (this->conn_remote_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conn_remote_addr().data(), static_cast<int>(this->_internal_conn_remote_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "types.PeerInfo.conn_remote_addr");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_conn_remote_addr(), target);
  }

  // bool conn_is_inbound = 8;
  if (this->conn_is_inbound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_conn_is_inbound(), target);
  }

  // bool conn_is_trusted = 9;
  if (this->conn_is_trusted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_conn_is_trusted(), target);
  }

  // bool conn_is_static = 10;
  if (this->conn_is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_conn_is_static(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.PeerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string caps = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(caps_.size());
  for (int i = 0, n = caps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      caps_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string enode = 3;
  if (this->enode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enode());
  }

  // string enr = 4;
  if (this->enr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enr());
  }

  // string conn_local_addr = 6;
  if (this->conn_local_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conn_local_addr());
  }

  // string conn_remote_addr = 7;
  if (this->conn_remote_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conn_remote_addr());
  }

  // bool conn_is_inbound = 8;
  if (this->conn_is_inbound() != 0) {
    total_size += 1 + 1;
  }

  // bool conn_is_trusted = 9;
  if (this->conn_is_trusted() != 0) {
    total_size += 1 + 1;
  }

  // bool conn_is_static = 10;
  if (this->conn_is_static() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.PeerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.PeerInfo)
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  caps_.MergeFrom(from.caps_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.enode().size() > 0) {
    _internal_set_enode(from._internal_enode());
  }
  if (from.enr().size() > 0) {
    _internal_set_enr(from._internal_enr());
  }
  if (from.conn_local_addr().size() > 0) {
    _internal_set_conn_local_addr(from._internal_conn_local_addr());
  }
  if (from.conn_remote_addr().size() > 0) {
    _internal_set_conn_remote_addr(from._internal_conn_remote_addr());
  }
  if (from.conn_is_inbound() != 0) {
    _internal_set_conn_is_inbound(from._internal_conn_is_inbound());
  }
  if (from.conn_is_trusted() != 0) {
    _internal_set_conn_is_trusted(from._internal_conn_is_trusted());
  }
  if (from.conn_is_static() != 0) {
    _internal_set_conn_is_static(from._internal_conn_is_static());
  }
}

void PeerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::InternalSwap(PeerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  caps_.InternalSwap(&other->caps_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enode_.Swap(&other->enode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enr_.Swap(&other->enr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  conn_local_addr_.Swap(&other->conn_local_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  conn_remote_addr_.Swap(&other->conn_remote_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerInfo, conn_is_static_)
      + sizeof(PeerInfo::conn_is_static_)
      - PROTOBUF_FIELD_OFFSET(PeerInfo, conn_is_inbound_)>(
          reinterpret_cast<char*>(&conn_is_inbound_),
          reinterpret_cast<char*>(&other->conn_is_inbound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecutionPayloadBodyV1::_Internal {
 public:
};

ExecutionPayloadBodyV1::ExecutionPayloadBodyV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena),
  withdrawals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:types.ExecutionPayloadBodyV1)
}
ExecutionPayloadBodyV1::ExecutionPayloadBodyV1(const ExecutionPayloadBodyV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_),
      withdrawals_(from.withdrawals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.ExecutionPayloadBodyV1)
}

void ExecutionPayloadBodyV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecutionPayloadBodyV1_types_2ftypes_2eproto.base);
}

ExecutionPayloadBodyV1::~ExecutionPayloadBodyV1() {
  // @@protoc_insertion_point(destructor:types.ExecutionPayloadBodyV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecutionPayloadBodyV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExecutionPayloadBodyV1::ArenaDtor(void* object) {
  ExecutionPayloadBodyV1* _this = reinterpret_cast< ExecutionPayloadBodyV1* >(object);
  (void)_this;
}
void ExecutionPayloadBodyV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionPayloadBodyV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionPayloadBodyV1& ExecutionPayloadBodyV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutionPayloadBodyV1_types_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void ExecutionPayloadBodyV1::Clear() {
// @@protoc_insertion_point(message_clear_start:types.ExecutionPayloadBodyV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  withdrawals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionPayloadBodyV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionPayloadBodyV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ExecutionPayloadBodyV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes transactions = 1;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated .types.Withdrawal withdrawals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_withdrawals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_withdrawals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.ExecutionPayloadBodyV1)
  return target;
}

size_t ExecutionPayloadBodyV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.ExecutionPayloadBodyV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_.Get(i));
  }

  // repeated .types.Withdrawal withdrawals = 2;
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionPayloadBodyV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.ExecutionPayloadBodyV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionPayloadBodyV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutionPayloadBodyV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.ExecutionPayloadBodyV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.ExecutionPayloadBodyV1)
    MergeFrom(*source);
  }
}

void ExecutionPayloadBodyV1::MergeFrom(const ExecutionPayloadBodyV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.ExecutionPayloadBodyV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  withdrawals_.MergeFrom(from.withdrawals_);
}

void ExecutionPayloadBodyV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.ExecutionPayloadBodyV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionPayloadBodyV1::CopyFrom(const ExecutionPayloadBodyV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.ExecutionPayloadBodyV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionPayloadBodyV1::IsInitialized() const {
  return true;
}

void ExecutionPayloadBodyV1::InternalSwap(ExecutionPayloadBodyV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  withdrawals_.InternalSwap(&other->withdrawals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionPayloadBodyV1::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  service_major_version(kServiceMajorVersionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  service_minor_version(kServiceMinorVersionFieldNumber, 0u);
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  service_patch_version(kServicePatchVersionFieldNumber, 0u);

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::types::H128* Arena::CreateMaybeMessage< ::types::H128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H128 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H160* Arena::CreateMaybeMessage< ::types::H160 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H160 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H256* Arena::CreateMaybeMessage< ::types::H256 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H256 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H512* Arena::CreateMaybeMessage< ::types::H512 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H512 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H1024* Arena::CreateMaybeMessage< ::types::H1024 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H1024 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::H2048* Arena::CreateMaybeMessage< ::types::H2048 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::H2048 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::VersionReply* Arena::CreateMaybeMessage< ::types::VersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::VersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::types::ExecutionPayload* Arena::CreateMaybeMessage< ::types::ExecutionPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::ExecutionPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::types::Withdrawal* Arena::CreateMaybeMessage< ::types::Withdrawal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::Withdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::types::BlobsBundleV1* Arena::CreateMaybeMessage< ::types::BlobsBundleV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::BlobsBundleV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::types::NodeInfoPorts* Arena::CreateMaybeMessage< ::types::NodeInfoPorts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::NodeInfoPorts >(arena);
}
template<> PROTOBUF_NOINLINE ::types::NodeInfoReply* Arena::CreateMaybeMessage< ::types::NodeInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::NodeInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::types::PeerInfo* Arena::CreateMaybeMessage< ::types::PeerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::PeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::types::ExecutionPayloadBodyV1* Arena::CreateMaybeMessage< ::types::ExecutionPayloadBodyV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::types::ExecutionPayloadBodyV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
