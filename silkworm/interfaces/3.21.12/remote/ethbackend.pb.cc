// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/ethbackend.proto

#include "remote/ethbackend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace remote {
PROTOBUF_CONSTEXPR EtherbaseRequest::EtherbaseRequest(
    ::_pbi::ConstantInitialized) {}
struct EtherbaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtherbaseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtherbaseRequestDefaultTypeInternal() {}
  union {
    EtherbaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtherbaseRequestDefaultTypeInternal _EtherbaseRequest_default_instance_;
PROTOBUF_CONSTEXPR EtherbaseReply::EtherbaseReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EtherbaseReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtherbaseReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtherbaseReplyDefaultTypeInternal() {}
  union {
    EtherbaseReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtherbaseReplyDefaultTypeInternal _EtherbaseReply_default_instance_;
PROTOBUF_CONSTEXPR NetVersionRequest::NetVersionRequest(
    ::_pbi::ConstantInitialized) {}
struct NetVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetVersionRequestDefaultTypeInternal() {}
  union {
    NetVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetVersionRequestDefaultTypeInternal _NetVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR NetVersionReply::NetVersionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetVersionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetVersionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetVersionReplyDefaultTypeInternal() {}
  union {
    NetVersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetVersionReplyDefaultTypeInternal _NetVersionReply_default_instance_;
PROTOBUF_CONSTEXPR NetPeerCountRequest::NetPeerCountRequest(
    ::_pbi::ConstantInitialized) {}
struct NetPeerCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetPeerCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetPeerCountRequestDefaultTypeInternal() {}
  union {
    NetPeerCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetPeerCountRequestDefaultTypeInternal _NetPeerCountRequest_default_instance_;
PROTOBUF_CONSTEXPR NetPeerCountReply::NetPeerCountReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetPeerCountReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetPeerCountReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetPeerCountReplyDefaultTypeInternal() {}
  union {
    NetPeerCountReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetPeerCountReplyDefaultTypeInternal _NetPeerCountReply_default_instance_;
PROTOBUF_CONSTEXPR ProtocolVersionRequest::ProtocolVersionRequest(
    ::_pbi::ConstantInitialized) {}
struct ProtocolVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolVersionRequestDefaultTypeInternal() {}
  union {
    ProtocolVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolVersionRequestDefaultTypeInternal _ProtocolVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ProtocolVersionReply::ProtocolVersionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtocolVersionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolVersionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolVersionReplyDefaultTypeInternal() {}
  union {
    ProtocolVersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolVersionReplyDefaultTypeInternal _ProtocolVersionReply_default_instance_;
PROTOBUF_CONSTEXPR ClientVersionRequest::ClientVersionRequest(
    ::_pbi::ConstantInitialized) {}
struct ClientVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientVersionRequestDefaultTypeInternal() {}
  union {
    ClientVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientVersionRequestDefaultTypeInternal _ClientVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientVersionReply::ClientVersionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientVersionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientVersionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientVersionReplyDefaultTypeInternal() {}
  union {
    ClientVersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientVersionReplyDefaultTypeInternal _ClientVersionReply_default_instance_;
PROTOBUF_CONSTEXPR SubscribeRequest::SubscribeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRequestDefaultTypeInternal() {}
  union {
    SubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeReply::SubscribeReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeReplyDefaultTypeInternal() {}
  union {
    SubscribeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeReplyDefaultTypeInternal _SubscribeReply_default_instance_;
PROTOBUF_CONSTEXPR LogsFilterRequest::LogsFilterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addresses_)*/{}
  , /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.all_addresses_)*/false
  , /*decltype(_impl_.all_topics_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogsFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogsFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogsFilterRequestDefaultTypeInternal() {}
  union {
    LogsFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogsFilterRequestDefaultTypeInternal _LogsFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeLogsReply::SubscribeLogsReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.transaction_hash_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.log_index_)*/uint64_t{0u}
  , /*decltype(_impl_.transaction_index_)*/uint64_t{0u}
  , /*decltype(_impl_.removed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeLogsReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLogsReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLogsReplyDefaultTypeInternal() {}
  union {
    SubscribeLogsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLogsReplyDefaultTypeInternal _SubscribeLogsReply_default_instance_;
PROTOBUF_CONSTEXPR BlockRequest::BlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_hash_)*/nullptr
  , /*decltype(_impl_.block_height_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRequestDefaultTypeInternal() {}
  union {
    BlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
PROTOBUF_CONSTEXPR BlockReply::BlockReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_rlp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.senders_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockReplyDefaultTypeInternal() {}
  union {
    BlockReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockReplyDefaultTypeInternal _BlockReply_default_instance_;
PROTOBUF_CONSTEXPR TxnLookupRequest::TxnLookupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txn_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxnLookupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxnLookupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxnLookupRequestDefaultTypeInternal() {}
  union {
    TxnLookupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxnLookupRequestDefaultTypeInternal _TxnLookupRequest_default_instance_;
PROTOBUF_CONSTEXPR TxnLookupReply::TxnLookupReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxnLookupReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxnLookupReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxnLookupReplyDefaultTypeInternal() {}
  union {
    TxnLookupReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxnLookupReplyDefaultTypeInternal _TxnLookupReply_default_instance_;
PROTOBUF_CONSTEXPR NodesInfoRequest::NodesInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodesInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodesInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodesInfoRequestDefaultTypeInternal() {}
  union {
    NodesInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodesInfoRequestDefaultTypeInternal _NodesInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR AddPeerRequest::AddPeerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPeerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPeerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPeerRequestDefaultTypeInternal() {}
  union {
    AddPeerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPeerRequestDefaultTypeInternal _AddPeerRequest_default_instance_;
PROTOBUF_CONSTEXPR NodesInfoReply::NodesInfoReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodesInfoReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodesInfoReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodesInfoReplyDefaultTypeInternal() {}
  union {
    NodesInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodesInfoReplyDefaultTypeInternal _NodesInfoReply_default_instance_;
PROTOBUF_CONSTEXPR PeersReply::PeersReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeersReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeersReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeersReplyDefaultTypeInternal() {}
  union {
    PeersReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeersReplyDefaultTypeInternal _PeersReply_default_instance_;
PROTOBUF_CONSTEXPR AddPeerReply::AddPeerReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPeerReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPeerReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPeerReplyDefaultTypeInternal() {}
  union {
    AddPeerReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPeerReplyDefaultTypeInternal _AddPeerReply_default_instance_;
PROTOBUF_CONSTEXPR PendingBlockReply::PendingBlockReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_rlp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PendingBlockReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PendingBlockReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PendingBlockReplyDefaultTypeInternal() {}
  union {
    PendingBlockReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PendingBlockReplyDefaultTypeInternal _PendingBlockReply_default_instance_;
PROTOBUF_CONSTEXPR EngineGetPayloadBodiesByHashV1Request::EngineGetPayloadBodiesByHashV1Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineGetPayloadBodiesByHashV1RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineGetPayloadBodiesByHashV1RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineGetPayloadBodiesByHashV1RequestDefaultTypeInternal() {}
  union {
    EngineGetPayloadBodiesByHashV1Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineGetPayloadBodiesByHashV1RequestDefaultTypeInternal _EngineGetPayloadBodiesByHashV1Request_default_instance_;
PROTOBUF_CONSTEXPR EngineGetPayloadBodiesByRangeV1Request::EngineGetPayloadBodiesByRangeV1Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineGetPayloadBodiesByRangeV1RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineGetPayloadBodiesByRangeV1RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineGetPayloadBodiesByRangeV1RequestDefaultTypeInternal() {}
  union {
    EngineGetPayloadBodiesByRangeV1Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineGetPayloadBodiesByRangeV1RequestDefaultTypeInternal _EngineGetPayloadBodiesByRangeV1Request_default_instance_;
PROTOBUF_CONSTEXPR BorEventRequest::BorEventRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bor_tx_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BorEventRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BorEventRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BorEventRequestDefaultTypeInternal() {}
  union {
    BorEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BorEventRequestDefaultTypeInternal _BorEventRequest_default_instance_;
PROTOBUF_CONSTEXPR BorEventReply::BorEventReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_rlps_)*/{}
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.present_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BorEventReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BorEventReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BorEventReplyDefaultTypeInternal() {}
  union {
    BorEventReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BorEventReplyDefaultTypeInternal _BorEventReply_default_instance_;
}  // namespace remote
static ::_pb::Metadata file_level_metadata_remote_2fethbackend_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_remote_2fethbackend_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_remote_2fethbackend_2eproto = nullptr;

const uint32_t TableStruct_remote_2fethbackend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseReply, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionReply, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountReply, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionReply, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionReply, _impl_.node_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.all_addresses_),
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.addresses_),
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.all_topics_),
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.topics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.log_index_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.topics_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.transaction_hash_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.transaction_index_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::BlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::BlockRequest, _impl_.block_height_),
  PROTOBUF_FIELD_OFFSET(::remote::BlockRequest, _impl_.block_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::BlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::BlockReply, _impl_.block_rlp_),
  PROTOBUF_FIELD_OFFSET(::remote::BlockReply, _impl_.senders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupRequest, _impl_.txn_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupReply, _impl_.block_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::AddPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::AddPeerRequest, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoReply, _impl_.nodes_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::PeersReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::PeersReply, _impl_.peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::AddPeerReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::AddPeerReply, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::PendingBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::PendingBlockReply, _impl_.block_rlp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EngineGetPayloadBodiesByHashV1Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EngineGetPayloadBodiesByHashV1Request, _impl_.hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EngineGetPayloadBodiesByRangeV1Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EngineGetPayloadBodiesByRangeV1Request, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::remote::EngineGetPayloadBodiesByRangeV1Request, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::BorEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::BorEventRequest, _impl_.bor_tx_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::BorEventReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::BorEventReply, _impl_.present_),
  PROTOBUF_FIELD_OFFSET(::remote::BorEventReply, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::remote::BorEventReply, _impl_.event_rlps_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::remote::EtherbaseRequest)},
  { 6, -1, -1, sizeof(::remote::EtherbaseReply)},
  { 13, -1, -1, sizeof(::remote::NetVersionRequest)},
  { 19, -1, -1, sizeof(::remote::NetVersionReply)},
  { 26, -1, -1, sizeof(::remote::NetPeerCountRequest)},
  { 32, -1, -1, sizeof(::remote::NetPeerCountReply)},
  { 39, -1, -1, sizeof(::remote::ProtocolVersionRequest)},
  { 45, -1, -1, sizeof(::remote::ProtocolVersionReply)},
  { 52, -1, -1, sizeof(::remote::ClientVersionRequest)},
  { 58, -1, -1, sizeof(::remote::ClientVersionReply)},
  { 65, -1, -1, sizeof(::remote::SubscribeRequest)},
  { 72, -1, -1, sizeof(::remote::SubscribeReply)},
  { 80, -1, -1, sizeof(::remote::LogsFilterRequest)},
  { 90, -1, -1, sizeof(::remote::SubscribeLogsReply)},
  { 105, -1, -1, sizeof(::remote::BlockRequest)},
  { 113, -1, -1, sizeof(::remote::BlockReply)},
  { 121, -1, -1, sizeof(::remote::TxnLookupRequest)},
  { 128, -1, -1, sizeof(::remote::TxnLookupReply)},
  { 135, -1, -1, sizeof(::remote::NodesInfoRequest)},
  { 142, -1, -1, sizeof(::remote::AddPeerRequest)},
  { 149, -1, -1, sizeof(::remote::NodesInfoReply)},
  { 156, -1, -1, sizeof(::remote::PeersReply)},
  { 163, -1, -1, sizeof(::remote::AddPeerReply)},
  { 170, -1, -1, sizeof(::remote::PendingBlockReply)},
  { 177, -1, -1, sizeof(::remote::EngineGetPayloadBodiesByHashV1Request)},
  { 184, -1, -1, sizeof(::remote::EngineGetPayloadBodiesByRangeV1Request)},
  { 192, -1, -1, sizeof(::remote::BorEventRequest)},
  { 199, -1, -1, sizeof(::remote::BorEventReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::remote::_EtherbaseRequest_default_instance_._instance,
  &::remote::_EtherbaseReply_default_instance_._instance,
  &::remote::_NetVersionRequest_default_instance_._instance,
  &::remote::_NetVersionReply_default_instance_._instance,
  &::remote::_NetPeerCountRequest_default_instance_._instance,
  &::remote::_NetPeerCountReply_default_instance_._instance,
  &::remote::_ProtocolVersionRequest_default_instance_._instance,
  &::remote::_ProtocolVersionReply_default_instance_._instance,
  &::remote::_ClientVersionRequest_default_instance_._instance,
  &::remote::_ClientVersionReply_default_instance_._instance,
  &::remote::_SubscribeRequest_default_instance_._instance,
  &::remote::_SubscribeReply_default_instance_._instance,
  &::remote::_LogsFilterRequest_default_instance_._instance,
  &::remote::_SubscribeLogsReply_default_instance_._instance,
  &::remote::_BlockRequest_default_instance_._instance,
  &::remote::_BlockReply_default_instance_._instance,
  &::remote::_TxnLookupRequest_default_instance_._instance,
  &::remote::_TxnLookupReply_default_instance_._instance,
  &::remote::_NodesInfoRequest_default_instance_._instance,
  &::remote::_AddPeerRequest_default_instance_._instance,
  &::remote::_NodesInfoReply_default_instance_._instance,
  &::remote::_PeersReply_default_instance_._instance,
  &::remote::_AddPeerReply_default_instance_._instance,
  &::remote::_PendingBlockReply_default_instance_._instance,
  &::remote::_EngineGetPayloadBodiesByHashV1Request_default_instance_._instance,
  &::remote::_EngineGetPayloadBodiesByRangeV1Request_default_instance_._instance,
  &::remote::_BorEventRequest_default_instance_._instance,
  &::remote::_BorEventReply_default_instance_._instance,
};

const char descriptor_table_protodef_remote_2fethbackend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027remote/ethbackend.proto\022\006remote\032\033googl"
  "e/protobuf/empty.proto\032\021types/types.prot"
  "o\"\022\n\020EtherbaseRequest\".\n\016EtherbaseReply\022"
  "\034\n\007address\030\001 \001(\0132\013.types.H160\"\023\n\021NetVers"
  "ionRequest\"\035\n\017NetVersionReply\022\n\n\002id\030\001 \001("
  "\004\"\025\n\023NetPeerCountRequest\"\"\n\021NetPeerCount"
  "Reply\022\r\n\005count\030\001 \001(\004\"\030\n\026ProtocolVersionR"
  "equest\"\"\n\024ProtocolVersionReply\022\n\n\002id\030\001 \001"
  "(\004\"\026\n\024ClientVersionRequest\"\'\n\022ClientVers"
  "ionReply\022\021\n\tnode_name\030\001 \001(\t\"/\n\020Subscribe"
  "Request\022\033\n\004type\030\001 \001(\0162\r.remote.Event\";\n\016"
  "SubscribeReply\022\033\n\004type\030\001 \001(\0162\r.remote.Ev"
  "ent\022\014\n\004data\030\002 \001(\014\"{\n\021LogsFilterRequest\022\025"
  "\n\rall_addresses\030\001 \001(\010\022\036\n\taddresses\030\002 \003(\013"
  "2\013.types.H160\022\022\n\nall_topics\030\003 \001(\010\022\033\n\006top"
  "ics\030\004 \003(\0132\013.types.H256\"\372\001\n\022SubscribeLogs"
  "Reply\022\034\n\007address\030\001 \001(\0132\013.types.H160\022\037\n\nb"
  "lock_hash\030\002 \001(\0132\013.types.H256\022\024\n\014block_nu"
  "mber\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\021\n\tlog_index\030\005 "
  "\001(\004\022\033\n\006topics\030\006 \003(\0132\013.types.H256\022%\n\020tran"
  "saction_hash\030\007 \001(\0132\013.types.H256\022\031\n\021trans"
  "action_index\030\010 \001(\004\022\017\n\007removed\030\t \001(\010\"E\n\014B"
  "lockRequest\022\024\n\014block_height\030\002 \001(\004\022\037\n\nblo"
  "ck_hash\030\003 \001(\0132\013.types.H256\"0\n\nBlockReply"
  "\022\021\n\tblock_rlp\030\001 \001(\014\022\017\n\007senders\030\002 \001(\014\"1\n\020"
  "TxnLookupRequest\022\035\n\010txn_hash\030\001 \001(\0132\013.typ"
  "es.H256\"&\n\016TxnLookupReply\022\024\n\014block_numbe"
  "r\030\001 \001(\004\"!\n\020NodesInfoRequest\022\r\n\005limit\030\001 \001"
  "(\r\"\035\n\016AddPeerRequest\022\013\n\003url\030\001 \001(\t\":\n\016Nod"
  "esInfoReply\022(\n\nnodes_info\030\001 \003(\0132\024.types."
  "NodeInfoReply\",\n\nPeersReply\022\036\n\005peers\030\001 \003"
  "(\0132\017.types.PeerInfo\"\037\n\014AddPeerReply\022\017\n\007s"
  "uccess\030\001 \001(\010\"&\n\021PendingBlockReply\022\021\n\tblo"
  "ck_rlp\030\001 \001(\014\"D\n%EngineGetPayloadBodiesBy"
  "HashV1Request\022\033\n\006hashes\030\001 \003(\0132\013.types.H2"
  "56\"F\n&EngineGetPayloadBodiesByRangeV1Req"
  "uest\022\r\n\005start\030\001 \001(\004\022\r\n\005count\030\002 \001(\004\"3\n\017Bo"
  "rEventRequest\022 \n\013bor_tx_hash\030\001 \001(\0132\013.typ"
  "es.H256\"J\n\rBorEventReply\022\017\n\007present\030\001 \001("
  "\010\022\024\n\014block_number\030\002 \001(\004\022\022\n\nevent_rlps\030\003 "
  "\003(\014*J\n\005Event\022\n\n\006HEADER\020\000\022\020\n\014PENDING_LOGS"
  "\020\001\022\021\n\rPENDING_BLOCK\020\002\022\020\n\014NEW_SNAPSHOT\020\0032"
  "\323\007\n\nETHBACKEND\022=\n\tEtherbase\022\030.remote.Eth"
  "erbaseRequest\032\026.remote.EtherbaseReply\022@\n"
  "\nNetVersion\022\031.remote.NetVersionRequest\032\027"
  ".remote.NetVersionReply\022F\n\014NetPeerCount\022"
  "\033.remote.NetPeerCountRequest\032\031.remote.Ne"
  "tPeerCountReply\0226\n\007Version\022\026.google.prot"
  "obuf.Empty\032\023.types.VersionReply\022O\n\017Proto"
  "colVersion\022\036.remote.ProtocolVersionReque"
  "st\032\034.remote.ProtocolVersionReply\022I\n\rClie"
  "ntVersion\022\034.remote.ClientVersionRequest\032"
  "\032.remote.ClientVersionReply\022\?\n\tSubscribe"
  "\022\030.remote.SubscribeRequest\032\026.remote.Subs"
  "cribeReply0\001\022J\n\rSubscribeLogs\022\031.remote.L"
  "ogsFilterRequest\032\032.remote.SubscribeLogsR"
  "eply(\0010\001\0221\n\005Block\022\024.remote.BlockRequest\032"
  "\022.remote.BlockReply\022=\n\tTxnLookup\022\030.remot"
  "e.TxnLookupRequest\032\026.remote.TxnLookupRep"
  "ly\022<\n\010NodeInfo\022\030.remote.NodesInfoRequest"
  "\032\026.remote.NodesInfoReply\0223\n\005Peers\022\026.goog"
  "le.protobuf.Empty\032\022.remote.PeersReply\0227\n"
  "\007AddPeer\022\026.remote.AddPeerRequest\032\024.remot"
  "e.AddPeerReply\022A\n\014PendingBlock\022\026.google."
  "protobuf.Empty\032\031.remote.PendingBlockRepl"
  "y\022:\n\010BorEvent\022\027.remote.BorEventRequest\032\025"
  ".remote.BorEventReplyB\021Z\017./remote;remote"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_remote_2fethbackend_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_remote_2fethbackend_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_remote_2fethbackend_2eproto = {
    false, false, 2688, descriptor_table_protodef_remote_2fethbackend_2eproto,
    "remote/ethbackend.proto",
    &descriptor_table_remote_2fethbackend_2eproto_once, descriptor_table_remote_2fethbackend_2eproto_deps, 2, 28,
    schemas, file_default_instances, TableStruct_remote_2fethbackend_2eproto::offsets,
    file_level_metadata_remote_2fethbackend_2eproto, file_level_enum_descriptors_remote_2fethbackend_2eproto,
    file_level_service_descriptors_remote_2fethbackend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_remote_2fethbackend_2eproto_getter() {
  return &descriptor_table_remote_2fethbackend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_remote_2fethbackend_2eproto(&descriptor_table_remote_2fethbackend_2eproto);
namespace remote {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fethbackend_2eproto);
  return file_level_enum_descriptors_remote_2fethbackend_2eproto[0];
}
bool Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EtherbaseRequest::_Internal {
 public:
};

EtherbaseRequest::EtherbaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.EtherbaseRequest)
}
EtherbaseRequest::EtherbaseRequest(const EtherbaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EtherbaseRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.EtherbaseRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EtherbaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EtherbaseRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EtherbaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[0]);
}

// ===================================================================

class EtherbaseReply::_Internal {
 public:
  static const ::types::H160& address(const EtherbaseReply* msg);
};

const ::types::H160&
EtherbaseReply::_Internal::address(const EtherbaseReply* msg) {
  return *msg->_impl_.address_;
}
void EtherbaseReply::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
EtherbaseReply::EtherbaseReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EtherbaseReply)
}
EtherbaseReply::EtherbaseReply(const EtherbaseReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EtherbaseReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::types::H160(*from._impl_.address_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.EtherbaseReply)
}

inline void EtherbaseReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EtherbaseReply::~EtherbaseReply() {
  // @@protoc_insertion_point(destructor:remote.EtherbaseReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EtherbaseReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.address_;
}

void EtherbaseReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EtherbaseReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EtherbaseReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EtherbaseReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EtherbaseReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EtherbaseReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EtherbaseReply)
  return target;
}

size_t EtherbaseReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EtherbaseReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EtherbaseReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EtherbaseReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EtherbaseReply::GetClassData() const { return &_class_data_; }


void EtherbaseReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EtherbaseReply*>(&to_msg);
  auto& from = static_cast<const EtherbaseReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EtherbaseReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::types::H160::MergeFrom(
        from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EtherbaseReply::CopyFrom(const EtherbaseReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EtherbaseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtherbaseReply::IsInitialized() const {
  return true;
}

void EtherbaseReply::InternalSwap(EtherbaseReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EtherbaseReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[1]);
}

// ===================================================================

class NetVersionRequest::_Internal {
 public:
};

NetVersionRequest::NetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.NetVersionRequest)
}
NetVersionRequest::NetVersionRequest(const NetVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NetVersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NetVersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetVersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NetVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[2]);
}

// ===================================================================

class NetVersionReply::_Internal {
 public:
};

NetVersionReply::NetVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NetVersionReply)
}
NetVersionReply::NetVersionReply(const NetVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetVersionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:remote.NetVersionReply)
}

inline void NetVersionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetVersionReply::~NetVersionReply() {
  // @@protoc_insertion_point(destructor:remote.NetVersionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetVersionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetVersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetVersionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetVersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetVersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetVersionReply)
  return target;
}

size_t NetVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetVersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetVersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetVersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetVersionReply::GetClassData() const { return &_class_data_; }


void NetVersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetVersionReply*>(&to_msg);
  auto& from = static_cast<const NetVersionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NetVersionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetVersionReply::CopyFrom(const NetVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetVersionReply::IsInitialized() const {
  return true;
}

void NetVersionReply::InternalSwap(NetVersionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetVersionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[3]);
}

// ===================================================================

class NetPeerCountRequest::_Internal {
 public:
};

NetPeerCountRequest::NetPeerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.NetPeerCountRequest)
}
NetPeerCountRequest::NetPeerCountRequest(const NetPeerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NetPeerCountRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NetPeerCountRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetPeerCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetPeerCountRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NetPeerCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[4]);
}

// ===================================================================

class NetPeerCountReply::_Internal {
 public:
};

NetPeerCountReply::NetPeerCountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NetPeerCountReply)
}
NetPeerCountReply::NetPeerCountReply(const NetPeerCountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetPeerCountReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:remote.NetPeerCountReply)
}

inline void NetPeerCountReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetPeerCountReply::~NetPeerCountReply() {
  // @@protoc_insertion_point(destructor:remote.NetPeerCountReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetPeerCountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetPeerCountReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetPeerCountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetPeerCountReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetPeerCountReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetPeerCountReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetPeerCountReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetPeerCountReply)
  return target;
}

size_t NetPeerCountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetPeerCountReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetPeerCountReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetPeerCountReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetPeerCountReply::GetClassData() const { return &_class_data_; }


void NetPeerCountReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetPeerCountReply*>(&to_msg);
  auto& from = static_cast<const NetPeerCountReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NetPeerCountReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetPeerCountReply::CopyFrom(const NetPeerCountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetPeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetPeerCountReply::IsInitialized() const {
  return true;
}

void NetPeerCountReply::InternalSwap(NetPeerCountReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetPeerCountReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[5]);
}

// ===================================================================

class ProtocolVersionRequest::_Internal {
 public:
};

ProtocolVersionRequest::ProtocolVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.ProtocolVersionRequest)
}
ProtocolVersionRequest::ProtocolVersionRequest(const ProtocolVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ProtocolVersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.ProtocolVersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolVersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ProtocolVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[6]);
}

// ===================================================================

class ProtocolVersionReply::_Internal {
 public:
};

ProtocolVersionReply::ProtocolVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.ProtocolVersionReply)
}
ProtocolVersionReply::ProtocolVersionReply(const ProtocolVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtocolVersionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:remote.ProtocolVersionReply)
}

inline void ProtocolVersionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtocolVersionReply::~ProtocolVersionReply() {
  // @@protoc_insertion_point(destructor:remote.ProtocolVersionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtocolVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtocolVersionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtocolVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ProtocolVersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolVersionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtocolVersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ProtocolVersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ProtocolVersionReply)
  return target;
}

size_t ProtocolVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ProtocolVersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolVersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtocolVersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolVersionReply::GetClassData() const { return &_class_data_; }


void ProtocolVersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtocolVersionReply*>(&to_msg);
  auto& from = static_cast<const ProtocolVersionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.ProtocolVersionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolVersionReply::CopyFrom(const ProtocolVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ProtocolVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolVersionReply::IsInitialized() const {
  return true;
}

void ProtocolVersionReply::InternalSwap(ProtocolVersionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolVersionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[7]);
}

// ===================================================================

class ClientVersionRequest::_Internal {
 public:
};

ClientVersionRequest::ClientVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.ClientVersionRequest)
}
ClientVersionRequest::ClientVersionRequest(const ClientVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientVersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.ClientVersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientVersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[8]);
}

// ===================================================================

class ClientVersionReply::_Internal {
 public:
};

ClientVersionReply::ClientVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.ClientVersionReply)
}
ClientVersionReply::ClientVersionReply(const ClientVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientVersionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.ClientVersionReply)
}

inline void ClientVersionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientVersionReply::~ClientVersionReply() {
  // @@protoc_insertion_point(destructor:remote.ClientVersionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_name_.Destroy();
}

void ClientVersionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ClientVersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientVersionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.ClientVersionReply.node_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientVersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ClientVersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.ClientVersionReply.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ClientVersionReply)
  return target;
}

size_t ClientVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ClientVersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_name = 1;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientVersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientVersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientVersionReply::GetClassData() const { return &_class_data_; }


void ClientVersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientVersionReply*>(&to_msg);
  auto& from = static_cast<const ClientVersionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.ClientVersionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientVersionReply::CopyFrom(const ClientVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ClientVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientVersionReply::IsInitialized() const {
  return true;
}

void ClientVersionReply::InternalSwap(ClientVersionReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_name_, lhs_arena,
      &other->_impl_.node_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientVersionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[9]);
}

// ===================================================================

class SubscribeRequest::_Internal {
 public:
};

SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeRequest)
}

inline void SubscribeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:remote.SubscribeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscribeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.Event type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remote::Event>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRequest::GetClassData() const { return &_class_data_; }


void SubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[10]);
}

// ===================================================================

class SubscribeReply::_Internal {
 public:
};

SubscribeReply::SubscribeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeReply)
}
SubscribeReply::SubscribeReply(const SubscribeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeReply)
}

inline void SubscribeReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeReply::~SubscribeReply() {
  // @@protoc_insertion_point(destructor:remote.SubscribeReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void SubscribeReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.Event type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remote::Event>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeReply)
  return target;
}

size_t SubscribeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeReply::GetClassData() const { return &_class_data_; }


void SubscribeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeReply*>(&to_msg);
  auto& from = static_cast<const SubscribeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeReply::CopyFrom(const SubscribeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReply::IsInitialized() const {
  return true;
}

void SubscribeReply::InternalSwap(SubscribeReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[11]);
}

// ===================================================================

class LogsFilterRequest::_Internal {
 public:
};

void LogsFilterRequest::clear_addresses() {
  _impl_.addresses_.Clear();
}
void LogsFilterRequest::clear_topics() {
  _impl_.topics_.Clear();
}
LogsFilterRequest::LogsFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.LogsFilterRequest)
}
LogsFilterRequest::LogsFilterRequest(const LogsFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogsFilterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){from._impl_.addresses_}
    , decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.all_addresses_){}
    , decltype(_impl_.all_topics_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.all_addresses_, &from._impl_.all_addresses_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.all_topics_) -
    reinterpret_cast<char*>(&_impl_.all_addresses_)) + sizeof(_impl_.all_topics_));
  // @@protoc_insertion_point(copy_constructor:remote.LogsFilterRequest)
}

inline void LogsFilterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){arena}
    , decltype(_impl_.topics_){arena}
    , decltype(_impl_.all_addresses_){false}
    , decltype(_impl_.all_topics_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogsFilterRequest::~LogsFilterRequest() {
  // @@protoc_insertion_point(destructor:remote.LogsFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogsFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addresses_.~RepeatedPtrField();
  _impl_.topics_.~RepeatedPtrField();
}

void LogsFilterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogsFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.LogsFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addresses_.Clear();
  _impl_.topics_.Clear();
  ::memset(&_impl_.all_addresses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.all_topics_) -
      reinterpret_cast<char*>(&_impl_.all_addresses_)) + sizeof(_impl_.all_topics_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool all_addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.all_addresses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.H160 addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool all_topics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.all_topics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.H256 topics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogsFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.LogsFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all_addresses = 1;
  if (this->_internal_all_addresses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_all_addresses(), target);
  }

  // repeated .types.H160 addresses = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool all_topics = 3;
  if (this->_internal_all_topics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_all_topics(), target);
  }

  // repeated .types.H256 topics = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topics_size()); i < n; i++) {
    const auto& repfield = this->_internal_topics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.LogsFilterRequest)
  return target;
}

size_t LogsFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.LogsFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H160 addresses = 2;
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->_impl_.addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .types.H256 topics = 4;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->_impl_.topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool all_addresses = 1;
  if (this->_internal_all_addresses() != 0) {
    total_size += 1 + 1;
  }

  // bool all_topics = 3;
  if (this->_internal_all_topics() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogsFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsFilterRequest::GetClassData() const { return &_class_data_; }


void LogsFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogsFilterRequest*>(&to_msg);
  auto& from = static_cast<const LogsFilterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.LogsFilterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addresses_.MergeFrom(from._impl_.addresses_);
  _this->_impl_.topics_.MergeFrom(from._impl_.topics_);
  if (from._internal_all_addresses() != 0) {
    _this->_internal_set_all_addresses(from._internal_all_addresses());
  }
  if (from._internal_all_topics() != 0) {
    _this->_internal_set_all_topics(from._internal_all_topics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsFilterRequest::CopyFrom(const LogsFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.LogsFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsFilterRequest::IsInitialized() const {
  return true;
}

void LogsFilterRequest::InternalSwap(LogsFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.addresses_.InternalSwap(&other->_impl_.addresses_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogsFilterRequest, _impl_.all_topics_)
      + sizeof(LogsFilterRequest::_impl_.all_topics_)
      - PROTOBUF_FIELD_OFFSET(LogsFilterRequest, _impl_.all_addresses_)>(
          reinterpret_cast<char*>(&_impl_.all_addresses_),
          reinterpret_cast<char*>(&other->_impl_.all_addresses_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[12]);
}

// ===================================================================

class SubscribeLogsReply::_Internal {
 public:
  static const ::types::H160& address(const SubscribeLogsReply* msg);
  static const ::types::H256& block_hash(const SubscribeLogsReply* msg);
  static const ::types::H256& transaction_hash(const SubscribeLogsReply* msg);
};

const ::types::H160&
SubscribeLogsReply::_Internal::address(const SubscribeLogsReply* msg) {
  return *msg->_impl_.address_;
}
const ::types::H256&
SubscribeLogsReply::_Internal::block_hash(const SubscribeLogsReply* msg) {
  return *msg->_impl_.block_hash_;
}
const ::types::H256&
SubscribeLogsReply::_Internal::transaction_hash(const SubscribeLogsReply* msg) {
  return *msg->_impl_.transaction_hash_;
}
void SubscribeLogsReply::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
void SubscribeLogsReply::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
void SubscribeLogsReply::clear_topics() {
  _impl_.topics_.Clear();
}
void SubscribeLogsReply::clear_transaction_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_hash_ != nullptr) {
    delete _impl_.transaction_hash_;
  }
  _impl_.transaction_hash_ = nullptr;
}
SubscribeLogsReply::SubscribeLogsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeLogsReply)
}
SubscribeLogsReply::SubscribeLogsReply(const SubscribeLogsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeLogsReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.transaction_hash_){nullptr}
    , decltype(_impl_.block_number_){}
    , decltype(_impl_.log_index_){}
    , decltype(_impl_.transaction_index_){}
    , decltype(_impl_.removed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::types::H160(*from._impl_.address_);
  }
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  if (from._internal_has_transaction_hash()) {
    _this->_impl_.transaction_hash_ = new ::types::H256(*from._impl_.transaction_hash_);
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.removed_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.removed_));
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeLogsReply)
}

inline void SubscribeLogsReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.transaction_hash_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , decltype(_impl_.log_index_){uint64_t{0u}}
    , decltype(_impl_.transaction_index_){uint64_t{0u}}
    , decltype(_impl_.removed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeLogsReply::~SubscribeLogsReply() {
  // @@protoc_insertion_point(destructor:remote.SubscribeLogsReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeLogsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topics_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.address_;
  if (this != internal_default_instance()) delete _impl_.block_hash_;
  if (this != internal_default_instance()) delete _impl_.transaction_hash_;
}

void SubscribeLogsReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeLogsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeLogsReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topics_.Clear();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.transaction_hash_ != nullptr) {
    delete _impl_.transaction_hash_;
  }
  _impl_.transaction_hash_ = nullptr;
  ::memset(&_impl_.block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.removed_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.removed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeLogsReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 log_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.H256 topics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .types.H256 transaction_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 transaction_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.transaction_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool removed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeLogsReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeLogsReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // .types.H256 block_hash = 2;
  if (this->_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  // uint64 block_number = 3;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_block_number(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 log_index = 5;
  if (this->_internal_log_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_log_index(), target);
  }

  // repeated .types.H256 topics = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topics_size()); i < n; i++) {
    const auto& repfield = this->_internal_topics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .types.H256 transaction_hash = 7;
  if (this->_internal_has_transaction_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::transaction_hash(this),
        _Internal::transaction_hash(this).GetCachedSize(), target, stream);
  }

  // uint64 transaction_index = 8;
  if (this->_internal_transaction_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_transaction_index(), target);
  }

  // bool removed = 9;
  if (this->_internal_removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeLogsReply)
  return target;
}

size_t SubscribeLogsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeLogsReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 topics = 6;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->_impl_.topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  // .types.H256 block_hash = 2;
  if (this->_internal_has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_hash_);
  }

  // .types.H256 transaction_hash = 7;
  if (this->_internal_has_transaction_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transaction_hash_);
  }

  // uint64 block_number = 3;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // uint64 log_index = 5;
  if (this->_internal_log_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_log_index());
  }

  // uint64 transaction_index = 8;
  if (this->_internal_transaction_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transaction_index());
  }

  // bool removed = 9;
  if (this->_internal_removed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeLogsReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeLogsReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeLogsReply::GetClassData() const { return &_class_data_; }


void SubscribeLogsReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeLogsReply*>(&to_msg);
  auto& from = static_cast<const SubscribeLogsReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeLogsReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.topics_.MergeFrom(from._impl_.topics_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::types::H160::MergeFrom(
        from._internal_address());
  }
  if (from._internal_has_block_hash()) {
    _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
        from._internal_block_hash());
  }
  if (from._internal_has_transaction_hash()) {
    _this->_internal_mutable_transaction_hash()->::types::H256::MergeFrom(
        from._internal_transaction_hash());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_log_index() != 0) {
    _this->_internal_set_log_index(from._internal_log_index());
  }
  if (from._internal_transaction_index() != 0) {
    _this->_internal_set_transaction_index(from._internal_transaction_index());
  }
  if (from._internal_removed() != 0) {
    _this->_internal_set_removed(from._internal_removed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeLogsReply::CopyFrom(const SubscribeLogsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeLogsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLogsReply::IsInitialized() const {
  return true;
}

void SubscribeLogsReply::InternalSwap(SubscribeLogsReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeLogsReply, _impl_.removed_)
      + sizeof(SubscribeLogsReply::_impl_.removed_)
      - PROTOBUF_FIELD_OFFSET(SubscribeLogsReply, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLogsReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[13]);
}

// ===================================================================

class BlockRequest::_Internal {
 public:
  static const ::types::H256& block_hash(const BlockRequest* msg);
};

const ::types::H256&
BlockRequest::_Internal::block_hash(const BlockRequest* msg) {
  return *msg->_impl_.block_hash_;
}
void BlockRequest::clear_block_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
}
BlockRequest::BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.BlockRequest)
}
BlockRequest::BlockRequest(const BlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_hash()) {
    _this->_impl_.block_hash_ = new ::types::H256(*from._impl_.block_hash_);
  }
  _this->_impl_.block_height_ = from._impl_.block_height_;
  // @@protoc_insertion_point(copy_constructor:remote.BlockRequest)
}

inline void BlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_hash_){nullptr}
    , decltype(_impl_.block_height_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:remote.BlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_hash_;
}

void BlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.BlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.block_hash_ != nullptr) {
    delete _impl_.block_hash_;
  }
  _impl_.block_hash_ = nullptr;
  _impl_.block_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.BlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // .types.H256 block_hash = 3;
  if (this->_internal_has_block_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block_hash(this),
        _Internal::block_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.BlockRequest)
  return target;
}

size_t BlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.BlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 block_hash = 3;
  if (this->_internal_has_block_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_hash_);
  }

  // uint64 block_height = 2;
  if (this->_internal_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRequest::GetClassData() const { return &_class_data_; }


void BlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRequest*>(&to_msg);
  auto& from = static_cast<const BlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.BlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_hash()) {
    _this->_internal_mutable_block_hash()->::types::H256::MergeFrom(
        from._internal_block_hash());
  }
  if (from._internal_block_height() != 0) {
    _this->_internal_set_block_height(from._internal_block_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  return true;
}

void BlockRequest::InternalSwap(BlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRequest, _impl_.block_height_)
      + sizeof(BlockRequest::_impl_.block_height_)
      - PROTOBUF_FIELD_OFFSET(BlockRequest, _impl_.block_hash_)>(
          reinterpret_cast<char*>(&_impl_.block_hash_),
          reinterpret_cast<char*>(&other->_impl_.block_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[14]);
}

// ===================================================================

class BlockReply::_Internal {
 public:
};

BlockReply::BlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.BlockReply)
}
BlockReply::BlockReply(const BlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_rlp_){}
    , decltype(_impl_.senders_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_rlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_rlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_rlp().empty()) {
    _this->_impl_.block_rlp_.Set(from._internal_block_rlp(), 
      _this->GetArenaForAllocation());
  }
  _impl_.senders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_senders().empty()) {
    _this->_impl_.senders_.Set(from._internal_senders(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.BlockReply)
}

inline void BlockReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_rlp_){}
    , decltype(_impl_.senders_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_rlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_rlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.senders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockReply::~BlockReply() {
  // @@protoc_insertion_point(destructor:remote.BlockReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_rlp_.Destroy();
  _impl_.senders_.Destroy();
}

void BlockReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.BlockReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_rlp_.ClearToEmpty();
  _impl_.senders_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_rlp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_rlp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes senders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_senders();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.BlockReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_rlp = 1;
  if (!this->_internal_block_rlp().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_rlp(), target);
  }

  // bytes senders = 2;
  if (!this->_internal_senders().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_senders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.BlockReply)
  return target;
}

size_t BlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.BlockReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_rlp = 1;
  if (!this->_internal_block_rlp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_rlp());
  }

  // bytes senders = 2;
  if (!this->_internal_senders().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_senders());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockReply::GetClassData() const { return &_class_data_; }


void BlockReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockReply*>(&to_msg);
  auto& from = static_cast<const BlockReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.BlockReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_rlp().empty()) {
    _this->_internal_set_block_rlp(from._internal_block_rlp());
  }
  if (!from._internal_senders().empty()) {
    _this->_internal_set_senders(from._internal_senders());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockReply::CopyFrom(const BlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.BlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockReply::IsInitialized() const {
  return true;
}

void BlockReply::InternalSwap(BlockReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_rlp_, lhs_arena,
      &other->_impl_.block_rlp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senders_, lhs_arena,
      &other->_impl_.senders_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[15]);
}

// ===================================================================

class TxnLookupRequest::_Internal {
 public:
  static const ::types::H256& txn_hash(const TxnLookupRequest* msg);
};

const ::types::H256&
TxnLookupRequest::_Internal::txn_hash(const TxnLookupRequest* msg) {
  return *msg->_impl_.txn_hash_;
}
void TxnLookupRequest::clear_txn_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.txn_hash_ != nullptr) {
    delete _impl_.txn_hash_;
  }
  _impl_.txn_hash_ = nullptr;
}
TxnLookupRequest::TxnLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.TxnLookupRequest)
}
TxnLookupRequest::TxnLookupRequest(const TxnLookupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxnLookupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txn_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_txn_hash()) {
    _this->_impl_.txn_hash_ = new ::types::H256(*from._impl_.txn_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.TxnLookupRequest)
}

inline void TxnLookupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txn_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxnLookupRequest::~TxnLookupRequest() {
  // @@protoc_insertion_point(destructor:remote.TxnLookupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxnLookupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.txn_hash_;
}

void TxnLookupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxnLookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.TxnLookupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.txn_hash_ != nullptr) {
    delete _impl_.txn_hash_;
  }
  _impl_.txn_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxnLookupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 txn_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txn_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxnLookupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.TxnLookupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 txn_hash = 1;
  if (this->_internal_has_txn_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::txn_hash(this),
        _Internal::txn_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.TxnLookupRequest)
  return target;
}

size_t TxnLookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.TxnLookupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 txn_hash = 1;
  if (this->_internal_has_txn_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.txn_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxnLookupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxnLookupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxnLookupRequest::GetClassData() const { return &_class_data_; }


void TxnLookupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxnLookupRequest*>(&to_msg);
  auto& from = static_cast<const TxnLookupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.TxnLookupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn_hash()) {
    _this->_internal_mutable_txn_hash()->::types::H256::MergeFrom(
        from._internal_txn_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxnLookupRequest::CopyFrom(const TxnLookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.TxnLookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnLookupRequest::IsInitialized() const {
  return true;
}

void TxnLookupRequest::InternalSwap(TxnLookupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.txn_hash_, other->_impl_.txn_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnLookupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[16]);
}

// ===================================================================

class TxnLookupReply::_Internal {
 public:
};

TxnLookupReply::TxnLookupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.TxnLookupReply)
}
TxnLookupReply::TxnLookupReply(const TxnLookupReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxnLookupReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:remote.TxnLookupReply)
}

inline void TxnLookupReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxnLookupReply::~TxnLookupReply() {
  // @@protoc_insertion_point(destructor:remote.TxnLookupReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxnLookupReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TxnLookupReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxnLookupReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.TxnLookupReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxnLookupReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxnLookupReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.TxnLookupReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_number = 1;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.TxnLookupReply)
  return target;
}

size_t TxnLookupReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.TxnLookupReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_number = 1;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxnLookupReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxnLookupReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxnLookupReply::GetClassData() const { return &_class_data_; }


void TxnLookupReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxnLookupReply*>(&to_msg);
  auto& from = static_cast<const TxnLookupReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.TxnLookupReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxnLookupReply::CopyFrom(const TxnLookupReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.TxnLookupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnLookupReply::IsInitialized() const {
  return true;
}

void TxnLookupReply::InternalSwap(TxnLookupReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.block_number_, other->_impl_.block_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnLookupReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[17]);
}

// ===================================================================

class NodesInfoRequest::_Internal {
 public:
};

NodesInfoRequest::NodesInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NodesInfoRequest)
}
NodesInfoRequest::NodesInfoRequest(const NodesInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodesInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:remote.NodesInfoRequest)
}

inline void NodesInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodesInfoRequest::~NodesInfoRequest() {
  // @@protoc_insertion_point(destructor:remote.NodesInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodesInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodesInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodesInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NodesInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodesInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodesInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NodesInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NodesInfoRequest)
  return target;
}

size_t NodesInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NodesInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodesInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodesInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodesInfoRequest::GetClassData() const { return &_class_data_; }


void NodesInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodesInfoRequest*>(&to_msg);
  auto& from = static_cast<const NodesInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NodesInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodesInfoRequest::CopyFrom(const NodesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NodesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesInfoRequest::IsInitialized() const {
  return true;
}

void NodesInfoRequest::InternalSwap(NodesInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[18]);
}

// ===================================================================

class AddPeerRequest::_Internal {
 public:
};

AddPeerRequest::AddPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.AddPeerRequest)
}
AddPeerRequest::AddPeerRequest(const AddPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddPeerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.AddPeerRequest)
}

inline void AddPeerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddPeerRequest::~AddPeerRequest() {
  // @@protoc_insertion_point(destructor:remote.AddPeerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPeerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void AddPeerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.AddPeerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.AddPeerRequest.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPeerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.AddPeerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.AddPeerRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.AddPeerRequest)
  return target;
}

size_t AddPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.AddPeerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPeerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddPeerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPeerRequest::GetClassData() const { return &_class_data_; }


void AddPeerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddPeerRequest*>(&to_msg);
  auto& from = static_cast<const AddPeerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPeerRequest::CopyFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerRequest::IsInitialized() const {
  return true;
}

void AddPeerRequest::InternalSwap(AddPeerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[19]);
}

// ===================================================================

class NodesInfoReply::_Internal {
 public:
};

void NodesInfoReply::clear_nodes_info() {
  _impl_.nodes_info_.Clear();
}
NodesInfoReply::NodesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NodesInfoReply)
}
NodesInfoReply::NodesInfoReply(const NodesInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodesInfoReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_info_){from._impl_.nodes_info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NodesInfoReply)
}

inline void NodesInfoReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodesInfoReply::~NodesInfoReply() {
  // @@protoc_insertion_point(destructor:remote.NodesInfoReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodesInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_info_.~RepeatedPtrField();
}

void NodesInfoReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodesInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NodesInfoReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodesInfoReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.NodeInfoReply nodes_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodesInfoReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NodesInfoReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.NodeInfoReply nodes_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NodesInfoReply)
  return target;
}

size_t NodesInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NodesInfoReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.NodeInfoReply nodes_info = 1;
  total_size += 1UL * this->_internal_nodes_info_size();
  for (const auto& msg : this->_impl_.nodes_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodesInfoReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodesInfoReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodesInfoReply::GetClassData() const { return &_class_data_; }


void NodesInfoReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodesInfoReply*>(&to_msg);
  auto& from = static_cast<const NodesInfoReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NodesInfoReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_info_.MergeFrom(from._impl_.nodes_info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodesInfoReply::CopyFrom(const NodesInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NodesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesInfoReply::IsInitialized() const {
  return true;
}

void NodesInfoReply::InternalSwap(NodesInfoReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_info_.InternalSwap(&other->_impl_.nodes_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesInfoReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[20]);
}

// ===================================================================

class PeersReply::_Internal {
 public:
};

void PeersReply::clear_peers() {
  _impl_.peers_.Clear();
}
PeersReply::PeersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.PeersReply)
}
PeersReply::PeersReply(const PeersReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeersReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){from._impl_.peers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.PeersReply)
}

inline void PeersReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeersReply::~PeersReply() {
  // @@protoc_insertion_point(destructor:remote.PeersReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeersReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.~RepeatedPtrField();
}

void PeersReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeersReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.PeersReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeersReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.PeerInfo peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeersReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.PeersReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.PeersReply)
  return target;
}

size_t PeersReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.PeersReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_impl_.peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeersReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeersReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeersReply::GetClassData() const { return &_class_data_; }


void PeersReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeersReply*>(&to_msg);
  auto& from = static_cast<const PeersReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.PeersReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peers_.MergeFrom(from._impl_.peers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeersReply::CopyFrom(const PeersReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.PeersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeersReply::IsInitialized() const {
  return true;
}

void PeersReply::InternalSwap(PeersReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeersReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[21]);
}

// ===================================================================

class AddPeerReply::_Internal {
 public:
};

AddPeerReply::AddPeerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.AddPeerReply)
}
AddPeerReply::AddPeerReply(const AddPeerReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddPeerReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:remote.AddPeerReply)
}

inline void AddPeerReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddPeerReply::~AddPeerReply() {
  // @@protoc_insertion_point(destructor:remote.AddPeerReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPeerReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddPeerReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPeerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.AddPeerReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeerReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPeerReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.AddPeerReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.AddPeerReply)
  return target;
}

size_t AddPeerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.AddPeerReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPeerReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddPeerReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPeerReply::GetClassData() const { return &_class_data_; }


void AddPeerReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddPeerReply*>(&to_msg);
  auto& from = static_cast<const AddPeerReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.AddPeerReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPeerReply::CopyFrom(const AddPeerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.AddPeerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerReply::IsInitialized() const {
  return true;
}

void AddPeerReply::InternalSwap(AddPeerReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[22]);
}

// ===================================================================

class PendingBlockReply::_Internal {
 public:
};

PendingBlockReply::PendingBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.PendingBlockReply)
}
PendingBlockReply::PendingBlockReply(const PendingBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PendingBlockReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_rlp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_rlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_rlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_rlp().empty()) {
    _this->_impl_.block_rlp_.Set(from._internal_block_rlp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.PendingBlockReply)
}

inline void PendingBlockReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_rlp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_rlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_rlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PendingBlockReply::~PendingBlockReply() {
  // @@protoc_insertion_point(destructor:remote.PendingBlockReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PendingBlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_rlp_.Destroy();
}

void PendingBlockReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PendingBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.PendingBlockReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_rlp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingBlockReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_rlp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_rlp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PendingBlockReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.PendingBlockReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_rlp = 1;
  if (!this->_internal_block_rlp().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_rlp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.PendingBlockReply)
  return target;
}

size_t PendingBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.PendingBlockReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_rlp = 1;
  if (!this->_internal_block_rlp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_rlp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PendingBlockReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PendingBlockReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PendingBlockReply::GetClassData() const { return &_class_data_; }


void PendingBlockReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PendingBlockReply*>(&to_msg);
  auto& from = static_cast<const PendingBlockReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.PendingBlockReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_rlp().empty()) {
    _this->_internal_set_block_rlp(from._internal_block_rlp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PendingBlockReply::CopyFrom(const PendingBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.PendingBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingBlockReply::IsInitialized() const {
  return true;
}

void PendingBlockReply::InternalSwap(PendingBlockReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_rlp_, lhs_arena,
      &other->_impl_.block_rlp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingBlockReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[23]);
}

// ===================================================================

class EngineGetPayloadBodiesByHashV1Request::_Internal {
 public:
};

void EngineGetPayloadBodiesByHashV1Request::clear_hashes() {
  _impl_.hashes_.Clear();
}
EngineGetPayloadBodiesByHashV1Request::EngineGetPayloadBodiesByHashV1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EngineGetPayloadBodiesByHashV1Request)
}
EngineGetPayloadBodiesByHashV1Request::EngineGetPayloadBodiesByHashV1Request(const EngineGetPayloadBodiesByHashV1Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineGetPayloadBodiesByHashV1Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){from._impl_.hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.EngineGetPayloadBodiesByHashV1Request)
}

inline void EngineGetPayloadBodiesByHashV1Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngineGetPayloadBodiesByHashV1Request::~EngineGetPayloadBodiesByHashV1Request() {
  // @@protoc_insertion_point(destructor:remote.EngineGetPayloadBodiesByHashV1Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineGetPayloadBodiesByHashV1Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashes_.~RepeatedPtrField();
}

void EngineGetPayloadBodiesByHashV1Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineGetPayloadBodiesByHashV1Request::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EngineGetPayloadBodiesByHashV1Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineGetPayloadBodiesByHashV1Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.H256 hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineGetPayloadBodiesByHashV1Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EngineGetPayloadBodiesByHashV1Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hashes_size()); i < n; i++) {
    const auto& repfield = this->_internal_hashes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EngineGetPayloadBodiesByHashV1Request)
  return target;
}

size_t EngineGetPayloadBodiesByHashV1Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EngineGetPayloadBodiesByHashV1Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->_impl_.hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineGetPayloadBodiesByHashV1Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineGetPayloadBodiesByHashV1Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineGetPayloadBodiesByHashV1Request::GetClassData() const { return &_class_data_; }


void EngineGetPayloadBodiesByHashV1Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineGetPayloadBodiesByHashV1Request*>(&to_msg);
  auto& from = static_cast<const EngineGetPayloadBodiesByHashV1Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EngineGetPayloadBodiesByHashV1Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashes_.MergeFrom(from._impl_.hashes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineGetPayloadBodiesByHashV1Request::CopyFrom(const EngineGetPayloadBodiesByHashV1Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EngineGetPayloadBodiesByHashV1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineGetPayloadBodiesByHashV1Request::IsInitialized() const {
  return true;
}

void EngineGetPayloadBodiesByHashV1Request::InternalSwap(EngineGetPayloadBodiesByHashV1Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashes_.InternalSwap(&other->_impl_.hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineGetPayloadBodiesByHashV1Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[24]);
}

// ===================================================================

class EngineGetPayloadBodiesByRangeV1Request::_Internal {
 public:
};

EngineGetPayloadBodiesByRangeV1Request::EngineGetPayloadBodiesByRangeV1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EngineGetPayloadBodiesByRangeV1Request)
}
EngineGetPayloadBodiesByRangeV1Request::EngineGetPayloadBodiesByRangeV1Request(const EngineGetPayloadBodiesByRangeV1Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineGetPayloadBodiesByRangeV1Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:remote.EngineGetPayloadBodiesByRangeV1Request)
}

inline void EngineGetPayloadBodiesByRangeV1Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){uint64_t{0u}}
    , decltype(_impl_.count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngineGetPayloadBodiesByRangeV1Request::~EngineGetPayloadBodiesByRangeV1Request() {
  // @@protoc_insertion_point(destructor:remote.EngineGetPayloadBodiesByRangeV1Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineGetPayloadBodiesByRangeV1Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EngineGetPayloadBodiesByRangeV1Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineGetPayloadBodiesByRangeV1Request::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EngineGetPayloadBodiesByRangeV1Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineGetPayloadBodiesByRangeV1Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineGetPayloadBodiesByRangeV1Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EngineGetPayloadBodiesByRangeV1Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start(), target);
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EngineGetPayloadBodiesByRangeV1Request)
  return target;
}

size_t EngineGetPayloadBodiesByRangeV1Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EngineGetPayloadBodiesByRangeV1Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineGetPayloadBodiesByRangeV1Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineGetPayloadBodiesByRangeV1Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineGetPayloadBodiesByRangeV1Request::GetClassData() const { return &_class_data_; }


void EngineGetPayloadBodiesByRangeV1Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineGetPayloadBodiesByRangeV1Request*>(&to_msg);
  auto& from = static_cast<const EngineGetPayloadBodiesByRangeV1Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EngineGetPayloadBodiesByRangeV1Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineGetPayloadBodiesByRangeV1Request::CopyFrom(const EngineGetPayloadBodiesByRangeV1Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EngineGetPayloadBodiesByRangeV1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineGetPayloadBodiesByRangeV1Request::IsInitialized() const {
  return true;
}

void EngineGetPayloadBodiesByRangeV1Request::InternalSwap(EngineGetPayloadBodiesByRangeV1Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineGetPayloadBodiesByRangeV1Request, _impl_.count_)
      + sizeof(EngineGetPayloadBodiesByRangeV1Request::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(EngineGetPayloadBodiesByRangeV1Request, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineGetPayloadBodiesByRangeV1Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[25]);
}

// ===================================================================

class BorEventRequest::_Internal {
 public:
  static const ::types::H256& bor_tx_hash(const BorEventRequest* msg);
};

const ::types::H256&
BorEventRequest::_Internal::bor_tx_hash(const BorEventRequest* msg) {
  return *msg->_impl_.bor_tx_hash_;
}
void BorEventRequest::clear_bor_tx_hash() {
  if (GetArenaForAllocation() == nullptr && _impl_.bor_tx_hash_ != nullptr) {
    delete _impl_.bor_tx_hash_;
  }
  _impl_.bor_tx_hash_ = nullptr;
}
BorEventRequest::BorEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.BorEventRequest)
}
BorEventRequest::BorEventRequest(const BorEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BorEventRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bor_tx_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bor_tx_hash()) {
    _this->_impl_.bor_tx_hash_ = new ::types::H256(*from._impl_.bor_tx_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.BorEventRequest)
}

inline void BorEventRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bor_tx_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BorEventRequest::~BorEventRequest() {
  // @@protoc_insertion_point(destructor:remote.BorEventRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BorEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bor_tx_hash_;
}

void BorEventRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BorEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.BorEventRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.bor_tx_hash_ != nullptr) {
    delete _impl_.bor_tx_hash_;
  }
  _impl_.bor_tx_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BorEventRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 bor_tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bor_tx_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BorEventRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.BorEventRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 bor_tx_hash = 1;
  if (this->_internal_has_bor_tx_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bor_tx_hash(this),
        _Internal::bor_tx_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.BorEventRequest)
  return target;
}

size_t BorEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.BorEventRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 bor_tx_hash = 1;
  if (this->_internal_has_bor_tx_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bor_tx_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BorEventRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BorEventRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BorEventRequest::GetClassData() const { return &_class_data_; }


void BorEventRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BorEventRequest*>(&to_msg);
  auto& from = static_cast<const BorEventRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.BorEventRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bor_tx_hash()) {
    _this->_internal_mutable_bor_tx_hash()->::types::H256::MergeFrom(
        from._internal_bor_tx_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BorEventRequest::CopyFrom(const BorEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.BorEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BorEventRequest::IsInitialized() const {
  return true;
}

void BorEventRequest::InternalSwap(BorEventRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bor_tx_hash_, other->_impl_.bor_tx_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BorEventRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[26]);
}

// ===================================================================

class BorEventReply::_Internal {
 public:
};

BorEventReply::BorEventReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.BorEventReply)
}
BorEventReply::BorEventReply(const BorEventReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BorEventReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_rlps_){from._impl_.event_rlps_}
    , decltype(_impl_.block_number_){}
    , decltype(_impl_.present_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.present_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.present_));
  // @@protoc_insertion_point(copy_constructor:remote.BorEventReply)
}

inline void BorEventReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_rlps_){arena}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , decltype(_impl_.present_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BorEventReply::~BorEventReply() {
  // @@protoc_insertion_point(destructor:remote.BorEventReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BorEventReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_rlps_.~RepeatedPtrField();
}

void BorEventReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BorEventReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.BorEventReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_rlps_.Clear();
  ::memset(&_impl_.block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.present_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.present_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BorEventReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes event_rlps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_rlps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BorEventReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.BorEventReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool present = 1;
  if (this->_internal_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_present(), target);
  }

  // uint64 block_number = 2;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_number(), target);
  }

  // repeated bytes event_rlps = 3;
  for (int i = 0, n = this->_internal_event_rlps_size(); i < n; i++) {
    const auto& s = this->_internal_event_rlps(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.BorEventReply)
  return target;
}

size_t BorEventReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.BorEventReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes event_rlps = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_rlps_.size());
  for (int i = 0, n = _impl_.event_rlps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.event_rlps_.Get(i));
  }

  // uint64 block_number = 2;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // bool present = 1;
  if (this->_internal_present() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BorEventReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BorEventReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BorEventReply::GetClassData() const { return &_class_data_; }


void BorEventReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BorEventReply*>(&to_msg);
  auto& from = static_cast<const BorEventReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.BorEventReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_rlps_.MergeFrom(from._impl_.event_rlps_);
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_present() != 0) {
    _this->_internal_set_present(from._internal_present());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BorEventReply::CopyFrom(const BorEventReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.BorEventReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BorEventReply::IsInitialized() const {
  return true;
}

void BorEventReply::InternalSwap(BorEventReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_rlps_.InternalSwap(&other->_impl_.event_rlps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BorEventReply, _impl_.present_)
      + sizeof(BorEventReply::_impl_.present_)
      - PROTOBUF_FIELD_OFFSET(BorEventReply, _impl_.block_number_)>(
          reinterpret_cast<char*>(&_impl_.block_number_),
          reinterpret_cast<char*>(&other->_impl_.block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BorEventReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::remote::EtherbaseRequest*
Arena::CreateMaybeMessage< ::remote::EtherbaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EtherbaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EtherbaseReply*
Arena::CreateMaybeMessage< ::remote::EtherbaseReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EtherbaseReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetVersionRequest*
Arena::CreateMaybeMessage< ::remote::NetVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetVersionReply*
Arena::CreateMaybeMessage< ::remote::NetVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetPeerCountRequest*
Arena::CreateMaybeMessage< ::remote::NetPeerCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetPeerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetPeerCountReply*
Arena::CreateMaybeMessage< ::remote::NetPeerCountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetPeerCountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ProtocolVersionRequest*
Arena::CreateMaybeMessage< ::remote::ProtocolVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ProtocolVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ProtocolVersionReply*
Arena::CreateMaybeMessage< ::remote::ProtocolVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ProtocolVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ClientVersionRequest*
Arena::CreateMaybeMessage< ::remote::ClientVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ClientVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ClientVersionReply*
Arena::CreateMaybeMessage< ::remote::ClientVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ClientVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeRequest*
Arena::CreateMaybeMessage< ::remote::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeReply*
Arena::CreateMaybeMessage< ::remote::SubscribeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::LogsFilterRequest*
Arena::CreateMaybeMessage< ::remote::LogsFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::LogsFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeLogsReply*
Arena::CreateMaybeMessage< ::remote::SubscribeLogsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeLogsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::BlockRequest*
Arena::CreateMaybeMessage< ::remote::BlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::BlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::BlockReply*
Arena::CreateMaybeMessage< ::remote::BlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::BlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::TxnLookupRequest*
Arena::CreateMaybeMessage< ::remote::TxnLookupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::TxnLookupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::TxnLookupReply*
Arena::CreateMaybeMessage< ::remote::TxnLookupReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::TxnLookupReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NodesInfoRequest*
Arena::CreateMaybeMessage< ::remote::NodesInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NodesInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::AddPeerRequest*
Arena::CreateMaybeMessage< ::remote::AddPeerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::AddPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NodesInfoReply*
Arena::CreateMaybeMessage< ::remote::NodesInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NodesInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::PeersReply*
Arena::CreateMaybeMessage< ::remote::PeersReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::PeersReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::AddPeerReply*
Arena::CreateMaybeMessage< ::remote::AddPeerReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::AddPeerReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::PendingBlockReply*
Arena::CreateMaybeMessage< ::remote::PendingBlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::PendingBlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EngineGetPayloadBodiesByHashV1Request*
Arena::CreateMaybeMessage< ::remote::EngineGetPayloadBodiesByHashV1Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EngineGetPayloadBodiesByHashV1Request >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EngineGetPayloadBodiesByRangeV1Request*
Arena::CreateMaybeMessage< ::remote::EngineGetPayloadBodiesByRangeV1Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EngineGetPayloadBodiesByRangeV1Request >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::BorEventRequest*
Arena::CreateMaybeMessage< ::remote::BorEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::BorEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::BorEventReply*
Arena::CreateMaybeMessage< ::remote::BorEventReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::BorEventReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
