// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/bor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remote_2fbor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remote_2fbor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remote_2fbor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remote_2fbor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_2fbor_2eproto;
namespace remote {
class BorEventsReply;
struct BorEventsReplyDefaultTypeInternal;
extern BorEventsReplyDefaultTypeInternal _BorEventsReply_default_instance_;
class BorEventsRequest;
struct BorEventsRequestDefaultTypeInternal;
extern BorEventsRequestDefaultTypeInternal _BorEventsRequest_default_instance_;
class BorProducersRequest;
struct BorProducersRequestDefaultTypeInternal;
extern BorProducersRequestDefaultTypeInternal _BorProducersRequest_default_instance_;
class BorProducersResponse;
struct BorProducersResponseDefaultTypeInternal;
extern BorProducersResponseDefaultTypeInternal _BorProducersResponse_default_instance_;
class BorTxnLookupReply;
struct BorTxnLookupReplyDefaultTypeInternal;
extern BorTxnLookupReplyDefaultTypeInternal _BorTxnLookupReply_default_instance_;
class BorTxnLookupRequest;
struct BorTxnLookupRequestDefaultTypeInternal;
extern BorTxnLookupRequestDefaultTypeInternal _BorTxnLookupRequest_default_instance_;
class Validator;
struct ValidatorDefaultTypeInternal;
extern ValidatorDefaultTypeInternal _Validator_default_instance_;
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> ::remote::BorEventsReply* Arena::CreateMaybeMessage<::remote::BorEventsReply>(Arena*);
template<> ::remote::BorEventsRequest* Arena::CreateMaybeMessage<::remote::BorEventsRequest>(Arena*);
template<> ::remote::BorProducersRequest* Arena::CreateMaybeMessage<::remote::BorProducersRequest>(Arena*);
template<> ::remote::BorProducersResponse* Arena::CreateMaybeMessage<::remote::BorProducersResponse>(Arena*);
template<> ::remote::BorTxnLookupReply* Arena::CreateMaybeMessage<::remote::BorTxnLookupReply>(Arena*);
template<> ::remote::BorTxnLookupRequest* Arena::CreateMaybeMessage<::remote::BorTxnLookupRequest>(Arena*);
template<> ::remote::Validator* Arena::CreateMaybeMessage<::remote::Validator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace remote {

// ===================================================================

class BorTxnLookupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BorTxnLookupRequest) */ {
 public:
  inline BorTxnLookupRequest() : BorTxnLookupRequest(nullptr) {}
  ~BorTxnLookupRequest() override;
  explicit PROTOBUF_CONSTEXPR BorTxnLookupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorTxnLookupRequest(const BorTxnLookupRequest& from);
  BorTxnLookupRequest(BorTxnLookupRequest&& from) noexcept
    : BorTxnLookupRequest() {
    *this = ::std::move(from);
  }

  inline BorTxnLookupRequest& operator=(const BorTxnLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorTxnLookupRequest& operator=(BorTxnLookupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorTxnLookupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorTxnLookupRequest* internal_default_instance() {
    return reinterpret_cast<const BorTxnLookupRequest*>(
               &_BorTxnLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BorTxnLookupRequest& a, BorTxnLookupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BorTxnLookupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorTxnLookupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorTxnLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorTxnLookupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorTxnLookupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorTxnLookupRequest& from) {
    BorTxnLookupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorTxnLookupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BorTxnLookupRequest";
  }
  protected:
  explicit BorTxnLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBorTxHashFieldNumber = 1,
  };
  // .types.H256 bor_tx_hash = 1;
  bool has_bor_tx_hash() const;
  private:
  bool _internal_has_bor_tx_hash() const;
  public:
  void clear_bor_tx_hash();
  const ::types::H256& bor_tx_hash() const;
  PROTOBUF_NODISCARD ::types::H256* release_bor_tx_hash();
  ::types::H256* mutable_bor_tx_hash();
  void set_allocated_bor_tx_hash(::types::H256* bor_tx_hash);
  private:
  const ::types::H256& _internal_bor_tx_hash() const;
  ::types::H256* _internal_mutable_bor_tx_hash();
  public:
  void unsafe_arena_set_allocated_bor_tx_hash(
      ::types::H256* bor_tx_hash);
  ::types::H256* unsafe_arena_release_bor_tx_hash();

  // @@protoc_insertion_point(class_scope:remote.BorTxnLookupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H256* bor_tx_hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_remote_2fbor_2eproto;
};
// -------------------------------------------------------------------

class BorTxnLookupReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BorTxnLookupReply) */ {
 public:
  inline BorTxnLookupReply() : BorTxnLookupReply(nullptr) {}
  ~BorTxnLookupReply() override;
  explicit PROTOBUF_CONSTEXPR BorTxnLookupReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorTxnLookupReply(const BorTxnLookupReply& from);
  BorTxnLookupReply(BorTxnLookupReply&& from) noexcept
    : BorTxnLookupReply() {
    *this = ::std::move(from);
  }

  inline BorTxnLookupReply& operator=(const BorTxnLookupReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorTxnLookupReply& operator=(BorTxnLookupReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorTxnLookupReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorTxnLookupReply* internal_default_instance() {
    return reinterpret_cast<const BorTxnLookupReply*>(
               &_BorTxnLookupReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BorTxnLookupReply& a, BorTxnLookupReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BorTxnLookupReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorTxnLookupReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorTxnLookupReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorTxnLookupReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorTxnLookupReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorTxnLookupReply& from) {
    BorTxnLookupReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorTxnLookupReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BorTxnLookupReply";
  }
  protected:
  explicit BorTxnLookupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 2,
    kPresentFieldNumber = 1,
  };
  // uint64 block_number = 2;
  void clear_block_number();
  uint64_t block_number() const;
  void set_block_number(uint64_t value);
  private:
  uint64_t _internal_block_number() const;
  void _internal_set_block_number(uint64_t value);
  public:

  // bool present = 1;
  void clear_present();
  bool present() const;
  void set_present(bool value);
  private:
  bool _internal_present() const;
  void _internal_set_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:remote.BorTxnLookupReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t block_number_;
    bool present_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_remote_2fbor_2eproto;
};
// -------------------------------------------------------------------

class BorEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BorEventsRequest) */ {
 public:
  inline BorEventsRequest() : BorEventsRequest(nullptr) {}
  ~BorEventsRequest() override;
  explicit PROTOBUF_CONSTEXPR BorEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorEventsRequest(const BorEventsRequest& from);
  BorEventsRequest(BorEventsRequest&& from) noexcept
    : BorEventsRequest() {
    *this = ::std::move(from);
  }

  inline BorEventsRequest& operator=(const BorEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorEventsRequest& operator=(BorEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorEventsRequest* internal_default_instance() {
    return reinterpret_cast<const BorEventsRequest*>(
               &_BorEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BorEventsRequest& a, BorEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BorEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorEventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorEventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorEventsRequest& from) {
    BorEventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorEventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BorEventsRequest";
  }
  protected:
  explicit BorEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 2,
    kBlockNumFieldNumber = 1,
  };
  // .types.H256 block_hash = 2;
  bool has_block_hash() const;
  private:
  bool _internal_has_block_hash() const;
  public:
  void clear_block_hash();
  const ::types::H256& block_hash() const;
  PROTOBUF_NODISCARD ::types::H256* release_block_hash();
  ::types::H256* mutable_block_hash();
  void set_allocated_block_hash(::types::H256* block_hash);
  private:
  const ::types::H256& _internal_block_hash() const;
  ::types::H256* _internal_mutable_block_hash();
  public:
  void unsafe_arena_set_allocated_block_hash(
      ::types::H256* block_hash);
  ::types::H256* unsafe_arena_release_block_hash();

  // uint64 block_num = 1;
  void clear_block_num();
  uint64_t block_num() const;
  void set_block_num(uint64_t value);
  private:
  uint64_t _internal_block_num() const;
  void _internal_set_block_num(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:remote.BorEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H256* block_hash_;
    uint64_t block_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_remote_2fbor_2eproto;
};
// -------------------------------------------------------------------

class BorEventsReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BorEventsReply) */ {
 public:
  inline BorEventsReply() : BorEventsReply(nullptr) {}
  ~BorEventsReply() override;
  explicit PROTOBUF_CONSTEXPR BorEventsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorEventsReply(const BorEventsReply& from);
  BorEventsReply(BorEventsReply&& from) noexcept
    : BorEventsReply() {
    *this = ::std::move(from);
  }

  inline BorEventsReply& operator=(const BorEventsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorEventsReply& operator=(BorEventsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorEventsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorEventsReply* internal_default_instance() {
    return reinterpret_cast<const BorEventsReply*>(
               &_BorEventsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BorEventsReply& a, BorEventsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BorEventsReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorEventsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorEventsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorEventsReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorEventsReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorEventsReply& from) {
    BorEventsReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorEventsReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BorEventsReply";
  }
  protected:
  explicit BorEventsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventRlpsFieldNumber = 2,
    kStateReceiverContractAddressFieldNumber = 1,
  };
  // repeated bytes event_rlps = 2;
  int event_rlps_size() const;
  private:
  int _internal_event_rlps_size() const;
  public:
  void clear_event_rlps();
  const std::string& event_rlps(int index) const;
  std::string* mutable_event_rlps(int index);
  void set_event_rlps(int index, const std::string& value);
  void set_event_rlps(int index, std::string&& value);
  void set_event_rlps(int index, const char* value);
  void set_event_rlps(int index, const void* value, size_t size);
  std::string* add_event_rlps();
  void add_event_rlps(const std::string& value);
  void add_event_rlps(std::string&& value);
  void add_event_rlps(const char* value);
  void add_event_rlps(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& event_rlps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_event_rlps();
  private:
  const std::string& _internal_event_rlps(int index) const;
  std::string* _internal_add_event_rlps();
  public:

  // string state_receiver_contract_address = 1;
  void clear_state_receiver_contract_address();
  const std::string& state_receiver_contract_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_receiver_contract_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_receiver_contract_address();
  PROTOBUF_NODISCARD std::string* release_state_receiver_contract_address();
  void set_allocated_state_receiver_contract_address(std::string* state_receiver_contract_address);
  private:
  const std::string& _internal_state_receiver_contract_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_receiver_contract_address(const std::string& value);
  std::string* _internal_mutable_state_receiver_contract_address();
  public:

  // @@protoc_insertion_point(class_scope:remote.BorEventsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> event_rlps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_receiver_contract_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_remote_2fbor_2eproto;
};
// -------------------------------------------------------------------

class BorProducersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BorProducersRequest) */ {
 public:
  inline BorProducersRequest() : BorProducersRequest(nullptr) {}
  ~BorProducersRequest() override;
  explicit PROTOBUF_CONSTEXPR BorProducersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorProducersRequest(const BorProducersRequest& from);
  BorProducersRequest(BorProducersRequest&& from) noexcept
    : BorProducersRequest() {
    *this = ::std::move(from);
  }

  inline BorProducersRequest& operator=(const BorProducersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorProducersRequest& operator=(BorProducersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorProducersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorProducersRequest* internal_default_instance() {
    return reinterpret_cast<const BorProducersRequest*>(
               &_BorProducersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BorProducersRequest& a, BorProducersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BorProducersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorProducersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorProducersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorProducersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorProducersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorProducersRequest& from) {
    BorProducersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorProducersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BorProducersRequest";
  }
  protected:
  explicit BorProducersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumFieldNumber = 1,
  };
  // uint64 block_num = 1;
  void clear_block_num();
  uint64_t block_num() const;
  void set_block_num(uint64_t value);
  private:
  uint64_t _internal_block_num() const;
  void _internal_set_block_num(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:remote.BorProducersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t block_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_remote_2fbor_2eproto;
};
// -------------------------------------------------------------------

class BorProducersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BorProducersResponse) */ {
 public:
  inline BorProducersResponse() : BorProducersResponse(nullptr) {}
  ~BorProducersResponse() override;
  explicit PROTOBUF_CONSTEXPR BorProducersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorProducersResponse(const BorProducersResponse& from);
  BorProducersResponse(BorProducersResponse&& from) noexcept
    : BorProducersResponse() {
    *this = ::std::move(from);
  }

  inline BorProducersResponse& operator=(const BorProducersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorProducersResponse& operator=(BorProducersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorProducersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorProducersResponse* internal_default_instance() {
    return reinterpret_cast<const BorProducersResponse*>(
               &_BorProducersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BorProducersResponse& a, BorProducersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BorProducersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorProducersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorProducersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorProducersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorProducersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorProducersResponse& from) {
    BorProducersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorProducersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BorProducersResponse";
  }
  protected:
  explicit BorProducersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 2,
    kProposerFieldNumber = 1,
  };
  // repeated .remote.Validator validators = 2;
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::remote::Validator* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::Validator >*
      mutable_validators();
  private:
  const ::remote::Validator& _internal_validators(int index) const;
  ::remote::Validator* _internal_add_validators();
  public:
  const ::remote::Validator& validators(int index) const;
  ::remote::Validator* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::Validator >&
      validators() const;

  // .remote.Validator proposer = 1;
  bool has_proposer() const;
  private:
  bool _internal_has_proposer() const;
  public:
  void clear_proposer();
  const ::remote::Validator& proposer() const;
  PROTOBUF_NODISCARD ::remote::Validator* release_proposer();
  ::remote::Validator* mutable_proposer();
  void set_allocated_proposer(::remote::Validator* proposer);
  private:
  const ::remote::Validator& _internal_proposer() const;
  ::remote::Validator* _internal_mutable_proposer();
  public:
  void unsafe_arena_set_allocated_proposer(
      ::remote::Validator* proposer);
  ::remote::Validator* unsafe_arena_release_proposer();

  // @@protoc_insertion_point(class_scope:remote.BorProducersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::Validator > validators_;
    ::remote::Validator* proposer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_remote_2fbor_2eproto;
};
// -------------------------------------------------------------------

class Validator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.Validator) */ {
 public:
  inline Validator() : Validator(nullptr) {}
  ~Validator() override;
  explicit PROTOBUF_CONSTEXPR Validator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Validator(const Validator& from);
  Validator(Validator&& from) noexcept
    : Validator() {
    *this = ::std::move(from);
  }

  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validator& operator=(Validator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Validator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Validator* internal_default_instance() {
    return reinterpret_cast<const Validator*>(
               &_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Validator& a, Validator& b) {
    a.Swap(&b);
  }
  inline void Swap(Validator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Validator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Validator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Validator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Validator& from) {
    Validator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Validator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.Validator";
  }
  protected:
  explicit Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdFieldNumber = 1,
    kVotingPowerFieldNumber = 3,
    kProposerPriorityFieldNumber = 4,
  };
  // .types.H160 address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::types::H160& address() const;
  PROTOBUF_NODISCARD ::types::H160* release_address();
  ::types::H160* mutable_address();
  void set_allocated_address(::types::H160* address);
  private:
  const ::types::H160& _internal_address() const;
  ::types::H160* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::types::H160* address);
  ::types::H160* unsafe_arena_release_address();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // int64 voting_power = 3;
  void clear_voting_power();
  int64_t voting_power() const;
  void set_voting_power(int64_t value);
  private:
  int64_t _internal_voting_power() const;
  void _internal_set_voting_power(int64_t value);
  public:

  // int64 proposer_priority = 4;
  void clear_proposer_priority();
  int64_t proposer_priority() const;
  void set_proposer_priority(int64_t value);
  private:
  int64_t _internal_proposer_priority() const;
  void _internal_set_proposer_priority(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:remote.Validator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::H160* address_;
    uint64_t id_;
    int64_t voting_power_;
    int64_t proposer_priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_remote_2fbor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BorTxnLookupRequest

// .types.H256 bor_tx_hash = 1;
inline bool BorTxnLookupRequest::_internal_has_bor_tx_hash() const {
  return this != internal_default_instance() && _impl_.bor_tx_hash_ != nullptr;
}
inline bool BorTxnLookupRequest::has_bor_tx_hash() const {
  return _internal_has_bor_tx_hash();
}
inline const ::types::H256& BorTxnLookupRequest::_internal_bor_tx_hash() const {
  const ::types::H256* p = _impl_.bor_tx_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& BorTxnLookupRequest::bor_tx_hash() const {
  // @@protoc_insertion_point(field_get:remote.BorTxnLookupRequest.bor_tx_hash)
  return _internal_bor_tx_hash();
}
inline void BorTxnLookupRequest::unsafe_arena_set_allocated_bor_tx_hash(
    ::types::H256* bor_tx_hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bor_tx_hash_);
  }
  _impl_.bor_tx_hash_ = bor_tx_hash;
  if (bor_tx_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.BorTxnLookupRequest.bor_tx_hash)
}
inline ::types::H256* BorTxnLookupRequest::release_bor_tx_hash() {
  
  ::types::H256* temp = _impl_.bor_tx_hash_;
  _impl_.bor_tx_hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* BorTxnLookupRequest::unsafe_arena_release_bor_tx_hash() {
  // @@protoc_insertion_point(field_release:remote.BorTxnLookupRequest.bor_tx_hash)
  
  ::types::H256* temp = _impl_.bor_tx_hash_;
  _impl_.bor_tx_hash_ = nullptr;
  return temp;
}
inline ::types::H256* BorTxnLookupRequest::_internal_mutable_bor_tx_hash() {
  
  if (_impl_.bor_tx_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.bor_tx_hash_ = p;
  }
  return _impl_.bor_tx_hash_;
}
inline ::types::H256* BorTxnLookupRequest::mutable_bor_tx_hash() {
  ::types::H256* _msg = _internal_mutable_bor_tx_hash();
  // @@protoc_insertion_point(field_mutable:remote.BorTxnLookupRequest.bor_tx_hash)
  return _msg;
}
inline void BorTxnLookupRequest::set_allocated_bor_tx_hash(::types::H256* bor_tx_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bor_tx_hash_);
  }
  if (bor_tx_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bor_tx_hash));
    if (message_arena != submessage_arena) {
      bor_tx_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bor_tx_hash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bor_tx_hash_ = bor_tx_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.BorTxnLookupRequest.bor_tx_hash)
}

// -------------------------------------------------------------------

// BorTxnLookupReply

// bool present = 1;
inline void BorTxnLookupReply::clear_present() {
  _impl_.present_ = false;
}
inline bool BorTxnLookupReply::_internal_present() const {
  return _impl_.present_;
}
inline bool BorTxnLookupReply::present() const {
  // @@protoc_insertion_point(field_get:remote.BorTxnLookupReply.present)
  return _internal_present();
}
inline void BorTxnLookupReply::_internal_set_present(bool value) {
  
  _impl_.present_ = value;
}
inline void BorTxnLookupReply::set_present(bool value) {
  _internal_set_present(value);
  // @@protoc_insertion_point(field_set:remote.BorTxnLookupReply.present)
}

// uint64 block_number = 2;
inline void BorTxnLookupReply::clear_block_number() {
  _impl_.block_number_ = uint64_t{0u};
}
inline uint64_t BorTxnLookupReply::_internal_block_number() const {
  return _impl_.block_number_;
}
inline uint64_t BorTxnLookupReply::block_number() const {
  // @@protoc_insertion_point(field_get:remote.BorTxnLookupReply.block_number)
  return _internal_block_number();
}
inline void BorTxnLookupReply::_internal_set_block_number(uint64_t value) {
  
  _impl_.block_number_ = value;
}
inline void BorTxnLookupReply::set_block_number(uint64_t value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:remote.BorTxnLookupReply.block_number)
}

// -------------------------------------------------------------------

// BorEventsRequest

// uint64 block_num = 1;
inline void BorEventsRequest::clear_block_num() {
  _impl_.block_num_ = uint64_t{0u};
}
inline uint64_t BorEventsRequest::_internal_block_num() const {
  return _impl_.block_num_;
}
inline uint64_t BorEventsRequest::block_num() const {
  // @@protoc_insertion_point(field_get:remote.BorEventsRequest.block_num)
  return _internal_block_num();
}
inline void BorEventsRequest::_internal_set_block_num(uint64_t value) {
  
  _impl_.block_num_ = value;
}
inline void BorEventsRequest::set_block_num(uint64_t value) {
  _internal_set_block_num(value);
  // @@protoc_insertion_point(field_set:remote.BorEventsRequest.block_num)
}

// .types.H256 block_hash = 2;
inline bool BorEventsRequest::_internal_has_block_hash() const {
  return this != internal_default_instance() && _impl_.block_hash_ != nullptr;
}
inline bool BorEventsRequest::has_block_hash() const {
  return _internal_has_block_hash();
}
inline const ::types::H256& BorEventsRequest::_internal_block_hash() const {
  const ::types::H256* p = _impl_.block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& BorEventsRequest::block_hash() const {
  // @@protoc_insertion_point(field_get:remote.BorEventsRequest.block_hash)
  return _internal_block_hash();
}
inline void BorEventsRequest::unsafe_arena_set_allocated_block_hash(
    ::types::H256* block_hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_hash_);
  }
  _impl_.block_hash_ = block_hash;
  if (block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.BorEventsRequest.block_hash)
}
inline ::types::H256* BorEventsRequest::release_block_hash() {
  
  ::types::H256* temp = _impl_.block_hash_;
  _impl_.block_hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H256* BorEventsRequest::unsafe_arena_release_block_hash() {
  // @@protoc_insertion_point(field_release:remote.BorEventsRequest.block_hash)
  
  ::types::H256* temp = _impl_.block_hash_;
  _impl_.block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* BorEventsRequest::_internal_mutable_block_hash() {
  
  if (_impl_.block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArenaForAllocation());
    _impl_.block_hash_ = p;
  }
  return _impl_.block_hash_;
}
inline ::types::H256* BorEventsRequest::mutable_block_hash() {
  ::types::H256* _msg = _internal_mutable_block_hash();
  // @@protoc_insertion_point(field_mutable:remote.BorEventsRequest.block_hash)
  return _msg;
}
inline void BorEventsRequest::set_allocated_block_hash(::types::H256* block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_hash_);
  }
  if (block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash));
    if (message_arena != submessage_arena) {
      block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_hash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.block_hash_ = block_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.BorEventsRequest.block_hash)
}

// -------------------------------------------------------------------

// BorEventsReply

// string state_receiver_contract_address = 1;
inline void BorEventsReply::clear_state_receiver_contract_address() {
  _impl_.state_receiver_contract_address_.ClearToEmpty();
}
inline const std::string& BorEventsReply::state_receiver_contract_address() const {
  // @@protoc_insertion_point(field_get:remote.BorEventsReply.state_receiver_contract_address)
  return _internal_state_receiver_contract_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BorEventsReply::set_state_receiver_contract_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_receiver_contract_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:remote.BorEventsReply.state_receiver_contract_address)
}
inline std::string* BorEventsReply::mutable_state_receiver_contract_address() {
  std::string* _s = _internal_mutable_state_receiver_contract_address();
  // @@protoc_insertion_point(field_mutable:remote.BorEventsReply.state_receiver_contract_address)
  return _s;
}
inline const std::string& BorEventsReply::_internal_state_receiver_contract_address() const {
  return _impl_.state_receiver_contract_address_.Get();
}
inline void BorEventsReply::_internal_set_state_receiver_contract_address(const std::string& value) {
  
  _impl_.state_receiver_contract_address_.Set(value, GetArenaForAllocation());
}
inline std::string* BorEventsReply::_internal_mutable_state_receiver_contract_address() {
  
  return _impl_.state_receiver_contract_address_.Mutable(GetArenaForAllocation());
}
inline std::string* BorEventsReply::release_state_receiver_contract_address() {
  // @@protoc_insertion_point(field_release:remote.BorEventsReply.state_receiver_contract_address)
  return _impl_.state_receiver_contract_address_.Release();
}
inline void BorEventsReply::set_allocated_state_receiver_contract_address(std::string* state_receiver_contract_address) {
  if (state_receiver_contract_address != nullptr) {
    
  } else {
    
  }
  _impl_.state_receiver_contract_address_.SetAllocated(state_receiver_contract_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_receiver_contract_address_.IsDefault()) {
    _impl_.state_receiver_contract_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:remote.BorEventsReply.state_receiver_contract_address)
}

// repeated bytes event_rlps = 2;
inline int BorEventsReply::_internal_event_rlps_size() const {
  return _impl_.event_rlps_.size();
}
inline int BorEventsReply::event_rlps_size() const {
  return _internal_event_rlps_size();
}
inline void BorEventsReply::clear_event_rlps() {
  _impl_.event_rlps_.Clear();
}
inline std::string* BorEventsReply::add_event_rlps() {
  std::string* _s = _internal_add_event_rlps();
  // @@protoc_insertion_point(field_add_mutable:remote.BorEventsReply.event_rlps)
  return _s;
}
inline const std::string& BorEventsReply::_internal_event_rlps(int index) const {
  return _impl_.event_rlps_.Get(index);
}
inline const std::string& BorEventsReply::event_rlps(int index) const {
  // @@protoc_insertion_point(field_get:remote.BorEventsReply.event_rlps)
  return _internal_event_rlps(index);
}
inline std::string* BorEventsReply::mutable_event_rlps(int index) {
  // @@protoc_insertion_point(field_mutable:remote.BorEventsReply.event_rlps)
  return _impl_.event_rlps_.Mutable(index);
}
inline void BorEventsReply::set_event_rlps(int index, const std::string& value) {
  _impl_.event_rlps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:remote.BorEventsReply.event_rlps)
}
inline void BorEventsReply::set_event_rlps(int index, std::string&& value) {
  _impl_.event_rlps_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:remote.BorEventsReply.event_rlps)
}
inline void BorEventsReply::set_event_rlps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.event_rlps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:remote.BorEventsReply.event_rlps)
}
inline void BorEventsReply::set_event_rlps(int index, const void* value, size_t size) {
  _impl_.event_rlps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:remote.BorEventsReply.event_rlps)
}
inline std::string* BorEventsReply::_internal_add_event_rlps() {
  return _impl_.event_rlps_.Add();
}
inline void BorEventsReply::add_event_rlps(const std::string& value) {
  _impl_.event_rlps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:remote.BorEventsReply.event_rlps)
}
inline void BorEventsReply::add_event_rlps(std::string&& value) {
  _impl_.event_rlps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:remote.BorEventsReply.event_rlps)
}
inline void BorEventsReply::add_event_rlps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.event_rlps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:remote.BorEventsReply.event_rlps)
}
inline void BorEventsReply::add_event_rlps(const void* value, size_t size) {
  _impl_.event_rlps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:remote.BorEventsReply.event_rlps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BorEventsReply::event_rlps() const {
  // @@protoc_insertion_point(field_list:remote.BorEventsReply.event_rlps)
  return _impl_.event_rlps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BorEventsReply::mutable_event_rlps() {
  // @@protoc_insertion_point(field_mutable_list:remote.BorEventsReply.event_rlps)
  return &_impl_.event_rlps_;
}

// -------------------------------------------------------------------

// BorProducersRequest

// uint64 block_num = 1;
inline void BorProducersRequest::clear_block_num() {
  _impl_.block_num_ = uint64_t{0u};
}
inline uint64_t BorProducersRequest::_internal_block_num() const {
  return _impl_.block_num_;
}
inline uint64_t BorProducersRequest::block_num() const {
  // @@protoc_insertion_point(field_get:remote.BorProducersRequest.block_num)
  return _internal_block_num();
}
inline void BorProducersRequest::_internal_set_block_num(uint64_t value) {
  
  _impl_.block_num_ = value;
}
inline void BorProducersRequest::set_block_num(uint64_t value) {
  _internal_set_block_num(value);
  // @@protoc_insertion_point(field_set:remote.BorProducersRequest.block_num)
}

// -------------------------------------------------------------------

// BorProducersResponse

// .remote.Validator proposer = 1;
inline bool BorProducersResponse::_internal_has_proposer() const {
  return this != internal_default_instance() && _impl_.proposer_ != nullptr;
}
inline bool BorProducersResponse::has_proposer() const {
  return _internal_has_proposer();
}
inline void BorProducersResponse::clear_proposer() {
  if (GetArenaForAllocation() == nullptr && _impl_.proposer_ != nullptr) {
    delete _impl_.proposer_;
  }
  _impl_.proposer_ = nullptr;
}
inline const ::remote::Validator& BorProducersResponse::_internal_proposer() const {
  const ::remote::Validator* p = _impl_.proposer_;
  return p != nullptr ? *p : reinterpret_cast<const ::remote::Validator&>(
      ::remote::_Validator_default_instance_);
}
inline const ::remote::Validator& BorProducersResponse::proposer() const {
  // @@protoc_insertion_point(field_get:remote.BorProducersResponse.proposer)
  return _internal_proposer();
}
inline void BorProducersResponse::unsafe_arena_set_allocated_proposer(
    ::remote::Validator* proposer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposer_);
  }
  _impl_.proposer_ = proposer;
  if (proposer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.BorProducersResponse.proposer)
}
inline ::remote::Validator* BorProducersResponse::release_proposer() {
  
  ::remote::Validator* temp = _impl_.proposer_;
  _impl_.proposer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::remote::Validator* BorProducersResponse::unsafe_arena_release_proposer() {
  // @@protoc_insertion_point(field_release:remote.BorProducersResponse.proposer)
  
  ::remote::Validator* temp = _impl_.proposer_;
  _impl_.proposer_ = nullptr;
  return temp;
}
inline ::remote::Validator* BorProducersResponse::_internal_mutable_proposer() {
  
  if (_impl_.proposer_ == nullptr) {
    auto* p = CreateMaybeMessage<::remote::Validator>(GetArenaForAllocation());
    _impl_.proposer_ = p;
  }
  return _impl_.proposer_;
}
inline ::remote::Validator* BorProducersResponse::mutable_proposer() {
  ::remote::Validator* _msg = _internal_mutable_proposer();
  // @@protoc_insertion_point(field_mutable:remote.BorProducersResponse.proposer)
  return _msg;
}
inline void BorProducersResponse::set_allocated_proposer(::remote::Validator* proposer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.proposer_;
  }
  if (proposer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proposer);
    if (message_arena != submessage_arena) {
      proposer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proposer_ = proposer;
  // @@protoc_insertion_point(field_set_allocated:remote.BorProducersResponse.proposer)
}

// repeated .remote.Validator validators = 2;
inline int BorProducersResponse::_internal_validators_size() const {
  return _impl_.validators_.size();
}
inline int BorProducersResponse::validators_size() const {
  return _internal_validators_size();
}
inline void BorProducersResponse::clear_validators() {
  _impl_.validators_.Clear();
}
inline ::remote::Validator* BorProducersResponse::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:remote.BorProducersResponse.validators)
  return _impl_.validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::Validator >*
BorProducersResponse::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:remote.BorProducersResponse.validators)
  return &_impl_.validators_;
}
inline const ::remote::Validator& BorProducersResponse::_internal_validators(int index) const {
  return _impl_.validators_.Get(index);
}
inline const ::remote::Validator& BorProducersResponse::validators(int index) const {
  // @@protoc_insertion_point(field_get:remote.BorProducersResponse.validators)
  return _internal_validators(index);
}
inline ::remote::Validator* BorProducersResponse::_internal_add_validators() {
  return _impl_.validators_.Add();
}
inline ::remote::Validator* BorProducersResponse::add_validators() {
  ::remote::Validator* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:remote.BorProducersResponse.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::remote::Validator >&
BorProducersResponse::validators() const {
  // @@protoc_insertion_point(field_list:remote.BorProducersResponse.validators)
  return _impl_.validators_;
}

// -------------------------------------------------------------------

// Validator

// uint64 id = 1;
inline void Validator::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Validator::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Validator::id() const {
  // @@protoc_insertion_point(field_get:remote.Validator.id)
  return _internal_id();
}
inline void Validator::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Validator::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:remote.Validator.id)
}

// .types.H160 address = 2;
inline bool Validator::_internal_has_address() const {
  return this != internal_default_instance() && _impl_.address_ != nullptr;
}
inline bool Validator::has_address() const {
  return _internal_has_address();
}
inline const ::types::H160& Validator::_internal_address() const {
  const ::types::H160* p = _impl_.address_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& Validator::address() const {
  // @@protoc_insertion_point(field_get:remote.Validator.address)
  return _internal_address();
}
inline void Validator::unsafe_arena_set_allocated_address(
    ::types::H160* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  _impl_.address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.Validator.address)
}
inline ::types::H160* Validator::release_address() {
  
  ::types::H160* temp = _impl_.address_;
  _impl_.address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::H160* Validator::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:remote.Validator.address)
  
  ::types::H160* temp = _impl_.address_;
  _impl_.address_ = nullptr;
  return temp;
}
inline ::types::H160* Validator::_internal_mutable_address() {
  
  if (_impl_.address_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArenaForAllocation());
    _impl_.address_ = p;
  }
  return _impl_.address_;
}
inline ::types::H160* Validator::mutable_address() {
  ::types::H160* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:remote.Validator.address)
  return _msg;
}
inline void Validator::set_allocated_address(::types::H160* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address));
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.address_ = address;
  // @@protoc_insertion_point(field_set_allocated:remote.Validator.address)
}

// int64 voting_power = 3;
inline void Validator::clear_voting_power() {
  _impl_.voting_power_ = int64_t{0};
}
inline int64_t Validator::_internal_voting_power() const {
  return _impl_.voting_power_;
}
inline int64_t Validator::voting_power() const {
  // @@protoc_insertion_point(field_get:remote.Validator.voting_power)
  return _internal_voting_power();
}
inline void Validator::_internal_set_voting_power(int64_t value) {
  
  _impl_.voting_power_ = value;
}
inline void Validator::set_voting_power(int64_t value) {
  _internal_set_voting_power(value);
  // @@protoc_insertion_point(field_set:remote.Validator.voting_power)
}

// int64 proposer_priority = 4;
inline void Validator::clear_proposer_priority() {
  _impl_.proposer_priority_ = int64_t{0};
}
inline int64_t Validator::_internal_proposer_priority() const {
  return _impl_.proposer_priority_;
}
inline int64_t Validator::proposer_priority() const {
  // @@protoc_insertion_point(field_get:remote.Validator.proposer_priority)
  return _internal_proposer_priority();
}
inline void Validator::_internal_set_proposer_priority(int64_t value) {
  
  _impl_.proposer_priority_ = value;
}
inline void Validator::set_proposer_priority(int64_t value) {
  _internal_set_proposer_priority(value);
  // @@protoc_insertion_point(field_set:remote.Validator.proposer_priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remote_2fbor_2eproto
