#   Copyright 2023 The Silkworm Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

name: macOS

on:
  push:
    branches:
      - master
      - 'ci/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  osx:
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app/Contents/Developer

    # Disable on external PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        config:
          - {build_type: "Release"}
      fail-fast: false # This makes it so that if 1 of the tests in the matrix fail, they don't all fail

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: "0"
    - uses: actions/setup-python@v4 # Hopefully this step can be removed when Conan 1.62 will be available
      with:
        python-version: '<3.12' 

    - name: Install Prerequisites
      run: |
        brew install gmp
        pip3 install --user conan==1.60.2 chardet
        echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH
        echo "$($(python3 -m site --user-base)/bin/conan --version)"

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.config.cc }}-${{ matrix.config.build_type }}  # Eg. "linux_x64-ubuntu-latest-clang-12-Debug"

    - name: Configure CMake
      working-directory: ${{runner.workspace}}/build
      env:
        CC: ${{ matrix.config.cc}}
        CXX: ${{ matrix.config.cxx}}
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.config.build_type }} -j 2

    - name: Unit tests
      run: make "SILKWORM_BUILD_DIR=${{runner.workspace}}/build" run_unit_tests

    - name: Ethereum EL tests
      working-directory: ${{runner.workspace}}/build
      run: |
        cmd/test/ethereum --threads 4
