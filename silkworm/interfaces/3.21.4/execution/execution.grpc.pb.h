// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: execution/execution.proto
#ifndef GRPC_execution_2fexecution_2eproto__INCLUDED
#define GRPC_execution_2fexecution_2eproto__INCLUDED

#include "execution/execution.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace execution {

class Execution final {
 public:
  static constexpr char const* service_full_name() {
    return "execution.Execution";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Chain Putters.
    virtual ::grpc::Status InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::execution::EmptyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>> AsyncInsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>>(AsyncInsertHeadersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>> PrepareAsyncInsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>>(PrepareAsyncInsertHeadersRaw(context, request, cq));
    }
    virtual ::grpc::Status InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::execution::EmptyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>> AsyncInsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>>(AsyncInsertBodiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>> PrepareAsyncInsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>>(PrepareAsyncInsertBodiesRaw(context, request, cq));
    }
    // Chain Validation and ForkChoice.
    virtual ::grpc::Status ValidateChain(::grpc::ClientContext* context, const ::types::H256& request, ::execution::ValidationReceipt* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>> AsyncValidateChain(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>>(AsyncValidateChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>> PrepareAsyncValidateChain(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>>(PrepareAsyncValidateChainRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256& request, ::execution::ForkChoiceReceipt* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>> AsyncUpdateForkChoice(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>>(AsyncUpdateForkChoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>> PrepareAsyncUpdateForkChoice(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>>(PrepareAsyncUpdateForkChoiceRaw(context, request, cq));
    }
    virtual ::grpc::Status AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::types::ExecutionPayload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ExecutionPayload>> AsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ExecutionPayload>>(AsyncAssembleBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ExecutionPayload>> PrepareAsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::ExecutionPayload>>(PrepareAsyncAssembleBlockRaw(context, request, cq));
    }
    // Builds on top of current head.
    // Chain Getters.
    virtual ::grpc::Status GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetHeaderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>> AsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>>(AsyncGetHeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>> PrepareAsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>>(PrepareAsyncGetHeaderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetBodyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>> AsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>>(AsyncGetBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>> PrepareAsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>>(PrepareAsyncGetBodyRaw(context, request, cq));
    }
    virtual ::grpc::Status IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::execution::IsCanonicalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>> AsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>>(AsyncIsCanonicalHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>> PrepareAsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>>(PrepareAsyncIsCanonicalHashRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::execution::GetHeaderHashNumberResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>> AsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>>(AsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>> PrepareAsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>>(PrepareAsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Chain Putters.
      virtual void InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Chain Validation and ForkChoice.
      virtual void ValidateChain(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateChain(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Builds on top of current head.
      // Chain Getters.
      virtual void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>* AsyncInsertHeadersRaw(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>* PrepareAsyncInsertHeadersRaw(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>* AsyncInsertBodiesRaw(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::EmptyMessage>* PrepareAsyncInsertBodiesRaw(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>* AsyncValidateChainRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ValidationReceipt>* PrepareAsyncValidateChainRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>* AsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::ForkChoiceReceipt>* PrepareAsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ExecutionPayload>* AsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::ExecutionPayload>* PrepareAsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>* AsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderResponse>* PrepareAsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>* AsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetBodyResponse>* PrepareAsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>* AsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::IsCanonicalResponse>* PrepareAsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>* AsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::execution::GetHeaderHashNumberResponse>* PrepareAsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::execution::EmptyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>> AsyncInsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>>(AsyncInsertHeadersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>> PrepareAsyncInsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>>(PrepareAsyncInsertHeadersRaw(context, request, cq));
    }
    ::grpc::Status InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::execution::EmptyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>> AsyncInsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>>(AsyncInsertBodiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>> PrepareAsyncInsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>>(PrepareAsyncInsertBodiesRaw(context, request, cq));
    }
    ::grpc::Status ValidateChain(::grpc::ClientContext* context, const ::types::H256& request, ::execution::ValidationReceipt* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>> AsyncValidateChain(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>>(AsyncValidateChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>> PrepareAsyncValidateChain(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>>(PrepareAsyncValidateChainRaw(context, request, cq));
    }
    ::grpc::Status UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256& request, ::execution::ForkChoiceReceipt* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>> AsyncUpdateForkChoice(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>>(AsyncUpdateForkChoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>> PrepareAsyncUpdateForkChoice(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>>(PrepareAsyncUpdateForkChoiceRaw(context, request, cq));
    }
    ::grpc::Status AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::types::ExecutionPayload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>> AsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>>(AsyncAssembleBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>> PrepareAsyncAssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>>(PrepareAsyncAssembleBlockRaw(context, request, cq));
    }
    ::grpc::Status GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetHeaderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>> AsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>>(AsyncGetHeaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>> PrepareAsyncGetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>>(PrepareAsyncGetHeaderRaw(context, request, cq));
    }
    ::grpc::Status GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::execution::GetBodyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>> AsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>>(AsyncGetBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>> PrepareAsyncGetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>>(PrepareAsyncGetBodyRaw(context, request, cq));
    }
    ::grpc::Status IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::execution::IsCanonicalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>> AsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>>(AsyncIsCanonicalHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>> PrepareAsyncIsCanonicalHash(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>>(PrepareAsyncIsCanonicalHashRaw(context, request, cq));
    }
    ::grpc::Status GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::execution::GetHeaderHashNumberResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>> AsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>>(AsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>> PrepareAsyncGetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>>(PrepareAsyncGetHeaderHashNumberRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response, std::function<void(::grpc::Status)>) override;
      void InsertHeaders(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response, std::function<void(::grpc::Status)>) override;
      void InsertBodies(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidateChain(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response, std::function<void(::grpc::Status)>) override;
      void ValidateChain(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response, std::function<void(::grpc::Status)>) override;
      void UpdateForkChoice(::grpc::ClientContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response, std::function<void(::grpc::Status)>) override;
      void AssembleBlock(::grpc::ClientContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHeader(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBody(::grpc::ClientContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, std::function<void(::grpc::Status)>) override;
      void IsCanonicalHash(::grpc::ClientContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHeaderHashNumber(::grpc::ClientContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* AsyncInsertHeadersRaw(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* PrepareAsyncInsertHeadersRaw(::grpc::ClientContext* context, const ::execution::InsertHeadersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* AsyncInsertBodiesRaw(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::EmptyMessage>* PrepareAsyncInsertBodiesRaw(::grpc::ClientContext* context, const ::execution::InsertBodiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>* AsyncValidateChainRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ValidationReceipt>* PrepareAsyncValidateChainRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>* AsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::ForkChoiceReceipt>* PrepareAsyncUpdateForkChoiceRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>* AsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::ExecutionPayload>* PrepareAsyncAssembleBlockRaw(::grpc::ClientContext* context, const ::execution::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* AsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderResponse>* PrepareAsyncGetHeaderRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>* AsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetBodyResponse>* PrepareAsyncGetBodyRaw(::grpc::ClientContext* context, const ::execution::GetSegmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>* AsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::IsCanonicalResponse>* PrepareAsyncIsCanonicalHashRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>* AsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::execution::GetHeaderHashNumberResponse>* PrepareAsyncGetHeaderHashNumberRaw(::grpc::ClientContext* context, const ::types::H256& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InsertHeaders_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertBodies_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateChain_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateForkChoice_;
    const ::grpc::internal::RpcMethod rpcmethod_AssembleBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHeader_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBody_;
    const ::grpc::internal::RpcMethod rpcmethod_IsCanonicalHash_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHeaderHashNumber_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Chain Putters.
    virtual ::grpc::Status InsertHeaders(::grpc::ServerContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response);
    virtual ::grpc::Status InsertBodies(::grpc::ServerContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response);
    // Chain Validation and ForkChoice.
    virtual ::grpc::Status ValidateChain(::grpc::ServerContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response);
    virtual ::grpc::Status UpdateForkChoice(::grpc::ServerContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response);
    virtual ::grpc::Status AssembleBlock(::grpc::ServerContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response);
    // Builds on top of current head.
    // Chain Getters.
    virtual ::grpc::Status GetHeader(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response);
    virtual ::grpc::Status GetBody(::grpc::ServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response);
    virtual ::grpc::Status IsCanonicalHash(::grpc::ServerContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response);
    virtual ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertHeaders() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InsertHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertHeaders(::grpc::ServerContext* /*context*/, const ::execution::InsertHeadersRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertHeaders(::grpc::ServerContext* context, ::execution::InsertHeadersRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::EmptyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertBodies() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InsertBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBodies(::grpc::ServerContext* /*context*/, const ::execution::InsertBodiesRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertBodies(::grpc::ServerContext* context, ::execution::InsertBodiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::EmptyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateChain() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateChain(::grpc::ServerContext* context, ::types::H256* request, ::grpc::ServerAsyncResponseWriter< ::execution::ValidationReceipt>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateForkChoice(::grpc::ServerContext* context, ::types::H256* request, ::grpc::ServerAsyncResponseWriter< ::execution::ForkChoiceReceipt>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::EmptyMessage* /*request*/, ::types::ExecutionPayload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssembleBlock(::grpc::ServerContext* context, ::execution::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::types::ExecutionPayload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHeader() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeader(::grpc::ServerContext* context, ::execution::GetSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetHeaderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBody() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBody(::grpc::ServerContext* context, ::execution::GetSegmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetBodyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCanonicalHash(::grpc::ServerContext* context, ::types::H256* request, ::grpc::ServerAsyncResponseWriter< ::execution::IsCanonicalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeaderHashNumber(::grpc::ServerContext* context, ::types::H256* request, ::grpc::ServerAsyncResponseWriter< ::execution::GetHeaderHashNumberResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InsertHeaders<WithAsyncMethod_InsertBodies<WithAsyncMethod_ValidateChain<WithAsyncMethod_UpdateForkChoice<WithAsyncMethod_AssembleBlock<WithAsyncMethod_GetHeader<WithAsyncMethod_GetBody<WithAsyncMethod_IsCanonicalHash<WithAsyncMethod_GetHeaderHashNumber<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InsertHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertHeaders() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::InsertHeadersRequest, ::execution::EmptyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::InsertHeadersRequest* request, ::execution::EmptyMessage* response) { return this->InsertHeaders(context, request, response); }));}
    void SetMessageAllocatorFor_InsertHeaders(
        ::grpc::MessageAllocator< ::execution::InsertHeadersRequest, ::execution::EmptyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::InsertHeadersRequest, ::execution::EmptyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertHeaders(::grpc::ServerContext* /*context*/, const ::execution::InsertHeadersRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertHeaders(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::InsertHeadersRequest* /*request*/, ::execution::EmptyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InsertBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertBodies() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::InsertBodiesRequest, ::execution::EmptyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::InsertBodiesRequest* request, ::execution::EmptyMessage* response) { return this->InsertBodies(context, request, response); }));}
    void SetMessageAllocatorFor_InsertBodies(
        ::grpc::MessageAllocator< ::execution::InsertBodiesRequest, ::execution::EmptyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::InsertBodiesRequest, ::execution::EmptyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBodies(::grpc::ServerContext* /*context*/, const ::execution::InsertBodiesRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertBodies(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::InsertBodiesRequest* /*request*/, ::execution::EmptyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidateChain() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::ValidationReceipt>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::types::H256* request, ::execution::ValidationReceipt* response) { return this->ValidateChain(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateChain(
        ::grpc::MessageAllocator< ::types::H256, ::execution::ValidationReceipt>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::ValidationReceipt>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateChain(
      ::grpc::CallbackServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ValidationReceipt* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::ForkChoiceReceipt>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::types::H256* request, ::execution::ForkChoiceReceipt* response) { return this->UpdateForkChoice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateForkChoice(
        ::grpc::MessageAllocator< ::types::H256, ::execution::ForkChoiceReceipt>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::ForkChoiceReceipt>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateForkChoice(
      ::grpc::CallbackServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ForkChoiceReceipt* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::EmptyMessage, ::types::ExecutionPayload>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::EmptyMessage* request, ::types::ExecutionPayload* response) { return this->AssembleBlock(context, request, response); }));}
    void SetMessageAllocatorFor_AssembleBlock(
        ::grpc::MessageAllocator< ::execution::EmptyMessage, ::types::ExecutionPayload>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::EmptyMessage, ::types::ExecutionPayload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::EmptyMessage* /*request*/, ::types::ExecutionPayload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssembleBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::EmptyMessage* /*request*/, ::types::ExecutionPayload* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHeader() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetHeaderResponse* response) { return this->GetHeader(context, request, response); }));}
    void SetMessageAllocatorFor_GetHeader(
        ::grpc::MessageAllocator< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeader(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBody() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetBodyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::execution::GetSegmentRequest* request, ::execution::GetBodyResponse* response) { return this->GetBody(context, request, response); }));}
    void SetMessageAllocatorFor_GetBody(
        ::grpc::MessageAllocator< ::execution::GetSegmentRequest, ::execution::GetBodyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::execution::GetSegmentRequest, ::execution::GetBodyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBody(
      ::grpc::CallbackServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::IsCanonicalResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::types::H256* request, ::execution::IsCanonicalResponse* response) { return this->IsCanonicalHash(context, request, response); }));}
    void SetMessageAllocatorFor_IsCanonicalHash(
        ::grpc::MessageAllocator< ::types::H256, ::execution::IsCanonicalResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::IsCanonicalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCanonicalHash(
      ::grpc::CallbackServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::GetHeaderHashNumberResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::types::H256* request, ::execution::GetHeaderHashNumberResponse* response) { return this->GetHeaderHashNumber(context, request, response); }));}
    void SetMessageAllocatorFor_GetHeaderHashNumber(
        ::grpc::MessageAllocator< ::types::H256, ::execution::GetHeaderHashNumberResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::types::H256, ::execution::GetHeaderHashNumberResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeaderHashNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InsertHeaders<WithCallbackMethod_InsertBodies<WithCallbackMethod_ValidateChain<WithCallbackMethod_UpdateForkChoice<WithCallbackMethod_AssembleBlock<WithCallbackMethod_GetHeader<WithCallbackMethod_GetBody<WithCallbackMethod_IsCanonicalHash<WithCallbackMethod_GetHeaderHashNumber<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InsertHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertHeaders() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InsertHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertHeaders(::grpc::ServerContext* /*context*/, const ::execution::InsertHeadersRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertBodies() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InsertBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBodies(::grpc::ServerContext* /*context*/, const ::execution::InsertBodiesRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateChain() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::EmptyMessage* /*request*/, ::types::ExecutionPayload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHeader() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBody() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertHeaders() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InsertHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertHeaders(::grpc::ServerContext* /*context*/, const ::execution::InsertHeadersRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertHeaders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertBodies() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InsertBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBodies(::grpc::ServerContext* /*context*/, const ::execution::InsertBodiesRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertBodies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateChain() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateChain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateForkChoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::EmptyMessage* /*request*/, ::types::ExecutionPayload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssembleBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHeader() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeader(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBody() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBody(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCanonicalHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHeaderHashNumber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertHeaders() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertHeaders(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertHeaders(::grpc::ServerContext* /*context*/, const ::execution::InsertHeadersRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertHeaders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertBodies() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertBodies(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertBodies(::grpc::ServerContext* /*context*/, const ::execution::InsertBodiesRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertBodies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidateChain() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateChain(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateChain(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateForkChoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateForkChoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AssembleBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::EmptyMessage* /*request*/, ::types::ExecutionPayload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssembleBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHeader() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHeader(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeader(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBody() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBody(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBody(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsCanonicalHash(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCanonicalHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHeaderHashNumber(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHeaderHashNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertHeaders() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::InsertHeadersRequest, ::execution::EmptyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::InsertHeadersRequest, ::execution::EmptyMessage>* streamer) {
                       return this->StreamedInsertHeaders(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertHeaders(::grpc::ServerContext* /*context*/, const ::execution::InsertHeadersRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertHeaders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::InsertHeadersRequest,::execution::EmptyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertBodies() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::InsertBodiesRequest, ::execution::EmptyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::InsertBodiesRequest, ::execution::EmptyMessage>* streamer) {
                       return this->StreamedInsertBodies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertBodies(::grpc::ServerContext* /*context*/, const ::execution::InsertBodiesRequest* /*request*/, ::execution::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertBodies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::InsertBodiesRequest,::execution::EmptyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateChain() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::types::H256, ::execution::ValidationReceipt>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::types::H256, ::execution::ValidationReceipt>* streamer) {
                       return this->StreamedValidateChain(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateChain(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ValidationReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateChain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::H256,::execution::ValidationReceipt>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateForkChoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateForkChoice() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::types::H256, ::execution::ForkChoiceReceipt>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::types::H256, ::execution::ForkChoiceReceipt>* streamer) {
                       return this->StreamedUpdateForkChoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateForkChoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateForkChoice(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::ForkChoiceReceipt* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateForkChoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::H256,::execution::ForkChoiceReceipt>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AssembleBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AssembleBlock() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::EmptyMessage, ::types::ExecutionPayload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::EmptyMessage, ::types::ExecutionPayload>* streamer) {
                       return this->StreamedAssembleBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AssembleBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AssembleBlock(::grpc::ServerContext* /*context*/, const ::execution::EmptyMessage* /*request*/, ::types::ExecutionPayload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAssembleBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::EmptyMessage,::types::ExecutionPayload>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHeader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHeader() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetSegmentRequest, ::execution::GetHeaderResponse>* streamer) {
                       return this->StreamedGetHeader(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHeader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHeader(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetHeaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHeader(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetSegmentRequest,::execution::GetHeaderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBody() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::execution::GetSegmentRequest, ::execution::GetBodyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::execution::GetSegmentRequest, ::execution::GetBodyResponse>* streamer) {
                       return this->StreamedGetBody(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBody(::grpc::ServerContext* /*context*/, const ::execution::GetSegmentRequest* /*request*/, ::execution::GetBodyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBody(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::execution::GetSegmentRequest,::execution::GetBodyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsCanonicalHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsCanonicalHash() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::types::H256, ::execution::IsCanonicalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::types::H256, ::execution::IsCanonicalResponse>* streamer) {
                       return this->StreamedIsCanonicalHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsCanonicalHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsCanonicalHash(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::IsCanonicalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsCanonicalHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::H256,::execution::IsCanonicalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHeaderHashNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHeaderHashNumber() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::types::H256, ::execution::GetHeaderHashNumberResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::types::H256, ::execution::GetHeaderHashNumberResponse>* streamer) {
                       return this->StreamedGetHeaderHashNumber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHeaderHashNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHeaderHashNumber(::grpc::ServerContext* /*context*/, const ::types::H256* /*request*/, ::execution::GetHeaderHashNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHeaderHashNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::types::H256,::execution::GetHeaderHashNumberResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InsertHeaders<WithStreamedUnaryMethod_InsertBodies<WithStreamedUnaryMethod_ValidateChain<WithStreamedUnaryMethod_UpdateForkChoice<WithStreamedUnaryMethod_AssembleBlock<WithStreamedUnaryMethod_GetHeader<WithStreamedUnaryMethod_GetBody<WithStreamedUnaryMethod_IsCanonicalHash<WithStreamedUnaryMethod_GetHeaderHashNumber<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InsertHeaders<WithStreamedUnaryMethod_InsertBodies<WithStreamedUnaryMethod_ValidateChain<WithStreamedUnaryMethod_UpdateForkChoice<WithStreamedUnaryMethod_AssembleBlock<WithStreamedUnaryMethod_GetHeader<WithStreamedUnaryMethod_GetBody<WithStreamedUnaryMethod_IsCanonicalHash<WithStreamedUnaryMethod_GetHeaderHashNumber<Service > > > > > > > > > StreamedService;
};

}  // namespace execution


#endif  // GRPC_execution_2fexecution_2eproto__INCLUDED
