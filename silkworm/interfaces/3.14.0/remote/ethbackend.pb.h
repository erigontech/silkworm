// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/ethbackend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remote_2fethbackend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remote_2fethbackend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remote_2fethbackend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remote_2fethbackend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_2fethbackend_2eproto;
namespace remote {
class BlockReply;
class BlockReplyDefaultTypeInternal;
extern BlockReplyDefaultTypeInternal _BlockReply_default_instance_;
class BlockRequest;
class BlockRequestDefaultTypeInternal;
extern BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
class ClientVersionReply;
class ClientVersionReplyDefaultTypeInternal;
extern ClientVersionReplyDefaultTypeInternal _ClientVersionReply_default_instance_;
class ClientVersionRequest;
class ClientVersionRequestDefaultTypeInternal;
extern ClientVersionRequestDefaultTypeInternal _ClientVersionRequest_default_instance_;
class EngineForkChoiceState;
class EngineForkChoiceStateDefaultTypeInternal;
extern EngineForkChoiceStateDefaultTypeInternal _EngineForkChoiceState_default_instance_;
class EngineForkChoiceUpdatedRequest;
class EngineForkChoiceUpdatedRequestDefaultTypeInternal;
extern EngineForkChoiceUpdatedRequestDefaultTypeInternal _EngineForkChoiceUpdatedRequest_default_instance_;
class EngineForkChoiceUpdatedResponse;
class EngineForkChoiceUpdatedResponseDefaultTypeInternal;
extern EngineForkChoiceUpdatedResponseDefaultTypeInternal _EngineForkChoiceUpdatedResponse_default_instance_;
class EngineGetBlobsBundleRequest;
class EngineGetBlobsBundleRequestDefaultTypeInternal;
extern EngineGetBlobsBundleRequestDefaultTypeInternal _EngineGetBlobsBundleRequest_default_instance_;
class EngineGetPayloadBodiesByHashV1Request;
class EngineGetPayloadBodiesByHashV1RequestDefaultTypeInternal;
extern EngineGetPayloadBodiesByHashV1RequestDefaultTypeInternal _EngineGetPayloadBodiesByHashV1Request_default_instance_;
class EngineGetPayloadBodiesByRangeV1Request;
class EngineGetPayloadBodiesByRangeV1RequestDefaultTypeInternal;
extern EngineGetPayloadBodiesByRangeV1RequestDefaultTypeInternal _EngineGetPayloadBodiesByRangeV1Request_default_instance_;
class EngineGetPayloadBodiesV1Response;
class EngineGetPayloadBodiesV1ResponseDefaultTypeInternal;
extern EngineGetPayloadBodiesV1ResponseDefaultTypeInternal _EngineGetPayloadBodiesV1Response_default_instance_;
class EngineGetPayloadRequest;
class EngineGetPayloadRequestDefaultTypeInternal;
extern EngineGetPayloadRequestDefaultTypeInternal _EngineGetPayloadRequest_default_instance_;
class EngineGetPayloadResponse;
class EngineGetPayloadResponseDefaultTypeInternal;
extern EngineGetPayloadResponseDefaultTypeInternal _EngineGetPayloadResponse_default_instance_;
class EnginePayloadAttributes;
class EnginePayloadAttributesDefaultTypeInternal;
extern EnginePayloadAttributesDefaultTypeInternal _EnginePayloadAttributes_default_instance_;
class EnginePayloadStatus;
class EnginePayloadStatusDefaultTypeInternal;
extern EnginePayloadStatusDefaultTypeInternal _EnginePayloadStatus_default_instance_;
class EtherbaseReply;
class EtherbaseReplyDefaultTypeInternal;
extern EtherbaseReplyDefaultTypeInternal _EtherbaseReply_default_instance_;
class EtherbaseRequest;
class EtherbaseRequestDefaultTypeInternal;
extern EtherbaseRequestDefaultTypeInternal _EtherbaseRequest_default_instance_;
class LogsFilterRequest;
class LogsFilterRequestDefaultTypeInternal;
extern LogsFilterRequestDefaultTypeInternal _LogsFilterRequest_default_instance_;
class NetPeerCountReply;
class NetPeerCountReplyDefaultTypeInternal;
extern NetPeerCountReplyDefaultTypeInternal _NetPeerCountReply_default_instance_;
class NetPeerCountRequest;
class NetPeerCountRequestDefaultTypeInternal;
extern NetPeerCountRequestDefaultTypeInternal _NetPeerCountRequest_default_instance_;
class NetVersionReply;
class NetVersionReplyDefaultTypeInternal;
extern NetVersionReplyDefaultTypeInternal _NetVersionReply_default_instance_;
class NetVersionRequest;
class NetVersionRequestDefaultTypeInternal;
extern NetVersionRequestDefaultTypeInternal _NetVersionRequest_default_instance_;
class NodesInfoReply;
class NodesInfoReplyDefaultTypeInternal;
extern NodesInfoReplyDefaultTypeInternal _NodesInfoReply_default_instance_;
class NodesInfoRequest;
class NodesInfoRequestDefaultTypeInternal;
extern NodesInfoRequestDefaultTypeInternal _NodesInfoRequest_default_instance_;
class PeersReply;
class PeersReplyDefaultTypeInternal;
extern PeersReplyDefaultTypeInternal _PeersReply_default_instance_;
class PendingBlockReply;
class PendingBlockReplyDefaultTypeInternal;
extern PendingBlockReplyDefaultTypeInternal _PendingBlockReply_default_instance_;
class ProtocolVersionReply;
class ProtocolVersionReplyDefaultTypeInternal;
extern ProtocolVersionReplyDefaultTypeInternal _ProtocolVersionReply_default_instance_;
class ProtocolVersionRequest;
class ProtocolVersionRequestDefaultTypeInternal;
extern ProtocolVersionRequestDefaultTypeInternal _ProtocolVersionRequest_default_instance_;
class SubscribeLogsReply;
class SubscribeLogsReplyDefaultTypeInternal;
extern SubscribeLogsReplyDefaultTypeInternal _SubscribeLogsReply_default_instance_;
class SubscribeReply;
class SubscribeReplyDefaultTypeInternal;
extern SubscribeReplyDefaultTypeInternal _SubscribeReply_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class TxnLookupReply;
class TxnLookupReplyDefaultTypeInternal;
extern TxnLookupReplyDefaultTypeInternal _TxnLookupReply_default_instance_;
class TxnLookupRequest;
class TxnLookupRequestDefaultTypeInternal;
extern TxnLookupRequestDefaultTypeInternal _TxnLookupRequest_default_instance_;
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> ::remote::BlockReply* Arena::CreateMaybeMessage<::remote::BlockReply>(Arena*);
template<> ::remote::BlockRequest* Arena::CreateMaybeMessage<::remote::BlockRequest>(Arena*);
template<> ::remote::ClientVersionReply* Arena::CreateMaybeMessage<::remote::ClientVersionReply>(Arena*);
template<> ::remote::ClientVersionRequest* Arena::CreateMaybeMessage<::remote::ClientVersionRequest>(Arena*);
template<> ::remote::EngineForkChoiceState* Arena::CreateMaybeMessage<::remote::EngineForkChoiceState>(Arena*);
template<> ::remote::EngineForkChoiceUpdatedRequest* Arena::CreateMaybeMessage<::remote::EngineForkChoiceUpdatedRequest>(Arena*);
template<> ::remote::EngineForkChoiceUpdatedResponse* Arena::CreateMaybeMessage<::remote::EngineForkChoiceUpdatedResponse>(Arena*);
template<> ::remote::EngineGetBlobsBundleRequest* Arena::CreateMaybeMessage<::remote::EngineGetBlobsBundleRequest>(Arena*);
template<> ::remote::EngineGetPayloadBodiesByHashV1Request* Arena::CreateMaybeMessage<::remote::EngineGetPayloadBodiesByHashV1Request>(Arena*);
template<> ::remote::EngineGetPayloadBodiesByRangeV1Request* Arena::CreateMaybeMessage<::remote::EngineGetPayloadBodiesByRangeV1Request>(Arena*);
template<> ::remote::EngineGetPayloadBodiesV1Response* Arena::CreateMaybeMessage<::remote::EngineGetPayloadBodiesV1Response>(Arena*);
template<> ::remote::EngineGetPayloadRequest* Arena::CreateMaybeMessage<::remote::EngineGetPayloadRequest>(Arena*);
template<> ::remote::EngineGetPayloadResponse* Arena::CreateMaybeMessage<::remote::EngineGetPayloadResponse>(Arena*);
template<> ::remote::EnginePayloadAttributes* Arena::CreateMaybeMessage<::remote::EnginePayloadAttributes>(Arena*);
template<> ::remote::EnginePayloadStatus* Arena::CreateMaybeMessage<::remote::EnginePayloadStatus>(Arena*);
template<> ::remote::EtherbaseReply* Arena::CreateMaybeMessage<::remote::EtherbaseReply>(Arena*);
template<> ::remote::EtherbaseRequest* Arena::CreateMaybeMessage<::remote::EtherbaseRequest>(Arena*);
template<> ::remote::LogsFilterRequest* Arena::CreateMaybeMessage<::remote::LogsFilterRequest>(Arena*);
template<> ::remote::NetPeerCountReply* Arena::CreateMaybeMessage<::remote::NetPeerCountReply>(Arena*);
template<> ::remote::NetPeerCountRequest* Arena::CreateMaybeMessage<::remote::NetPeerCountRequest>(Arena*);
template<> ::remote::NetVersionReply* Arena::CreateMaybeMessage<::remote::NetVersionReply>(Arena*);
template<> ::remote::NetVersionRequest* Arena::CreateMaybeMessage<::remote::NetVersionRequest>(Arena*);
template<> ::remote::NodesInfoReply* Arena::CreateMaybeMessage<::remote::NodesInfoReply>(Arena*);
template<> ::remote::NodesInfoRequest* Arena::CreateMaybeMessage<::remote::NodesInfoRequest>(Arena*);
template<> ::remote::PeersReply* Arena::CreateMaybeMessage<::remote::PeersReply>(Arena*);
template<> ::remote::PendingBlockReply* Arena::CreateMaybeMessage<::remote::PendingBlockReply>(Arena*);
template<> ::remote::ProtocolVersionReply* Arena::CreateMaybeMessage<::remote::ProtocolVersionReply>(Arena*);
template<> ::remote::ProtocolVersionRequest* Arena::CreateMaybeMessage<::remote::ProtocolVersionRequest>(Arena*);
template<> ::remote::SubscribeLogsReply* Arena::CreateMaybeMessage<::remote::SubscribeLogsReply>(Arena*);
template<> ::remote::SubscribeReply* Arena::CreateMaybeMessage<::remote::SubscribeReply>(Arena*);
template<> ::remote::SubscribeRequest* Arena::CreateMaybeMessage<::remote::SubscribeRequest>(Arena*);
template<> ::remote::TxnLookupReply* Arena::CreateMaybeMessage<::remote::TxnLookupReply>(Arena*);
template<> ::remote::TxnLookupRequest* Arena::CreateMaybeMessage<::remote::TxnLookupRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace remote {

enum Event : int {
  HEADER = 0,
  PENDING_LOGS = 1,
  PENDING_BLOCK = 2,
  NEW_SNAPSHOT = 3,
  Event_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Event_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Event_IsValid(int value);
constexpr Event Event_MIN = HEADER;
constexpr Event Event_MAX = NEW_SNAPSHOT;
constexpr int Event_ARRAYSIZE = Event_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_descriptor();
template<typename T>
inline const std::string& Event_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Event>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Event_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Event_descriptor(), enum_t_value);
}
inline bool Event_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Event* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event>(
    Event_descriptor(), name, value);
}
enum EngineStatus : int {
  VALID = 0,
  INVALID = 1,
  SYNCING = 2,
  ACCEPTED = 3,
  INVALID_BLOCK_HASH = 4,
  EngineStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EngineStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EngineStatus_IsValid(int value);
constexpr EngineStatus EngineStatus_MIN = VALID;
constexpr EngineStatus EngineStatus_MAX = INVALID_BLOCK_HASH;
constexpr int EngineStatus_ARRAYSIZE = EngineStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineStatus_descriptor();
template<typename T>
inline const std::string& EngineStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EngineStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EngineStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EngineStatus_descriptor(), enum_t_value);
}
inline bool EngineStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EngineStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EngineStatus>(
    EngineStatus_descriptor(), name, value);
}
// ===================================================================

class EtherbaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EtherbaseRequest) */ {
 public:
  inline EtherbaseRequest() : EtherbaseRequest(nullptr) {}
  virtual ~EtherbaseRequest();

  EtherbaseRequest(const EtherbaseRequest& from);
  EtherbaseRequest(EtherbaseRequest&& from) noexcept
    : EtherbaseRequest() {
    *this = ::std::move(from);
  }

  inline EtherbaseRequest& operator=(const EtherbaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtherbaseRequest& operator=(EtherbaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EtherbaseRequest& default_instance();

  static inline const EtherbaseRequest* internal_default_instance() {
    return reinterpret_cast<const EtherbaseRequest*>(
               &_EtherbaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EtherbaseRequest& a, EtherbaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EtherbaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EtherbaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EtherbaseRequest* New() const final {
    return CreateMaybeMessage<EtherbaseRequest>(nullptr);
  }

  EtherbaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EtherbaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EtherbaseRequest& from);
  void MergeFrom(const EtherbaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtherbaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EtherbaseRequest";
  }
  protected:
  explicit EtherbaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:remote.EtherbaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EtherbaseReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EtherbaseReply) */ {
 public:
  inline EtherbaseReply() : EtherbaseReply(nullptr) {}
  virtual ~EtherbaseReply();

  EtherbaseReply(const EtherbaseReply& from);
  EtherbaseReply(EtherbaseReply&& from) noexcept
    : EtherbaseReply() {
    *this = ::std::move(from);
  }

  inline EtherbaseReply& operator=(const EtherbaseReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtherbaseReply& operator=(EtherbaseReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EtherbaseReply& default_instance();

  static inline const EtherbaseReply* internal_default_instance() {
    return reinterpret_cast<const EtherbaseReply*>(
               &_EtherbaseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EtherbaseReply& a, EtherbaseReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EtherbaseReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EtherbaseReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EtherbaseReply* New() const final {
    return CreateMaybeMessage<EtherbaseReply>(nullptr);
  }

  EtherbaseReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EtherbaseReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EtherbaseReply& from);
  void MergeFrom(const EtherbaseReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtherbaseReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EtherbaseReply";
  }
  protected:
  explicit EtherbaseReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // .types.H160 address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::types::H160& address() const;
  ::types::H160* release_address();
  ::types::H160* mutable_address();
  void set_allocated_address(::types::H160* address);
  private:
  const ::types::H160& _internal_address() const;
  ::types::H160* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::types::H160* address);
  ::types::H160* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:remote.EtherbaseReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::types::H160* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class NetVersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.NetVersionRequest) */ {
 public:
  inline NetVersionRequest() : NetVersionRequest(nullptr) {}
  virtual ~NetVersionRequest();

  NetVersionRequest(const NetVersionRequest& from);
  NetVersionRequest(NetVersionRequest&& from) noexcept
    : NetVersionRequest() {
    *this = ::std::move(from);
  }

  inline NetVersionRequest& operator=(const NetVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetVersionRequest& operator=(NetVersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetVersionRequest& default_instance();

  static inline const NetVersionRequest* internal_default_instance() {
    return reinterpret_cast<const NetVersionRequest*>(
               &_NetVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetVersionRequest& a, NetVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetVersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetVersionRequest* New() const final {
    return CreateMaybeMessage<NetVersionRequest>(nullptr);
  }

  NetVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetVersionRequest& from);
  void MergeFrom(const NetVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.NetVersionRequest";
  }
  protected:
  explicit NetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:remote.NetVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class NetVersionReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.NetVersionReply) */ {
 public:
  inline NetVersionReply() : NetVersionReply(nullptr) {}
  virtual ~NetVersionReply();

  NetVersionReply(const NetVersionReply& from);
  NetVersionReply(NetVersionReply&& from) noexcept
    : NetVersionReply() {
    *this = ::std::move(from);
  }

  inline NetVersionReply& operator=(const NetVersionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetVersionReply& operator=(NetVersionReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetVersionReply& default_instance();

  static inline const NetVersionReply* internal_default_instance() {
    return reinterpret_cast<const NetVersionReply*>(
               &_NetVersionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetVersionReply& a, NetVersionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NetVersionReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetVersionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetVersionReply* New() const final {
    return CreateMaybeMessage<NetVersionReply>(nullptr);
  }

  NetVersionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetVersionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetVersionReply& from);
  void MergeFrom(const NetVersionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetVersionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.NetVersionReply";
  }
  protected:
  explicit NetVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.NetVersionReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class NetPeerCountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.NetPeerCountRequest) */ {
 public:
  inline NetPeerCountRequest() : NetPeerCountRequest(nullptr) {}
  virtual ~NetPeerCountRequest();

  NetPeerCountRequest(const NetPeerCountRequest& from);
  NetPeerCountRequest(NetPeerCountRequest&& from) noexcept
    : NetPeerCountRequest() {
    *this = ::std::move(from);
  }

  inline NetPeerCountRequest& operator=(const NetPeerCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetPeerCountRequest& operator=(NetPeerCountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetPeerCountRequest& default_instance();

  static inline const NetPeerCountRequest* internal_default_instance() {
    return reinterpret_cast<const NetPeerCountRequest*>(
               &_NetPeerCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetPeerCountRequest& a, NetPeerCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetPeerCountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetPeerCountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetPeerCountRequest* New() const final {
    return CreateMaybeMessage<NetPeerCountRequest>(nullptr);
  }

  NetPeerCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetPeerCountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetPeerCountRequest& from);
  void MergeFrom(const NetPeerCountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetPeerCountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.NetPeerCountRequest";
  }
  protected:
  explicit NetPeerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:remote.NetPeerCountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class NetPeerCountReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.NetPeerCountReply) */ {
 public:
  inline NetPeerCountReply() : NetPeerCountReply(nullptr) {}
  virtual ~NetPeerCountReply();

  NetPeerCountReply(const NetPeerCountReply& from);
  NetPeerCountReply(NetPeerCountReply&& from) noexcept
    : NetPeerCountReply() {
    *this = ::std::move(from);
  }

  inline NetPeerCountReply& operator=(const NetPeerCountReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetPeerCountReply& operator=(NetPeerCountReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetPeerCountReply& default_instance();

  static inline const NetPeerCountReply* internal_default_instance() {
    return reinterpret_cast<const NetPeerCountReply*>(
               &_NetPeerCountReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NetPeerCountReply& a, NetPeerCountReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NetPeerCountReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetPeerCountReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetPeerCountReply* New() const final {
    return CreateMaybeMessage<NetPeerCountReply>(nullptr);
  }

  NetPeerCountReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetPeerCountReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetPeerCountReply& from);
  void MergeFrom(const NetPeerCountReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetPeerCountReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.NetPeerCountReply";
  }
  protected:
  explicit NetPeerCountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint64 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.NetPeerCountReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineGetPayloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineGetPayloadRequest) */ {
 public:
  inline EngineGetPayloadRequest() : EngineGetPayloadRequest(nullptr) {}
  virtual ~EngineGetPayloadRequest();

  EngineGetPayloadRequest(const EngineGetPayloadRequest& from);
  EngineGetPayloadRequest(EngineGetPayloadRequest&& from) noexcept
    : EngineGetPayloadRequest() {
    *this = ::std::move(from);
  }

  inline EngineGetPayloadRequest& operator=(const EngineGetPayloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineGetPayloadRequest& operator=(EngineGetPayloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineGetPayloadRequest& default_instance();

  static inline const EngineGetPayloadRequest* internal_default_instance() {
    return reinterpret_cast<const EngineGetPayloadRequest*>(
               &_EngineGetPayloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EngineGetPayloadRequest& a, EngineGetPayloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineGetPayloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineGetPayloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineGetPayloadRequest* New() const final {
    return CreateMaybeMessage<EngineGetPayloadRequest>(nullptr);
  }

  EngineGetPayloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineGetPayloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineGetPayloadRequest& from);
  void MergeFrom(const EngineGetPayloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineGetPayloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineGetPayloadRequest";
  }
  protected:
  explicit EngineGetPayloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadIdFieldNumber = 1,
  };
  // uint64 payload_id = 1;
  void clear_payload_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 payload_id() const;
  void set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_payload_id() const;
  void _internal_set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.EngineGetPayloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 payload_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineGetBlobsBundleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineGetBlobsBundleRequest) */ {
 public:
  inline EngineGetBlobsBundleRequest() : EngineGetBlobsBundleRequest(nullptr) {}
  virtual ~EngineGetBlobsBundleRequest();

  EngineGetBlobsBundleRequest(const EngineGetBlobsBundleRequest& from);
  EngineGetBlobsBundleRequest(EngineGetBlobsBundleRequest&& from) noexcept
    : EngineGetBlobsBundleRequest() {
    *this = ::std::move(from);
  }

  inline EngineGetBlobsBundleRequest& operator=(const EngineGetBlobsBundleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineGetBlobsBundleRequest& operator=(EngineGetBlobsBundleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineGetBlobsBundleRequest& default_instance();

  static inline const EngineGetBlobsBundleRequest* internal_default_instance() {
    return reinterpret_cast<const EngineGetBlobsBundleRequest*>(
               &_EngineGetBlobsBundleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EngineGetBlobsBundleRequest& a, EngineGetBlobsBundleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineGetBlobsBundleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineGetBlobsBundleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineGetBlobsBundleRequest* New() const final {
    return CreateMaybeMessage<EngineGetBlobsBundleRequest>(nullptr);
  }

  EngineGetBlobsBundleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineGetBlobsBundleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineGetBlobsBundleRequest& from);
  void MergeFrom(const EngineGetBlobsBundleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineGetBlobsBundleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineGetBlobsBundleRequest";
  }
  protected:
  explicit EngineGetBlobsBundleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadIdFieldNumber = 1,
  };
  // uint64 payload_id = 1;
  void clear_payload_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 payload_id() const;
  void set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_payload_id() const;
  void _internal_set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.EngineGetBlobsBundleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 payload_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EnginePayloadStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EnginePayloadStatus) */ {
 public:
  inline EnginePayloadStatus() : EnginePayloadStatus(nullptr) {}
  virtual ~EnginePayloadStatus();

  EnginePayloadStatus(const EnginePayloadStatus& from);
  EnginePayloadStatus(EnginePayloadStatus&& from) noexcept
    : EnginePayloadStatus() {
    *this = ::std::move(from);
  }

  inline EnginePayloadStatus& operator=(const EnginePayloadStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnginePayloadStatus& operator=(EnginePayloadStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnginePayloadStatus& default_instance();

  static inline const EnginePayloadStatus* internal_default_instance() {
    return reinterpret_cast<const EnginePayloadStatus*>(
               &_EnginePayloadStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EnginePayloadStatus& a, EnginePayloadStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(EnginePayloadStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnginePayloadStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnginePayloadStatus* New() const final {
    return CreateMaybeMessage<EnginePayloadStatus>(nullptr);
  }

  EnginePayloadStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnginePayloadStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnginePayloadStatus& from);
  void MergeFrom(const EnginePayloadStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnginePayloadStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EnginePayloadStatus";
  }
  protected:
  explicit EnginePayloadStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidationErrorFieldNumber = 3,
    kLatestValidHashFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string validation_error = 3;
  void clear_validation_error();
  const std::string& validation_error() const;
  void set_validation_error(const std::string& value);
  void set_validation_error(std::string&& value);
  void set_validation_error(const char* value);
  void set_validation_error(const char* value, size_t size);
  std::string* mutable_validation_error();
  std::string* release_validation_error();
  void set_allocated_validation_error(std::string* validation_error);
  private:
  const std::string& _internal_validation_error() const;
  void _internal_set_validation_error(const std::string& value);
  std::string* _internal_mutable_validation_error();
  public:

  // .types.H256 latest_valid_hash = 2;
  bool has_latest_valid_hash() const;
  private:
  bool _internal_has_latest_valid_hash() const;
  public:
  void clear_latest_valid_hash();
  const ::types::H256& latest_valid_hash() const;
  ::types::H256* release_latest_valid_hash();
  ::types::H256* mutable_latest_valid_hash();
  void set_allocated_latest_valid_hash(::types::H256* latest_valid_hash);
  private:
  const ::types::H256& _internal_latest_valid_hash() const;
  ::types::H256* _internal_mutable_latest_valid_hash();
  public:
  void unsafe_arena_set_allocated_latest_valid_hash(
      ::types::H256* latest_valid_hash);
  ::types::H256* unsafe_arena_release_latest_valid_hash();

  // .remote.EngineStatus status = 1;
  void clear_status();
  ::remote::EngineStatus status() const;
  void set_status(::remote::EngineStatus value);
  private:
  ::remote::EngineStatus _internal_status() const;
  void _internal_set_status(::remote::EngineStatus value);
  public:

  // @@protoc_insertion_point(class_scope:remote.EnginePayloadStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validation_error_;
  ::types::H256* latest_valid_hash_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EnginePayloadAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EnginePayloadAttributes) */ {
 public:
  inline EnginePayloadAttributes() : EnginePayloadAttributes(nullptr) {}
  virtual ~EnginePayloadAttributes();

  EnginePayloadAttributes(const EnginePayloadAttributes& from);
  EnginePayloadAttributes(EnginePayloadAttributes&& from) noexcept
    : EnginePayloadAttributes() {
    *this = ::std::move(from);
  }

  inline EnginePayloadAttributes& operator=(const EnginePayloadAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnginePayloadAttributes& operator=(EnginePayloadAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnginePayloadAttributes& default_instance();

  static inline const EnginePayloadAttributes* internal_default_instance() {
    return reinterpret_cast<const EnginePayloadAttributes*>(
               &_EnginePayloadAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EnginePayloadAttributes& a, EnginePayloadAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(EnginePayloadAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnginePayloadAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnginePayloadAttributes* New() const final {
    return CreateMaybeMessage<EnginePayloadAttributes>(nullptr);
  }

  EnginePayloadAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnginePayloadAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnginePayloadAttributes& from);
  void MergeFrom(const EnginePayloadAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnginePayloadAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EnginePayloadAttributes";
  }
  protected:
  explicit EnginePayloadAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawalsFieldNumber = 5,
    kPrevRandaoFieldNumber = 3,
    kSuggestedFeeRecipientFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .types.Withdrawal withdrawals = 5;
  int withdrawals_size() const;
  private:
  int _internal_withdrawals_size() const;
  public:
  void clear_withdrawals();
  ::types::Withdrawal* mutable_withdrawals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
      mutable_withdrawals();
  private:
  const ::types::Withdrawal& _internal_withdrawals(int index) const;
  ::types::Withdrawal* _internal_add_withdrawals();
  public:
  const ::types::Withdrawal& withdrawals(int index) const;
  ::types::Withdrawal* add_withdrawals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
      withdrawals() const;

  // .types.H256 prev_randao = 3;
  bool has_prev_randao() const;
  private:
  bool _internal_has_prev_randao() const;
  public:
  void clear_prev_randao();
  const ::types::H256& prev_randao() const;
  ::types::H256* release_prev_randao();
  ::types::H256* mutable_prev_randao();
  void set_allocated_prev_randao(::types::H256* prev_randao);
  private:
  const ::types::H256& _internal_prev_randao() const;
  ::types::H256* _internal_mutable_prev_randao();
  public:
  void unsafe_arena_set_allocated_prev_randao(
      ::types::H256* prev_randao);
  ::types::H256* unsafe_arena_release_prev_randao();

  // .types.H160 suggested_fee_recipient = 4;
  bool has_suggested_fee_recipient() const;
  private:
  bool _internal_has_suggested_fee_recipient() const;
  public:
  void clear_suggested_fee_recipient();
  const ::types::H160& suggested_fee_recipient() const;
  ::types::H160* release_suggested_fee_recipient();
  ::types::H160* mutable_suggested_fee_recipient();
  void set_allocated_suggested_fee_recipient(::types::H160* suggested_fee_recipient);
  private:
  const ::types::H160& _internal_suggested_fee_recipient() const;
  ::types::H160* _internal_mutable_suggested_fee_recipient();
  public:
  void unsafe_arena_set_allocated_suggested_fee_recipient(
      ::types::H160* suggested_fee_recipient);
  ::types::H160* unsafe_arena_release_suggested_fee_recipient();

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.EnginePayloadAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal > withdrawals_;
  ::types::H256* prev_randao_;
  ::types::H160* suggested_fee_recipient_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineForkChoiceState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineForkChoiceState) */ {
 public:
  inline EngineForkChoiceState() : EngineForkChoiceState(nullptr) {}
  virtual ~EngineForkChoiceState();

  EngineForkChoiceState(const EngineForkChoiceState& from);
  EngineForkChoiceState(EngineForkChoiceState&& from) noexcept
    : EngineForkChoiceState() {
    *this = ::std::move(from);
  }

  inline EngineForkChoiceState& operator=(const EngineForkChoiceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineForkChoiceState& operator=(EngineForkChoiceState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineForkChoiceState& default_instance();

  static inline const EngineForkChoiceState* internal_default_instance() {
    return reinterpret_cast<const EngineForkChoiceState*>(
               &_EngineForkChoiceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EngineForkChoiceState& a, EngineForkChoiceState& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineForkChoiceState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineForkChoiceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineForkChoiceState* New() const final {
    return CreateMaybeMessage<EngineForkChoiceState>(nullptr);
  }

  EngineForkChoiceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineForkChoiceState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineForkChoiceState& from);
  void MergeFrom(const EngineForkChoiceState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineForkChoiceState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineForkChoiceState";
  }
  protected:
  explicit EngineForkChoiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadBlockHashFieldNumber = 1,
    kSafeBlockHashFieldNumber = 2,
    kFinalizedBlockHashFieldNumber = 3,
  };
  // .types.H256 head_block_hash = 1;
  bool has_head_block_hash() const;
  private:
  bool _internal_has_head_block_hash() const;
  public:
  void clear_head_block_hash();
  const ::types::H256& head_block_hash() const;
  ::types::H256* release_head_block_hash();
  ::types::H256* mutable_head_block_hash();
  void set_allocated_head_block_hash(::types::H256* head_block_hash);
  private:
  const ::types::H256& _internal_head_block_hash() const;
  ::types::H256* _internal_mutable_head_block_hash();
  public:
  void unsafe_arena_set_allocated_head_block_hash(
      ::types::H256* head_block_hash);
  ::types::H256* unsafe_arena_release_head_block_hash();

  // .types.H256 safe_block_hash = 2;
  bool has_safe_block_hash() const;
  private:
  bool _internal_has_safe_block_hash() const;
  public:
  void clear_safe_block_hash();
  const ::types::H256& safe_block_hash() const;
  ::types::H256* release_safe_block_hash();
  ::types::H256* mutable_safe_block_hash();
  void set_allocated_safe_block_hash(::types::H256* safe_block_hash);
  private:
  const ::types::H256& _internal_safe_block_hash() const;
  ::types::H256* _internal_mutable_safe_block_hash();
  public:
  void unsafe_arena_set_allocated_safe_block_hash(
      ::types::H256* safe_block_hash);
  ::types::H256* unsafe_arena_release_safe_block_hash();

  // .types.H256 finalized_block_hash = 3;
  bool has_finalized_block_hash() const;
  private:
  bool _internal_has_finalized_block_hash() const;
  public:
  void clear_finalized_block_hash();
  const ::types::H256& finalized_block_hash() const;
  ::types::H256* release_finalized_block_hash();
  ::types::H256* mutable_finalized_block_hash();
  void set_allocated_finalized_block_hash(::types::H256* finalized_block_hash);
  private:
  const ::types::H256& _internal_finalized_block_hash() const;
  ::types::H256* _internal_mutable_finalized_block_hash();
  public:
  void unsafe_arena_set_allocated_finalized_block_hash(
      ::types::H256* finalized_block_hash);
  ::types::H256* unsafe_arena_release_finalized_block_hash();

  // @@protoc_insertion_point(class_scope:remote.EngineForkChoiceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::types::H256* head_block_hash_;
  ::types::H256* safe_block_hash_;
  ::types::H256* finalized_block_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineForkChoiceUpdatedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineForkChoiceUpdatedRequest) */ {
 public:
  inline EngineForkChoiceUpdatedRequest() : EngineForkChoiceUpdatedRequest(nullptr) {}
  virtual ~EngineForkChoiceUpdatedRequest();

  EngineForkChoiceUpdatedRequest(const EngineForkChoiceUpdatedRequest& from);
  EngineForkChoiceUpdatedRequest(EngineForkChoiceUpdatedRequest&& from) noexcept
    : EngineForkChoiceUpdatedRequest() {
    *this = ::std::move(from);
  }

  inline EngineForkChoiceUpdatedRequest& operator=(const EngineForkChoiceUpdatedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineForkChoiceUpdatedRequest& operator=(EngineForkChoiceUpdatedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineForkChoiceUpdatedRequest& default_instance();

  static inline const EngineForkChoiceUpdatedRequest* internal_default_instance() {
    return reinterpret_cast<const EngineForkChoiceUpdatedRequest*>(
               &_EngineForkChoiceUpdatedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EngineForkChoiceUpdatedRequest& a, EngineForkChoiceUpdatedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineForkChoiceUpdatedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineForkChoiceUpdatedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineForkChoiceUpdatedRequest* New() const final {
    return CreateMaybeMessage<EngineForkChoiceUpdatedRequest>(nullptr);
  }

  EngineForkChoiceUpdatedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineForkChoiceUpdatedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineForkChoiceUpdatedRequest& from);
  void MergeFrom(const EngineForkChoiceUpdatedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineForkChoiceUpdatedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineForkChoiceUpdatedRequest";
  }
  protected:
  explicit EngineForkChoiceUpdatedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForkchoiceStateFieldNumber = 1,
    kPayloadAttributesFieldNumber = 2,
  };
  // .remote.EngineForkChoiceState forkchoice_state = 1;
  bool has_forkchoice_state() const;
  private:
  bool _internal_has_forkchoice_state() const;
  public:
  void clear_forkchoice_state();
  const ::remote::EngineForkChoiceState& forkchoice_state() const;
  ::remote::EngineForkChoiceState* release_forkchoice_state();
  ::remote::EngineForkChoiceState* mutable_forkchoice_state();
  void set_allocated_forkchoice_state(::remote::EngineForkChoiceState* forkchoice_state);
  private:
  const ::remote::EngineForkChoiceState& _internal_forkchoice_state() const;
  ::remote::EngineForkChoiceState* _internal_mutable_forkchoice_state();
  public:
  void unsafe_arena_set_allocated_forkchoice_state(
      ::remote::EngineForkChoiceState* forkchoice_state);
  ::remote::EngineForkChoiceState* unsafe_arena_release_forkchoice_state();

  // .remote.EnginePayloadAttributes payload_attributes = 2;
  bool has_payload_attributes() const;
  private:
  bool _internal_has_payload_attributes() const;
  public:
  void clear_payload_attributes();
  const ::remote::EnginePayloadAttributes& payload_attributes() const;
  ::remote::EnginePayloadAttributes* release_payload_attributes();
  ::remote::EnginePayloadAttributes* mutable_payload_attributes();
  void set_allocated_payload_attributes(::remote::EnginePayloadAttributes* payload_attributes);
  private:
  const ::remote::EnginePayloadAttributes& _internal_payload_attributes() const;
  ::remote::EnginePayloadAttributes* _internal_mutable_payload_attributes();
  public:
  void unsafe_arena_set_allocated_payload_attributes(
      ::remote::EnginePayloadAttributes* payload_attributes);
  ::remote::EnginePayloadAttributes* unsafe_arena_release_payload_attributes();

  // @@protoc_insertion_point(class_scope:remote.EngineForkChoiceUpdatedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::remote::EngineForkChoiceState* forkchoice_state_;
  ::remote::EnginePayloadAttributes* payload_attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineForkChoiceUpdatedResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineForkChoiceUpdatedResponse) */ {
 public:
  inline EngineForkChoiceUpdatedResponse() : EngineForkChoiceUpdatedResponse(nullptr) {}
  virtual ~EngineForkChoiceUpdatedResponse();

  EngineForkChoiceUpdatedResponse(const EngineForkChoiceUpdatedResponse& from);
  EngineForkChoiceUpdatedResponse(EngineForkChoiceUpdatedResponse&& from) noexcept
    : EngineForkChoiceUpdatedResponse() {
    *this = ::std::move(from);
  }

  inline EngineForkChoiceUpdatedResponse& operator=(const EngineForkChoiceUpdatedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineForkChoiceUpdatedResponse& operator=(EngineForkChoiceUpdatedResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineForkChoiceUpdatedResponse& default_instance();

  static inline const EngineForkChoiceUpdatedResponse* internal_default_instance() {
    return reinterpret_cast<const EngineForkChoiceUpdatedResponse*>(
               &_EngineForkChoiceUpdatedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EngineForkChoiceUpdatedResponse& a, EngineForkChoiceUpdatedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineForkChoiceUpdatedResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineForkChoiceUpdatedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineForkChoiceUpdatedResponse* New() const final {
    return CreateMaybeMessage<EngineForkChoiceUpdatedResponse>(nullptr);
  }

  EngineForkChoiceUpdatedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineForkChoiceUpdatedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineForkChoiceUpdatedResponse& from);
  void MergeFrom(const EngineForkChoiceUpdatedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineForkChoiceUpdatedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineForkChoiceUpdatedResponse";
  }
  protected:
  explicit EngineForkChoiceUpdatedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadStatusFieldNumber = 1,
    kPayloadIdFieldNumber = 2,
  };
  // .remote.EnginePayloadStatus payload_status = 1;
  bool has_payload_status() const;
  private:
  bool _internal_has_payload_status() const;
  public:
  void clear_payload_status();
  const ::remote::EnginePayloadStatus& payload_status() const;
  ::remote::EnginePayloadStatus* release_payload_status();
  ::remote::EnginePayloadStatus* mutable_payload_status();
  void set_allocated_payload_status(::remote::EnginePayloadStatus* payload_status);
  private:
  const ::remote::EnginePayloadStatus& _internal_payload_status() const;
  ::remote::EnginePayloadStatus* _internal_mutable_payload_status();
  public:
  void unsafe_arena_set_allocated_payload_status(
      ::remote::EnginePayloadStatus* payload_status);
  ::remote::EnginePayloadStatus* unsafe_arena_release_payload_status();

  // uint64 payload_id = 2;
  void clear_payload_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 payload_id() const;
  void set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_payload_id() const;
  void _internal_set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.EngineForkChoiceUpdatedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::remote::EnginePayloadStatus* payload_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 payload_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineGetPayloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineGetPayloadResponse) */ {
 public:
  inline EngineGetPayloadResponse() : EngineGetPayloadResponse(nullptr) {}
  virtual ~EngineGetPayloadResponse();

  EngineGetPayloadResponse(const EngineGetPayloadResponse& from);
  EngineGetPayloadResponse(EngineGetPayloadResponse&& from) noexcept
    : EngineGetPayloadResponse() {
    *this = ::std::move(from);
  }

  inline EngineGetPayloadResponse& operator=(const EngineGetPayloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineGetPayloadResponse& operator=(EngineGetPayloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineGetPayloadResponse& default_instance();

  static inline const EngineGetPayloadResponse* internal_default_instance() {
    return reinterpret_cast<const EngineGetPayloadResponse*>(
               &_EngineGetPayloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EngineGetPayloadResponse& a, EngineGetPayloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineGetPayloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineGetPayloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineGetPayloadResponse* New() const final {
    return CreateMaybeMessage<EngineGetPayloadResponse>(nullptr);
  }

  EngineGetPayloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineGetPayloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineGetPayloadResponse& from);
  void MergeFrom(const EngineGetPayloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineGetPayloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineGetPayloadResponse";
  }
  protected:
  explicit EngineGetPayloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutionPayloadFieldNumber = 1,
    kBlockValueFieldNumber = 2,
  };
  // .types.ExecutionPayload execution_payload = 1;
  bool has_execution_payload() const;
  private:
  bool _internal_has_execution_payload() const;
  public:
  void clear_execution_payload();
  const ::types::ExecutionPayload& execution_payload() const;
  ::types::ExecutionPayload* release_execution_payload();
  ::types::ExecutionPayload* mutable_execution_payload();
  void set_allocated_execution_payload(::types::ExecutionPayload* execution_payload);
  private:
  const ::types::ExecutionPayload& _internal_execution_payload() const;
  ::types::ExecutionPayload* _internal_mutable_execution_payload();
  public:
  void unsafe_arena_set_allocated_execution_payload(
      ::types::ExecutionPayload* execution_payload);
  ::types::ExecutionPayload* unsafe_arena_release_execution_payload();

  // .types.H256 block_value = 2;
  bool has_block_value() const;
  private:
  bool _internal_has_block_value() const;
  public:
  void clear_block_value();
  const ::types::H256& block_value() const;
  ::types::H256* release_block_value();
  ::types::H256* mutable_block_value();
  void set_allocated_block_value(::types::H256* block_value);
  private:
  const ::types::H256& _internal_block_value() const;
  ::types::H256* _internal_mutable_block_value();
  public:
  void unsafe_arena_set_allocated_block_value(
      ::types::H256* block_value);
  ::types::H256* unsafe_arena_release_block_value();

  // @@protoc_insertion_point(class_scope:remote.EngineGetPayloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::types::ExecutionPayload* execution_payload_;
  ::types::H256* block_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class ProtocolVersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.ProtocolVersionRequest) */ {
 public:
  inline ProtocolVersionRequest() : ProtocolVersionRequest(nullptr) {}
  virtual ~ProtocolVersionRequest();

  ProtocolVersionRequest(const ProtocolVersionRequest& from);
  ProtocolVersionRequest(ProtocolVersionRequest&& from) noexcept
    : ProtocolVersionRequest() {
    *this = ::std::move(from);
  }

  inline ProtocolVersionRequest& operator=(const ProtocolVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolVersionRequest& operator=(ProtocolVersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolVersionRequest& default_instance();

  static inline const ProtocolVersionRequest* internal_default_instance() {
    return reinterpret_cast<const ProtocolVersionRequest*>(
               &_ProtocolVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProtocolVersionRequest& a, ProtocolVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolVersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolVersionRequest* New() const final {
    return CreateMaybeMessage<ProtocolVersionRequest>(nullptr);
  }

  ProtocolVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolVersionRequest& from);
  void MergeFrom(const ProtocolVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.ProtocolVersionRequest";
  }
  protected:
  explicit ProtocolVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:remote.ProtocolVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class ProtocolVersionReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.ProtocolVersionReply) */ {
 public:
  inline ProtocolVersionReply() : ProtocolVersionReply(nullptr) {}
  virtual ~ProtocolVersionReply();

  ProtocolVersionReply(const ProtocolVersionReply& from);
  ProtocolVersionReply(ProtocolVersionReply&& from) noexcept
    : ProtocolVersionReply() {
    *this = ::std::move(from);
  }

  inline ProtocolVersionReply& operator=(const ProtocolVersionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolVersionReply& operator=(ProtocolVersionReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolVersionReply& default_instance();

  static inline const ProtocolVersionReply* internal_default_instance() {
    return reinterpret_cast<const ProtocolVersionReply*>(
               &_ProtocolVersionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProtocolVersionReply& a, ProtocolVersionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolVersionReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolVersionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolVersionReply* New() const final {
    return CreateMaybeMessage<ProtocolVersionReply>(nullptr);
  }

  ProtocolVersionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolVersionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolVersionReply& from);
  void MergeFrom(const ProtocolVersionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolVersionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.ProtocolVersionReply";
  }
  protected:
  explicit ProtocolVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.ProtocolVersionReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class ClientVersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.ClientVersionRequest) */ {
 public:
  inline ClientVersionRequest() : ClientVersionRequest(nullptr) {}
  virtual ~ClientVersionRequest();

  ClientVersionRequest(const ClientVersionRequest& from);
  ClientVersionRequest(ClientVersionRequest&& from) noexcept
    : ClientVersionRequest() {
    *this = ::std::move(from);
  }

  inline ClientVersionRequest& operator=(const ClientVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientVersionRequest& operator=(ClientVersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientVersionRequest& default_instance();

  static inline const ClientVersionRequest* internal_default_instance() {
    return reinterpret_cast<const ClientVersionRequest*>(
               &_ClientVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ClientVersionRequest& a, ClientVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientVersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientVersionRequest* New() const final {
    return CreateMaybeMessage<ClientVersionRequest>(nullptr);
  }

  ClientVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientVersionRequest& from);
  void MergeFrom(const ClientVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.ClientVersionRequest";
  }
  protected:
  explicit ClientVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:remote.ClientVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class ClientVersionReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.ClientVersionReply) */ {
 public:
  inline ClientVersionReply() : ClientVersionReply(nullptr) {}
  virtual ~ClientVersionReply();

  ClientVersionReply(const ClientVersionReply& from);
  ClientVersionReply(ClientVersionReply&& from) noexcept
    : ClientVersionReply() {
    *this = ::std::move(from);
  }

  inline ClientVersionReply& operator=(const ClientVersionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientVersionReply& operator=(ClientVersionReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientVersionReply& default_instance();

  static inline const ClientVersionReply* internal_default_instance() {
    return reinterpret_cast<const ClientVersionReply*>(
               &_ClientVersionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ClientVersionReply& a, ClientVersionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientVersionReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientVersionReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientVersionReply* New() const final {
    return CreateMaybeMessage<ClientVersionReply>(nullptr);
  }

  ClientVersionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientVersionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientVersionReply& from);
  void MergeFrom(const ClientVersionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientVersionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.ClientVersionReply";
  }
  protected:
  explicit ClientVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
  };
  // string node_name = 1;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // @@protoc_insertion_point(class_scope:remote.ClientVersionReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.SubscribeRequest) */ {
 public:
  inline SubscribeRequest() : SubscribeRequest(nullptr) {}
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRequest& default_instance();

  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(nullptr);
  }

  SubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.SubscribeRequest";
  }
  protected:
  explicit SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .remote.Event type = 1;
  void clear_type();
  ::remote::Event type() const;
  void set_type(::remote::Event value);
  private:
  ::remote::Event _internal_type() const;
  void _internal_set_type(::remote::Event value);
  public:

  // @@protoc_insertion_point(class_scope:remote.SubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class SubscribeReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.SubscribeReply) */ {
 public:
  inline SubscribeReply() : SubscribeReply(nullptr) {}
  virtual ~SubscribeReply();

  SubscribeReply(const SubscribeReply& from);
  SubscribeReply(SubscribeReply&& from) noexcept
    : SubscribeReply() {
    *this = ::std::move(from);
  }

  inline SubscribeReply& operator=(const SubscribeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeReply& operator=(SubscribeReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeReply& default_instance();

  static inline const SubscribeReply* internal_default_instance() {
    return reinterpret_cast<const SubscribeReply*>(
               &_SubscribeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SubscribeReply& a, SubscribeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeReply* New() const final {
    return CreateMaybeMessage<SubscribeReply>(nullptr);
  }

  SubscribeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeReply& from);
  void MergeFrom(const SubscribeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.SubscribeReply";
  }
  protected:
  explicit SubscribeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .remote.Event type = 1;
  void clear_type();
  ::remote::Event type() const;
  void set_type(::remote::Event value);
  private:
  ::remote::Event _internal_type() const;
  void _internal_set_type(::remote::Event value);
  public:

  // @@protoc_insertion_point(class_scope:remote.SubscribeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class LogsFilterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.LogsFilterRequest) */ {
 public:
  inline LogsFilterRequest() : LogsFilterRequest(nullptr) {}
  virtual ~LogsFilterRequest();

  LogsFilterRequest(const LogsFilterRequest& from);
  LogsFilterRequest(LogsFilterRequest&& from) noexcept
    : LogsFilterRequest() {
    *this = ::std::move(from);
  }

  inline LogsFilterRequest& operator=(const LogsFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsFilterRequest& operator=(LogsFilterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogsFilterRequest& default_instance();

  static inline const LogsFilterRequest* internal_default_instance() {
    return reinterpret_cast<const LogsFilterRequest*>(
               &_LogsFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(LogsFilterRequest& a, LogsFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogsFilterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogsFilterRequest* New() const final {
    return CreateMaybeMessage<LogsFilterRequest>(nullptr);
  }

  LogsFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogsFilterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogsFilterRequest& from);
  void MergeFrom(const LogsFilterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsFilterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.LogsFilterRequest";
  }
  protected:
  explicit LogsFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 2,
    kTopicsFieldNumber = 4,
    kAllAddressesFieldNumber = 1,
    kAllTopicsFieldNumber = 3,
  };
  // repeated .types.H160 addresses = 2;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::types::H160* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H160 >*
      mutable_addresses();
  private:
  const ::types::H160& _internal_addresses(int index) const;
  ::types::H160* _internal_add_addresses();
  public:
  const ::types::H160& addresses(int index) const;
  ::types::H160* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H160 >&
      addresses() const;

  // repeated .types.H256 topics = 4;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::types::H256* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
      mutable_topics();
  private:
  const ::types::H256& _internal_topics(int index) const;
  ::types::H256* _internal_add_topics();
  public:
  const ::types::H256& topics(int index) const;
  ::types::H256* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
      topics() const;

  // bool all_addresses = 1;
  void clear_all_addresses();
  bool all_addresses() const;
  void set_all_addresses(bool value);
  private:
  bool _internal_all_addresses() const;
  void _internal_set_all_addresses(bool value);
  public:

  // bool all_topics = 3;
  void clear_all_topics();
  bool all_topics() const;
  void set_all_topics(bool value);
  private:
  bool _internal_all_topics() const;
  void _internal_set_all_topics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:remote.LogsFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H160 > addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 > topics_;
  bool all_addresses_;
  bool all_topics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class SubscribeLogsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.SubscribeLogsReply) */ {
 public:
  inline SubscribeLogsReply() : SubscribeLogsReply(nullptr) {}
  virtual ~SubscribeLogsReply();

  SubscribeLogsReply(const SubscribeLogsReply& from);
  SubscribeLogsReply(SubscribeLogsReply&& from) noexcept
    : SubscribeLogsReply() {
    *this = ::std::move(from);
  }

  inline SubscribeLogsReply& operator=(const SubscribeLogsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeLogsReply& operator=(SubscribeLogsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeLogsReply& default_instance();

  static inline const SubscribeLogsReply* internal_default_instance() {
    return reinterpret_cast<const SubscribeLogsReply*>(
               &_SubscribeLogsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SubscribeLogsReply& a, SubscribeLogsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeLogsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeLogsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeLogsReply* New() const final {
    return CreateMaybeMessage<SubscribeLogsReply>(nullptr);
  }

  SubscribeLogsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeLogsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeLogsReply& from);
  void MergeFrom(const SubscribeLogsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeLogsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.SubscribeLogsReply";
  }
  protected:
  explicit SubscribeLogsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 6,
    kDataFieldNumber = 4,
    kAddressFieldNumber = 1,
    kBlockHashFieldNumber = 2,
    kTransactionHashFieldNumber = 7,
    kBlockNumberFieldNumber = 3,
    kLogIndexFieldNumber = 5,
    kTransactionIndexFieldNumber = 8,
    kRemovedFieldNumber = 9,
  };
  // repeated .types.H256 topics = 6;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::types::H256* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
      mutable_topics();
  private:
  const ::types::H256& _internal_topics(int index) const;
  ::types::H256* _internal_add_topics();
  public:
  const ::types::H256& topics(int index) const;
  ::types::H256* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
      topics() const;

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .types.H160 address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::types::H160& address() const;
  ::types::H160* release_address();
  ::types::H160* mutable_address();
  void set_allocated_address(::types::H160* address);
  private:
  const ::types::H160& _internal_address() const;
  ::types::H160* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::types::H160* address);
  ::types::H160* unsafe_arena_release_address();

  // .types.H256 block_hash = 2;
  bool has_block_hash() const;
  private:
  bool _internal_has_block_hash() const;
  public:
  void clear_block_hash();
  const ::types::H256& block_hash() const;
  ::types::H256* release_block_hash();
  ::types::H256* mutable_block_hash();
  void set_allocated_block_hash(::types::H256* block_hash);
  private:
  const ::types::H256& _internal_block_hash() const;
  ::types::H256* _internal_mutable_block_hash();
  public:
  void unsafe_arena_set_allocated_block_hash(
      ::types::H256* block_hash);
  ::types::H256* unsafe_arena_release_block_hash();

  // .types.H256 transaction_hash = 7;
  bool has_transaction_hash() const;
  private:
  bool _internal_has_transaction_hash() const;
  public:
  void clear_transaction_hash();
  const ::types::H256& transaction_hash() const;
  ::types::H256* release_transaction_hash();
  ::types::H256* mutable_transaction_hash();
  void set_allocated_transaction_hash(::types::H256* transaction_hash);
  private:
  const ::types::H256& _internal_transaction_hash() const;
  ::types::H256* _internal_mutable_transaction_hash();
  public:
  void unsafe_arena_set_allocated_transaction_hash(
      ::types::H256* transaction_hash);
  ::types::H256* unsafe_arena_release_transaction_hash();

  // uint64 block_number = 3;
  void clear_block_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number() const;
  void set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_number() const;
  void _internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 log_index = 5;
  void clear_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 log_index() const;
  void set_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_log_index() const;
  void _internal_set_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transaction_index = 8;
  void clear_transaction_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_index() const;
  void set_transaction_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transaction_index() const;
  void _internal_set_transaction_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool removed = 9;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:remote.SubscribeLogsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 > topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::types::H160* address_;
  ::types::H256* block_hash_;
  ::types::H256* transaction_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_index_;
  bool removed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class BlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BlockRequest) */ {
 public:
  inline BlockRequest() : BlockRequest(nullptr) {}
  virtual ~BlockRequest();

  BlockRequest(const BlockRequest& from);
  BlockRequest(BlockRequest&& from) noexcept
    : BlockRequest() {
    *this = ::std::move(from);
  }

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRequest& operator=(BlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockRequest& default_instance();

  static inline const BlockRequest* internal_default_instance() {
    return reinterpret_cast<const BlockRequest*>(
               &_BlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BlockRequest& a, BlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRequest* New() const final {
    return CreateMaybeMessage<BlockRequest>(nullptr);
  }

  BlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockRequest& from);
  void MergeFrom(const BlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BlockRequest";
  }
  protected:
  explicit BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 3,
    kBlockHeightFieldNumber = 2,
  };
  // .types.H256 block_hash = 3;
  bool has_block_hash() const;
  private:
  bool _internal_has_block_hash() const;
  public:
  void clear_block_hash();
  const ::types::H256& block_hash() const;
  ::types::H256* release_block_hash();
  ::types::H256* mutable_block_hash();
  void set_allocated_block_hash(::types::H256* block_hash);
  private:
  const ::types::H256& _internal_block_hash() const;
  ::types::H256* _internal_mutable_block_hash();
  public:
  void unsafe_arena_set_allocated_block_hash(
      ::types::H256* block_hash);
  ::types::H256* unsafe_arena_release_block_hash();

  // uint64 block_height = 2;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.BlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::types::H256* block_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class BlockReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.BlockReply) */ {
 public:
  inline BlockReply() : BlockReply(nullptr) {}
  virtual ~BlockReply();

  BlockReply(const BlockReply& from);
  BlockReply(BlockReply&& from) noexcept
    : BlockReply() {
    *this = ::std::move(from);
  }

  inline BlockReply& operator=(const BlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockReply& operator=(BlockReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockReply& default_instance();

  static inline const BlockReply* internal_default_instance() {
    return reinterpret_cast<const BlockReply*>(
               &_BlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BlockReply& a, BlockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockReply* New() const final {
    return CreateMaybeMessage<BlockReply>(nullptr);
  }

  BlockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockReply& from);
  void MergeFrom(const BlockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.BlockReply";
  }
  protected:
  explicit BlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockRlpFieldNumber = 1,
    kSendersFieldNumber = 2,
  };
  // bytes block_rlp = 1;
  void clear_block_rlp();
  const std::string& block_rlp() const;
  void set_block_rlp(const std::string& value);
  void set_block_rlp(std::string&& value);
  void set_block_rlp(const char* value);
  void set_block_rlp(const void* value, size_t size);
  std::string* mutable_block_rlp();
  std::string* release_block_rlp();
  void set_allocated_block_rlp(std::string* block_rlp);
  private:
  const std::string& _internal_block_rlp() const;
  void _internal_set_block_rlp(const std::string& value);
  std::string* _internal_mutable_block_rlp();
  public:

  // bytes senders = 2;
  void clear_senders();
  const std::string& senders() const;
  void set_senders(const std::string& value);
  void set_senders(std::string&& value);
  void set_senders(const char* value);
  void set_senders(const void* value, size_t size);
  std::string* mutable_senders();
  std::string* release_senders();
  void set_allocated_senders(std::string* senders);
  private:
  const std::string& _internal_senders() const;
  void _internal_set_senders(const std::string& value);
  std::string* _internal_mutable_senders();
  public:

  // @@protoc_insertion_point(class_scope:remote.BlockReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_rlp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class TxnLookupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.TxnLookupRequest) */ {
 public:
  inline TxnLookupRequest() : TxnLookupRequest(nullptr) {}
  virtual ~TxnLookupRequest();

  TxnLookupRequest(const TxnLookupRequest& from);
  TxnLookupRequest(TxnLookupRequest&& from) noexcept
    : TxnLookupRequest() {
    *this = ::std::move(from);
  }

  inline TxnLookupRequest& operator=(const TxnLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxnLookupRequest& operator=(TxnLookupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxnLookupRequest& default_instance();

  static inline const TxnLookupRequest* internal_default_instance() {
    return reinterpret_cast<const TxnLookupRequest*>(
               &_TxnLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TxnLookupRequest& a, TxnLookupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxnLookupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxnLookupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxnLookupRequest* New() const final {
    return CreateMaybeMessage<TxnLookupRequest>(nullptr);
  }

  TxnLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxnLookupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxnLookupRequest& from);
  void MergeFrom(const TxnLookupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnLookupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.TxnLookupRequest";
  }
  protected:
  explicit TxnLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnHashFieldNumber = 1,
  };
  // .types.H256 txn_hash = 1;
  bool has_txn_hash() const;
  private:
  bool _internal_has_txn_hash() const;
  public:
  void clear_txn_hash();
  const ::types::H256& txn_hash() const;
  ::types::H256* release_txn_hash();
  ::types::H256* mutable_txn_hash();
  void set_allocated_txn_hash(::types::H256* txn_hash);
  private:
  const ::types::H256& _internal_txn_hash() const;
  ::types::H256* _internal_mutable_txn_hash();
  public:
  void unsafe_arena_set_allocated_txn_hash(
      ::types::H256* txn_hash);
  ::types::H256* unsafe_arena_release_txn_hash();

  // @@protoc_insertion_point(class_scope:remote.TxnLookupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::types::H256* txn_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class TxnLookupReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.TxnLookupReply) */ {
 public:
  inline TxnLookupReply() : TxnLookupReply(nullptr) {}
  virtual ~TxnLookupReply();

  TxnLookupReply(const TxnLookupReply& from);
  TxnLookupReply(TxnLookupReply&& from) noexcept
    : TxnLookupReply() {
    *this = ::std::move(from);
  }

  inline TxnLookupReply& operator=(const TxnLookupReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxnLookupReply& operator=(TxnLookupReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxnLookupReply& default_instance();

  static inline const TxnLookupReply* internal_default_instance() {
    return reinterpret_cast<const TxnLookupReply*>(
               &_TxnLookupReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TxnLookupReply& a, TxnLookupReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TxnLookupReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxnLookupReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxnLookupReply* New() const final {
    return CreateMaybeMessage<TxnLookupReply>(nullptr);
  }

  TxnLookupReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxnLookupReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxnLookupReply& from);
  void MergeFrom(const TxnLookupReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnLookupReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.TxnLookupReply";
  }
  protected:
  explicit TxnLookupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
  };
  // uint64 block_number = 1;
  void clear_block_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number() const;
  void set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_number() const;
  void _internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.TxnLookupReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class NodesInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.NodesInfoRequest) */ {
 public:
  inline NodesInfoRequest() : NodesInfoRequest(nullptr) {}
  virtual ~NodesInfoRequest();

  NodesInfoRequest(const NodesInfoRequest& from);
  NodesInfoRequest(NodesInfoRequest&& from) noexcept
    : NodesInfoRequest() {
    *this = ::std::move(from);
  }

  inline NodesInfoRequest& operator=(const NodesInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodesInfoRequest& operator=(NodesInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodesInfoRequest& default_instance();

  static inline const NodesInfoRequest* internal_default_instance() {
    return reinterpret_cast<const NodesInfoRequest*>(
               &_NodesInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(NodesInfoRequest& a, NodesInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NodesInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodesInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodesInfoRequest* New() const final {
    return CreateMaybeMessage<NodesInfoRequest>(nullptr);
  }

  NodesInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodesInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodesInfoRequest& from);
  void MergeFrom(const NodesInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodesInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.NodesInfoRequest";
  }
  protected:
  explicit NodesInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // uint32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.NodesInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class NodesInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.NodesInfoReply) */ {
 public:
  inline NodesInfoReply() : NodesInfoReply(nullptr) {}
  virtual ~NodesInfoReply();

  NodesInfoReply(const NodesInfoReply& from);
  NodesInfoReply(NodesInfoReply&& from) noexcept
    : NodesInfoReply() {
    *this = ::std::move(from);
  }

  inline NodesInfoReply& operator=(const NodesInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodesInfoReply& operator=(NodesInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodesInfoReply& default_instance();

  static inline const NodesInfoReply* internal_default_instance() {
    return reinterpret_cast<const NodesInfoReply*>(
               &_NodesInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(NodesInfoReply& a, NodesInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NodesInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodesInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodesInfoReply* New() const final {
    return CreateMaybeMessage<NodesInfoReply>(nullptr);
  }

  NodesInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodesInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodesInfoReply& from);
  void MergeFrom(const NodesInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodesInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.NodesInfoReply";
  }
  protected:
  explicit NodesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesInfoFieldNumber = 1,
  };
  // repeated .types.NodeInfoReply nodes_info = 1;
  int nodes_info_size() const;
  private:
  int _internal_nodes_info_size() const;
  public:
  void clear_nodes_info();
  ::types::NodeInfoReply* mutable_nodes_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NodeInfoReply >*
      mutable_nodes_info();
  private:
  const ::types::NodeInfoReply& _internal_nodes_info(int index) const;
  ::types::NodeInfoReply* _internal_add_nodes_info();
  public:
  const ::types::NodeInfoReply& nodes_info(int index) const;
  ::types::NodeInfoReply* add_nodes_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NodeInfoReply >&
      nodes_info() const;

  // @@protoc_insertion_point(class_scope:remote.NodesInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NodeInfoReply > nodes_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class PeersReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.PeersReply) */ {
 public:
  inline PeersReply() : PeersReply(nullptr) {}
  virtual ~PeersReply();

  PeersReply(const PeersReply& from);
  PeersReply(PeersReply&& from) noexcept
    : PeersReply() {
    *this = ::std::move(from);
  }

  inline PeersReply& operator=(const PeersReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeersReply& operator=(PeersReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeersReply& default_instance();

  static inline const PeersReply* internal_default_instance() {
    return reinterpret_cast<const PeersReply*>(
               &_PeersReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PeersReply& a, PeersReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PeersReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeersReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeersReply* New() const final {
    return CreateMaybeMessage<PeersReply>(nullptr);
  }

  PeersReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeersReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeersReply& from);
  void MergeFrom(const PeersReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeersReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.PeersReply";
  }
  protected:
  explicit PeersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 1,
  };
  // repeated .types.PeerInfo peers = 1;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::types::PeerInfo* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PeerInfo >*
      mutable_peers();
  private:
  const ::types::PeerInfo& _internal_peers(int index) const;
  ::types::PeerInfo* _internal_add_peers();
  public:
  const ::types::PeerInfo& peers(int index) const;
  ::types::PeerInfo* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PeerInfo >&
      peers() const;

  // @@protoc_insertion_point(class_scope:remote.PeersReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PeerInfo > peers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class PendingBlockReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.PendingBlockReply) */ {
 public:
  inline PendingBlockReply() : PendingBlockReply(nullptr) {}
  virtual ~PendingBlockReply();

  PendingBlockReply(const PendingBlockReply& from);
  PendingBlockReply(PendingBlockReply&& from) noexcept
    : PendingBlockReply() {
    *this = ::std::move(from);
  }

  inline PendingBlockReply& operator=(const PendingBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingBlockReply& operator=(PendingBlockReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingBlockReply& default_instance();

  static inline const PendingBlockReply* internal_default_instance() {
    return reinterpret_cast<const PendingBlockReply*>(
               &_PendingBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PendingBlockReply& a, PendingBlockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingBlockReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingBlockReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingBlockReply* New() const final {
    return CreateMaybeMessage<PendingBlockReply>(nullptr);
  }

  PendingBlockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingBlockReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingBlockReply& from);
  void MergeFrom(const PendingBlockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingBlockReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.PendingBlockReply";
  }
  protected:
  explicit PendingBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockRlpFieldNumber = 1,
  };
  // bytes block_rlp = 1;
  void clear_block_rlp();
  const std::string& block_rlp() const;
  void set_block_rlp(const std::string& value);
  void set_block_rlp(std::string&& value);
  void set_block_rlp(const char* value);
  void set_block_rlp(const void* value, size_t size);
  std::string* mutable_block_rlp();
  std::string* release_block_rlp();
  void set_allocated_block_rlp(std::string* block_rlp);
  private:
  const std::string& _internal_block_rlp() const;
  void _internal_set_block_rlp(const std::string& value);
  std::string* _internal_mutable_block_rlp();
  public:

  // @@protoc_insertion_point(class_scope:remote.PendingBlockReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_rlp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineGetPayloadBodiesByHashV1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineGetPayloadBodiesByHashV1Request) */ {
 public:
  inline EngineGetPayloadBodiesByHashV1Request() : EngineGetPayloadBodiesByHashV1Request(nullptr) {}
  virtual ~EngineGetPayloadBodiesByHashV1Request();

  EngineGetPayloadBodiesByHashV1Request(const EngineGetPayloadBodiesByHashV1Request& from);
  EngineGetPayloadBodiesByHashV1Request(EngineGetPayloadBodiesByHashV1Request&& from) noexcept
    : EngineGetPayloadBodiesByHashV1Request() {
    *this = ::std::move(from);
  }

  inline EngineGetPayloadBodiesByHashV1Request& operator=(const EngineGetPayloadBodiesByHashV1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineGetPayloadBodiesByHashV1Request& operator=(EngineGetPayloadBodiesByHashV1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineGetPayloadBodiesByHashV1Request& default_instance();

  static inline const EngineGetPayloadBodiesByHashV1Request* internal_default_instance() {
    return reinterpret_cast<const EngineGetPayloadBodiesByHashV1Request*>(
               &_EngineGetPayloadBodiesByHashV1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(EngineGetPayloadBodiesByHashV1Request& a, EngineGetPayloadBodiesByHashV1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineGetPayloadBodiesByHashV1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineGetPayloadBodiesByHashV1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineGetPayloadBodiesByHashV1Request* New() const final {
    return CreateMaybeMessage<EngineGetPayloadBodiesByHashV1Request>(nullptr);
  }

  EngineGetPayloadBodiesByHashV1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineGetPayloadBodiesByHashV1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineGetPayloadBodiesByHashV1Request& from);
  void MergeFrom(const EngineGetPayloadBodiesByHashV1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineGetPayloadBodiesByHashV1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineGetPayloadBodiesByHashV1Request";
  }
  protected:
  explicit EngineGetPayloadBodiesByHashV1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .types.H256 hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::types::H256* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
      mutable_hashes();
  private:
  const ::types::H256& _internal_hashes(int index) const;
  ::types::H256* _internal_add_hashes();
  public:
  const ::types::H256& hashes(int index) const;
  ::types::H256* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:remote.EngineGetPayloadBodiesByHashV1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineGetPayloadBodiesByRangeV1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineGetPayloadBodiesByRangeV1Request) */ {
 public:
  inline EngineGetPayloadBodiesByRangeV1Request() : EngineGetPayloadBodiesByRangeV1Request(nullptr) {}
  virtual ~EngineGetPayloadBodiesByRangeV1Request();

  EngineGetPayloadBodiesByRangeV1Request(const EngineGetPayloadBodiesByRangeV1Request& from);
  EngineGetPayloadBodiesByRangeV1Request(EngineGetPayloadBodiesByRangeV1Request&& from) noexcept
    : EngineGetPayloadBodiesByRangeV1Request() {
    *this = ::std::move(from);
  }

  inline EngineGetPayloadBodiesByRangeV1Request& operator=(const EngineGetPayloadBodiesByRangeV1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineGetPayloadBodiesByRangeV1Request& operator=(EngineGetPayloadBodiesByRangeV1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineGetPayloadBodiesByRangeV1Request& default_instance();

  static inline const EngineGetPayloadBodiesByRangeV1Request* internal_default_instance() {
    return reinterpret_cast<const EngineGetPayloadBodiesByRangeV1Request*>(
               &_EngineGetPayloadBodiesByRangeV1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(EngineGetPayloadBodiesByRangeV1Request& a, EngineGetPayloadBodiesByRangeV1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineGetPayloadBodiesByRangeV1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineGetPayloadBodiesByRangeV1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineGetPayloadBodiesByRangeV1Request* New() const final {
    return CreateMaybeMessage<EngineGetPayloadBodiesByRangeV1Request>(nullptr);
  }

  EngineGetPayloadBodiesByRangeV1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineGetPayloadBodiesByRangeV1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineGetPayloadBodiesByRangeV1Request& from);
  void MergeFrom(const EngineGetPayloadBodiesByRangeV1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineGetPayloadBodiesByRangeV1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineGetPayloadBodiesByRangeV1Request";
  }
  protected:
  explicit EngineGetPayloadBodiesByRangeV1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint64 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.EngineGetPayloadBodiesByRangeV1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// -------------------------------------------------------------------

class EngineGetPayloadBodiesV1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.EngineGetPayloadBodiesV1Response) */ {
 public:
  inline EngineGetPayloadBodiesV1Response() : EngineGetPayloadBodiesV1Response(nullptr) {}
  virtual ~EngineGetPayloadBodiesV1Response();

  EngineGetPayloadBodiesV1Response(const EngineGetPayloadBodiesV1Response& from);
  EngineGetPayloadBodiesV1Response(EngineGetPayloadBodiesV1Response&& from) noexcept
    : EngineGetPayloadBodiesV1Response() {
    *this = ::std::move(from);
  }

  inline EngineGetPayloadBodiesV1Response& operator=(const EngineGetPayloadBodiesV1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineGetPayloadBodiesV1Response& operator=(EngineGetPayloadBodiesV1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineGetPayloadBodiesV1Response& default_instance();

  static inline const EngineGetPayloadBodiesV1Response* internal_default_instance() {
    return reinterpret_cast<const EngineGetPayloadBodiesV1Response*>(
               &_EngineGetPayloadBodiesV1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(EngineGetPayloadBodiesV1Response& a, EngineGetPayloadBodiesV1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineGetPayloadBodiesV1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineGetPayloadBodiesV1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineGetPayloadBodiesV1Response* New() const final {
    return CreateMaybeMessage<EngineGetPayloadBodiesV1Response>(nullptr);
  }

  EngineGetPayloadBodiesV1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineGetPayloadBodiesV1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineGetPayloadBodiesV1Response& from);
  void MergeFrom(const EngineGetPayloadBodiesV1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineGetPayloadBodiesV1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.EngineGetPayloadBodiesV1Response";
  }
  protected:
  explicit EngineGetPayloadBodiesV1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_2fethbackend_2eproto);
    return ::descriptor_table_remote_2fethbackend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodiesFieldNumber = 1,
  };
  // repeated .types.ExecutionPayloadBodyV1 bodies = 1;
  int bodies_size() const;
  private:
  int _internal_bodies_size() const;
  public:
  void clear_bodies();
  ::types::ExecutionPayloadBodyV1* mutable_bodies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExecutionPayloadBodyV1 >*
      mutable_bodies();
  private:
  const ::types::ExecutionPayloadBodyV1& _internal_bodies(int index) const;
  ::types::ExecutionPayloadBodyV1* _internal_add_bodies();
  public:
  const ::types::ExecutionPayloadBodyV1& bodies(int index) const;
  ::types::ExecutionPayloadBodyV1* add_bodies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExecutionPayloadBodyV1 >&
      bodies() const;

  // @@protoc_insertion_point(class_scope:remote.EngineGetPayloadBodiesV1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExecutionPayloadBodyV1 > bodies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_2fethbackend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EtherbaseRequest

// -------------------------------------------------------------------

// EtherbaseReply

// .types.H160 address = 1;
inline bool EtherbaseReply::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool EtherbaseReply::has_address() const {
  return _internal_has_address();
}
inline const ::types::H160& EtherbaseReply::_internal_address() const {
  const ::types::H160* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& EtherbaseReply::address() const {
  // @@protoc_insertion_point(field_get:remote.EtherbaseReply.address)
  return _internal_address();
}
inline void EtherbaseReply::unsafe_arena_set_allocated_address(
    ::types::H160* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EtherbaseReply.address)
}
inline ::types::H160* EtherbaseReply::release_address() {
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H160* EtherbaseReply::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:remote.EtherbaseReply.address)
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::types::H160* EtherbaseReply::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::types::H160* EtherbaseReply::mutable_address() {
  // @@protoc_insertion_point(field_mutable:remote.EtherbaseReply.address)
  return _internal_mutable_address();
}
inline void EtherbaseReply::set_allocated_address(::types::H160* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:remote.EtherbaseReply.address)
}

// -------------------------------------------------------------------

// NetVersionRequest

// -------------------------------------------------------------------

// NetVersionReply

// uint64 id = 1;
inline void NetVersionReply::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetVersionReply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetVersionReply::id() const {
  // @@protoc_insertion_point(field_get:remote.NetVersionReply.id)
  return _internal_id();
}
inline void NetVersionReply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void NetVersionReply::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:remote.NetVersionReply.id)
}

// -------------------------------------------------------------------

// NetPeerCountRequest

// -------------------------------------------------------------------

// NetPeerCountReply

// uint64 count = 1;
inline void NetPeerCountReply::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetPeerCountReply::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetPeerCountReply::count() const {
  // @@protoc_insertion_point(field_get:remote.NetPeerCountReply.count)
  return _internal_count();
}
inline void NetPeerCountReply::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void NetPeerCountReply::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:remote.NetPeerCountReply.count)
}

// -------------------------------------------------------------------

// EngineGetPayloadRequest

// uint64 payload_id = 1;
inline void EngineGetPayloadRequest::clear_payload_id() {
  payload_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetPayloadRequest::_internal_payload_id() const {
  return payload_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetPayloadRequest::payload_id() const {
  // @@protoc_insertion_point(field_get:remote.EngineGetPayloadRequest.payload_id)
  return _internal_payload_id();
}
inline void EngineGetPayloadRequest::_internal_set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  payload_id_ = value;
}
inline void EngineGetPayloadRequest::set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_payload_id(value);
  // @@protoc_insertion_point(field_set:remote.EngineGetPayloadRequest.payload_id)
}

// -------------------------------------------------------------------

// EngineGetBlobsBundleRequest

// uint64 payload_id = 1;
inline void EngineGetBlobsBundleRequest::clear_payload_id() {
  payload_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetBlobsBundleRequest::_internal_payload_id() const {
  return payload_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetBlobsBundleRequest::payload_id() const {
  // @@protoc_insertion_point(field_get:remote.EngineGetBlobsBundleRequest.payload_id)
  return _internal_payload_id();
}
inline void EngineGetBlobsBundleRequest::_internal_set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  payload_id_ = value;
}
inline void EngineGetBlobsBundleRequest::set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_payload_id(value);
  // @@protoc_insertion_point(field_set:remote.EngineGetBlobsBundleRequest.payload_id)
}

// -------------------------------------------------------------------

// EnginePayloadStatus

// .remote.EngineStatus status = 1;
inline void EnginePayloadStatus::clear_status() {
  status_ = 0;
}
inline ::remote::EngineStatus EnginePayloadStatus::_internal_status() const {
  return static_cast< ::remote::EngineStatus >(status_);
}
inline ::remote::EngineStatus EnginePayloadStatus::status() const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadStatus.status)
  return _internal_status();
}
inline void EnginePayloadStatus::_internal_set_status(::remote::EngineStatus value) {
  
  status_ = value;
}
inline void EnginePayloadStatus::set_status(::remote::EngineStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:remote.EnginePayloadStatus.status)
}

// .types.H256 latest_valid_hash = 2;
inline bool EnginePayloadStatus::_internal_has_latest_valid_hash() const {
  return this != internal_default_instance() && latest_valid_hash_ != nullptr;
}
inline bool EnginePayloadStatus::has_latest_valid_hash() const {
  return _internal_has_latest_valid_hash();
}
inline const ::types::H256& EnginePayloadStatus::_internal_latest_valid_hash() const {
  const ::types::H256* p = latest_valid_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& EnginePayloadStatus::latest_valid_hash() const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadStatus.latest_valid_hash)
  return _internal_latest_valid_hash();
}
inline void EnginePayloadStatus::unsafe_arena_set_allocated_latest_valid_hash(
    ::types::H256* latest_valid_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_valid_hash_);
  }
  latest_valid_hash_ = latest_valid_hash;
  if (latest_valid_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EnginePayloadStatus.latest_valid_hash)
}
inline ::types::H256* EnginePayloadStatus::release_latest_valid_hash() {
  
  ::types::H256* temp = latest_valid_hash_;
  latest_valid_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* EnginePayloadStatus::unsafe_arena_release_latest_valid_hash() {
  // @@protoc_insertion_point(field_release:remote.EnginePayloadStatus.latest_valid_hash)
  
  ::types::H256* temp = latest_valid_hash_;
  latest_valid_hash_ = nullptr;
  return temp;
}
inline ::types::H256* EnginePayloadStatus::_internal_mutable_latest_valid_hash() {
  
  if (latest_valid_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    latest_valid_hash_ = p;
  }
  return latest_valid_hash_;
}
inline ::types::H256* EnginePayloadStatus::mutable_latest_valid_hash() {
  // @@protoc_insertion_point(field_mutable:remote.EnginePayloadStatus.latest_valid_hash)
  return _internal_mutable_latest_valid_hash();
}
inline void EnginePayloadStatus::set_allocated_latest_valid_hash(::types::H256* latest_valid_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_valid_hash_);
  }
  if (latest_valid_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_valid_hash)->GetArena();
    if (message_arena != submessage_arena) {
      latest_valid_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_valid_hash, submessage_arena);
    }
    
  } else {
    
  }
  latest_valid_hash_ = latest_valid_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.EnginePayloadStatus.latest_valid_hash)
}

// string validation_error = 3;
inline void EnginePayloadStatus::clear_validation_error() {
  validation_error_.ClearToEmpty();
}
inline const std::string& EnginePayloadStatus::validation_error() const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadStatus.validation_error)
  return _internal_validation_error();
}
inline void EnginePayloadStatus::set_validation_error(const std::string& value) {
  _internal_set_validation_error(value);
  // @@protoc_insertion_point(field_set:remote.EnginePayloadStatus.validation_error)
}
inline std::string* EnginePayloadStatus::mutable_validation_error() {
  // @@protoc_insertion_point(field_mutable:remote.EnginePayloadStatus.validation_error)
  return _internal_mutable_validation_error();
}
inline const std::string& EnginePayloadStatus::_internal_validation_error() const {
  return validation_error_.Get();
}
inline void EnginePayloadStatus::_internal_set_validation_error(const std::string& value) {
  
  validation_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EnginePayloadStatus::set_validation_error(std::string&& value) {
  
  validation_error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.EnginePayloadStatus.validation_error)
}
inline void EnginePayloadStatus::set_validation_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validation_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.EnginePayloadStatus.validation_error)
}
inline void EnginePayloadStatus::set_validation_error(const char* value,
    size_t size) {
  
  validation_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.EnginePayloadStatus.validation_error)
}
inline std::string* EnginePayloadStatus::_internal_mutable_validation_error() {
  
  return validation_error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EnginePayloadStatus::release_validation_error() {
  // @@protoc_insertion_point(field_release:remote.EnginePayloadStatus.validation_error)
  return validation_error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnginePayloadStatus::set_allocated_validation_error(std::string* validation_error) {
  if (validation_error != nullptr) {
    
  } else {
    
  }
  validation_error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validation_error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.EnginePayloadStatus.validation_error)
}

// -------------------------------------------------------------------

// EnginePayloadAttributes

// uint32 version = 1;
inline void EnginePayloadAttributes::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnginePayloadAttributes::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnginePayloadAttributes::version() const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadAttributes.version)
  return _internal_version();
}
inline void EnginePayloadAttributes::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void EnginePayloadAttributes::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:remote.EnginePayloadAttributes.version)
}

// uint64 timestamp = 2;
inline void EnginePayloadAttributes::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnginePayloadAttributes::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnginePayloadAttributes::timestamp() const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadAttributes.timestamp)
  return _internal_timestamp();
}
inline void EnginePayloadAttributes::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void EnginePayloadAttributes::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:remote.EnginePayloadAttributes.timestamp)
}

// .types.H256 prev_randao = 3;
inline bool EnginePayloadAttributes::_internal_has_prev_randao() const {
  return this != internal_default_instance() && prev_randao_ != nullptr;
}
inline bool EnginePayloadAttributes::has_prev_randao() const {
  return _internal_has_prev_randao();
}
inline const ::types::H256& EnginePayloadAttributes::_internal_prev_randao() const {
  const ::types::H256* p = prev_randao_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& EnginePayloadAttributes::prev_randao() const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadAttributes.prev_randao)
  return _internal_prev_randao();
}
inline void EnginePayloadAttributes::unsafe_arena_set_allocated_prev_randao(
    ::types::H256* prev_randao) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_randao_);
  }
  prev_randao_ = prev_randao;
  if (prev_randao) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EnginePayloadAttributes.prev_randao)
}
inline ::types::H256* EnginePayloadAttributes::release_prev_randao() {
  
  ::types::H256* temp = prev_randao_;
  prev_randao_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* EnginePayloadAttributes::unsafe_arena_release_prev_randao() {
  // @@protoc_insertion_point(field_release:remote.EnginePayloadAttributes.prev_randao)
  
  ::types::H256* temp = prev_randao_;
  prev_randao_ = nullptr;
  return temp;
}
inline ::types::H256* EnginePayloadAttributes::_internal_mutable_prev_randao() {
  
  if (prev_randao_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    prev_randao_ = p;
  }
  return prev_randao_;
}
inline ::types::H256* EnginePayloadAttributes::mutable_prev_randao() {
  // @@protoc_insertion_point(field_mutable:remote.EnginePayloadAttributes.prev_randao)
  return _internal_mutable_prev_randao();
}
inline void EnginePayloadAttributes::set_allocated_prev_randao(::types::H256* prev_randao) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_randao_);
  }
  if (prev_randao) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_randao)->GetArena();
    if (message_arena != submessage_arena) {
      prev_randao = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_randao, submessage_arena);
    }
    
  } else {
    
  }
  prev_randao_ = prev_randao;
  // @@protoc_insertion_point(field_set_allocated:remote.EnginePayloadAttributes.prev_randao)
}

// .types.H160 suggested_fee_recipient = 4;
inline bool EnginePayloadAttributes::_internal_has_suggested_fee_recipient() const {
  return this != internal_default_instance() && suggested_fee_recipient_ != nullptr;
}
inline bool EnginePayloadAttributes::has_suggested_fee_recipient() const {
  return _internal_has_suggested_fee_recipient();
}
inline const ::types::H160& EnginePayloadAttributes::_internal_suggested_fee_recipient() const {
  const ::types::H160* p = suggested_fee_recipient_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& EnginePayloadAttributes::suggested_fee_recipient() const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadAttributes.suggested_fee_recipient)
  return _internal_suggested_fee_recipient();
}
inline void EnginePayloadAttributes::unsafe_arena_set_allocated_suggested_fee_recipient(
    ::types::H160* suggested_fee_recipient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggested_fee_recipient_);
  }
  suggested_fee_recipient_ = suggested_fee_recipient;
  if (suggested_fee_recipient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EnginePayloadAttributes.suggested_fee_recipient)
}
inline ::types::H160* EnginePayloadAttributes::release_suggested_fee_recipient() {
  
  ::types::H160* temp = suggested_fee_recipient_;
  suggested_fee_recipient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H160* EnginePayloadAttributes::unsafe_arena_release_suggested_fee_recipient() {
  // @@protoc_insertion_point(field_release:remote.EnginePayloadAttributes.suggested_fee_recipient)
  
  ::types::H160* temp = suggested_fee_recipient_;
  suggested_fee_recipient_ = nullptr;
  return temp;
}
inline ::types::H160* EnginePayloadAttributes::_internal_mutable_suggested_fee_recipient() {
  
  if (suggested_fee_recipient_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArena());
    suggested_fee_recipient_ = p;
  }
  return suggested_fee_recipient_;
}
inline ::types::H160* EnginePayloadAttributes::mutable_suggested_fee_recipient() {
  // @@protoc_insertion_point(field_mutable:remote.EnginePayloadAttributes.suggested_fee_recipient)
  return _internal_mutable_suggested_fee_recipient();
}
inline void EnginePayloadAttributes::set_allocated_suggested_fee_recipient(::types::H160* suggested_fee_recipient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggested_fee_recipient_);
  }
  if (suggested_fee_recipient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suggested_fee_recipient)->GetArena();
    if (message_arena != submessage_arena) {
      suggested_fee_recipient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggested_fee_recipient, submessage_arena);
    }
    
  } else {
    
  }
  suggested_fee_recipient_ = suggested_fee_recipient;
  // @@protoc_insertion_point(field_set_allocated:remote.EnginePayloadAttributes.suggested_fee_recipient)
}

// repeated .types.Withdrawal withdrawals = 5;
inline int EnginePayloadAttributes::_internal_withdrawals_size() const {
  return withdrawals_.size();
}
inline int EnginePayloadAttributes::withdrawals_size() const {
  return _internal_withdrawals_size();
}
inline ::types::Withdrawal* EnginePayloadAttributes::mutable_withdrawals(int index) {
  // @@protoc_insertion_point(field_mutable:remote.EnginePayloadAttributes.withdrawals)
  return withdrawals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >*
EnginePayloadAttributes::mutable_withdrawals() {
  // @@protoc_insertion_point(field_mutable_list:remote.EnginePayloadAttributes.withdrawals)
  return &withdrawals_;
}
inline const ::types::Withdrawal& EnginePayloadAttributes::_internal_withdrawals(int index) const {
  return withdrawals_.Get(index);
}
inline const ::types::Withdrawal& EnginePayloadAttributes::withdrawals(int index) const {
  // @@protoc_insertion_point(field_get:remote.EnginePayloadAttributes.withdrawals)
  return _internal_withdrawals(index);
}
inline ::types::Withdrawal* EnginePayloadAttributes::_internal_add_withdrawals() {
  return withdrawals_.Add();
}
inline ::types::Withdrawal* EnginePayloadAttributes::add_withdrawals() {
  // @@protoc_insertion_point(field_add:remote.EnginePayloadAttributes.withdrawals)
  return _internal_add_withdrawals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Withdrawal >&
EnginePayloadAttributes::withdrawals() const {
  // @@protoc_insertion_point(field_list:remote.EnginePayloadAttributes.withdrawals)
  return withdrawals_;
}

// -------------------------------------------------------------------

// EngineForkChoiceState

// .types.H256 head_block_hash = 1;
inline bool EngineForkChoiceState::_internal_has_head_block_hash() const {
  return this != internal_default_instance() && head_block_hash_ != nullptr;
}
inline bool EngineForkChoiceState::has_head_block_hash() const {
  return _internal_has_head_block_hash();
}
inline const ::types::H256& EngineForkChoiceState::_internal_head_block_hash() const {
  const ::types::H256* p = head_block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& EngineForkChoiceState::head_block_hash() const {
  // @@protoc_insertion_point(field_get:remote.EngineForkChoiceState.head_block_hash)
  return _internal_head_block_hash();
}
inline void EngineForkChoiceState::unsafe_arena_set_allocated_head_block_hash(
    ::types::H256* head_block_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_block_hash_);
  }
  head_block_hash_ = head_block_hash;
  if (head_block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineForkChoiceState.head_block_hash)
}
inline ::types::H256* EngineForkChoiceState::release_head_block_hash() {
  
  ::types::H256* temp = head_block_hash_;
  head_block_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* EngineForkChoiceState::unsafe_arena_release_head_block_hash() {
  // @@protoc_insertion_point(field_release:remote.EngineForkChoiceState.head_block_hash)
  
  ::types::H256* temp = head_block_hash_;
  head_block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* EngineForkChoiceState::_internal_mutable_head_block_hash() {
  
  if (head_block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    head_block_hash_ = p;
  }
  return head_block_hash_;
}
inline ::types::H256* EngineForkChoiceState::mutable_head_block_hash() {
  // @@protoc_insertion_point(field_mutable:remote.EngineForkChoiceState.head_block_hash)
  return _internal_mutable_head_block_hash();
}
inline void EngineForkChoiceState::set_allocated_head_block_hash(::types::H256* head_block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_block_hash_);
  }
  if (head_block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_block_hash)->GetArena();
    if (message_arena != submessage_arena) {
      head_block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_block_hash, submessage_arena);
    }
    
  } else {
    
  }
  head_block_hash_ = head_block_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineForkChoiceState.head_block_hash)
}

// .types.H256 safe_block_hash = 2;
inline bool EngineForkChoiceState::_internal_has_safe_block_hash() const {
  return this != internal_default_instance() && safe_block_hash_ != nullptr;
}
inline bool EngineForkChoiceState::has_safe_block_hash() const {
  return _internal_has_safe_block_hash();
}
inline const ::types::H256& EngineForkChoiceState::_internal_safe_block_hash() const {
  const ::types::H256* p = safe_block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& EngineForkChoiceState::safe_block_hash() const {
  // @@protoc_insertion_point(field_get:remote.EngineForkChoiceState.safe_block_hash)
  return _internal_safe_block_hash();
}
inline void EngineForkChoiceState::unsafe_arena_set_allocated_safe_block_hash(
    ::types::H256* safe_block_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(safe_block_hash_);
  }
  safe_block_hash_ = safe_block_hash;
  if (safe_block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineForkChoiceState.safe_block_hash)
}
inline ::types::H256* EngineForkChoiceState::release_safe_block_hash() {
  
  ::types::H256* temp = safe_block_hash_;
  safe_block_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* EngineForkChoiceState::unsafe_arena_release_safe_block_hash() {
  // @@protoc_insertion_point(field_release:remote.EngineForkChoiceState.safe_block_hash)
  
  ::types::H256* temp = safe_block_hash_;
  safe_block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* EngineForkChoiceState::_internal_mutable_safe_block_hash() {
  
  if (safe_block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    safe_block_hash_ = p;
  }
  return safe_block_hash_;
}
inline ::types::H256* EngineForkChoiceState::mutable_safe_block_hash() {
  // @@protoc_insertion_point(field_mutable:remote.EngineForkChoiceState.safe_block_hash)
  return _internal_mutable_safe_block_hash();
}
inline void EngineForkChoiceState::set_allocated_safe_block_hash(::types::H256* safe_block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(safe_block_hash_);
  }
  if (safe_block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(safe_block_hash)->GetArena();
    if (message_arena != submessage_arena) {
      safe_block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, safe_block_hash, submessage_arena);
    }
    
  } else {
    
  }
  safe_block_hash_ = safe_block_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineForkChoiceState.safe_block_hash)
}

// .types.H256 finalized_block_hash = 3;
inline bool EngineForkChoiceState::_internal_has_finalized_block_hash() const {
  return this != internal_default_instance() && finalized_block_hash_ != nullptr;
}
inline bool EngineForkChoiceState::has_finalized_block_hash() const {
  return _internal_has_finalized_block_hash();
}
inline const ::types::H256& EngineForkChoiceState::_internal_finalized_block_hash() const {
  const ::types::H256* p = finalized_block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& EngineForkChoiceState::finalized_block_hash() const {
  // @@protoc_insertion_point(field_get:remote.EngineForkChoiceState.finalized_block_hash)
  return _internal_finalized_block_hash();
}
inline void EngineForkChoiceState::unsafe_arena_set_allocated_finalized_block_hash(
    ::types::H256* finalized_block_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalized_block_hash_);
  }
  finalized_block_hash_ = finalized_block_hash;
  if (finalized_block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineForkChoiceState.finalized_block_hash)
}
inline ::types::H256* EngineForkChoiceState::release_finalized_block_hash() {
  
  ::types::H256* temp = finalized_block_hash_;
  finalized_block_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* EngineForkChoiceState::unsafe_arena_release_finalized_block_hash() {
  // @@protoc_insertion_point(field_release:remote.EngineForkChoiceState.finalized_block_hash)
  
  ::types::H256* temp = finalized_block_hash_;
  finalized_block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* EngineForkChoiceState::_internal_mutable_finalized_block_hash() {
  
  if (finalized_block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    finalized_block_hash_ = p;
  }
  return finalized_block_hash_;
}
inline ::types::H256* EngineForkChoiceState::mutable_finalized_block_hash() {
  // @@protoc_insertion_point(field_mutable:remote.EngineForkChoiceState.finalized_block_hash)
  return _internal_mutable_finalized_block_hash();
}
inline void EngineForkChoiceState::set_allocated_finalized_block_hash(::types::H256* finalized_block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalized_block_hash_);
  }
  if (finalized_block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalized_block_hash)->GetArena();
    if (message_arena != submessage_arena) {
      finalized_block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finalized_block_hash, submessage_arena);
    }
    
  } else {
    
  }
  finalized_block_hash_ = finalized_block_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineForkChoiceState.finalized_block_hash)
}

// -------------------------------------------------------------------

// EngineForkChoiceUpdatedRequest

// .remote.EngineForkChoiceState forkchoice_state = 1;
inline bool EngineForkChoiceUpdatedRequest::_internal_has_forkchoice_state() const {
  return this != internal_default_instance() && forkchoice_state_ != nullptr;
}
inline bool EngineForkChoiceUpdatedRequest::has_forkchoice_state() const {
  return _internal_has_forkchoice_state();
}
inline void EngineForkChoiceUpdatedRequest::clear_forkchoice_state() {
  if (GetArena() == nullptr && forkchoice_state_ != nullptr) {
    delete forkchoice_state_;
  }
  forkchoice_state_ = nullptr;
}
inline const ::remote::EngineForkChoiceState& EngineForkChoiceUpdatedRequest::_internal_forkchoice_state() const {
  const ::remote::EngineForkChoiceState* p = forkchoice_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::remote::EngineForkChoiceState&>(
      ::remote::_EngineForkChoiceState_default_instance_);
}
inline const ::remote::EngineForkChoiceState& EngineForkChoiceUpdatedRequest::forkchoice_state() const {
  // @@protoc_insertion_point(field_get:remote.EngineForkChoiceUpdatedRequest.forkchoice_state)
  return _internal_forkchoice_state();
}
inline void EngineForkChoiceUpdatedRequest::unsafe_arena_set_allocated_forkchoice_state(
    ::remote::EngineForkChoiceState* forkchoice_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forkchoice_state_);
  }
  forkchoice_state_ = forkchoice_state;
  if (forkchoice_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineForkChoiceUpdatedRequest.forkchoice_state)
}
inline ::remote::EngineForkChoiceState* EngineForkChoiceUpdatedRequest::release_forkchoice_state() {
  
  ::remote::EngineForkChoiceState* temp = forkchoice_state_;
  forkchoice_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::remote::EngineForkChoiceState* EngineForkChoiceUpdatedRequest::unsafe_arena_release_forkchoice_state() {
  // @@protoc_insertion_point(field_release:remote.EngineForkChoiceUpdatedRequest.forkchoice_state)
  
  ::remote::EngineForkChoiceState* temp = forkchoice_state_;
  forkchoice_state_ = nullptr;
  return temp;
}
inline ::remote::EngineForkChoiceState* EngineForkChoiceUpdatedRequest::_internal_mutable_forkchoice_state() {
  
  if (forkchoice_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::remote::EngineForkChoiceState>(GetArena());
    forkchoice_state_ = p;
  }
  return forkchoice_state_;
}
inline ::remote::EngineForkChoiceState* EngineForkChoiceUpdatedRequest::mutable_forkchoice_state() {
  // @@protoc_insertion_point(field_mutable:remote.EngineForkChoiceUpdatedRequest.forkchoice_state)
  return _internal_mutable_forkchoice_state();
}
inline void EngineForkChoiceUpdatedRequest::set_allocated_forkchoice_state(::remote::EngineForkChoiceState* forkchoice_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete forkchoice_state_;
  }
  if (forkchoice_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forkchoice_state);
    if (message_arena != submessage_arena) {
      forkchoice_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forkchoice_state, submessage_arena);
    }
    
  } else {
    
  }
  forkchoice_state_ = forkchoice_state;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineForkChoiceUpdatedRequest.forkchoice_state)
}

// .remote.EnginePayloadAttributes payload_attributes = 2;
inline bool EngineForkChoiceUpdatedRequest::_internal_has_payload_attributes() const {
  return this != internal_default_instance() && payload_attributes_ != nullptr;
}
inline bool EngineForkChoiceUpdatedRequest::has_payload_attributes() const {
  return _internal_has_payload_attributes();
}
inline void EngineForkChoiceUpdatedRequest::clear_payload_attributes() {
  if (GetArena() == nullptr && payload_attributes_ != nullptr) {
    delete payload_attributes_;
  }
  payload_attributes_ = nullptr;
}
inline const ::remote::EnginePayloadAttributes& EngineForkChoiceUpdatedRequest::_internal_payload_attributes() const {
  const ::remote::EnginePayloadAttributes* p = payload_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::remote::EnginePayloadAttributes&>(
      ::remote::_EnginePayloadAttributes_default_instance_);
}
inline const ::remote::EnginePayloadAttributes& EngineForkChoiceUpdatedRequest::payload_attributes() const {
  // @@protoc_insertion_point(field_get:remote.EngineForkChoiceUpdatedRequest.payload_attributes)
  return _internal_payload_attributes();
}
inline void EngineForkChoiceUpdatedRequest::unsafe_arena_set_allocated_payload_attributes(
    ::remote::EnginePayloadAttributes* payload_attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_attributes_);
  }
  payload_attributes_ = payload_attributes;
  if (payload_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineForkChoiceUpdatedRequest.payload_attributes)
}
inline ::remote::EnginePayloadAttributes* EngineForkChoiceUpdatedRequest::release_payload_attributes() {
  
  ::remote::EnginePayloadAttributes* temp = payload_attributes_;
  payload_attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::remote::EnginePayloadAttributes* EngineForkChoiceUpdatedRequest::unsafe_arena_release_payload_attributes() {
  // @@protoc_insertion_point(field_release:remote.EngineForkChoiceUpdatedRequest.payload_attributes)
  
  ::remote::EnginePayloadAttributes* temp = payload_attributes_;
  payload_attributes_ = nullptr;
  return temp;
}
inline ::remote::EnginePayloadAttributes* EngineForkChoiceUpdatedRequest::_internal_mutable_payload_attributes() {
  
  if (payload_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::remote::EnginePayloadAttributes>(GetArena());
    payload_attributes_ = p;
  }
  return payload_attributes_;
}
inline ::remote::EnginePayloadAttributes* EngineForkChoiceUpdatedRequest::mutable_payload_attributes() {
  // @@protoc_insertion_point(field_mutable:remote.EngineForkChoiceUpdatedRequest.payload_attributes)
  return _internal_mutable_payload_attributes();
}
inline void EngineForkChoiceUpdatedRequest::set_allocated_payload_attributes(::remote::EnginePayloadAttributes* payload_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete payload_attributes_;
  }
  if (payload_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payload_attributes);
    if (message_arena != submessage_arena) {
      payload_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload_attributes, submessage_arena);
    }
    
  } else {
    
  }
  payload_attributes_ = payload_attributes;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineForkChoiceUpdatedRequest.payload_attributes)
}

// -------------------------------------------------------------------

// EngineForkChoiceUpdatedResponse

// .remote.EnginePayloadStatus payload_status = 1;
inline bool EngineForkChoiceUpdatedResponse::_internal_has_payload_status() const {
  return this != internal_default_instance() && payload_status_ != nullptr;
}
inline bool EngineForkChoiceUpdatedResponse::has_payload_status() const {
  return _internal_has_payload_status();
}
inline void EngineForkChoiceUpdatedResponse::clear_payload_status() {
  if (GetArena() == nullptr && payload_status_ != nullptr) {
    delete payload_status_;
  }
  payload_status_ = nullptr;
}
inline const ::remote::EnginePayloadStatus& EngineForkChoiceUpdatedResponse::_internal_payload_status() const {
  const ::remote::EnginePayloadStatus* p = payload_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::remote::EnginePayloadStatus&>(
      ::remote::_EnginePayloadStatus_default_instance_);
}
inline const ::remote::EnginePayloadStatus& EngineForkChoiceUpdatedResponse::payload_status() const {
  // @@protoc_insertion_point(field_get:remote.EngineForkChoiceUpdatedResponse.payload_status)
  return _internal_payload_status();
}
inline void EngineForkChoiceUpdatedResponse::unsafe_arena_set_allocated_payload_status(
    ::remote::EnginePayloadStatus* payload_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_status_);
  }
  payload_status_ = payload_status;
  if (payload_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineForkChoiceUpdatedResponse.payload_status)
}
inline ::remote::EnginePayloadStatus* EngineForkChoiceUpdatedResponse::release_payload_status() {
  
  ::remote::EnginePayloadStatus* temp = payload_status_;
  payload_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::remote::EnginePayloadStatus* EngineForkChoiceUpdatedResponse::unsafe_arena_release_payload_status() {
  // @@protoc_insertion_point(field_release:remote.EngineForkChoiceUpdatedResponse.payload_status)
  
  ::remote::EnginePayloadStatus* temp = payload_status_;
  payload_status_ = nullptr;
  return temp;
}
inline ::remote::EnginePayloadStatus* EngineForkChoiceUpdatedResponse::_internal_mutable_payload_status() {
  
  if (payload_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::remote::EnginePayloadStatus>(GetArena());
    payload_status_ = p;
  }
  return payload_status_;
}
inline ::remote::EnginePayloadStatus* EngineForkChoiceUpdatedResponse::mutable_payload_status() {
  // @@protoc_insertion_point(field_mutable:remote.EngineForkChoiceUpdatedResponse.payload_status)
  return _internal_mutable_payload_status();
}
inline void EngineForkChoiceUpdatedResponse::set_allocated_payload_status(::remote::EnginePayloadStatus* payload_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete payload_status_;
  }
  if (payload_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payload_status);
    if (message_arena != submessage_arena) {
      payload_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload_status, submessage_arena);
    }
    
  } else {
    
  }
  payload_status_ = payload_status;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineForkChoiceUpdatedResponse.payload_status)
}

// uint64 payload_id = 2;
inline void EngineForkChoiceUpdatedResponse::clear_payload_id() {
  payload_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineForkChoiceUpdatedResponse::_internal_payload_id() const {
  return payload_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineForkChoiceUpdatedResponse::payload_id() const {
  // @@protoc_insertion_point(field_get:remote.EngineForkChoiceUpdatedResponse.payload_id)
  return _internal_payload_id();
}
inline void EngineForkChoiceUpdatedResponse::_internal_set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  payload_id_ = value;
}
inline void EngineForkChoiceUpdatedResponse::set_payload_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_payload_id(value);
  // @@protoc_insertion_point(field_set:remote.EngineForkChoiceUpdatedResponse.payload_id)
}

// -------------------------------------------------------------------

// EngineGetPayloadResponse

// .types.ExecutionPayload execution_payload = 1;
inline bool EngineGetPayloadResponse::_internal_has_execution_payload() const {
  return this != internal_default_instance() && execution_payload_ != nullptr;
}
inline bool EngineGetPayloadResponse::has_execution_payload() const {
  return _internal_has_execution_payload();
}
inline const ::types::ExecutionPayload& EngineGetPayloadResponse::_internal_execution_payload() const {
  const ::types::ExecutionPayload* p = execution_payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::ExecutionPayload&>(
      ::types::_ExecutionPayload_default_instance_);
}
inline const ::types::ExecutionPayload& EngineGetPayloadResponse::execution_payload() const {
  // @@protoc_insertion_point(field_get:remote.EngineGetPayloadResponse.execution_payload)
  return _internal_execution_payload();
}
inline void EngineGetPayloadResponse::unsafe_arena_set_allocated_execution_payload(
    ::types::ExecutionPayload* execution_payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_payload_);
  }
  execution_payload_ = execution_payload;
  if (execution_payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineGetPayloadResponse.execution_payload)
}
inline ::types::ExecutionPayload* EngineGetPayloadResponse::release_execution_payload() {
  
  ::types::ExecutionPayload* temp = execution_payload_;
  execution_payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::ExecutionPayload* EngineGetPayloadResponse::unsafe_arena_release_execution_payload() {
  // @@protoc_insertion_point(field_release:remote.EngineGetPayloadResponse.execution_payload)
  
  ::types::ExecutionPayload* temp = execution_payload_;
  execution_payload_ = nullptr;
  return temp;
}
inline ::types::ExecutionPayload* EngineGetPayloadResponse::_internal_mutable_execution_payload() {
  
  if (execution_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ExecutionPayload>(GetArena());
    execution_payload_ = p;
  }
  return execution_payload_;
}
inline ::types::ExecutionPayload* EngineGetPayloadResponse::mutable_execution_payload() {
  // @@protoc_insertion_point(field_mutable:remote.EngineGetPayloadResponse.execution_payload)
  return _internal_mutable_execution_payload();
}
inline void EngineGetPayloadResponse::set_allocated_execution_payload(::types::ExecutionPayload* execution_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_payload_);
  }
  if (execution_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_payload)->GetArena();
    if (message_arena != submessage_arena) {
      execution_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_payload, submessage_arena);
    }
    
  } else {
    
  }
  execution_payload_ = execution_payload;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineGetPayloadResponse.execution_payload)
}

// .types.H256 block_value = 2;
inline bool EngineGetPayloadResponse::_internal_has_block_value() const {
  return this != internal_default_instance() && block_value_ != nullptr;
}
inline bool EngineGetPayloadResponse::has_block_value() const {
  return _internal_has_block_value();
}
inline const ::types::H256& EngineGetPayloadResponse::_internal_block_value() const {
  const ::types::H256* p = block_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& EngineGetPayloadResponse::block_value() const {
  // @@protoc_insertion_point(field_get:remote.EngineGetPayloadResponse.block_value)
  return _internal_block_value();
}
inline void EngineGetPayloadResponse::unsafe_arena_set_allocated_block_value(
    ::types::H256* block_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_value_);
  }
  block_value_ = block_value;
  if (block_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.EngineGetPayloadResponse.block_value)
}
inline ::types::H256* EngineGetPayloadResponse::release_block_value() {
  
  ::types::H256* temp = block_value_;
  block_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* EngineGetPayloadResponse::unsafe_arena_release_block_value() {
  // @@protoc_insertion_point(field_release:remote.EngineGetPayloadResponse.block_value)
  
  ::types::H256* temp = block_value_;
  block_value_ = nullptr;
  return temp;
}
inline ::types::H256* EngineGetPayloadResponse::_internal_mutable_block_value() {
  
  if (block_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    block_value_ = p;
  }
  return block_value_;
}
inline ::types::H256* EngineGetPayloadResponse::mutable_block_value() {
  // @@protoc_insertion_point(field_mutable:remote.EngineGetPayloadResponse.block_value)
  return _internal_mutable_block_value();
}
inline void EngineGetPayloadResponse::set_allocated_block_value(::types::H256* block_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_value_);
  }
  if (block_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_value)->GetArena();
    if (message_arena != submessage_arena) {
      block_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_value, submessage_arena);
    }
    
  } else {
    
  }
  block_value_ = block_value;
  // @@protoc_insertion_point(field_set_allocated:remote.EngineGetPayloadResponse.block_value)
}

// -------------------------------------------------------------------

// ProtocolVersionRequest

// -------------------------------------------------------------------

// ProtocolVersionReply

// uint64 id = 1;
inline void ProtocolVersionReply::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProtocolVersionReply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProtocolVersionReply::id() const {
  // @@protoc_insertion_point(field_get:remote.ProtocolVersionReply.id)
  return _internal_id();
}
inline void ProtocolVersionReply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void ProtocolVersionReply::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:remote.ProtocolVersionReply.id)
}

// -------------------------------------------------------------------

// ClientVersionRequest

// -------------------------------------------------------------------

// ClientVersionReply

// string node_name = 1;
inline void ClientVersionReply::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& ClientVersionReply::node_name() const {
  // @@protoc_insertion_point(field_get:remote.ClientVersionReply.node_name)
  return _internal_node_name();
}
inline void ClientVersionReply::set_node_name(const std::string& value) {
  _internal_set_node_name(value);
  // @@protoc_insertion_point(field_set:remote.ClientVersionReply.node_name)
}
inline std::string* ClientVersionReply::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:remote.ClientVersionReply.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& ClientVersionReply::_internal_node_name() const {
  return node_name_.Get();
}
inline void ClientVersionReply::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientVersionReply::set_node_name(std::string&& value) {
  
  node_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.ClientVersionReply.node_name)
}
inline void ClientVersionReply::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.ClientVersionReply.node_name)
}
inline void ClientVersionReply::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.ClientVersionReply.node_name)
}
inline std::string* ClientVersionReply::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientVersionReply::release_node_name() {
  // @@protoc_insertion_point(field_release:remote.ClientVersionReply.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientVersionReply::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.ClientVersionReply.node_name)
}

// -------------------------------------------------------------------

// SubscribeRequest

// .remote.Event type = 1;
inline void SubscribeRequest::clear_type() {
  type_ = 0;
}
inline ::remote::Event SubscribeRequest::_internal_type() const {
  return static_cast< ::remote::Event >(type_);
}
inline ::remote::Event SubscribeRequest::type() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeRequest.type)
  return _internal_type();
}
inline void SubscribeRequest::_internal_set_type(::remote::Event value) {
  
  type_ = value;
}
inline void SubscribeRequest::set_type(::remote::Event value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeRequest.type)
}

// -------------------------------------------------------------------

// SubscribeReply

// .remote.Event type = 1;
inline void SubscribeReply::clear_type() {
  type_ = 0;
}
inline ::remote::Event SubscribeReply::_internal_type() const {
  return static_cast< ::remote::Event >(type_);
}
inline ::remote::Event SubscribeReply::type() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeReply.type)
  return _internal_type();
}
inline void SubscribeReply::_internal_set_type(::remote::Event value) {
  
  type_ = value;
}
inline void SubscribeReply::set_type(::remote::Event value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeReply.type)
}

// bytes data = 2;
inline void SubscribeReply::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SubscribeReply::data() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeReply.data)
  return _internal_data();
}
inline void SubscribeReply::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeReply.data)
}
inline std::string* SubscribeReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable:remote.SubscribeReply.data)
  return _internal_mutable_data();
}
inline const std::string& SubscribeReply::_internal_data() const {
  return data_.Get();
}
inline void SubscribeReply::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubscribeReply::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.SubscribeReply.data)
}
inline void SubscribeReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.SubscribeReply.data)
}
inline void SubscribeReply::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.SubscribeReply.data)
}
inline std::string* SubscribeReply::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubscribeReply::release_data() {
  // @@protoc_insertion_point(field_release:remote.SubscribeReply.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeReply::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.SubscribeReply.data)
}

// -------------------------------------------------------------------

// LogsFilterRequest

// bool all_addresses = 1;
inline void LogsFilterRequest::clear_all_addresses() {
  all_addresses_ = false;
}
inline bool LogsFilterRequest::_internal_all_addresses() const {
  return all_addresses_;
}
inline bool LogsFilterRequest::all_addresses() const {
  // @@protoc_insertion_point(field_get:remote.LogsFilterRequest.all_addresses)
  return _internal_all_addresses();
}
inline void LogsFilterRequest::_internal_set_all_addresses(bool value) {
  
  all_addresses_ = value;
}
inline void LogsFilterRequest::set_all_addresses(bool value) {
  _internal_set_all_addresses(value);
  // @@protoc_insertion_point(field_set:remote.LogsFilterRequest.all_addresses)
}

// repeated .types.H160 addresses = 2;
inline int LogsFilterRequest::_internal_addresses_size() const {
  return addresses_.size();
}
inline int LogsFilterRequest::addresses_size() const {
  return _internal_addresses_size();
}
inline ::types::H160* LogsFilterRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:remote.LogsFilterRequest.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H160 >*
LogsFilterRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:remote.LogsFilterRequest.addresses)
  return &addresses_;
}
inline const ::types::H160& LogsFilterRequest::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::types::H160& LogsFilterRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:remote.LogsFilterRequest.addresses)
  return _internal_addresses(index);
}
inline ::types::H160* LogsFilterRequest::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::types::H160* LogsFilterRequest::add_addresses() {
  // @@protoc_insertion_point(field_add:remote.LogsFilterRequest.addresses)
  return _internal_add_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H160 >&
LogsFilterRequest::addresses() const {
  // @@protoc_insertion_point(field_list:remote.LogsFilterRequest.addresses)
  return addresses_;
}

// bool all_topics = 3;
inline void LogsFilterRequest::clear_all_topics() {
  all_topics_ = false;
}
inline bool LogsFilterRequest::_internal_all_topics() const {
  return all_topics_;
}
inline bool LogsFilterRequest::all_topics() const {
  // @@protoc_insertion_point(field_get:remote.LogsFilterRequest.all_topics)
  return _internal_all_topics();
}
inline void LogsFilterRequest::_internal_set_all_topics(bool value) {
  
  all_topics_ = value;
}
inline void LogsFilterRequest::set_all_topics(bool value) {
  _internal_set_all_topics(value);
  // @@protoc_insertion_point(field_set:remote.LogsFilterRequest.all_topics)
}

// repeated .types.H256 topics = 4;
inline int LogsFilterRequest::_internal_topics_size() const {
  return topics_.size();
}
inline int LogsFilterRequest::topics_size() const {
  return _internal_topics_size();
}
inline ::types::H256* LogsFilterRequest::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:remote.LogsFilterRequest.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
LogsFilterRequest::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:remote.LogsFilterRequest.topics)
  return &topics_;
}
inline const ::types::H256& LogsFilterRequest::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::types::H256& LogsFilterRequest::topics(int index) const {
  // @@protoc_insertion_point(field_get:remote.LogsFilterRequest.topics)
  return _internal_topics(index);
}
inline ::types::H256* LogsFilterRequest::_internal_add_topics() {
  return topics_.Add();
}
inline ::types::H256* LogsFilterRequest::add_topics() {
  // @@protoc_insertion_point(field_add:remote.LogsFilterRequest.topics)
  return _internal_add_topics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
LogsFilterRequest::topics() const {
  // @@protoc_insertion_point(field_list:remote.LogsFilterRequest.topics)
  return topics_;
}

// -------------------------------------------------------------------

// SubscribeLogsReply

// .types.H160 address = 1;
inline bool SubscribeLogsReply::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool SubscribeLogsReply::has_address() const {
  return _internal_has_address();
}
inline const ::types::H160& SubscribeLogsReply::_internal_address() const {
  const ::types::H160* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H160&>(
      ::types::_H160_default_instance_);
}
inline const ::types::H160& SubscribeLogsReply::address() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.address)
  return _internal_address();
}
inline void SubscribeLogsReply::unsafe_arena_set_allocated_address(
    ::types::H160* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.SubscribeLogsReply.address)
}
inline ::types::H160* SubscribeLogsReply::release_address() {
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H160* SubscribeLogsReply::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:remote.SubscribeLogsReply.address)
  
  ::types::H160* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::types::H160* SubscribeLogsReply::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H160>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::types::H160* SubscribeLogsReply::mutable_address() {
  // @@protoc_insertion_point(field_mutable:remote.SubscribeLogsReply.address)
  return _internal_mutable_address();
}
inline void SubscribeLogsReply::set_allocated_address(::types::H160* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:remote.SubscribeLogsReply.address)
}

// .types.H256 block_hash = 2;
inline bool SubscribeLogsReply::_internal_has_block_hash() const {
  return this != internal_default_instance() && block_hash_ != nullptr;
}
inline bool SubscribeLogsReply::has_block_hash() const {
  return _internal_has_block_hash();
}
inline const ::types::H256& SubscribeLogsReply::_internal_block_hash() const {
  const ::types::H256* p = block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& SubscribeLogsReply::block_hash() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.block_hash)
  return _internal_block_hash();
}
inline void SubscribeLogsReply::unsafe_arena_set_allocated_block_hash(
    ::types::H256* block_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash_);
  }
  block_hash_ = block_hash;
  if (block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.SubscribeLogsReply.block_hash)
}
inline ::types::H256* SubscribeLogsReply::release_block_hash() {
  
  ::types::H256* temp = block_hash_;
  block_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* SubscribeLogsReply::unsafe_arena_release_block_hash() {
  // @@protoc_insertion_point(field_release:remote.SubscribeLogsReply.block_hash)
  
  ::types::H256* temp = block_hash_;
  block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* SubscribeLogsReply::_internal_mutable_block_hash() {
  
  if (block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    block_hash_ = p;
  }
  return block_hash_;
}
inline ::types::H256* SubscribeLogsReply::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:remote.SubscribeLogsReply.block_hash)
  return _internal_mutable_block_hash();
}
inline void SubscribeLogsReply::set_allocated_block_hash(::types::H256* block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash_);
  }
  if (block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash)->GetArena();
    if (message_arena != submessage_arena) {
      block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_hash, submessage_arena);
    }
    
  } else {
    
  }
  block_hash_ = block_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.SubscribeLogsReply.block_hash)
}

// uint64 block_number = 3;
inline void SubscribeLogsReply::clear_block_number() {
  block_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeLogsReply::_internal_block_number() const {
  return block_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeLogsReply::block_number() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.block_number)
  return _internal_block_number();
}
inline void SubscribeLogsReply::_internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_number_ = value;
}
inline void SubscribeLogsReply::set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeLogsReply.block_number)
}

// bytes data = 4;
inline void SubscribeLogsReply::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SubscribeLogsReply::data() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.data)
  return _internal_data();
}
inline void SubscribeLogsReply::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeLogsReply.data)
}
inline std::string* SubscribeLogsReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable:remote.SubscribeLogsReply.data)
  return _internal_mutable_data();
}
inline const std::string& SubscribeLogsReply::_internal_data() const {
  return data_.Get();
}
inline void SubscribeLogsReply::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubscribeLogsReply::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.SubscribeLogsReply.data)
}
inline void SubscribeLogsReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.SubscribeLogsReply.data)
}
inline void SubscribeLogsReply::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.SubscribeLogsReply.data)
}
inline std::string* SubscribeLogsReply::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubscribeLogsReply::release_data() {
  // @@protoc_insertion_point(field_release:remote.SubscribeLogsReply.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeLogsReply::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.SubscribeLogsReply.data)
}

// uint64 log_index = 5;
inline void SubscribeLogsReply::clear_log_index() {
  log_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeLogsReply::_internal_log_index() const {
  return log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeLogsReply::log_index() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.log_index)
  return _internal_log_index();
}
inline void SubscribeLogsReply::_internal_set_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  log_index_ = value;
}
inline void SubscribeLogsReply::set_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_log_index(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeLogsReply.log_index)
}

// repeated .types.H256 topics = 6;
inline int SubscribeLogsReply::_internal_topics_size() const {
  return topics_.size();
}
inline int SubscribeLogsReply::topics_size() const {
  return _internal_topics_size();
}
inline ::types::H256* SubscribeLogsReply::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:remote.SubscribeLogsReply.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
SubscribeLogsReply::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:remote.SubscribeLogsReply.topics)
  return &topics_;
}
inline const ::types::H256& SubscribeLogsReply::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::types::H256& SubscribeLogsReply::topics(int index) const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.topics)
  return _internal_topics(index);
}
inline ::types::H256* SubscribeLogsReply::_internal_add_topics() {
  return topics_.Add();
}
inline ::types::H256* SubscribeLogsReply::add_topics() {
  // @@protoc_insertion_point(field_add:remote.SubscribeLogsReply.topics)
  return _internal_add_topics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
SubscribeLogsReply::topics() const {
  // @@protoc_insertion_point(field_list:remote.SubscribeLogsReply.topics)
  return topics_;
}

// .types.H256 transaction_hash = 7;
inline bool SubscribeLogsReply::_internal_has_transaction_hash() const {
  return this != internal_default_instance() && transaction_hash_ != nullptr;
}
inline bool SubscribeLogsReply::has_transaction_hash() const {
  return _internal_has_transaction_hash();
}
inline const ::types::H256& SubscribeLogsReply::_internal_transaction_hash() const {
  const ::types::H256* p = transaction_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& SubscribeLogsReply::transaction_hash() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.transaction_hash)
  return _internal_transaction_hash();
}
inline void SubscribeLogsReply::unsafe_arena_set_allocated_transaction_hash(
    ::types::H256* transaction_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_hash_);
  }
  transaction_hash_ = transaction_hash;
  if (transaction_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.SubscribeLogsReply.transaction_hash)
}
inline ::types::H256* SubscribeLogsReply::release_transaction_hash() {
  
  ::types::H256* temp = transaction_hash_;
  transaction_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* SubscribeLogsReply::unsafe_arena_release_transaction_hash() {
  // @@protoc_insertion_point(field_release:remote.SubscribeLogsReply.transaction_hash)
  
  ::types::H256* temp = transaction_hash_;
  transaction_hash_ = nullptr;
  return temp;
}
inline ::types::H256* SubscribeLogsReply::_internal_mutable_transaction_hash() {
  
  if (transaction_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    transaction_hash_ = p;
  }
  return transaction_hash_;
}
inline ::types::H256* SubscribeLogsReply::mutable_transaction_hash() {
  // @@protoc_insertion_point(field_mutable:remote.SubscribeLogsReply.transaction_hash)
  return _internal_mutable_transaction_hash();
}
inline void SubscribeLogsReply::set_allocated_transaction_hash(::types::H256* transaction_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_hash_);
  }
  if (transaction_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_hash)->GetArena();
    if (message_arena != submessage_arena) {
      transaction_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_hash, submessage_arena);
    }
    
  } else {
    
  }
  transaction_hash_ = transaction_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.SubscribeLogsReply.transaction_hash)
}

// uint64 transaction_index = 8;
inline void SubscribeLogsReply::clear_transaction_index() {
  transaction_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeLogsReply::_internal_transaction_index() const {
  return transaction_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SubscribeLogsReply::transaction_index() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.transaction_index)
  return _internal_transaction_index();
}
inline void SubscribeLogsReply::_internal_set_transaction_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transaction_index_ = value;
}
inline void SubscribeLogsReply::set_transaction_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transaction_index(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeLogsReply.transaction_index)
}

// bool removed = 9;
inline void SubscribeLogsReply::clear_removed() {
  removed_ = false;
}
inline bool SubscribeLogsReply::_internal_removed() const {
  return removed_;
}
inline bool SubscribeLogsReply::removed() const {
  // @@protoc_insertion_point(field_get:remote.SubscribeLogsReply.removed)
  return _internal_removed();
}
inline void SubscribeLogsReply::_internal_set_removed(bool value) {
  
  removed_ = value;
}
inline void SubscribeLogsReply::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:remote.SubscribeLogsReply.removed)
}

// -------------------------------------------------------------------

// BlockRequest

// uint64 block_height = 2;
inline void BlockRequest::clear_block_height() {
  block_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRequest::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRequest::block_height() const {
  // @@protoc_insertion_point(field_get:remote.BlockRequest.block_height)
  return _internal_block_height();
}
inline void BlockRequest::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_height_ = value;
}
inline void BlockRequest::set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:remote.BlockRequest.block_height)
}

// .types.H256 block_hash = 3;
inline bool BlockRequest::_internal_has_block_hash() const {
  return this != internal_default_instance() && block_hash_ != nullptr;
}
inline bool BlockRequest::has_block_hash() const {
  return _internal_has_block_hash();
}
inline const ::types::H256& BlockRequest::_internal_block_hash() const {
  const ::types::H256* p = block_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& BlockRequest::block_hash() const {
  // @@protoc_insertion_point(field_get:remote.BlockRequest.block_hash)
  return _internal_block_hash();
}
inline void BlockRequest::unsafe_arena_set_allocated_block_hash(
    ::types::H256* block_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash_);
  }
  block_hash_ = block_hash;
  if (block_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.BlockRequest.block_hash)
}
inline ::types::H256* BlockRequest::release_block_hash() {
  
  ::types::H256* temp = block_hash_;
  block_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* BlockRequest::unsafe_arena_release_block_hash() {
  // @@protoc_insertion_point(field_release:remote.BlockRequest.block_hash)
  
  ::types::H256* temp = block_hash_;
  block_hash_ = nullptr;
  return temp;
}
inline ::types::H256* BlockRequest::_internal_mutable_block_hash() {
  
  if (block_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    block_hash_ = p;
  }
  return block_hash_;
}
inline ::types::H256* BlockRequest::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:remote.BlockRequest.block_hash)
  return _internal_mutable_block_hash();
}
inline void BlockRequest::set_allocated_block_hash(::types::H256* block_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash_);
  }
  if (block_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_hash)->GetArena();
    if (message_arena != submessage_arena) {
      block_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_hash, submessage_arena);
    }
    
  } else {
    
  }
  block_hash_ = block_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.BlockRequest.block_hash)
}

// -------------------------------------------------------------------

// BlockReply

// bytes block_rlp = 1;
inline void BlockReply::clear_block_rlp() {
  block_rlp_.ClearToEmpty();
}
inline const std::string& BlockReply::block_rlp() const {
  // @@protoc_insertion_point(field_get:remote.BlockReply.block_rlp)
  return _internal_block_rlp();
}
inline void BlockReply::set_block_rlp(const std::string& value) {
  _internal_set_block_rlp(value);
  // @@protoc_insertion_point(field_set:remote.BlockReply.block_rlp)
}
inline std::string* BlockReply::mutable_block_rlp() {
  // @@protoc_insertion_point(field_mutable:remote.BlockReply.block_rlp)
  return _internal_mutable_block_rlp();
}
inline const std::string& BlockReply::_internal_block_rlp() const {
  return block_rlp_.Get();
}
inline void BlockReply::_internal_set_block_rlp(const std::string& value) {
  
  block_rlp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockReply::set_block_rlp(std::string&& value) {
  
  block_rlp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.BlockReply.block_rlp)
}
inline void BlockReply::set_block_rlp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_rlp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.BlockReply.block_rlp)
}
inline void BlockReply::set_block_rlp(const void* value,
    size_t size) {
  
  block_rlp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.BlockReply.block_rlp)
}
inline std::string* BlockReply::_internal_mutable_block_rlp() {
  
  return block_rlp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockReply::release_block_rlp() {
  // @@protoc_insertion_point(field_release:remote.BlockReply.block_rlp)
  return block_rlp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockReply::set_allocated_block_rlp(std::string* block_rlp) {
  if (block_rlp != nullptr) {
    
  } else {
    
  }
  block_rlp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_rlp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.BlockReply.block_rlp)
}

// bytes senders = 2;
inline void BlockReply::clear_senders() {
  senders_.ClearToEmpty();
}
inline const std::string& BlockReply::senders() const {
  // @@protoc_insertion_point(field_get:remote.BlockReply.senders)
  return _internal_senders();
}
inline void BlockReply::set_senders(const std::string& value) {
  _internal_set_senders(value);
  // @@protoc_insertion_point(field_set:remote.BlockReply.senders)
}
inline std::string* BlockReply::mutable_senders() {
  // @@protoc_insertion_point(field_mutable:remote.BlockReply.senders)
  return _internal_mutable_senders();
}
inline const std::string& BlockReply::_internal_senders() const {
  return senders_.Get();
}
inline void BlockReply::_internal_set_senders(const std::string& value) {
  
  senders_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockReply::set_senders(std::string&& value) {
  
  senders_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.BlockReply.senders)
}
inline void BlockReply::set_senders(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  senders_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.BlockReply.senders)
}
inline void BlockReply::set_senders(const void* value,
    size_t size) {
  
  senders_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.BlockReply.senders)
}
inline std::string* BlockReply::_internal_mutable_senders() {
  
  return senders_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockReply::release_senders() {
  // @@protoc_insertion_point(field_release:remote.BlockReply.senders)
  return senders_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockReply::set_allocated_senders(std::string* senders) {
  if (senders != nullptr) {
    
  } else {
    
  }
  senders_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), senders,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.BlockReply.senders)
}

// -------------------------------------------------------------------

// TxnLookupRequest

// .types.H256 txn_hash = 1;
inline bool TxnLookupRequest::_internal_has_txn_hash() const {
  return this != internal_default_instance() && txn_hash_ != nullptr;
}
inline bool TxnLookupRequest::has_txn_hash() const {
  return _internal_has_txn_hash();
}
inline const ::types::H256& TxnLookupRequest::_internal_txn_hash() const {
  const ::types::H256* p = txn_hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& TxnLookupRequest::txn_hash() const {
  // @@protoc_insertion_point(field_get:remote.TxnLookupRequest.txn_hash)
  return _internal_txn_hash();
}
inline void TxnLookupRequest::unsafe_arena_set_allocated_txn_hash(
    ::types::H256* txn_hash) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_hash_);
  }
  txn_hash_ = txn_hash;
  if (txn_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.TxnLookupRequest.txn_hash)
}
inline ::types::H256* TxnLookupRequest::release_txn_hash() {
  
  ::types::H256* temp = txn_hash_;
  txn_hash_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* TxnLookupRequest::unsafe_arena_release_txn_hash() {
  // @@protoc_insertion_point(field_release:remote.TxnLookupRequest.txn_hash)
  
  ::types::H256* temp = txn_hash_;
  txn_hash_ = nullptr;
  return temp;
}
inline ::types::H256* TxnLookupRequest::_internal_mutable_txn_hash() {
  
  if (txn_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    txn_hash_ = p;
  }
  return txn_hash_;
}
inline ::types::H256* TxnLookupRequest::mutable_txn_hash() {
  // @@protoc_insertion_point(field_mutable:remote.TxnLookupRequest.txn_hash)
  return _internal_mutable_txn_hash();
}
inline void TxnLookupRequest::set_allocated_txn_hash(::types::H256* txn_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_hash_);
  }
  if (txn_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(txn_hash)->GetArena();
    if (message_arena != submessage_arena) {
      txn_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn_hash, submessage_arena);
    }
    
  } else {
    
  }
  txn_hash_ = txn_hash;
  // @@protoc_insertion_point(field_set_allocated:remote.TxnLookupRequest.txn_hash)
}

// -------------------------------------------------------------------

// TxnLookupReply

// uint64 block_number = 1;
inline void TxnLookupReply::clear_block_number() {
  block_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxnLookupReply::_internal_block_number() const {
  return block_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxnLookupReply::block_number() const {
  // @@protoc_insertion_point(field_get:remote.TxnLookupReply.block_number)
  return _internal_block_number();
}
inline void TxnLookupReply::_internal_set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_number_ = value;
}
inline void TxnLookupReply::set_block_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_number(value);
  // @@protoc_insertion_point(field_set:remote.TxnLookupReply.block_number)
}

// -------------------------------------------------------------------

// NodesInfoRequest

// uint32 limit = 1;
inline void NodesInfoRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodesInfoRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodesInfoRequest::limit() const {
  // @@protoc_insertion_point(field_get:remote.NodesInfoRequest.limit)
  return _internal_limit();
}
inline void NodesInfoRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void NodesInfoRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:remote.NodesInfoRequest.limit)
}

// -------------------------------------------------------------------

// NodesInfoReply

// repeated .types.NodeInfoReply nodes_info = 1;
inline int NodesInfoReply::_internal_nodes_info_size() const {
  return nodes_info_.size();
}
inline int NodesInfoReply::nodes_info_size() const {
  return _internal_nodes_info_size();
}
inline ::types::NodeInfoReply* NodesInfoReply::mutable_nodes_info(int index) {
  // @@protoc_insertion_point(field_mutable:remote.NodesInfoReply.nodes_info)
  return nodes_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NodeInfoReply >*
NodesInfoReply::mutable_nodes_info() {
  // @@protoc_insertion_point(field_mutable_list:remote.NodesInfoReply.nodes_info)
  return &nodes_info_;
}
inline const ::types::NodeInfoReply& NodesInfoReply::_internal_nodes_info(int index) const {
  return nodes_info_.Get(index);
}
inline const ::types::NodeInfoReply& NodesInfoReply::nodes_info(int index) const {
  // @@protoc_insertion_point(field_get:remote.NodesInfoReply.nodes_info)
  return _internal_nodes_info(index);
}
inline ::types::NodeInfoReply* NodesInfoReply::_internal_add_nodes_info() {
  return nodes_info_.Add();
}
inline ::types::NodeInfoReply* NodesInfoReply::add_nodes_info() {
  // @@protoc_insertion_point(field_add:remote.NodesInfoReply.nodes_info)
  return _internal_add_nodes_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NodeInfoReply >&
NodesInfoReply::nodes_info() const {
  // @@protoc_insertion_point(field_list:remote.NodesInfoReply.nodes_info)
  return nodes_info_;
}

// -------------------------------------------------------------------

// PeersReply

// repeated .types.PeerInfo peers = 1;
inline int PeersReply::_internal_peers_size() const {
  return peers_.size();
}
inline int PeersReply::peers_size() const {
  return _internal_peers_size();
}
inline ::types::PeerInfo* PeersReply::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:remote.PeersReply.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PeerInfo >*
PeersReply::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:remote.PeersReply.peers)
  return &peers_;
}
inline const ::types::PeerInfo& PeersReply::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::types::PeerInfo& PeersReply::peers(int index) const {
  // @@protoc_insertion_point(field_get:remote.PeersReply.peers)
  return _internal_peers(index);
}
inline ::types::PeerInfo* PeersReply::_internal_add_peers() {
  return peers_.Add();
}
inline ::types::PeerInfo* PeersReply::add_peers() {
  // @@protoc_insertion_point(field_add:remote.PeersReply.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PeerInfo >&
PeersReply::peers() const {
  // @@protoc_insertion_point(field_list:remote.PeersReply.peers)
  return peers_;
}

// -------------------------------------------------------------------

// PendingBlockReply

// bytes block_rlp = 1;
inline void PendingBlockReply::clear_block_rlp() {
  block_rlp_.ClearToEmpty();
}
inline const std::string& PendingBlockReply::block_rlp() const {
  // @@protoc_insertion_point(field_get:remote.PendingBlockReply.block_rlp)
  return _internal_block_rlp();
}
inline void PendingBlockReply::set_block_rlp(const std::string& value) {
  _internal_set_block_rlp(value);
  // @@protoc_insertion_point(field_set:remote.PendingBlockReply.block_rlp)
}
inline std::string* PendingBlockReply::mutable_block_rlp() {
  // @@protoc_insertion_point(field_mutable:remote.PendingBlockReply.block_rlp)
  return _internal_mutable_block_rlp();
}
inline const std::string& PendingBlockReply::_internal_block_rlp() const {
  return block_rlp_.Get();
}
inline void PendingBlockReply::_internal_set_block_rlp(const std::string& value) {
  
  block_rlp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PendingBlockReply::set_block_rlp(std::string&& value) {
  
  block_rlp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.PendingBlockReply.block_rlp)
}
inline void PendingBlockReply::set_block_rlp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_rlp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:remote.PendingBlockReply.block_rlp)
}
inline void PendingBlockReply::set_block_rlp(const void* value,
    size_t size) {
  
  block_rlp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.PendingBlockReply.block_rlp)
}
inline std::string* PendingBlockReply::_internal_mutable_block_rlp() {
  
  return block_rlp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PendingBlockReply::release_block_rlp() {
  // @@protoc_insertion_point(field_release:remote.PendingBlockReply.block_rlp)
  return block_rlp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PendingBlockReply::set_allocated_block_rlp(std::string* block_rlp) {
  if (block_rlp != nullptr) {
    
  } else {
    
  }
  block_rlp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_rlp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.PendingBlockReply.block_rlp)
}

// -------------------------------------------------------------------

// EngineGetPayloadBodiesByHashV1Request

// repeated .types.H256 hashes = 1;
inline int EngineGetPayloadBodiesByHashV1Request::_internal_hashes_size() const {
  return hashes_.size();
}
inline int EngineGetPayloadBodiesByHashV1Request::hashes_size() const {
  return _internal_hashes_size();
}
inline ::types::H256* EngineGetPayloadBodiesByHashV1Request::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:remote.EngineGetPayloadBodiesByHashV1Request.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
EngineGetPayloadBodiesByHashV1Request::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:remote.EngineGetPayloadBodiesByHashV1Request.hashes)
  return &hashes_;
}
inline const ::types::H256& EngineGetPayloadBodiesByHashV1Request::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::types::H256& EngineGetPayloadBodiesByHashV1Request::hashes(int index) const {
  // @@protoc_insertion_point(field_get:remote.EngineGetPayloadBodiesByHashV1Request.hashes)
  return _internal_hashes(index);
}
inline ::types::H256* EngineGetPayloadBodiesByHashV1Request::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::types::H256* EngineGetPayloadBodiesByHashV1Request::add_hashes() {
  // @@protoc_insertion_point(field_add:remote.EngineGetPayloadBodiesByHashV1Request.hashes)
  return _internal_add_hashes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
EngineGetPayloadBodiesByHashV1Request::hashes() const {
  // @@protoc_insertion_point(field_list:remote.EngineGetPayloadBodiesByHashV1Request.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// EngineGetPayloadBodiesByRangeV1Request

// uint64 start = 1;
inline void EngineGetPayloadBodiesByRangeV1Request::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetPayloadBodiesByRangeV1Request::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetPayloadBodiesByRangeV1Request::start() const {
  // @@protoc_insertion_point(field_get:remote.EngineGetPayloadBodiesByRangeV1Request.start)
  return _internal_start();
}
inline void EngineGetPayloadBodiesByRangeV1Request::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_ = value;
}
inline void EngineGetPayloadBodiesByRangeV1Request::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:remote.EngineGetPayloadBodiesByRangeV1Request.start)
}

// uint64 count = 2;
inline void EngineGetPayloadBodiesByRangeV1Request::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetPayloadBodiesByRangeV1Request::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EngineGetPayloadBodiesByRangeV1Request::count() const {
  // @@protoc_insertion_point(field_get:remote.EngineGetPayloadBodiesByRangeV1Request.count)
  return _internal_count();
}
inline void EngineGetPayloadBodiesByRangeV1Request::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void EngineGetPayloadBodiesByRangeV1Request::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:remote.EngineGetPayloadBodiesByRangeV1Request.count)
}

// -------------------------------------------------------------------

// EngineGetPayloadBodiesV1Response

// repeated .types.ExecutionPayloadBodyV1 bodies = 1;
inline int EngineGetPayloadBodiesV1Response::_internal_bodies_size() const {
  return bodies_.size();
}
inline int EngineGetPayloadBodiesV1Response::bodies_size() const {
  return _internal_bodies_size();
}
inline ::types::ExecutionPayloadBodyV1* EngineGetPayloadBodiesV1Response::mutable_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:remote.EngineGetPayloadBodiesV1Response.bodies)
  return bodies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExecutionPayloadBodyV1 >*
EngineGetPayloadBodiesV1Response::mutable_bodies() {
  // @@protoc_insertion_point(field_mutable_list:remote.EngineGetPayloadBodiesV1Response.bodies)
  return &bodies_;
}
inline const ::types::ExecutionPayloadBodyV1& EngineGetPayloadBodiesV1Response::_internal_bodies(int index) const {
  return bodies_.Get(index);
}
inline const ::types::ExecutionPayloadBodyV1& EngineGetPayloadBodiesV1Response::bodies(int index) const {
  // @@protoc_insertion_point(field_get:remote.EngineGetPayloadBodiesV1Response.bodies)
  return _internal_bodies(index);
}
inline ::types::ExecutionPayloadBodyV1* EngineGetPayloadBodiesV1Response::_internal_add_bodies() {
  return bodies_.Add();
}
inline ::types::ExecutionPayloadBodyV1* EngineGetPayloadBodiesV1Response::add_bodies() {
  // @@protoc_insertion_point(field_add:remote.EngineGetPayloadBodiesV1Response.bodies)
  return _internal_add_bodies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExecutionPayloadBodyV1 >&
EngineGetPayloadBodiesV1Response::bodies() const {
  // @@protoc_insertion_point(field_list:remote.EngineGetPayloadBodiesV1Response.bodies)
  return bodies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::remote::Event> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::remote::Event>() {
  return ::remote::Event_descriptor();
}
template <> struct is_proto_enum< ::remote::EngineStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::remote::EngineStatus>() {
  return ::remote::EngineStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remote_2fethbackend_2eproto
